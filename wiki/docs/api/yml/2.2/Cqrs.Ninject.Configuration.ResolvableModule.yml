### YamlMime:ManagedReference
items:
- uid: Cqrs.Ninject.Configuration.ResolvableModule
  commentId: T:Cqrs.Ninject.Configuration.ResolvableModule
  id: ResolvableModule
  parent: Cqrs.Ninject.Configuration
  children:
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  langs:
  - csharp
  - vb
  name: ResolvableModule
  nameWithType: ResolvableModule
  fullName: Cqrs.Ninject.Configuration.ResolvableModule
  type: Class
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolvableModule
    path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
    startLine: 18
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nA <see cref=\"!:INinjectModule\"></see> that can resolve anything bound before being called.\n"
  example: []
  syntax:
    content: 'public abstract class ResolvableModule : NinjectModule'
    content.vb: >-
      Public MustInherit Class ResolvableModule
          Inherits NinjectModule
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Ninject.Akka.Configuration.AkkaModule`1
  - Cqrs.Ninject.Azure.Wcf.Configuration.WebHostModule
  - Cqrs.Ninject.Configuration.CqrsModule`2
  - Cqrs.Ninject.Configuration.InProcessCommandBusModule`1
  - Cqrs.Ninject.Configuration.InProcessEventBusModule`1
  - Cqrs.Ninject.Configuration.InProcessEventStoreModule`1
  - Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  - Cqrs.Ninject.Configuration.SimplifiedSqlModule`1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  id: Resolve``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  langs:
  - csharp
  - vb
  name: Resolve<T>()
  nameWithType: ResolvableModule.Resolve<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve<T>()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
    startLine: 25
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nResolves instances for the specified <code data-dev-comment-type=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: protected virtual T Resolve<T>()
    typeParameters:
    - id: T
      description: The <see cref="!:Type"></see> to resolve.
    return:
      type: '{T}'
      description: Null if no resolution is made.
    content.vb: Protected Overridable Function Resolve(Of T) As T
  overload: Cqrs.Ninject.Configuration.ResolvableModule.Resolve*
  nameWithType.vb: ResolvableModule.Resolve(Of T)()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Of T)()
  name.vb: Resolve(Of T)()
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  id: Resolve(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: ResolvableModule.Resolve(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
    startLine: 35
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nResolves instances for the specified <code data-dev-comment-type=\"paramref\">type</code>.\n"
  example: []
  syntax:
    content: protected virtual object Resolve(Type type)
    parameters:
    - id: type
      type: Type
      description: The <see cref="!:Type"></see> to resolve.
    return:
      type: System.Object
      description: Null if no resolution is made.
    content.vb: Protected Overridable Function Resolve(type As Type) As Object
  overload: Cqrs.Ninject.Configuration.ResolvableModule.Resolve*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  id: IsRegistered``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  langs:
  - csharp
  - vb
  name: IsRegistered<T>()
  nameWithType: ResolvableModule.IsRegistered<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered<T>()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsRegistered
    path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
    startLine: 44
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nIndicates if the provided <code data-dev-comment-type=\"typeparamref\">T</code> is already registered or not.\n"
  example: []
  syntax:
    content: public bool IsRegistered<T>()
    typeParameters:
    - id: T
      description: The <see cref="!:Type"></see> to check.
    return:
      type: System.Boolean
    content.vb: Public Function IsRegistered(Of T) As Boolean
  overload: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered*
  nameWithType.vb: ResolvableModule.IsRegistered(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Of T)()
  name.vb: IsRegistered(Of T)()
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  id: IsRegistered(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  langs:
  - csharp
  - vb
  name: IsRegistered(Type)
  nameWithType: ResolvableModule.IsRegistered(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsRegistered
    path: Framework/Ninject/Cqrs.Ninject/Configuration/ResolvableModule.cs
    startLine: 53
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nIndicates if the provided <code data-dev-comment-type=\"paramref\">type</code> is already registered or not.\n"
  example: []
  syntax:
    content: public bool IsRegistered(Type type)
    parameters:
    - id: type
      type: Type
      description: The <see cref="!:Type"></see> to check.
    return:
      type: System.Boolean
    content.vb: Public Function IsRegistered(type As Type) As Boolean
  overload: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Ninject.Configuration
  commentId: N:Cqrs.Ninject.Configuration
  isExternal: false
  name: Cqrs.Ninject.Configuration
  nameWithType: Cqrs.Ninject.Configuration
  fullName: Cqrs.Ninject.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve*
  commentId: Overload:Cqrs.Ninject.Configuration.ResolvableModule.Resolve
  isExternal: false
  name: Resolve
  nameWithType: ResolvableModule.Resolve
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered*
  commentId: Overload:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
  isExternal: false
  name: IsRegistered
  nameWithType: ResolvableModule.IsRegistered
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
