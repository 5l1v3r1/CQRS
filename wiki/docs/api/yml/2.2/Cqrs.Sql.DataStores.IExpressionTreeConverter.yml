### YamlMime:ManagedReference
items:
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter
  commentId: T:Cqrs.Sql.DataStores.IExpressionTreeConverter
  id: IExpressionTreeConverter
  parent: Cqrs.Sql.DataStores
  children:
  - Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings
  - Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  - Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: IExpressionTreeConverter
  nameWithType: IExpressionTreeConverter
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter
  type: Interface
  source:
    remote:
      path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IExpressionTreeConverter
    path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
    startLine: 18
  assemblies:
  - Cqrs.Sql
  namespace: Cqrs.Sql.DataStores
  summary: "\nConverts <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> trees.\n"
  example: []
  syntax:
    content: public interface IExpressionTreeConverter
    content.vb: Public Interface IExpressionTreeConverter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings
  commentId: M:Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings
  id: GetMappings
  parent: Cqrs.Sql.DataStores.IExpressionTreeConverter
  langs:
  - csharp
  - vb
  name: GetMappings()
  nameWithType: IExpressionTreeConverter.GetMappings()
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetMappings
    path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
    startLine: 23
  assemblies:
  - Cqrs.Sql
  namespace: Cqrs.Sql.DataStores
  summary: "\nA collection of <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> grouped by <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Dictionary<MemberInfo, LambdaExpression> GetMappings()
    return:
      type: System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression}
    content.vb: Function GetMappings As Dictionary(Of MemberInfo, LambdaExpression)
  overload: Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings*
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Linq.Expressions.Expression)
  commentId: M:Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Linq.Expressions.Expression)
  id: Visit(System.Linq.Expressions.Expression)
  parent: Cqrs.Sql.DataStores.IExpressionTreeConverter
  langs:
  - csharp
  - vb
  name: Visit(Expression)
  nameWithType: IExpressionTreeConverter.Visit(Expression)
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Visit
    path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
    startLine: 30
  assemblies:
  - Cqrs.Sql
  namespace: Cqrs.Sql.DataStores
  summary: "\nDispatches the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to one of the more specialized visit methods in this class.\n"
  example: []
  syntax:
    content: Expression Visit(Expression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to visit.
    return:
      type: System.Linq.Expressions.Expression
      description: The modified <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref>, if it or any subexpression was modified; otherwise, returns the original <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function Visit(node As Expression) As Expression
  overload: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit*
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  commentId: M:Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  id: Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  parent: Cqrs.Sql.DataStores.IExpressionTreeConverter
  langs:
  - csharp
  - vb
  name: Visit(ReadOnlyCollection<Expression>)
  nameWithType: IExpressionTreeConverter.Visit(ReadOnlyCollection<Expression>)
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Visit
    path: Framework/Cqrs.Sql/DataStores/IExpressionTreeConverter.cs
    startLine: 37
  assemblies:
  - Cqrs.Sql
  namespace: Cqrs.Sql.DataStores
  summary: "\nDispatches the list of expressions to one of the more specialized visit methods in this class.\n"
  example: []
  syntax:
    content: ReadOnlyCollection<Expression> Visit(ReadOnlyCollection<Expression> nodes)
    parameters:
    - id: nodes
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
      description: The expressions to visit.
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
      description: The modified <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> list, if any one of the elements were modified; otherwise, returns the <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> expression list.
    content.vb: Function Visit(nodes As ReadOnlyCollection(Of Expression)) As ReadOnlyCollection(Of Expression)
  overload: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit*
  nameWithType.vb: IExpressionTreeConverter.Visit(ReadOnlyCollection(Of Expression))
  fullName.vb: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))
  name.vb: Visit(ReadOnlyCollection(Of Expression))
references:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.Sql.DataStores
  commentId: N:Cqrs.Sql.DataStores
  isExternal: false
  name: Cqrs.Sql.DataStores
  nameWithType: Cqrs.Sql.DataStores
  fullName: Cqrs.Sql.DataStores
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings*
  commentId: Overload:Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings
  isExternal: false
  name: GetMappings
  nameWithType: IExpressionTreeConverter.GetMappings
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter.GetMappings
- uid: System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<MemberInfo, LambdaExpression>
  nameWithType: Dictionary<MemberInfo, LambdaExpression>
  fullName: System.Collections.Generic.Dictionary<System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression>
  nameWithType.vb: Dictionary(Of MemberInfo, LambdaExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression)
  name.vb: Dictionary(Of MemberInfo, LambdaExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.LambdaExpression
    name: LambdaExpression
    nameWithType: LambdaExpression
    fullName: System.Linq.Expressions.LambdaExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.LambdaExpression
    name: LambdaExpression
    nameWithType: LambdaExpression
    fullName: System.Linq.Expressions.LambdaExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit*
  commentId: Overload:Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit
  isExternal: false
  name: Visit
  nameWithType: IExpressionTreeConverter.Visit
  fullName: Cqrs.Sql.DataStores.IExpressionTreeConverter.Visit
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Expression>
  nameWithType: ReadOnlyCollection<Expression>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>
  nameWithType.vb: ReadOnlyCollection(Of Expression)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)
  name.vb: ReadOnlyCollection(Of Expression)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
