### YamlMime:ManagedReference
items:
- uid: Cqrs.Services.EventService`1
  commentId: T:Cqrs.Services.EventService`1
  id: EventService`1
  parent: Cqrs.Services
  children:
  - Cqrs.Services.EventService`1.#ctor(Cqrs.Events.IEventStore{`0},cdmdotnet.Logging.ILogger,cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  - Cqrs.Services.EventService`1.AuthenticationTokenHelper
  - Cqrs.Services.EventService`1.CompleteResponse``1(``0)
  - Cqrs.Services.EventService`1.CorrelationIdHelper
  - Cqrs.Services.EventService`1.EventStore
  - Cqrs.Services.EventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  - Cqrs.Services.EventService`1.Logger
  - Cqrs.Services.EventService`1.OnGetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  - Cqrs.Services.EventService`1.OnGotEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid},System.Collections.Generic.IEnumerable{Cqrs.Events.EventData})
  langs:
  - csharp
  - vb
  name: EventService<TAuthenticationToken>
  nameWithType: EventService<TAuthenticationToken>
  fullName: Cqrs.Services.EventService<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventService
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nA WCF <xref href=\"System.ServiceModel.ServiceContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> that provides read-only access to <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>\nraised with the same <xref href=\"Cqrs.Messages.IMessage.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public abstract class EventService<TAuthenticationToken> : IEventService<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      Public MustInherit Class EventService(Of TAuthenticationToken)
          Implements IEventService(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Services.IEventService{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventService(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken)
  name.vb: EventService(Of TAuthenticationToken)
- uid: Cqrs.Services.EventService`1.#ctor(Cqrs.Events.IEventStore{`0},cdmdotnet.Logging.ILogger,cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  commentId: M:Cqrs.Services.EventService`1.#ctor(Cqrs.Events.IEventStore{`0},cdmdotnet.Logging.ILogger,cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  id: '#ctor(Cqrs.Events.IEventStore{`0},cdmdotnet.Logging.ILogger,cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})'
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: EventService(IEventStore<TAuthenticationToken>, ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>)
  nameWithType: EventService<TAuthenticationToken>.EventService(IEventStore<TAuthenticationToken>, ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>)
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.EventService(Cqrs.Events.IEventStore<TAuthenticationToken>, cdmdotnet.Logging.ILogger, cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Services.EventService%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected EventService(IEventStore<TAuthenticationToken> eventStore, ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper)
    parameters:
    - id: eventStore
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: correlationIdHelper
      type: cdmdotnet.Logging.ICorrelationIdHelper
    - id: authenticationTokenHelper
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    content.vb: Protected Sub New(eventStore As IEventStore(Of TAuthenticationToken), logger As ILogger, correlationIdHelper As ICorrelationIdHelper, authenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken))
  overload: Cqrs.Services.EventService`1.#ctor*
  nameWithType.vb: EventService(Of TAuthenticationToken).EventService(IEventStore(Of TAuthenticationToken), ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).EventService(Cqrs.Events.IEventStore(Of TAuthenticationToken), cdmdotnet.Logging.ILogger, cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken))
  name.vb: EventService(IEventStore(Of TAuthenticationToken), ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper(Of TAuthenticationToken))
- uid: Cqrs.Services.EventService`1.EventStore
  commentId: P:Cqrs.Services.EventService`1.EventStore
  id: EventStore
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: EventStore
  nameWithType: EventService<TAuthenticationToken>.EventStore
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.EventStore
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStore
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 39
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or sets the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual IEventStore<TAuthenticationToken> EventStore { get; }
    parameters: []
    return:
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    content.vb: Protected Overridable ReadOnly Property EventStore As IEventStore(Of TAuthenticationToken)
  overload: Cqrs.Services.EventService`1.EventStore*
  nameWithType.vb: EventService(Of TAuthenticationToken).EventStore
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).EventStore
- uid: Cqrs.Services.EventService`1.AuthenticationTokenHelper
  commentId: P:Cqrs.Services.EventService`1.AuthenticationTokenHelper
  id: AuthenticationTokenHelper
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: AuthenticationTokenHelper
  nameWithType: EventService<TAuthenticationToken>.AuthenticationTokenHelper
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.AuthenticationTokenHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AuthenticationTokenHelper
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 44
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or sets the <xref href=\"Cqrs.Authentication.IAuthenticationTokenHelper%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; }
    parameters: []
    return:
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property AuthenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken)
  overload: Cqrs.Services.EventService`1.AuthenticationTokenHelper*
  nameWithType.vb: EventService(Of TAuthenticationToken).AuthenticationTokenHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).AuthenticationTokenHelper
- uid: Cqrs.Services.EventService`1.CorrelationIdHelper
  commentId: P:Cqrs.Services.EventService`1.CorrelationIdHelper
  id: CorrelationIdHelper
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: CorrelationIdHelper
  nameWithType: EventService<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.CorrelationIdHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CorrelationIdHelper
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 49
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or sets the <xref href=\"cdmdotnet.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ICorrelationIdHelper CorrelationIdHelper { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Protected ReadOnly Property CorrelationIdHelper As ICorrelationIdHelper
  overload: Cqrs.Services.EventService`1.CorrelationIdHelper*
  nameWithType.vb: EventService(Of TAuthenticationToken).CorrelationIdHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Services.EventService`1.Logger
  commentId: P:Cqrs.Services.EventService`1.Logger
  id: Logger
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: EventService<TAuthenticationToken>.Logger
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 54
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or sets the <xref href=\"cdmdotnet.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Services.EventService`1.Logger*
  nameWithType.vb: EventService(Of TAuthenticationToken).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).Logger
- uid: Cqrs.Services.EventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  commentId: M:Cqrs.Services.EventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  id: GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  nameWithType: EventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.GetEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventData
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 61
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGet all <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>\nraised with the same <xref href=\"Cqrs.Messages.IMessage.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest)
    parameters:
    - id: serviceRequest
      type: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
      description: The <xref href="Cqrs.Messages.IMessage.CorrelationId" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to find.
    return:
      type: Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
    content.vb: Public Overridable Function GetEventData(serviceRequest As IServiceRequestWithData(Of TAuthenticationToken, Guid)) As IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  overload: Cqrs.Services.EventService`1.GetEventData*
  implements:
  - Cqrs.Services.IEventService{{TAuthenticationToken}}.GetEventData(Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid})
  nameWithType.vb: EventService(Of TAuthenticationToken).GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).GetEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid))
  name.vb: GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
- uid: Cqrs.Services.EventService`1.OnGetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  commentId: M:Cqrs.Services.EventService`1.OnGetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  id: OnGetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: OnGetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  nameWithType: EventService<TAuthenticationToken>.OnGetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.OnGetEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: OnGetEventData
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 85
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nExecuted before calling the <xref href=\"Cqrs.Events.IEventStore%601.Get(System.Type%2cSystem.Guid%2cSystem.Boolean%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method on <xref href=\"Cqrs.Services.EventService%601.EventStore\" data-throw-if-not-resolved=\"false\"></xref>\nin <xref href=\"Cqrs.Services.EventService%601.GetEventData(Cqrs.Services.IServiceRequestWithData%7b%600%2cSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void OnGetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest)
    parameters:
    - id: serviceRequest
      type: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
      description: The original <xref href="Cqrs.Services.IServiceRequestWithData%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Sub OnGetEventData(serviceRequest As IServiceRequestWithData(Of TAuthenticationToken, Guid))
  overload: Cqrs.Services.EventService`1.OnGetEventData*
  nameWithType.vb: EventService(Of TAuthenticationToken).OnGetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).OnGetEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid))
  name.vb: OnGetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
- uid: Cqrs.Services.EventService`1.OnGotEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid},System.Collections.Generic.IEnumerable{Cqrs.Events.EventData})
  commentId: M:Cqrs.Services.EventService`1.OnGotEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid},System.Collections.Generic.IEnumerable{Cqrs.Events.EventData})
  id: OnGotEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid},System.Collections.Generic.IEnumerable{Cqrs.Events.EventData})
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: OnGotEventData(IServiceRequestWithData<TAuthenticationToken, Guid>, IEnumerable<EventData>)
  nameWithType: EventService<TAuthenticationToken>.OnGotEventData(IServiceRequestWithData<TAuthenticationToken, Guid>, IEnumerable<EventData>)
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.OnGotEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>, System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: OnGotEventData
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 93
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nExecuted after calling the <xref href=\"Cqrs.Events.IEventStore%601.Get(System.Type%2cSystem.Guid%2cSystem.Boolean%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method on <xref href=\"Cqrs.Services.EventService%601.EventStore\" data-throw-if-not-resolved=\"false\"></xref>\nin <xref href=\"Cqrs.Services.EventService%601.GetEventData(Cqrs.Services.IServiceRequestWithData%7b%600%2cSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<EventData> OnGotEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest, IEnumerable<EventData> results)
    parameters:
    - id: serviceRequest
      type: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
      description: The original <xref href="Cqrs.Services.IServiceRequestWithData%602" data-throw-if-not-resolved="false"></xref>.
    - id: results
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
      description: The collection of <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> from the <xref href="Cqrs.Services.EventService%601.EventStore" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
    content.vb: Protected Overridable Function OnGotEventData(serviceRequest As IServiceRequestWithData(Of TAuthenticationToken, Guid), results As IEnumerable(Of EventData)) As IEnumerable(Of EventData)
  overload: Cqrs.Services.EventService`1.OnGotEventData*
  nameWithType.vb: EventService(Of TAuthenticationToken).OnGotEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid), IEnumerable(Of EventData))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).OnGotEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid), System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData))
  name.vb: OnGotEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid), IEnumerable(Of EventData))
- uid: Cqrs.Services.EventService`1.CompleteResponse``1(``0)
  commentId: M:Cqrs.Services.EventService`1.CompleteResponse``1(``0)
  id: CompleteResponse``1(``0)
  parent: Cqrs.Services.EventService`1
  langs:
  - csharp
  - vb
  name: CompleteResponse<TServiceResponse>(TServiceResponse)
  nameWithType: EventService<TAuthenticationToken>.CompleteResponse<TServiceResponse>(TServiceResponse)
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.CompleteResponse<TServiceResponse>(TServiceResponse)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/EventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CompleteResponse
    path: Framework/Cqrs/Services/EventService.cs
    startLine: 101
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nSets the <xref href=\"Cqrs.Services.IServiceResponse.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref> on the provided <code data-dev-comment-type=\"paramref\">serviceResponse</code>.\n"
  example: []
  syntax:
    content: 'protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)where TServiceResponse : IServiceResponse'
    parameters:
    - id: serviceResponse
      type: '{TServiceResponse}'
    typeParameters:
    - id: TServiceResponse
    return:
      type: '{TServiceResponse}'
    content.vb: Protected Overridable Function CompleteResponse(Of TServiceResponse As IServiceResponse)(serviceResponse As TServiceResponse) As TServiceResponse
  overload: Cqrs.Services.EventService`1.CompleteResponse*
  nameWithType.vb: EventService(Of TAuthenticationToken).CompleteResponse(Of TServiceResponse)(TServiceResponse)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).CompleteResponse(Of TServiceResponse)(TServiceResponse)
  name.vb: CompleteResponse(Of TServiceResponse)(TServiceResponse)
references:
- uid: System.ServiceModel.ServiceContractAttribute
  commentId: T:System.ServiceModel.ServiceContractAttribute
  parent: System.ServiceModel
  isExternal: true
  name: ServiceContractAttribute
  nameWithType: ServiceContractAttribute
  fullName: System.ServiceModel.ServiceContractAttribute
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessage.CorrelationId
  commentId: P:Cqrs.Messages.IMessage.CorrelationId
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: CorrelationId
  nameWithType: IMessage.CorrelationId
  fullName: Cqrs.Messages.IMessage.CorrelationId
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Services.IEventService{{TAuthenticationToken}}
  commentId: T:Cqrs.Services.IEventService{`0}
  parent: Cqrs.Services
  definition: Cqrs.Services.IEventService`1
  name: IEventService<TAuthenticationToken>
  nameWithType: IEventService<TAuthenticationToken>
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>
  nameWithType.vb: IEventService(Of TAuthenticationToken)
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken)
  name.vb: IEventService(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.IEventService`1
    name: IEventService
    nameWithType: IEventService
    fullName: Cqrs.Services.IEventService
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IEventService`1
    name: IEventService
    nameWithType: IEventService
    fullName: Cqrs.Services.IEventService
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ServiceModel
  commentId: N:System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  nameWithType: System.ServiceModel
  fullName: System.ServiceModel
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Services.IEventService`1
  commentId: T:Cqrs.Services.IEventService`1
  isExternal: false
  name: IEventService<TAuthenticationToken>
  nameWithType: IEventService<TAuthenticationToken>
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>
  nameWithType.vb: IEventService(Of TAuthenticationToken)
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken)
  name.vb: IEventService(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.IEventService`1
    name: IEventService
    nameWithType: IEventService
    fullName: Cqrs.Services.IEventService
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IEventService`1
    name: IEventService
    nameWithType: IEventService
    fullName: Cqrs.Services.IEventService
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Services.EventService`1
  commentId: T:Cqrs.Services.EventService`1
  isExternal: false
  name: EventService<TAuthenticationToken>
  nameWithType: EventService<TAuthenticationToken>
  fullName: Cqrs.Services.EventService<TAuthenticationToken>
  nameWithType.vb: EventService(Of TAuthenticationToken)
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken)
  name.vb: EventService(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.EventService`1
    name: EventService
    nameWithType: EventService
    fullName: Cqrs.Services.EventService
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.EventService`1
    name: EventService
    nameWithType: EventService
    fullName: Cqrs.Services.EventService
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.EventService`1.#ctor*
  commentId: Overload:Cqrs.Services.EventService`1.#ctor
  isExternal: false
  name: EventService
  nameWithType: EventService<TAuthenticationToken>.EventService
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.EventService
  nameWithType.vb: EventService(Of TAuthenticationToken).EventService
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).EventService
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper{`0}
  parent: Cqrs.Authentication
  definition: Cqrs.Authentication.IAuthenticationTokenHelper`1
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper`1
  isExternal: false
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Authentication
  commentId: N:Cqrs.Authentication
  isExternal: false
  name: Cqrs.Authentication
  nameWithType: Cqrs.Authentication
  fullName: Cqrs.Authentication
- uid: Cqrs.Services.EventService`1.EventStore*
  commentId: Overload:Cqrs.Services.EventService`1.EventStore
  isExternal: false
  name: EventStore
  nameWithType: EventService<TAuthenticationToken>.EventStore
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.EventStore
  nameWithType.vb: EventService(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).EventStore
- uid: Cqrs.Services.EventService`1.AuthenticationTokenHelper*
  commentId: Overload:Cqrs.Services.EventService`1.AuthenticationTokenHelper
  isExternal: false
  name: AuthenticationTokenHelper
  nameWithType: EventService<TAuthenticationToken>.AuthenticationTokenHelper
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.AuthenticationTokenHelper
  nameWithType.vb: EventService(Of TAuthenticationToken).AuthenticationTokenHelper
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).AuthenticationTokenHelper
- uid: Cqrs.Services.EventService`1.CorrelationIdHelper*
  commentId: Overload:Cqrs.Services.EventService`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: EventService<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: EventService(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Services.EventService`1.Logger*
  commentId: Overload:Cqrs.Services.EventService`1.Logger
  isExternal: false
  name: Logger
  nameWithType: EventService<TAuthenticationToken>.Logger
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.Logger
  nameWithType.vb: EventService(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).Logger
- uid: Cqrs.Services.EventService`1.GetEventData*
  commentId: Overload:Cqrs.Services.EventService`1.GetEventData
  isExternal: false
  name: GetEventData
  nameWithType: EventService<TAuthenticationToken>.GetEventData
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.GetEventData
  nameWithType.vb: EventService(Of TAuthenticationToken).GetEventData
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).GetEventData
- uid: Cqrs.Services.IEventService{{TAuthenticationToken}}.GetEventData(Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid})
  commentId: M:Cqrs.Services.IEventService{`0}.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  parent: Cqrs.Services.IEventService{{TAuthenticationToken}}
  definition: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  name: GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  nameWithType: IEventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>)
  nameWithType.vb: IEventService(Of TAuthenticationToken).GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid))
  name.vb: GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  spec.csharp:
  - uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
    name: GetEventData
    nameWithType: IEventService<TAuthenticationToken>.GetEventData
    fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
    name: GetEventData
    nameWithType: IEventService(Of TAuthenticationToken).GetEventData
    fullName: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
  commentId: T:Cqrs.Services.IServiceRequestWithData{`0,System.Guid}
  parent: Cqrs.Services
  definition: Cqrs.Services.IServiceRequestWithData`2
  name: IServiceRequestWithData<TAuthenticationToken, Guid>
  nameWithType: IServiceRequestWithData<TAuthenticationToken, Guid>
  fullName: Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>
  nameWithType.vb: IServiceRequestWithData(Of TAuthenticationToken, Guid)
  fullName.vb: Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid)
  name.vb: IServiceRequestWithData(Of TAuthenticationToken, Guid)
  spec.csharp:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
  commentId: T:Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
  parent: Cqrs.Services
  definition: Cqrs.Services.IServiceResponseWithResultData`1
  name: IServiceResponseWithResultData<IEnumerable<EventData>>
  nameWithType: IServiceResponseWithResultData<IEnumerable<EventData>>
  fullName: Cqrs.Services.IServiceResponseWithResultData<System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>>
  nameWithType.vb: IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData))
  name.vb: IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  commentId: M:Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  isExternal: true
  name: GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  nameWithType: IEventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>)
  nameWithType.vb: IEventService(Of TAuthenticationToken).GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid))
  name.vb: GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  spec.csharp:
  - uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
    name: GetEventData
    nameWithType: IEventService<TAuthenticationToken>.GetEventData
    fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
    name: GetEventData
    nameWithType: IEventService(Of TAuthenticationToken).GetEventData
    fullName: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceRequestWithData`2
  commentId: T:Cqrs.Services.IServiceRequestWithData`2
  isExternal: false
  name: IServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType: IServiceRequestWithData<TAuthenticationToken, TData>
  fullName: Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType.vb: IServiceRequestWithData(Of TAuthenticationToken, TData)
  fullName.vb: Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, TData)
  name.vb: IServiceRequestWithData(Of TAuthenticationToken, TData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.IServiceResponseWithResultData`1
  isExternal: false
  name: IServiceResponseWithResultData<TResultData>
  nameWithType: IServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData)
  name.vb: IServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.EventService`1.EventStore
  commentId: P:Cqrs.Services.EventService`1.EventStore
- uid: Cqrs.Services.EventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  commentId: M:Cqrs.Services.EventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
- uid: Cqrs.Services.EventService`1.OnGetEventData*
  commentId: Overload:Cqrs.Services.EventService`1.OnGetEventData
  isExternal: false
  name: OnGetEventData
  nameWithType: EventService<TAuthenticationToken>.OnGetEventData
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.OnGetEventData
  nameWithType.vb: EventService(Of TAuthenticationToken).OnGetEventData
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).OnGetEventData
- uid: Cqrs.Services.EventService`1.OnGotEventData*
  commentId: Overload:Cqrs.Services.EventService`1.OnGotEventData
  isExternal: false
  name: OnGotEventData
  nameWithType: EventService<TAuthenticationToken>.OnGotEventData
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.OnGotEventData
  nameWithType.vb: EventService(Of TAuthenticationToken).OnGotEventData
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).OnGotEventData
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Services.IServiceResponse.CorrelationId
  commentId: P:Cqrs.Services.IServiceResponse.CorrelationId
  parent: Cqrs.Services.IServiceResponse
  isExternal: false
  name: CorrelationId
  nameWithType: IServiceResponse.CorrelationId
  fullName: Cqrs.Services.IServiceResponse.CorrelationId
- uid: Cqrs.Services.EventService`1.CompleteResponse*
  commentId: Overload:Cqrs.Services.EventService`1.CompleteResponse
  isExternal: false
  name: CompleteResponse
  nameWithType: EventService<TAuthenticationToken>.CompleteResponse
  fullName: Cqrs.Services.EventService<TAuthenticationToken>.CompleteResponse
  nameWithType.vb: EventService(Of TAuthenticationToken).CompleteResponse
  fullName.vb: Cqrs.Services.EventService(Of TAuthenticationToken).CompleteResponse
- uid: '{TServiceResponse}'
  commentId: '!:TServiceResponse'
  definition: TServiceResponse
  name: TServiceResponse
  nameWithType: TServiceResponse
  fullName: TServiceResponse
- uid: Cqrs.Services.IServiceResponse
  commentId: T:Cqrs.Services.IServiceResponse
  parent: Cqrs.Services
  isExternal: false
  name: IServiceResponse
  nameWithType: IServiceResponse
  fullName: Cqrs.Services.IServiceResponse
- uid: TServiceResponse
  isExternal: false
  name: TServiceResponse
  nameWithType: TServiceResponse
  fullName: TServiceResponse
