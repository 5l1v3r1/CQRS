### YamlMime:ManagedReference
items:
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  commentId: T:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  id: MemoryCacheEventStoreModule`1
  parent: Cqrs.Ninject.Configuration
  children:
  - Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load
  - Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration
  - Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore
  langs:
  - csharp
  - vb
  name: MemoryCacheEventStoreModule<TAuthenticationToken>
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MemoryCacheEventStoreModule
    path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
    startLine: 18
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nThe <see cref=\"!:INinjectModule\"></see> for use with the Cqrs package.\n"
  example: []
  syntax:
    content: 'public class MemoryCacheEventStoreModule<TAuthenticationToken> : ResolvableModule'
    typeParameters:
    - id: TAuthenticationToken
      description: The <see cref="!:Type"></see> of the authentication token.
    content.vb: >-
      Public Class MemoryCacheEventStoreModule(Of TAuthenticationToken)
          Inherits ResolvableModule
  inheritance:
  - System.Object
  - Cqrs.Ninject.Configuration.ResolvableModule
  inheritedMembers:
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken)
  name.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken)
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load
  commentId: M:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load
  id: Load
  parent: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.Load()
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.Load()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
    startLine: 25
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nLoads the module into the kernel.\n"
  example: []
  syntax:
    content: public override void Load()
    content.vb: Public Overrides Sub Load
  overload: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load*
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).Load()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).Load()
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration
  commentId: M:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration
  id: RegisterEventSerialisationConfiguration
  parent: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  langs:
  - csharp
  - vb
  name: RegisterEventSerialisationConfiguration()
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration()
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterEventSerialisationConfiguration
    path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
    startLine: 36
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all event serialisation configurations\n"
  example: []
  syntax:
    content: public virtual void RegisterEventSerialisationConfiguration()
    content.vb: Public Overridable Sub RegisterEventSerialisationConfiguration
  overload: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration*
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration()
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore
  commentId: M:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore
  id: RegisterEventStore
  parent: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1
  langs:
  - csharp
  - vb
  name: RegisterEventStore()
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventStore()
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventStore()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterEventStore
    path: Framework/Ninject/Cqrs.Ninject/Configuration/MemoryCacheEventStoreModule.cs
    startLine: 49
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void RegisterEventStore()
    content.vb: Public Overridable Sub RegisterEventStore
  overload: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore*
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventStore()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventStore()
references:
- uid: Cqrs.Ninject.Configuration
  commentId: N:Cqrs.Ninject.Configuration
  isExternal: false
  name: Cqrs.Ninject.Configuration
  nameWithType: Cqrs.Ninject.Configuration
  fullName: Cqrs.Ninject.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Ninject.Configuration.ResolvableModule
  commentId: T:Cqrs.Ninject.Configuration.ResolvableModule
  parent: Cqrs.Ninject.Configuration
  isExternal: false
  name: ResolvableModule
  nameWithType: ResolvableModule
  fullName: Cqrs.Ninject.Configuration.ResolvableModule
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: false
  name: Resolve<T>()
  nameWithType: ResolvableModule.Resolve<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve<T>()
  nameWithType.vb: ResolvableModule.Resolve(Of T)()
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Of T)()
  name.vb: Resolve(Of T)()
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
    name: Resolve<T>
    nameWithType: ResolvableModule.Resolve<T>
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
    name: Resolve(Of T)
    nameWithType: ResolvableModule.Resolve(Of T)
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: true
  name: Resolve(Type)
  nameWithType: ResolvableModule.Resolve(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
    name: Resolve
    nameWithType: ResolvableModule.Resolve
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
    name: Resolve
    nameWithType: ResolvableModule.Resolve
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: false
  name: IsRegistered<T>()
  nameWithType: ResolvableModule.IsRegistered<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered<T>()
  nameWithType.vb: ResolvableModule.IsRegistered(Of T)()
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Of T)()
  name.vb: IsRegistered(Of T)()
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
    name: IsRegistered<T>
    nameWithType: ResolvableModule.IsRegistered<T>
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
    name: IsRegistered(Of T)
    nameWithType: ResolvableModule.IsRegistered(Of T)
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: true
  name: IsRegistered(Type)
  nameWithType: ResolvableModule.IsRegistered(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
    name: IsRegistered
    nameWithType: ResolvableModule.IsRegistered
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
    name: IsRegistered
    nameWithType: ResolvableModule.IsRegistered
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load*
  commentId: Overload:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.Load
  isExternal: false
  name: Load
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.Load
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.Load
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).Load
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).Load
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration*
  commentId: Overload:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventSerialisationConfiguration
  isExternal: false
  name: RegisterEventSerialisationConfiguration
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore*
  commentId: Overload:Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule`1.RegisterEventStore
  isExternal: false
  name: RegisterEventStore
  nameWithType: MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventStore
  fullName: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule<TAuthenticationToken>.RegisterEventStore
  nameWithType.vb: MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventStore
  fullName.vb: Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule(Of TAuthenticationToken).RegisterEventStore
