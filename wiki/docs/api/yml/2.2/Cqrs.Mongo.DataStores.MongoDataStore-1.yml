### YamlMime:ManagedReference
items:
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1
  commentId: T:Cqrs.Mongo.DataStores.MongoDataStore`1
  id: MongoDataStore`1
  parent: Cqrs.Mongo.DataStores
  children:
  - Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor(cdmdotnet.Logging.ILogger,MongoDB.Driver.MongoCollection{`0})
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Add(`0)
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy(`0)
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose
  - Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Expression
  - Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Logger
  - Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Provider
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Remove(`0)
  - Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Repair
  - Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator
  - Cqrs.Mongo.DataStores.MongoDataStore`1.Update(`0)
  langs:
  - csharp
  - vb
  name: MongoDataStore<TData>
  nameWithType: MongoDataStore<TData>
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoDataStore
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 26
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nA <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> that uses MongoDB for storage.\n"
  example: []
  syntax:
    content: 'public class MongoDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity'
    typeParameters:
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Entities.IEntity" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.DataStores.IDataStore%601" data-throw-if-not-resolved="false"></xref> will contain.
    content.vb: >-
      Public Class MongoDataStore(Of TData As Entity)
          Implements IDataStore(Of TData), IOrderedQueryable(Of TData), IQueryable(Of TData), IEnumerable(Of TData), IOrderedQueryable, IQueryable, IEnumerable, IDisposable
  inheritance:
  - System.Object
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}
  - System.Linq.IOrderedQueryable{{TData}}
  - System.Linq.IQueryable{{TData}}
  - System.Collections.Generic.IEnumerable{{TData}}
  - System.Linq.IOrderedQueryable
  - System.Linq.IQueryable
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  nameWithType.vb: MongoDataStore(Of TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData)
  name.vb: MongoDataStore(Of TData)
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection
  commentId: P:Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection
  id: MongoCollection
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: MongoCollection
  nameWithType: MongoDataStore<TData>.MongoCollection
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.MongoCollection
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoCollection
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 29
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: protected MongoCollection<TData> MongoCollection { get; }
    parameters: []
    return:
      type: MongoDB.Driver.MongoCollection{{TData}}
    content.vb: Protected ReadOnly Property MongoCollection As MongoCollection(Of TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection*
  nameWithType.vb: MongoDataStore(Of TData).MongoCollection
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).MongoCollection
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Logger
  commentId: P:Cqrs.Mongo.DataStores.MongoDataStore`1.Logger
  id: Logger
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: MongoDataStore<TData>.Logger
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 31
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Logger*
  nameWithType.vb: MongoDataStore(Of TData).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Logger
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor(cdmdotnet.Logging.ILogger,MongoDB.Driver.MongoCollection{`0})
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor(cdmdotnet.Logging.ILogger,MongoDB.Driver.MongoCollection{`0})
  id: '#ctor(cdmdotnet.Logging.ILogger,MongoDB.Driver.MongoCollection{`0})'
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: MongoDataStore(ILogger, MongoCollection<TData>)
  nameWithType: MongoDataStore<TData>.MongoDataStore(ILogger, MongoCollection<TData>)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.MongoDataStore(cdmdotnet.Logging.ILogger, MongoDB.Driver.MongoCollection<TData>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 36
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nInstantiates and Initialises a new instance of the <xref href=\"Cqrs.Mongo.DataStores.MongoDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public MongoDataStore(ILogger logger, MongoCollection<TData> mongoCollection)
    parameters:
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: mongoCollection
      type: MongoDB.Driver.MongoCollection{{TData}}
    content.vb: Public Sub New(logger As ILogger, mongoCollection As MongoCollection(Of TData))
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor*
  nameWithType.vb: MongoDataStore(Of TData).MongoDataStore(ILogger, MongoCollection(Of TData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).MongoDataStore(cdmdotnet.Logging.ILogger, MongoDB.Driver.MongoCollection(Of TData))
  name.vb: MongoDataStore(ILogger, MongoCollection(Of TData))
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator
  id: GetEnumerator
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: MongoDataStore<TData>.GetEnumerator()
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEnumerator
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 52
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<TData> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  nameWithType.vb: MongoDataStore(Of TData).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).GetEnumerator()
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: MongoDataStore<TData>.IEnumerable.GetEnumerator()
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 64
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: MongoDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Expression
  commentId: P:Cqrs.Mongo.DataStores.MongoDataStore`1.Expression
  id: Expression
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: MongoDataStore<TData>.Expression
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Expression
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Expression
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 79
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nGets the expression tree that is associated with the instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Expression Expression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\nThe <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public ReadOnly Property Expression As Expression
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Expression*
  implements:
  - System.Linq.IQueryable.Expression
  nameWithType.vb: MongoDataStore(Of TData).Expression
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Expression
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType
  commentId: P:Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType
  id: ElementType
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: MongoDataStore<TData>.ElementType
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.ElementType
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ElementType
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 90
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nGets the type of the element(s) that are returned when the expression tree associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public Type ElementType { get; }
    parameters: []
    return:
      type: System.Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.\n"
    content.vb: Public ReadOnly Property ElementType As Type
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType*
  implements:
  - System.Linq.IQueryable.ElementType
  nameWithType.vb: MongoDataStore(Of TData).ElementType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).ElementType
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Provider
  commentId: P:Cqrs.Mongo.DataStores.MongoDataStore`1.Provider
  id: Provider
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: MongoDataStore<TData>.Provider
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Provider
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Provider
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 101
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nGets the singleResultQuery provider that is associated with this data source.\n"
  example: []
  syntax:
    content: public IQueryProvider Provider { get; }
    parameters: []
    return:
      type: System.Linq.IQueryProvider
      description: "\nThe <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this data source.\n"
    content.vb: Public ReadOnly Property Provider As IQueryProvider
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Provider*
  implements:
  - System.Linq.IQueryable.Provider
  nameWithType.vb: MongoDataStore(Of TData).Provider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Provider
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Add(`0)
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Add(`0)
  id: Add(`0)
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: MongoDataStore<TData>.Add(TData)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 110
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public virtual void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Add(data As TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  nameWithType.vb: MongoDataStore(Of TData).Add(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Add(TData)
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: MongoDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 126
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public virtual void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overridable Sub Add(data As IEnumerable(Of TData))
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Add(System.Collections.Generic.IEnumerable{{TData}})
  nameWithType.vb: MongoDataStore(Of TData).Add(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Remove(`0)
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Remove(`0)
  id: Remove(`0)
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Remove(TData)
  nameWithType: MongoDataStore<TData>.Remove(TData)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Remove(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Remove
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 139
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public virtual void Remove(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Remove(data As TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Remove*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  nameWithType.vb: MongoDataStore(Of TData).Remove(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Remove(TData)
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy(`0)
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: MongoDataStore<TData>.Destroy(TData)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 153
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Destroy(data As TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  nameWithType.vb: MongoDataStore(Of TData).Destroy(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Destroy(TData)
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll
  id: RemoveAll
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: MongoDataStore<TData>.RemoveAll()
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 169
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public virtual void RemoveAll()
    content.vb: Public Overridable Sub RemoveAll
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  nameWithType.vb: MongoDataStore(Of TData).RemoveAll()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).RemoveAll()
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Update(`0)
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Update(`0)
  id: Update(`0)
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: MongoDataStore<TData>.Update(TData)
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 182
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  syntax:
    content: public virtual void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Update(data As TData)
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Update*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  nameWithType.vb: MongoDataStore(Of TData).Update(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Update(TData)
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose
  id: Dispose
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MongoDataStore<TData>.Dispose()
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Dispose()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Dispose
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 205
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: MongoDataStore(Of TData).Dispose()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Dispose()
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Repair
  commentId: M:Cqrs.Mongo.DataStores.MongoDataStore`1.Repair
  id: Repair
  parent: Cqrs.Mongo.DataStores.MongoDataStore`1
  langs:
  - csharp
  - vb
  name: Repair()
  nameWithType: MongoDataStore<TData>.Repair()
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Repair()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Repair
    path: Framework/Cqrs.Mongo/DataStores/MongoDataStore.cs
    startLine: 215
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores
  summary: "\nExecutes the &quot;repairDatabase&quot; command on the current database.\n"
  example: []
  syntax:
    content: public void Repair()
    content.vb: Public Sub Repair
  overload: Cqrs.Mongo.DataStores.MongoDataStore`1.Repair*
  nameWithType.vb: MongoDataStore(Of TData).Repair()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Repair()
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.Mongo.DataStores
  commentId: N:Cqrs.Mongo.DataStores
  isExternal: false
  name: Cqrs.Mongo.DataStores
  nameWithType: Cqrs.Mongo.DataStores
  fullName: Cqrs.Mongo.DataStores
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.DataStores.IDataStore{{TData}}
  commentId: T:Cqrs.DataStores.IDataStore{`0}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TData}}
  commentId: T:System.Linq.IOrderedQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TData>
  nameWithType: IOrderedQueryable<TData>
  fullName: System.Linq.IOrderedQueryable<TData>
  nameWithType.vb: IOrderedQueryable(Of TData)
  fullName.vb: System.Linq.IOrderedQueryable(Of TData)
  name.vb: IOrderedQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TData}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: System.Linq.IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: System.Linq.IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable
  commentId: T:System.Linq.IOrderedQueryable
  parent: System.Linq
  isExternal: true
  name: IOrderedQueryable
  nameWithType: IOrderedQueryable
  fullName: System.Linq.IOrderedQueryable
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  name: GetByKeyAndRow<TData>(Guid)
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>(Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>(System.Guid)
  nameWithType.vb: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(Guid)
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(System.Guid)
  name.vb: GetByKeyAndRow(Of TData)(Guid)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
    name: GetByKeyAndRow<TData>
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
    name: GetByKeyAndRow(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  name: GetByKey<TData>()
  nameWithType: TableStorageStoreExtensions.GetByKey<TData>()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>()
  nameWithType.vb: TableStorageStoreExtensions.GetByKey(Of TData)()
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)()
  name.vb: GetByKey(Of TData)()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
    name: GetByKey<TData>
    nameWithType: TableStorageStoreExtensions.GetByKey<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
    name: GetByKey(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKey(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByName<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(System.String)
  name.vb: GetByName(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByFolder<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(System.String)
  name.vb: GetByFolder(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  name: GetByFolder<TData>()
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>()
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>()
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)()
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)()
  name.vb: GetByFolder(Of TData)()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  definition: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TData, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TData, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TData, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  isExternal: true
  name: GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>(Cqrs.DataStores.IDataStore<TData>, System.Guid)
  nameWithType.vb: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.Guid)
  name.vb: GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
    name: GetByKeyAndRow<TData>
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
    name: GetByKeyAndRow(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: TableStorageStoreExtensions
  nameWithType: TableStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  isExternal: false
  name: GetByKey<TData>(IDataStore<TData>)
  nameWithType: TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>(Cqrs.DataStores.IDataStore<TData>)
  nameWithType.vb: TableStorageStoreExtensions.GetByKey(Of TData)(IDataStore(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)(Cqrs.DataStores.IDataStore(Of TData))
  name.vb: GetByKey(Of TData)(IDataStore(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByKey<TData>
    nameWithType: TableStorageStoreExtensions.GetByKey<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByKey(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKey(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByName<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByName(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: BlobStorageStoreExtensions
  nameWithType: BlobStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByFolder<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  isExternal: false
  name: GetByFolder<TData>(IDataStore<TData>)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData))
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>(Cqrs.DataStores.IDataStore<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(Cqrs.DataStores.IDataStore(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TEntity, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TEntity, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  commentId: T:Cqrs.Sql.DataStores.SqlDataStoreExtensions
  parent: Cqrs.Sql.DataStores
  isExternal: false
  name: SqlDataStoreExtensions
  nameWithType: SqlDataStoreExtensions
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: Cqrs.Sql.DataStores
  commentId: N:Cqrs.Sql.DataStores
  isExternal: false
  name: Cqrs.Sql.DataStores
  nameWithType: Cqrs.Sql.DataStores
  fullName: Cqrs.Sql.DataStores
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.MongoCollection
  isExternal: false
  name: MongoCollection
  nameWithType: MongoDataStore<TData>.MongoCollection
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.MongoCollection
  nameWithType.vb: MongoDataStore(Of TData).MongoCollection
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).MongoCollection
- uid: MongoDB.Driver.MongoCollection{{TData}}
  commentId: T:MongoDB.Driver.MongoCollection{`0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.MongoCollection`1
  name: MongoCollection<TData>
  nameWithType: MongoCollection<TData>
  fullName: MongoDB.Driver.MongoCollection<TData>
  nameWithType.vb: MongoCollection(Of TData)
  fullName.vb: MongoDB.Driver.MongoCollection(Of TData)
  name.vb: MongoCollection(Of TData)
  spec.csharp:
  - uid: MongoDB.Driver.MongoCollection`1
    name: MongoCollection
    nameWithType: MongoCollection
    fullName: MongoDB.Driver.MongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.MongoCollection`1
    name: MongoCollection
    nameWithType: MongoCollection
    fullName: MongoDB.Driver.MongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.MongoCollection`1
  commentId: T:MongoDB.Driver.MongoCollection`1
  isExternal: true
  name: MongoCollection<TDefaultDocument>
  nameWithType: MongoCollection<TDefaultDocument>
  fullName: MongoDB.Driver.MongoCollection<TDefaultDocument>
  nameWithType.vb: MongoCollection(Of TDefaultDocument)
  fullName.vb: MongoDB.Driver.MongoCollection(Of TDefaultDocument)
  name.vb: MongoCollection(Of TDefaultDocument)
  spec.csharp:
  - uid: MongoDB.Driver.MongoCollection`1
    name: MongoCollection
    nameWithType: MongoCollection
    fullName: MongoDB.Driver.MongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDefaultDocument
    nameWithType: TDefaultDocument
    fullName: TDefaultDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.MongoCollection`1
    name: MongoCollection
    nameWithType: MongoCollection
    fullName: MongoDB.Driver.MongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDefaultDocument
    nameWithType: TDefaultDocument
    fullName: TDefaultDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: false
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Logger*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Logger
  isExternal: false
  name: Logger
  nameWithType: MongoDataStore<TData>.Logger
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Logger
  nameWithType.vb: MongoDataStore(Of TData).Logger
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Logger
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1
  commentId: T:Cqrs.Mongo.DataStores.MongoDataStore`1
  isExternal: false
  name: MongoDataStore<TData>
  nameWithType: MongoDataStore<TData>
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>
  nameWithType.vb: MongoDataStore(Of TData)
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData)
  name.vb: MongoDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.Mongo.DataStores.MongoDataStore`1
    name: MongoDataStore
    nameWithType: MongoDataStore
    fullName: Cqrs.Mongo.DataStores.MongoDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Mongo.DataStores.MongoDataStore`1
    name: MongoDataStore
    nameWithType: MongoDataStore
    fullName: Cqrs.Mongo.DataStores.MongoDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.#ctor
  isExternal: false
  name: MongoDataStore
  nameWithType: MongoDataStore<TData>.MongoDataStore
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.MongoDataStore
  nameWithType.vb: MongoDataStore(Of TData).MongoDataStore
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).MongoDataStore
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: MongoDataStore<TData>.GetEnumerator
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.GetEnumerator
  nameWithType.vb: MongoDataStore(Of TData).GetEnumerator
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TData}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TData>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TData).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TData>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TData).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TData}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TData>
  nameWithType: IEnumerator<TData>
  fullName: System.Collections.Generic.IEnumerator<TData>
  nameWithType.vb: IEnumerator(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TData)
  name.vb: IEnumerator(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: MongoDataStore<TData>.IEnumerable.GetEnumerator
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: MongoDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Expression*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Expression
  isExternal: false
  name: Expression
  nameWithType: MongoDataStore<TData>.Expression
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Expression
  nameWithType.vb: MongoDataStore(Of TData).Expression
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Expression
- uid: System.Linq.IQueryable.Expression
  commentId: P:System.Linq.IQueryable.Expression
  parent: System.Linq.IQueryable
  isExternal: true
  name: Expression
  nameWithType: IQueryable.Expression
  fullName: System.Linq.IQueryable.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.ElementType
  isExternal: false
  name: ElementType
  nameWithType: MongoDataStore<TData>.ElementType
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.ElementType
  nameWithType.vb: MongoDataStore(Of TData).ElementType
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).ElementType
- uid: System.Linq.IQueryable.ElementType
  commentId: P:System.Linq.IQueryable.ElementType
  parent: System.Linq.IQueryable
  isExternal: true
  name: ElementType
  nameWithType: IQueryable.ElementType
  fullName: System.Linq.IQueryable.ElementType
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Provider*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Provider
  isExternal: false
  name: Provider
  nameWithType: MongoDataStore<TData>.Provider
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Provider
  nameWithType.vb: MongoDataStore(Of TData).Provider
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Provider
- uid: System.Linq.IQueryable.Provider
  commentId: P:System.Linq.IQueryable.Provider
  parent: System.Linq.IQueryable
  isExternal: true
  name: Provider
  nameWithType: IQueryable.Provider
  fullName: System.Linq.IQueryable.Provider
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Add*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Add
  isExternal: false
  name: Add
  nameWithType: MongoDataStore<TData>.Add
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Add
  nameWithType.vb: MongoDataStore(Of TData).Add
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Add
- uid: Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Add(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(`0)
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.DataStores.IDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(`0)
  isExternal: false
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.DataStores.IDataStore{{TData}}.Add(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Remove*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Remove
  isExternal: false
  name: Remove
  nameWithType: MongoDataStore<TData>.Remove
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Remove
  nameWithType.vb: MongoDataStore(Of TData).Remove
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Remove
- uid: Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Remove(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Remove(`0)
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Remove(`0)
  isExternal: false
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Destroy
  isExternal: false
  name: Destroy
  nameWithType: MongoDataStore<TData>.Destroy
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Destroy
  nameWithType.vb: MongoDataStore(Of TData).Destroy
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Destroy
- uid: Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Destroy(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Destroy(`0)
  isExternal: false
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: MongoDataStore<TData>.RemoveAll
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.RemoveAll
  nameWithType.vb: MongoDataStore(Of TData).RemoveAll
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).RemoveAll
- uid: Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore{`0}.RemoveAll
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.RemoveAll
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Update*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Update
  isExternal: false
  name: Update
  nameWithType: MongoDataStore<TData>.Update
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Update
  nameWithType.vb: MongoDataStore(Of TData).Update
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Update
- uid: Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Update(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Update(`0)
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Update(`0)
  isExternal: false
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: MongoDataStore<TData>.Dispose
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Dispose
  nameWithType.vb: MongoDataStore(Of TData).Dispose
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.MongoDataStore`1.Repair*
  commentId: Overload:Cqrs.Mongo.DataStores.MongoDataStore`1.Repair
  isExternal: false
  name: Repair
  nameWithType: MongoDataStore<TData>.Repair
  fullName: Cqrs.Mongo.DataStores.MongoDataStore<TData>.Repair
  nameWithType.vb: MongoDataStore(Of TData).Repair
  fullName.vb: Cqrs.Mongo.DataStores.MongoDataStore(Of TData).Repair
