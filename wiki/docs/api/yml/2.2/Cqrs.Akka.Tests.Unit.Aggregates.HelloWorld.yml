### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  commentId: T:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  id: HelloWorld
  parent: Cqrs.Akka.Tests.Unit.Aggregates
  children:
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,System.Guid)
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation(Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand)
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld(Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand)
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello
  - Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  langs:
  - csharp
  - vb
  name: HelloWorld
  nameWithType: HelloWorld
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: HelloWorld
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 22
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nAn Akka.Net actor based <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> that represents a conversation.\n"
  example: []
  syntax:
    content: 'public class HelloWorld : AkkaAggregateRoot<Guid>, IInternalActor, IInitializableActor, IAggregateRoot<Guid>'
    content.vb: >-
      Public Class HelloWorld

          Inherits AkkaAggregateRoot(Of Guid)

          Implements IInternalActor, IInitializableActor, IAggregateRoot(Of Guid)
  inheritance:
  - System.Object
  - Akka.Actor.ActorBase
  - Akka.Actor.UntypedActor
  - Akka.Actor.ReceiveActor
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  implements:
  - Akka.Actor.IInternalActor
  - Akka.Actor.Internal.IInitializableActor
  - Cqrs.Domain.IAggregateRoot{System.Guid}
  inheritedMembers:
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.UnitOfWork
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Repository
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Logger
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.CorrelationIdHelper
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.AuthenticationTokenHelper
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Id
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Version
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.PreStart
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Execute``1(System.Action{{TCommand}},{TCommand})
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.GetUncommittedChanges
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.MarkChangesAsCommitted
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{System.Guid}})
  - Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.ApplyChange(Cqrs.Events.IEvent{System.Guid})
  - Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  - Akka.Actor.ReceiveActor.OnReceive(System.Object)
  - Akka.Actor.ReceiveActor.Become(System.Action)
  - Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  - Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  - Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  - Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  - Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  - Akka.Actor.UntypedActor.Receive(System.Object)
  - Akka.Actor.UntypedActor.RunTask(System.Action)
  - Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.Context
  - Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  - Akka.Actor.ActorBase.Unhandled(System.Object)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.UnbecomeStacked
  - Akka.Actor.ActorBase.Unbecome
  - Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  - Akka.Actor.ActorBase.SupervisorStrategy
  - Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.AroundPreStart
  - Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PostRestart(System.Exception)
  - Akka.Actor.ActorBase.AroundPostStop
  - Akka.Actor.ActorBase.PostStop
  - Akka.Actor.ActorBase.Sender
  - Akka.Actor.ActorBase.Self
  - Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  - Akka.Actor.ActorBase.EmptyReceive
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
  commentId: P:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
  id: Rsn
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: Rsn
  nameWithType: HelloWorld.Rsn
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Rsn
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 27
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nThe <xref href=\"Cqrs.Domain.IAggregateRoot%601.Id\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Guid Rsn { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public ReadOnly Property Rsn As Guid
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
  commentId: P:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
  id: IsLogicallyDeleted
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: IsLogicallyDeleted
  nameWithType: HelloWorld.IsLogicallyDeleted
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsLogicallyDeleted
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 36
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nIndicates if this <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> has been deleted.\n"
  example: []
  syntax:
    content: public bool IsLogicallyDeleted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsLogicallyDeleted As Boolean
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
  commentId: P:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: HelloWorld.DependencyResolver
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 41
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nThe <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref> that resolves things.\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,System.Guid)
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,System.Guid)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,System.Guid)'
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: HelloWorld(IDependencyResolver, ILogger, Guid)
  nameWithType: HelloWorld.HelloWorld(IDependencyResolver, ILogger, Guid)
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.HelloWorld(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, System.Guid)
  type: Constructor
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 73
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public HelloWorld(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: rsn
      type: System.Guid
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver, logger As ILogger, rsn As Guid)
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  id: SayHello(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: SayHello(SayHelloWorldCommand)
  nameWithType: HelloWorld.SayHello(SayHelloWorldCommand)
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SayHello
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 82
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void SayHello(SayHelloWorldCommand command)
    parameters:
    - id: command
      type: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    content.vb: Public Overridable Sub SayHello(command As SayHelloWorldCommand)
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld(Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand)
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld(Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand)
  id: ReplyToHelloWorld(Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand)
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: ReplyToHelloWorld(ReplyToHelloWorldCommand)
  nameWithType: HelloWorld.ReplyToHelloWorld(ReplyToHelloWorldCommand)
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld(Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReplyToHelloWorld
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 90
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void ReplyToHelloWorld(ReplyToHelloWorldCommand command)
    parameters:
    - id: command
      type: Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand
    content.vb: Public Overridable Sub ReplyToHelloWorld(command As ReplyToHelloWorldCommand)
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation(Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand)
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation(Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand)
  id: EndConversation(Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand)
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: EndConversation(EndConversationCommand)
  nameWithType: HelloWorld.EndConversation(EndConversationCommand)
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation(Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EndConversation
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 98
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.ConversationEnded\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void EndConversation(EndConversationCommand command)
    parameters:
    - id: command
      type: Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand
    content.vb: Public Overridable Sub EndConversation(command As EndConversationCommand)
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello
  id: SayHello
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: SayHello()
  nameWithType: HelloWorld.SayHello()
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SayHello
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 106
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void SayHello()
    content.vb: Public Overridable Sub SayHello
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld
  id: ReplyToHelloWorld
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: ReplyToHelloWorld()
  nameWithType: HelloWorld.ReplyToHelloWorld()
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReplyToHelloWorld
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 114
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void ReplyToHelloWorld()
    content.vb: Public Overridable Sub ReplyToHelloWorld
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation
  commentId: M:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation
  id: EndConversation
  parent: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  langs:
  - csharp
  - vb
  name: EndConversation()
  nameWithType: HelloWorld.EndConversation()
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EndConversation
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Aggregates/HelloWorld.cs
    startLine: 122
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Aggregates
  summary: "\nRaises a <xref href=\"Cqrs.Akka.Tests.Unit.Events.ConversationEnded\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void EndConversation()
    content.vb: Public Overridable Sub
  overload: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Tests.Unit.Aggregates
  commentId: N:Cqrs.Akka.Tests.Unit.Aggregates
  isExternal: false
  name: Cqrs.Akka.Tests.Unit.Aggregates
  nameWithType: Cqrs.Akka.Tests.Unit.Aggregates
  fullName: Cqrs.Akka.Tests.Unit.Aggregates
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Akka.Actor.ActorBase
  commentId: T:Akka.Actor.ActorBase
  parent: Akka.Actor
  isExternal: true
  name: ActorBase
  nameWithType: ActorBase
  fullName: Akka.Actor.ActorBase
- uid: Akka.Actor.UntypedActor
  commentId: T:Akka.Actor.UntypedActor
  parent: Akka.Actor
  isExternal: true
  name: UntypedActor
  nameWithType: UntypedActor
  fullName: Akka.Actor.UntypedActor
- uid: Akka.Actor.ReceiveActor
  commentId: T:Akka.Actor.ReceiveActor
  parent: Akka.Actor
  isExternal: true
  name: ReceiveActor
  nameWithType: ReceiveActor
  fullName: Akka.Actor.ReceiveActor
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  commentId: T:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  parent: Cqrs.Akka.Domain
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1
  name: AkkaAggregateRoot<Guid>
  nameWithType: AkkaAggregateRoot<Guid>
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>
  nameWithType.vb: AkkaAggregateRoot(Of Guid)
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid)
  name.vb: AkkaAggregateRoot(Of Guid)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1
    name: AkkaAggregateRoot
    nameWithType: AkkaAggregateRoot
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1
    name: AkkaAggregateRoot
    nameWithType: AkkaAggregateRoot
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.IInternalActor
  commentId: T:Akka.Actor.IInternalActor
  parent: Akka.Actor
  isExternal: true
  name: IInternalActor
  nameWithType: IInternalActor
  fullName: Akka.Actor.IInternalActor
- uid: Akka.Actor.Internal.IInitializableActor
  commentId: T:Akka.Actor.Internal.IInitializableActor
  parent: Akka.Actor.Internal
  isExternal: true
  name: IInitializableActor
  nameWithType: IInitializableActor
  fullName: Akka.Actor.Internal.IInitializableActor
- uid: Cqrs.Domain.IAggregateRoot{System.Guid}
  commentId: T:Cqrs.Domain.IAggregateRoot{System.Guid}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<Guid>
  nameWithType: IAggregateRoot<Guid>
  fullName: Cqrs.Domain.IAggregateRoot<System.Guid>
  nameWithType.vb: IAggregateRoot(Of Guid)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of System.Guid)
  name.vb: IAggregateRoot(Of Guid)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.UnitOfWork
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.UnitOfWork
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.UnitOfWork
  name: UnitOfWork
  nameWithType: AkkaAggregateRoot<Guid>.UnitOfWork
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.UnitOfWork
  nameWithType.vb: AkkaAggregateRoot(Of Guid).UnitOfWork
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).UnitOfWork
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Repository
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Repository
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Repository
  name: Repository
  nameWithType: AkkaAggregateRoot<Guid>.Repository
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Repository
  nameWithType.vb: AkkaAggregateRoot(Of Guid).Repository
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Repository
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Logger
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Logger
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Logger
  name: Logger
  nameWithType: AkkaAggregateRoot<Guid>.Logger
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Logger
  nameWithType.vb: AkkaAggregateRoot(Of Guid).Logger
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Logger
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.CorrelationIdHelper
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.CorrelationIdHelper
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.CorrelationIdHelper
  name: CorrelationIdHelper
  nameWithType: AkkaAggregateRoot<Guid>.CorrelationIdHelper
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.CorrelationIdHelper
  nameWithType.vb: AkkaAggregateRoot(Of Guid).CorrelationIdHelper
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).CorrelationIdHelper
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.AuthenticationTokenHelper
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.AuthenticationTokenHelper
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.AuthenticationTokenHelper
  name: AuthenticationTokenHelper
  nameWithType: AkkaAggregateRoot<Guid>.AuthenticationTokenHelper
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.AuthenticationTokenHelper
  nameWithType.vb: AkkaAggregateRoot(Of Guid).AuthenticationTokenHelper
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).AuthenticationTokenHelper
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Id
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Id
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Id
  name: Id
  nameWithType: AkkaAggregateRoot<Guid>.Id
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Id
  nameWithType.vb: AkkaAggregateRoot(Of Guid).Id
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Id
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Version
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Version
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Version
  name: Version
  nameWithType: AkkaAggregateRoot<Guid>.Version
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Version
  nameWithType.vb: AkkaAggregateRoot(Of Guid).Version
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Version
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.PreStart
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.PreStart
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
  name: PreStart()
  nameWithType: AkkaAggregateRoot<Guid>.PreStart()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.PreStart()
  nameWithType.vb: AkkaAggregateRoot(Of Guid).PreStart()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).PreStart()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
    name: PreStart
    nameWithType: AkkaAggregateRoot<Guid>.PreStart
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.PreStart
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
    name: PreStart
    nameWithType: AkkaAggregateRoot(Of Guid).PreStart
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).PreStart
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Execute``1(System.Action{{TCommand}},{TCommand})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.Execute``1(System.Action{``0},``0)
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
  name: Execute<TCommand>(Action<TCommand>, TCommand)
  nameWithType: AkkaAggregateRoot<Guid>.Execute<TCommand>(Action<TCommand>, TCommand)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Execute<TCommand>(System.Action<TCommand>, TCommand)
  nameWithType.vb: AkkaAggregateRoot(Of Guid).Execute(Of TCommand)(Action(Of TCommand), TCommand)
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Execute(Of TCommand)(System.Action(Of TCommand), TCommand)
  name.vb: Execute(Of TCommand)(Action(Of TCommand), TCommand)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
    name: Execute<TCommand>
    nameWithType: AkkaAggregateRoot<Guid>.Execute<TCommand>
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.Execute<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
    name: Execute(Of TCommand)
    nameWithType: AkkaAggregateRoot(Of Guid).Execute(Of TCommand)
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).Execute(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.GetUncommittedChanges
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.GetUncommittedChanges
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: AkkaAggregateRoot<Guid>.GetUncommittedChanges()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.GetUncommittedChanges()
  nameWithType.vb: AkkaAggregateRoot(Of Guid).GetUncommittedChanges()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AkkaAggregateRoot<Guid>.GetUncommittedChanges
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AkkaAggregateRoot(Of Guid).GetUncommittedChanges
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.MarkChangesAsCommitted
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.MarkChangesAsCommitted
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: AkkaAggregateRoot<Guid>.MarkChangesAsCommitted()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.MarkChangesAsCommitted()
  nameWithType.vb: AkkaAggregateRoot(Of Guid).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AkkaAggregateRoot<Guid>.MarkChangesAsCommitted
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AkkaAggregateRoot(Of Guid).MarkChangesAsCommitted
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{System.Guid}})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{System.Guid}})
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  name: LoadFromHistory(IEnumerable<IEvent<Guid>>)
  nameWithType: AkkaAggregateRoot<Guid>.LoadFromHistory(IEnumerable<IEvent<Guid>>)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<System.Guid>>)
  nameWithType.vb: AkkaAggregateRoot(Of Guid).LoadFromHistory(IEnumerable(Of IEvent(Of Guid)))
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of System.Guid)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of Guid)))
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AkkaAggregateRoot<Guid>.LoadFromHistory
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AkkaAggregateRoot(Of Guid).LoadFromHistory
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.ApplyChange(Cqrs.Events.IEvent{System.Guid})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}.ApplyChange(Cqrs.Events.IEvent{System.Guid})
  parent: Cqrs.Akka.Domain.AkkaAggregateRoot{System.Guid}
  definition: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  name: ApplyChange(IEvent<Guid>)
  nameWithType: AkkaAggregateRoot<Guid>.ApplyChange(IEvent<Guid>)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.ApplyChange(Cqrs.Events.IEvent<System.Guid>)
  nameWithType.vb: AkkaAggregateRoot(Of Guid).ApplyChange(IEvent(Of Guid))
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).ApplyChange(Cqrs.Events.IEvent(Of System.Guid))
  name.vb: ApplyChange(IEvent(Of Guid))
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AkkaAggregateRoot<Guid>.ApplyChange
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<System.Guid>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AkkaAggregateRoot(Of Guid).ApplyChange
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of System.Guid).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  commentId: M:Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: IInitializableActor.Init()
  nameWithType: ReceiveActor.IInitializableActor.Init()
  fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  nameWithType.vb: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  name.vb: Akka.Actor.Internal.IInitializableActor.Init()
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: IInitializableActor.Init
    nameWithType: ReceiveActor.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: Akka.Actor.Internal.IInitializableActor.Init
    nameWithType: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  commentId: M:Akka.Actor.ReceiveActor.OnReceive(System.Object)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: OnReceive(Object)
  nameWithType: ReceiveActor.OnReceive(Object)
  fullName: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action)
  nameWithType: ReceiveActor.Become(Action)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: BecomeStacked(Action)
  nameWithType: ReceiveActor.BecomeStacked(Action)
  fullName: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action, Boolean)
  nameWithType: ReceiveActor.Become(Action, Boolean)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Action<Object>, Predicate<Object>)
  nameWithType: ReceiveActor.Receive(Type, Action<Object>, Predicate<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Action(Of Object), Predicate(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action(Of System.Object), System.Predicate(Of System.Object))
  name.vb: Receive(Type, Action(Of Object), Predicate(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Predicate<Object>, Action<Object>)
  nameWithType: ReceiveActor.Receive(Type, Predicate<Object>, Action<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Predicate(Of Object), Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate(Of System.Object), System.Action(Of System.Object))
  name.vb: Receive(Type, Predicate(Of Object), Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Func<Object, Boolean>)
  nameWithType: ReceiveActor.Receive(Type, Func<Object, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Type, Func(Of Object, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func(Of System.Object, System.Boolean))
  name.vb: Receive(Type, Func(Of Object, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: ReceiveAny(Action<Object>)
  nameWithType: ReceiveActor.ReceiveAny(Action<Object>)
  fullName: Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.ReceiveAny(Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.ReceiveAny(System.Action(Of System.Object))
  name.vb: ReceiveAny(Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Receive(System.Object)
  commentId: M:Akka.Actor.UntypedActor.Receive(System.Object)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Receive(Object)
  nameWithType: UntypedActor.Receive(Object)
  fullName: Akka.Actor.UntypedActor.Receive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Action)
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Action)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Action)
  nameWithType: UntypedActor.RunTask(Action)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Action)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Func<Task>)
  nameWithType: UntypedActor.RunTask(Func<Task>)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: UntypedActor.RunTask(Func(Of Task))
  fullName.vb: Akka.Actor.UntypedActor.RunTask(System.Func(Of System.Threading.Tasks.Task))
  name.vb: RunTask(Func(Of Task))
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive, Boolean)
  nameWithType: UntypedActor.Become(UntypedReceive, Boolean)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive)
  nameWithType: UntypedActor.Become(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: BecomeStacked(UntypedReceive)
  nameWithType: UntypedActor.BecomeStacked(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Context
  commentId: P:Akka.Actor.UntypedActor.Context
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Context
  nameWithType: UntypedActor.Context
  fullName: Akka.Actor.UntypedActor.Context
- uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundReceive(Receive, Object)
  nameWithType: ActorBase.AroundReceive(Receive, Object)
  fullName: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unhandled(System.Object)
  commentId: M:Akka.Actor.ActorBase.Unhandled(System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unhandled(Object)
  nameWithType: ActorBase.Unhandled(Object)
  fullName: Akka.Actor.ActorBase.Unhandled(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive, Boolean)
  nameWithType: ActorBase.Become(Receive, Boolean)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive)
  nameWithType: ActorBase.Become(Receive)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: BecomeStacked(Receive)
  nameWithType: ActorBase.BecomeStacked(Receive)
  fullName: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.UnbecomeStacked
  commentId: M:Akka.Actor.ActorBase.UnbecomeStacked
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: UnbecomeStacked()
  nameWithType: ActorBase.UnbecomeStacked()
  fullName: Akka.Actor.ActorBase.UnbecomeStacked()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unbecome
  commentId: M:Akka.Actor.ActorBase.Unbecome
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unbecome()
  nameWithType: ActorBase.Unbecome()
  fullName: Akka.Actor.ActorBase.Unbecome()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  commentId: M:Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SetReceiveTimeout(Nullable<TimeSpan>)
  nameWithType: ActorBase.SetReceiveTimeout(Nullable<TimeSpan>)
  fullName: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>)
  nameWithType.vb: ActorBase.SetReceiveTimeout(Nullable(Of TimeSpan))
  fullName.vb: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable(Of System.TimeSpan))
  name.vb: SetReceiveTimeout(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SupervisorStrategy
  commentId: M:Akka.Actor.ActorBase.SupervisorStrategy
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SupervisorStrategy()
  nameWithType: ActorBase.SupervisorStrategy()
  fullName: Akka.Actor.ActorBase.SupervisorStrategy()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreRestart(Exception, Object)
  nameWithType: ActorBase.AroundPreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreStart
  commentId: M:Akka.Actor.ActorBase.AroundPreStart
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreStart()
  nameWithType: ActorBase.AroundPreStart()
  fullName: Akka.Actor.ActorBase.AroundPreStart()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostRestart(Exception, Object)
  nameWithType: ActorBase.AroundPostRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PreRestart(Exception, Object)
  nameWithType: ActorBase.PreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
  commentId: M:Akka.Actor.ActorBase.PostRestart(System.Exception)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostRestart(Exception)
  nameWithType: ActorBase.PostRestart(Exception)
  fullName: Akka.Actor.ActorBase.PostRestart(System.Exception)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostStop
  commentId: M:Akka.Actor.ActorBase.AroundPostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostStop()
  nameWithType: ActorBase.AroundPostStop()
  fullName: Akka.Actor.ActorBase.AroundPostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostStop
  commentId: M:Akka.Actor.ActorBase.PostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostStop()
  nameWithType: ActorBase.PostStop()
  fullName: Akka.Actor.ActorBase.PostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Sender
  commentId: P:Akka.Actor.ActorBase.Sender
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Sender
  nameWithType: ActorBase.Sender
  fullName: Akka.Actor.ActorBase.Sender
- uid: Akka.Actor.ActorBase.Self
  commentId: P:Akka.Actor.ActorBase.Self
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Self
  nameWithType: ActorBase.Self
  fullName: Akka.Actor.ActorBase.Self
- uid: Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  commentId: P:Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: IInternalActor.ActorContext
  nameWithType: ActorBase.IInternalActor.ActorContext
  fullName: Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext
  nameWithType.vb: ActorBase.Akka.Actor.IInternalActor.ActorContext
  name.vb: Akka.Actor.IInternalActor.ActorContext
- uid: Akka.Actor.ActorBase.EmptyReceive
  commentId: P:Akka.Actor.ActorBase.EmptyReceive
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: EmptyReceive
  nameWithType: ActorBase.EmptyReceive
  fullName: Akka.Actor.ActorBase.EmptyReceive
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1
  commentId: T:Cqrs.Akka.Domain.AkkaAggregateRoot`1
  isExternal: false
  name: AkkaAggregateRoot<TAuthenticationToken>
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken)
  name.vb: AkkaAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1
    name: AkkaAggregateRoot
    nameWithType: AkkaAggregateRoot
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1
    name: AkkaAggregateRoot
    nameWithType: AkkaAggregateRoot
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: Akka.Actor.Internal
  commentId: N:Akka.Actor.Internal
  isExternal: false
  name: Akka.Actor.Internal
  nameWithType: Akka.Actor.Internal
  fullName: Akka.Actor.Internal
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.UnitOfWork
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.UnitOfWork
  isExternal: false
  name: UnitOfWork
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.UnitOfWork
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.UnitOfWork
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).UnitOfWork
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).UnitOfWork
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Repository
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.Repository
  isExternal: false
  name: Repository
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Repository
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Repository
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).Repository
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Repository
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Logger
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.Logger
  isExternal: false
  name: Logger
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Logger
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Logger
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Logger
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.CorrelationIdHelper
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.AuthenticationTokenHelper
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.AuthenticationTokenHelper
  isExternal: false
  name: AuthenticationTokenHelper
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.AuthenticationTokenHelper
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.AuthenticationTokenHelper
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).AuthenticationTokenHelper
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).AuthenticationTokenHelper
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Id
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Version
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
  isExternal: false
  name: PreStart()
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.PreStart()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.PreStart()
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).PreStart()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).PreStart()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
    name: PreStart
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.PreStart
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.PreStart
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.PreStart
    name: PreStart
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).PreStart
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).PreStart
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
  isExternal: true
  name: Execute<TCommand>(Action<TCommand>, TCommand)
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Execute<TCommand>(Action<TCommand>, TCommand)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Execute<TCommand>(System.Action<TCommand>, TCommand)
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).Execute(Of TCommand)(Action(Of TCommand), TCommand)
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Execute(Of TCommand)(System.Action(Of TCommand), TCommand)
  name.vb: Execute(Of TCommand)(Action(Of TCommand), TCommand)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
    name: Execute<TCommand>
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.Execute<TCommand>
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.Execute<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.Execute``1(System.Action{``0},``0)
    name: Execute(Of TCommand)
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).Execute(Of TCommand)
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).Execute(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AkkaAggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AkkaAggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AkkaAggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Akka.Domain.AkkaAggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AkkaAggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Akka.Domain.AkkaAggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  isExternal: true
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  isExternal: true
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  isExternal: true
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  isExternal: true
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.Id
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
  isExternal: false
  name: Rsn
  nameWithType: HelloWorld.Rsn
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.Rsn
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
  isExternal: false
  name: IsLogicallyDeleted
  nameWithType: HelloWorld.IsLogicallyDeleted
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.IsLogicallyDeleted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: HelloWorld.DependencyResolver
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.DependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  commentId: T:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
  isExternal: false
  name: HelloWorld
  nameWithType: HelloWorld
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.#ctor
  isExternal: false
  name: HelloWorld
  nameWithType: HelloWorld.HelloWorld
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.HelloWorld
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid
  commentId: T:Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid
  parent: Cqrs.Akka.Tests.Unit.Events
  isExternal: false
  name: HelloWorldSaid
  nameWithType: HelloWorldSaid
  fullName: Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello
  isExternal: false
  name: SayHello
  nameWithType: HelloWorld.SayHello
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.SayHello
- uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  parent: Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: SayHelloWorldCommand
  nameWithType: SayHelloWorldCommand
  fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
- uid: Cqrs.Akka.Tests.Unit.Events
  commentId: N:Cqrs.Akka.Tests.Unit.Events
  isExternal: false
  name: Cqrs.Akka.Tests.Unit.Events
  nameWithType: Cqrs.Akka.Tests.Unit.Events
  fullName: Cqrs.Akka.Tests.Unit.Events
- uid: Cqrs.Akka.Tests.Unit.Commands
  commentId: N:Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: Cqrs.Akka.Tests.Unit.Commands
  nameWithType: Cqrs.Akka.Tests.Unit.Commands
  fullName: Cqrs.Akka.Tests.Unit.Commands
- uid: Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo
  commentId: T:Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo
  parent: Cqrs.Akka.Tests.Unit.Events
  isExternal: false
  name: HelloWorldRepliedTo
  nameWithType: HelloWorldRepliedTo
  fullName: Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld
  isExternal: false
  name: ReplyToHelloWorld
  nameWithType: HelloWorld.ReplyToHelloWorld
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.ReplyToHelloWorld
- uid: Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand
  parent: Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: ReplyToHelloWorldCommand
  nameWithType: ReplyToHelloWorldCommand
  fullName: Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand
- uid: Cqrs.Akka.Tests.Unit.Events.ConversationEnded
  commentId: T:Cqrs.Akka.Tests.Unit.Events.ConversationEnded
  parent: Cqrs.Akka.Tests.Unit.Events
  isExternal: false
  name: ConversationEnded
  nameWithType: ConversationEnded
  fullName: Cqrs.Akka.Tests.Unit.Events.ConversationEnded
- uid: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation
  isExternal: false
  name: EndConversation
  nameWithType: HelloWorld.EndConversation
  fullName: Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.EndConversation
- uid: Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand
  parent: Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: EndConversationCommand
  nameWithType: EndConversationCommand
  fullName: Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand
