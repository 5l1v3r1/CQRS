### YamlMime:ManagedReference
items:
- uid: Cqrs.Configuration.BusRegistrar
  commentId: T:Cqrs.Configuration.BusRegistrar
  id: BusRegistrar
  parent: Cqrs.Configuration
  children:
  - Cqrs.Configuration.BusRegistrar.#ctor(Cqrs.Configuration.IDependencyResolver)
  - Cqrs.Configuration.BusRegistrar.BuildDelegateAction(System.Type,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})
  - Cqrs.Configuration.BusRegistrar.BuildExecutorMethod(System.Reflection.MethodInfo,System.Type,System.Type)
  - Cqrs.Configuration.BusRegistrar.DependencyResolver
  - Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  - Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  - Cqrs.Configuration.BusRegistrar.InvokeHandler(System.Type,System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Type)
  - Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate(System.Reflection.MethodInfo,System.Boolean,Cqrs.Configuration.HandlerDelegate)
  - Cqrs.Configuration.BusRegistrar.Register(System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Boolean,System.Type[])
  - Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  - Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  - Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  langs:
  - csharp
  - vb
  name: BusRegistrar
  nameWithType: BusRegistrar
  fullName: Cqrs.Configuration.BusRegistrar
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BusRegistrar
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nTriggers the <xref href=\"Cqrs.Bus.IEventHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Bus.ICommandHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref> if they are registered in the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class BusRegistrar
    content.vb: Public Class BusRegistrar
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Akka.Configuration.AkkaBusRegistrar`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Configuration.BusRegistrar.DependencyResolver
  commentId: P:Cqrs.Configuration.BusRegistrar.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: BusRegistrar.DependencyResolver
  fullName: Cqrs.Configuration.BusRegistrar.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 29
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nGets or set the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Configuration.BusRegistrar.DependencyResolver*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  commentId: P:Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  id: GetEventHandlerRegistrar
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: GetEventHandlerRegistrar
  nameWithType: BusRegistrar.GetEventHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventHandlerRegistrar
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 34
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nA <xref href=\"System.Func%603\" data-throw-if-not-resolved=\"false\"></xref> to use in-place of <xref href=\"Cqrs.Bus.IEventHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static Func<Type, Type, IHandlerRegistrar> GetEventHandlerRegistrar { get; set; }
    parameters: []
    return:
      type: System.Func{System.Type,System.Type,Cqrs.Bus.IHandlerRegistrar}
    content.vb: Public Shared Property GetEventHandlerRegistrar As Func(Of Type, Type, IHandlerRegistrar)
  overload: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  commentId: P:Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  id: GetCommandHandlerRegistrar
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: GetCommandHandlerRegistrar
  nameWithType: BusRegistrar.GetCommandHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetCommandHandlerRegistrar
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 39
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nA <xref href=\"System.Func%603\" data-throw-if-not-resolved=\"false\"></xref> to use in-place of <xref href=\"Cqrs.Bus.ICommandHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static Func<Type, Type, IHandlerRegistrar> GetCommandHandlerRegistrar { get; set; }
    parameters: []
    return:
      type: System.Func{System.Type,System.Type,Cqrs.Bus.IHandlerRegistrar}
    content.vb: Public Shared Property GetCommandHandlerRegistrar As Func(Of Type, Type, IHandlerRegistrar)
  overload: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Configuration.BusRegistrar.#ctor(Cqrs.Configuration.IDependencyResolver)
  commentId: M:Cqrs.Configuration.BusRegistrar.#ctor(Cqrs.Configuration.IDependencyResolver)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver)'
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: BusRegistrar(IDependencyResolver)
  nameWithType: BusRegistrar.BusRegistrar(IDependencyResolver)
  fullName: Cqrs.Configuration.BusRegistrar.BusRegistrar(Cqrs.Configuration.IDependencyResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 44
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Configuration.BusRegistrar\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public BusRegistrar(IDependencyResolver dependencyResolver)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver)
  overload: Cqrs.Configuration.BusRegistrar.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  commentId: M:Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  id: Register(System.Type[])
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: Register(Type[])
  nameWithType: BusRegistrar.Register(Type[])
  fullName: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Register
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 60
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nRegisters all <xref href=\"Cqrs.Events.IEventHandler\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Commands.ICommandHandler%602\" data-throw-if-not-resolved=\"false\"></xref> instances found in the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in <span class=\"paramref\">typesFromAssemblyContainingMessages</span>.\n"
  example: []
  syntax:
    content: public virtual void Register(params Type[] typesFromAssemblyContainingMessages)
    parameters:
    - id: typesFromAssemblyContainingMessages
      type: System.Type[]
      description: A collection of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to track back to their containing <xref href="System.Reflection.Assembly" data-throw-if-not-resolved="false"></xref> and scan.
    content.vb: Public Overridable Sub Register(ParamArray typesFromAssemblyContainingMessages As Type())
  overload: Cqrs.Configuration.BusRegistrar.Register*
  nameWithType.vb: BusRegistrar.Register(Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Configuration.BusRegistrar.Register(System.Type())
  name.vb: Register(Type())
- uid: Cqrs.Configuration.BusRegistrar.Register(System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Boolean,System.Type[])
  commentId: M:Cqrs.Configuration.BusRegistrar.Register(System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Boolean,System.Type[])
  id: Register(System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Boolean,System.Type[])
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: Register(Boolean, Func<Type, IEnumerable<Type>>, Boolean, Type[])
  nameWithType: BusRegistrar.Register(Boolean, Func<Type, IEnumerable<Type>>, Boolean, Type[])
  fullName: Cqrs.Configuration.BusRegistrar.Register(System.Boolean, System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>>, System.Boolean, System.Type[])
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Register
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 78
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nRegisters all <xref href=\"Cqrs.Messages.IHandler\" data-throw-if-not-resolved=\"false\"></xref> instances found in the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in <span class=\"paramref\">typesFromAssemblyContainingMessages</span>.\n"
  example: []
  syntax:
    content: public virtual void Register(bool trueForEventsFalseForCommands, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface, bool skipCommandHandlers, params Type[] typesFromAssemblyContainingMessages)
    parameters:
    - id: trueForEventsFalseForCommands
      type: System.Boolean
      description: Indicates if this is registers <xref href="Cqrs.Events.IEventHandler" data-throw-if-not-resolved="false"></xref> or <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref>.
    - id: resolveMessageHandlerInterface
      type: System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}}
      description: <xref href="Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)" data-throw-if-not-resolved="false"></xref> or <xref href="Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)" data-throw-if-not-resolved="false"></xref>
    - id: skipCommandHandlers
      type: System.Boolean
      description: Indicates if registering of <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref> is enabled.
    - id: typesFromAssemblyContainingMessages
      type: System.Type[]
      description: A collection of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to track back to their containing <xref href="System.Reflection.Assembly" data-throw-if-not-resolved="false"></xref> and scan.
    content.vb: Public Overridable Sub Register(trueForEventsFalseForCommands As Boolean, resolveMessageHandlerInterface As Func(Of Type, IEnumerable(Of Type)), skipCommandHandlers As Boolean, ParamArray typesFromAssemblyContainingMessages As Type())
  overload: Cqrs.Configuration.BusRegistrar.Register*
  nameWithType.vb: BusRegistrar.Register(Boolean, Func(Of Type, IEnumerable(Of Type)), Boolean, Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Configuration.BusRegistrar.Register(System.Boolean, System.Func(Of System.Type, System.Collections.Generic.IEnumerable(Of System.Type)), System.Boolean, System.Type())
  name.vb: Register(Boolean, Func(Of Type, IEnumerable(Of Type)), Boolean, Type())
- uid: Cqrs.Configuration.BusRegistrar.InvokeHandler(System.Type,System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.InvokeHandler(System.Type,System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Type)
  id: InvokeHandler(System.Type,System.Boolean,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: InvokeHandler(Type, Boolean, Func<Type, IEnumerable<Type>>, Type)
  nameWithType: BusRegistrar.InvokeHandler(Type, Boolean, Func<Type, IEnumerable<Type>>, Type)
  fullName: Cqrs.Configuration.BusRegistrar.InvokeHandler(System.Type, System.Boolean, System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>>, System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: InvokeHandler
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 115
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nExtract the <xref href=\"Cqrs.Bus.IHandlerRegistrar.RegisterHandler%60%601(System.Action%7b%60%600%7d%2cSystem.Type%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method of <xref href=\"Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref>.\nCreate an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> around the provided <span class=\"paramref\">executorType</span>\nThen register the created <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> using the extracted <xref href=\"Cqrs.Bus.IHandlerRegistrar.RegisterHandler%60%601(System.Action%7b%60%600%7d%2cSystem.Type%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method\n"
  example: []
  syntax:
    content: protected virtual void InvokeHandler(Type interface, bool trueForEventsFalseForCommands, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface, Type executorType)
    parameters:
    - id: interface
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IHandler" data-throw-if-not-resolved="false"></xref>
    - id: trueForEventsFalseForCommands
      type: System.Boolean
      description: Indicates if this is registers <xref href="Cqrs.Events.IEventHandler" data-throw-if-not-resolved="false"></xref> or <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref>.
    - id: resolveMessageHandlerInterface
      type: System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}}
      description: <xref href="Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)" data-throw-if-not-resolved="false"></xref> or <xref href="Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)" data-throw-if-not-resolved="false"></xref>
    - id: executorType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the event handler that will do the handling
    content.vb: Protected Overridable Sub InvokeHandler(interface As Type, trueForEventsFalseForCommands As Boolean, resolveMessageHandlerInterface As Func(Of Type, IEnumerable(Of Type)), executorType As Type)
  overload: Cqrs.Configuration.BusRegistrar.InvokeHandler*
  nameWithType.vb: BusRegistrar.InvokeHandler(Type, Boolean, Func(Of Type, IEnumerable(Of Type)), Type)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Configuration.BusRegistrar.InvokeHandler(System.Type, System.Boolean, System.Func(Of System.Type, System.Collections.Generic.IEnumerable(Of System.Type)), System.Type)
  name.vb: InvokeHandler(Type, Boolean, Func(Of Type, IEnumerable(Of Type)), Type)
- uid: Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate(System.Reflection.MethodInfo,System.Boolean,Cqrs.Configuration.HandlerDelegate)
  commentId: M:Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate(System.Reflection.MethodInfo,System.Boolean,Cqrs.Configuration.HandlerDelegate)
  id: InvokeHandlerDelegate(System.Reflection.MethodInfo,System.Boolean,Cqrs.Configuration.HandlerDelegate)
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: InvokeHandlerDelegate(MethodInfo, Boolean, HandlerDelegate)
  nameWithType: BusRegistrar.InvokeHandlerDelegate(MethodInfo, Boolean, HandlerDelegate)
  fullName: Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate(System.Reflection.MethodInfo, System.Boolean, Cqrs.Configuration.HandlerDelegate)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: InvokeHandlerDelegate
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 170
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nInvokes <span class=\"paramref\">handlerDelegate</span>, fetching the corresponding &quot;HoldMessageLock&quot; configuration setting \n"
  example: []
  syntax:
    content: protected virtual void InvokeHandlerDelegate(MethodInfo registerExecutorMethod, bool trueForEventsFalseForCommands, HandlerDelegate handlerDelegate)
    parameters:
    - id: registerExecutorMethod
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref> to use to invoke <span class="paramref">handlerDelegate</span>.
    - id: trueForEventsFalseForCommands
      type: System.Boolean
      description: Indicates if this is registers <xref href="Cqrs.Events.IEventHandler" data-throw-if-not-resolved="false"></xref> or <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref>.
    - id: handlerDelegate
      type: Cqrs.Configuration.HandlerDelegate
      description: The actual <xref href="Cqrs.Configuration.HandlerDelegate" data-throw-if-not-resolved="false"></xref> that gets executed.
    content.vb: Protected Overridable Sub InvokeHandlerDelegate(registerExecutorMethod As MethodInfo, trueForEventsFalseForCommands As Boolean, handlerDelegate As HandlerDelegate)
  overload: Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Configuration.BusRegistrar.BuildDelegateAction(System.Type,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})
  commentId: M:Cqrs.Configuration.BusRegistrar.BuildDelegateAction(System.Type,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})
  id: BuildDelegateAction(System.Type,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: BuildDelegateAction(Type, Func<Type, IEnumerable<Type>>)
  nameWithType: BusRegistrar.BuildDelegateAction(Type, Func<Type, IEnumerable<Type>>)
  fullName: Cqrs.Configuration.BusRegistrar.BuildDelegateAction(System.Type, System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BuildDelegateAction
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 195
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nBuilds a <xref href=\"Cqrs.Configuration.HandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> that will resolve the provided <span class=\"paramref\">executorType</span> and invoke the Handle method, when executed.\n"
  example: []
  syntax:
    content: protected virtual HandlerDelegate BuildDelegateAction(Type executorType, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface)
    parameters:
    - id: executorType
      type: System.Type
      description: The type of <xref href="Cqrs.Messages.IHandler" data-throw-if-not-resolved="false"></xref> to resolve.>
    - id: resolveMessageHandlerInterface
      type: System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}}
      description: Not used.
    return:
      type: Cqrs.Configuration.HandlerDelegate
    content.vb: Protected Overridable Function BuildDelegateAction(executorType As Type, resolveMessageHandlerInterface As Func(Of Type, IEnumerable(Of Type))) As HandlerDelegate
  overload: Cqrs.Configuration.BusRegistrar.BuildDelegateAction*
  nameWithType.vb: BusRegistrar.BuildDelegateAction(Type, Func(Of Type, IEnumerable(Of Type)))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Configuration.BusRegistrar.BuildDelegateAction(System.Type, System.Func(Of System.Type, System.Collections.Generic.IEnumerable(Of System.Type)))
  name.vb: BuildDelegateAction(Type, Func(Of Type, IEnumerable(Of Type)))
- uid: Cqrs.Configuration.BusRegistrar.BuildExecutorMethod(System.Reflection.MethodInfo,System.Type,System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.BuildExecutorMethod(System.Reflection.MethodInfo,System.Type,System.Type)
  id: BuildExecutorMethod(System.Reflection.MethodInfo,System.Type,System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: BuildExecutorMethod(MethodInfo, Type, Type)
  nameWithType: BusRegistrar.BuildExecutorMethod(MethodInfo, Type, Type)
  fullName: Cqrs.Configuration.BusRegistrar.BuildExecutorMethod(System.Reflection.MethodInfo, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BuildExecutorMethod
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 217
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nBuilds a method replacing the generic type with <span class=\"paramref\">commandType</span>.\n"
  example: []
  syntax:
    content: protected virtual MethodInfo BuildExecutorMethod(MethodInfo originalRegisterExecutorMethod, Type executorType, Type commandType)
    parameters:
    - id: originalRegisterExecutorMethod
      type: System.Reflection.MethodInfo
    - id: executorType
      type: System.Type
    - id: commandType
      type: System.Type
    return:
      type: System.Reflection.MethodInfo
    content.vb: Protected Overridable Function BuildExecutorMethod(originalRegisterExecutorMethod As MethodInfo, executorType As Type, commandType As Type) As MethodInfo
  overload: Cqrs.Configuration.BusRegistrar.BuildExecutorMethod*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  id: ResolveEventHandlerInterface(System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: ResolveEventHandlerInterface(Type)
  nameWithType: BusRegistrar.ResolveEventHandlerInterface(Type)
  fullName: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolveEventHandlerInterface
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 233
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nFinds all <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that implement <xref href=\"Cqrs.Events.IEventHandler%602\" data-throw-if-not-resolved=\"false\"></xref> that are implemented by <span class=\"paramref\">type</span>.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<Type> ResolveEventHandlerInterface(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to find all <xref href="Cqrs.Events.IEventHandler%602" data-throw-if-not-resolved="false"></xref> of.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Protected Overridable Function ResolveEventHandlerInterface(type As Type) As IEnumerable(Of Type)
  overload: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  id: ResolveCommandHandlerInterface(System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  langs:
  - csharp
  - vb
  name: ResolveCommandHandlerInterface(Type)
  nameWithType: BusRegistrar.ResolveCommandHandlerInterface(Type)
  fullName: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/BusRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolveCommandHandlerInterface
    path: Framework/Cqrs/Configuration/BusRegistrar.cs
    startLine: 251
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nFinds all <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that implement <xref href=\"Cqrs.Commands.ICommandHandler%602\" data-throw-if-not-resolved=\"false\"></xref> that are implemented by <span class=\"paramref\">type</span>.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<Type> ResolveCommandHandlerInterface(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to find all <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref> of.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Protected Overridable Function ResolveCommandHandlerInterface(type As Type) As IEnumerable(Of Type)
  overload: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Cqrs.Bus.IEventHandlerRegistrar
  commentId: T:Cqrs.Bus.IEventHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IEventHandlerRegistrar
  nameWithType: IEventHandlerRegistrar
  fullName: Cqrs.Bus.IEventHandlerRegistrar
- uid: Cqrs.Bus.ICommandHandlerRegistrar
  commentId: T:Cqrs.Bus.ICommandHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: ICommandHandlerRegistrar
  nameWithType: ICommandHandlerRegistrar
  fullName: Cqrs.Bus.ICommandHandlerRegistrar
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus
  commentId: N:Cqrs.Bus
  isExternal: false
  name: Cqrs.Bus
  nameWithType: Cqrs.Bus
  fullName: Cqrs.Bus
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration.BusRegistrar.DependencyResolver*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: BusRegistrar.DependencyResolver
  fullName: Cqrs.Configuration.BusRegistrar.DependencyResolver
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  isExternal: false
  name: GetEventHandlerRegistrar
  nameWithType: BusRegistrar.GetEventHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
- uid: System.Func{System.Type,System.Type,Cqrs.Bus.IHandlerRegistrar}
  commentId: T:System.Func{System.Type,System.Type,Cqrs.Bus.IHandlerRegistrar}
  parent: System
  definition: System.Func`3
  name: Func<Type, Type, IHandlerRegistrar>
  nameWithType: Func<Type, Type, IHandlerRegistrar>
  fullName: System.Func<System.Type, System.Type, Cqrs.Bus.IHandlerRegistrar>
  nameWithType.vb: Func(Of Type, Type, IHandlerRegistrar)
  fullName.vb: System.Func(Of System.Type, System.Type, Cqrs.Bus.IHandlerRegistrar)
  name.vb: Func(Of Type, Type, IHandlerRegistrar)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Bus.IHandlerRegistrar
    name: IHandlerRegistrar
    nameWithType: IHandlerRegistrar
    fullName: Cqrs.Bus.IHandlerRegistrar
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Bus.IHandlerRegistrar
    name: IHandlerRegistrar
    nameWithType: IHandlerRegistrar
    fullName: Cqrs.Bus.IHandlerRegistrar
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  isExternal: false
  name: GetCommandHandlerRegistrar
  nameWithType: BusRegistrar.GetCommandHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
- uid: Cqrs.Configuration.BusRegistrar
  commentId: T:Cqrs.Configuration.BusRegistrar
  parent: Cqrs.Configuration
  isExternal: false
  name: BusRegistrar
  nameWithType: BusRegistrar
  fullName: Cqrs.Configuration.BusRegistrar
- uid: Cqrs.Configuration.BusRegistrar.#ctor*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.#ctor
  isExternal: false
  name: BusRegistrar
  nameWithType: BusRegistrar.BusRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.BusRegistrar
- uid: Cqrs.Events.IEventHandler
  commentId: T:Cqrs.Events.IEventHandler
  parent: Cqrs.Events
  isExternal: false
  name: IEventHandler
  nameWithType: IEventHandler
  fullName: Cqrs.Events.IEventHandler
- uid: Cqrs.Commands.ICommandHandler`2
  commentId: T:Cqrs.Commands.ICommandHandler`2
  isExternal: false
  name: ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType: ICommandHandler<TAuthenticationToken, TCommand>
  fullName: Cqrs.Commands.ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  fullName.vb: Cqrs.Commands.ICommandHandler(Of TAuthenticationToken, TCommand)
  name.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Configuration.BusRegistrar.Register*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.Register
  isExternal: false
  name: Register
  nameWithType: BusRegistrar.Register
  fullName: Cqrs.Configuration.BusRegistrar.Register
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Messages.IHandler
  commentId: T:Cqrs.Messages.IHandler
  parent: Cqrs.Messages
  isExternal: false
  name: IHandler
  nameWithType: IHandler
  fullName: Cqrs.Messages.IHandler
- uid: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  isExternal: true
  name: ResolveEventHandlerInterface(Type)
  nameWithType: BusRegistrar.ResolveEventHandlerInterface(Type)
  fullName: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
  spec.csharp:
  - uid: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
    name: ResolveEventHandlerInterface
    nameWithType: BusRegistrar.ResolveEventHandlerInterface
    fullName: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface(System.Type)
    name: ResolveEventHandlerInterface
    nameWithType: BusRegistrar.ResolveEventHandlerInterface
    fullName: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  commentId: M:Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  parent: Cqrs.Configuration.BusRegistrar
  isExternal: true
  name: ResolveCommandHandlerInterface(Type)
  nameWithType: BusRegistrar.ResolveCommandHandlerInterface(Type)
  fullName: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
  spec.csharp:
  - uid: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
    name: ResolveCommandHandlerInterface
    nameWithType: BusRegistrar.ResolveCommandHandlerInterface
    fullName: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface(System.Type)
    name: ResolveCommandHandlerInterface
    nameWithType: BusRegistrar.ResolveCommandHandlerInterface
    fullName: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}}
  commentId: T:System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}}
  parent: System
  definition: System.Func`2
  name: Func<Type, IEnumerable<Type>>
  nameWithType: Func<Type, IEnumerable<Type>>
  fullName: System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>>
  nameWithType.vb: Func(Of Type, IEnumerable(Of Type))
  fullName.vb: System.Func(Of System.Type, System.Collections.Generic.IEnumerable(Of System.Type))
  name.vb: Func(Of Type, IEnumerable(Of Type))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  commentId: P:Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
  parent: Cqrs.Configuration.BusRegistrar
  isExternal: false
  name: GetEventHandlerRegistrar
  nameWithType: BusRegistrar.GetEventHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetEventHandlerRegistrar
- uid: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  commentId: P:Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
  parent: Cqrs.Configuration.BusRegistrar
  isExternal: false
  name: GetCommandHandlerRegistrar
  nameWithType: BusRegistrar.GetCommandHandlerRegistrar
  fullName: Cqrs.Configuration.BusRegistrar.GetCommandHandlerRegistrar
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Cqrs.Configuration.BusRegistrar.InvokeHandler*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.InvokeHandler
  isExternal: false
  name: InvokeHandler
  nameWithType: BusRegistrar.InvokeHandler
  fullName: Cqrs.Configuration.BusRegistrar.InvokeHandler
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Cqrs.Configuration.HandlerDelegate
  commentId: T:Cqrs.Configuration.HandlerDelegate
  parent: Cqrs.Configuration
  isExternal: false
  name: HandlerDelegate
  nameWithType: HandlerDelegate
  fullName: Cqrs.Configuration.HandlerDelegate
- uid: Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate
  isExternal: false
  name: InvokeHandlerDelegate
  nameWithType: BusRegistrar.InvokeHandlerDelegate
  fullName: Cqrs.Configuration.BusRegistrar.InvokeHandlerDelegate
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Cqrs.Configuration.BusRegistrar.BuildDelegateAction*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.BuildDelegateAction
  isExternal: false
  name: BuildDelegateAction
  nameWithType: BusRegistrar.BuildDelegateAction
  fullName: Cqrs.Configuration.BusRegistrar.BuildDelegateAction
- uid: Cqrs.Configuration.BusRegistrar.BuildExecutorMethod*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.BuildExecutorMethod
  isExternal: false
  name: BuildExecutorMethod
  nameWithType: BusRegistrar.BuildExecutorMethod
  fullName: Cqrs.Configuration.BusRegistrar.BuildExecutorMethod
- uid: Cqrs.Events.IEventHandler`2
  commentId: T:Cqrs.Events.IEventHandler`2
  isExternal: false
  name: IEventHandler<TAuthenticationToken, TEvent>
  nameWithType: IEventHandler<TAuthenticationToken, TEvent>
  fullName: Cqrs.Events.IEventHandler<TAuthenticationToken, TEvent>
  nameWithType.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  fullName.vb: Cqrs.Events.IEventHandler(Of TAuthenticationToken, TEvent)
  name.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface
  isExternal: false
  name: ResolveEventHandlerInterface
  nameWithType: BusRegistrar.ResolveEventHandlerInterface
  fullName: Cqrs.Configuration.BusRegistrar.ResolveEventHandlerInterface
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface*
  commentId: Overload:Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface
  isExternal: false
  name: ResolveCommandHandlerInterface
  nameWithType: BusRegistrar.ResolveCommandHandlerInterface
  fullName: Cqrs.Configuration.BusRegistrar.ResolveCommandHandlerInterface
