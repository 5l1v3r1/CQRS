<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="interfaceCqrs_1_1Commands_1_1ICommandHandler_3_01TAuthenticationToken_00_01in_01TCommand_01_4" kind="interface" prot="public">
    <compoundname>Cqrs::Commands::ICommandHandler&lt; TAuthenticationToken, in TCommand &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IMessageHandler&lt; TCommand &gt;</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1ICommandHandle" prot="public" virt="non-virtual">Cqrs.Commands.ICommandHandle</basecompoundref>
    <derivedcompoundref refid="classCqrs_1_1Commands_1_1DtoCommandHandler_3_01TAuthenticationToken_00_01TDto_01_4" prot="public" virt="non-virtual">Cqrs.Commands.DtoCommandHandler&lt; TAuthenticationToken, TDto &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
      <param>
        <type>in</type>
        <declname>TCommand</declname>
        <defname>TCommand</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>An ICommandHandler{TAuthenticationToken,TCommand} receives an ICommand{TAuthenticationToken} and brokers a result from the appropriate IAggregateRoot{TAuthenticationToken}. &quot;A result&quot; is either a successful application of the command, or an exception. This is the common sequence of steps an ICommandHandler{TAuthenticationToken,TCommand} might follow: </para>    </briefdescription>
    <detaileddescription>
<para>Validate the ICommand{TAuthenticationToken} on its own merits. Ask an IAggregateRoot{TAuthenticationToken} to handle the ICommand{TAuthenticationToken}. If validation is successful, 0..n IEvent{TAuthenticationToken} artefacts (1 is common) are queued for publishing. Attempt to persist the new IEvent{TAuthenticationToken} artefacts. If there&apos;s a concurrency conflict during this step, either give up, or retry things. Dispatch the queued IEvent{TAuthenticationToken} artefacts. </para><para>Should a ICommandHandler{TAuthenticationToken,TCommand} affect one or several IAggregateRoot{TAuthenticationToken}s?</para><para>Only one.</para><para>Do I put logic in ICommandHandler{TAuthenticationToken,TCommand}?</para><para>Yes. Exactly what logic depends on your factoring. The logic for validating the ICommand{TAuthenticationToken} on its own merits always gets executed in the ICommandHandler{TAuthenticationToken,TCommand}, although we recommend refactoring these into an ICommandValidator{TAuthenticationToken,TCommand}. Provided validation is successful we recommend a more functional factoring, where the IAggregateRoot{TAuthenticationToken} exists independently of the ICommandHandler{TAuthenticationToken,TCommand} and the next step would be to load the IAggregateRoot{TAuthenticationToken} from the IUnitOfWork{TAuthenticationToken} and request the IAggregateRoot{TAuthenticationToken} handle the ICommand{TAuthenticationToken} itself. The IUnitOfWork{TAuthenticationToken} should then have uncommitted IEvent{TAuthenticationToken} artefacts as a results of asking the IAggregateRoot{TAuthenticationToken} to handle the ICommand{TAuthenticationToken}. Finally the ICommandHandler{TAuthenticationToken,TCommand} should instruct the IUnitOfWork{TAuthenticationToken} to IUnitOfWork{TAuthenticationToken}.Commit all uncommited IEvent{TAuthenticationToken} artefacts.</para><para>However you have it, the logic boils down to validation and some sequence of steps that lead to the ICommand{TAuthenticationToken} becoming an Exception or IEvent{TAuthenticationToken}(s). If you&apos;re tempted to go beyond this, see the rest of the remarks.</para><para>Can I call a read side (such as a read store, data store or IRepository{TAuthenticationToken}) from my ICommandHandler{TAuthenticationToken,TCommand}?</para><para>No.</para><para>Can I do logging, security, or auditing in my ICommandHandler{TAuthenticationToken,TCommand}?</para><para>Yes. The decorator pattern comes in handy here to separate those concerns neatly.</para><para>How are conflicts between concurrent ICommand{TAuthenticationToken}s handled in the ICommandHandler{TAuthenticationToken,TCommand}?</para><para>The place where the new IEvent{TAuthenticationToken} artefacts for the IAggregateRoot{TAuthenticationToken} are persisted is the only place in the system where we need to worry about concurrency conflicts. The IEventStore{TAuthenticationToken} knows the sequence number of the latest IEvent{TAuthenticationToken} applied on that IAggregateRoot{TAuthenticationToken}, and the ICommandHandler{TAuthenticationToken,TCommand} knows the sequence number of the last IEvent{TAuthenticationToken} it read. If these numbers do not agree, it means some other thread or process got there first. The ICommandHandler{TAuthenticationToken,TCommand} can then load up the events again and make a new attempt.</para><para>Should I do things that have side-effects in the outside world (such as sending email) directly in a ICommandHandler{TAuthenticationToken,TCommand}?</para><para>No, since a concurrency conflict will mean the ICommandHandler{TAuthenticationToken,TCommand} logic will be run again. Do such things in an Apply IEvent{TAuthenticationToken} method in an IAggregateRoot{TAuthenticationToken}. <hruler/>
 Also see <ulink url="http://cqrs.nu/Faq/command-handlers">http://cqrs.nu/Faq/command-handlers</ulink>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1224">
        <label>IMessageHandler&lt; TCommand &gt;</label>
      </node>
      <node id="1225">
        <label>ICommandHandle</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandHandle"/>
        <childnode refid="1226" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1227">
        <label>Cqrs.Commands.DtoCommandHandler&lt; TAuthenticationToken, TDto &gt;</label>
        <link refid="classCqrs_1_1Commands_1_1DtoCommandHandler_3_01TAuthenticationToken_00_01TDto_01_4"/>
        <childnode refid="1223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1226">
        <label>IHandler</label>
        <link refid="interfaceCqrs_1_1Messages_1_1IHandler"/>
      </node>
      <node id="1223">
        <label>Cqrs.Commands.ICommandHandler&lt; TAuthenticationToken, in TCommand &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandHandler_3_01TAuthenticationToken_00_01in_01TCommand_01_4"/>
        <childnode refid="1224" relation="public-inheritance">
        </childnode>
        <childnode refid="1225" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1229">
        <label>IMessageHandler&lt; TCommand &gt;</label>
      </node>
      <node id="1230">
        <label>ICommandHandle</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandHandle"/>
        <childnode refid="1231" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1231">
        <label>IHandler</label>
        <link refid="interfaceCqrs_1_1Messages_1_1IHandler"/>
      </node>
      <node id="1228">
        <label>Cqrs.Commands.ICommandHandler&lt; TAuthenticationToken, in TCommand &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandHandler_3_01TAuthenticationToken_00_01in_01TCommand_01_4"/>
        <childnode refid="1229" relation="public-inheritance">
        </childnode>
        <childnode refid="1230" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/ICommandHandler.cs" line="69" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/ICommandHandler.cs" bodystart="65" bodyend="70"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
