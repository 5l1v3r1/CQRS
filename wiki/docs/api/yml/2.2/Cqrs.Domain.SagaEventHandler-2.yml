### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.SagaEventHandler`2
  commentId: T:Cqrs.Domain.SagaEventHandler`2
  id: SagaEventHandler`2
  parent: Cqrs.Domain
  children:
  - Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  - Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{`0})
  - Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  - Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  - Cqrs.Domain.SagaEventHandler`2.Logger
  - Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  langs:
  - csharp
  - vb
  name: SagaEventHandler<TAuthenticationToken, TSaga>
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SagaEventHandler
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 20
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nA process manager that you can implement <xref href=\"Cqrs.Events.IEventHandler\" data-throw-if-not-resolved=\"false\"></xref> instances on top of.\n"
  example: []
  syntax:
    content: >-
      public abstract class SagaEventHandler<TAuthenticationToken, TSaga>

          where TSaga : ISaga<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public MustInherit Class SagaEventHandler(Of TAuthenticationToken, TSaga As ISaga(Of TAuthenticationToken))
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga)
  name.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
- uid: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  commentId: P:Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  id: SagaUnitOfWork
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: SagaUnitOfWork
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SagaUnitOfWork
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or set the <xref href=\"Cqrs.Domain.ISagaUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ISagaUnitOfWork<TAuthenticationToken> SagaUnitOfWork { get; }
    parameters: []
    return:
      type: Cqrs.Domain.ISagaUnitOfWork{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property SagaUnitOfWork As ISagaUnitOfWork(Of TAuthenticationToken)
  overload: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
- uid: Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  commentId: P:Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 31
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or set the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Domain.SagaEventHandler`2.DependencyResolver*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
- uid: Cqrs.Domain.SagaEventHandler`2.Logger
  commentId: P:Cqrs.Domain.SagaEventHandler`2.Logger
  id: Logger
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 36
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or set the <xref href=\"cdmdotnet.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Domain.SagaEventHandler`2.Logger*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
- uid: Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)'
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: SagaEventHandler(IDependencyResolver, ILogger)
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler(IDependencyResolver, ILogger)
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 41
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nA constructor for the <xref href=\"Cqrs.Domain.Factories.IAggregateFactory\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected SagaEventHandler(IDependencyResolver dependencyResolver, ILogger logger)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected Sub New(dependencyResolver As IDependencyResolver, logger As ILogger)
  overload: Cqrs.Domain.SagaEventHandler`2.#ctor*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler(IDependencyResolver, ILogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger)
- uid: Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{`0})
  commentId: M:Cqrs.Domain.SagaEventHandler`2.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{`0})
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{`0})'
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: SagaEventHandler(IDependencyResolver, ILogger, ISagaUnitOfWork<TAuthenticationToken>)
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler(IDependencyResolver, ILogger, ISagaUnitOfWork<TAuthenticationToken>)
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Domain.ISagaUnitOfWork<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 49
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Domain.SagaEventHandler%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected SagaEventHandler(IDependencyResolver dependencyResolver, ILogger logger, ISagaUnitOfWork<TAuthenticationToken> sagaUnitOfWork)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: sagaUnitOfWork
      type: Cqrs.Domain.ISagaUnitOfWork{{TAuthenticationToken}}
    content.vb: Protected Sub New(dependencyResolver As IDependencyResolver, logger As ILogger, sagaUnitOfWork As ISagaUnitOfWork(Of TAuthenticationToken))
  overload: Cqrs.Domain.SagaEventHandler`2.#ctor*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler(IDependencyResolver, ILogger, ISagaUnitOfWork(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Domain.ISagaUnitOfWork(Of TAuthenticationToken))
  name.vb: SagaEventHandler(IDependencyResolver, ILogger, ISagaUnitOfWork(Of TAuthenticationToken))
- uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  commentId: M:Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  id: GetSaga(System.Guid)
  parent: Cqrs.Domain.SagaEventHandler`2
  langs:
  - csharp
  - vb
  name: GetSaga(Guid)
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga(Guid)
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaEventHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSaga
    path: Framework/Cqrs/Domain/SagaEventHandler.cs
    startLine: 60
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets the <span class=\"typeparamref\">TSaga</span> from the <xref href=\"Cqrs.Domain.SagaEventHandler%602.SagaUnitOfWork\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual TSaga GetSaga(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The identifier of the <span class="typeparamref">TSaga</span> to get.
    return:
      type: '{TSaga}'
    content.vb: Protected Overridable Function GetSaga(id As Guid) As TSaga
  overload: Cqrs.Domain.SagaEventHandler`2.GetSaga*
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga(Guid)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga(System.Guid)
references:
- uid: Cqrs.Events.IEventHandler
  commentId: T:Cqrs.Events.IEventHandler
  parent: Cqrs.Events
  isExternal: false
  name: IEventHandler
  nameWithType: IEventHandler
  fullName: Cqrs.Events.IEventHandler
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.ISagaUnitOfWork`1
  commentId: T:Cqrs.Domain.ISagaUnitOfWork`1
  isExternal: false
  name: ISagaUnitOfWork<TAuthenticationToken>
  nameWithType: ISagaUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaUnitOfWork<TAuthenticationToken>
  nameWithType.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaUnitOfWork(Of TAuthenticationToken)
  name.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork*
  commentId: Overload:Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  isExternal: false
  name: SagaUnitOfWork
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
- uid: Cqrs.Domain.ISagaUnitOfWork{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.ISagaUnitOfWork{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.ISagaUnitOfWork`1
  name: ISagaUnitOfWork<TAuthenticationToken>
  nameWithType: ISagaUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaUnitOfWork<TAuthenticationToken>
  nameWithType.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaUnitOfWork(Of TAuthenticationToken)
  name.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Domain.SagaEventHandler`2.DependencyResolver*
  commentId: Overload:Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Domain.SagaEventHandler`2.Logger*
  commentId: Overload:Cqrs.Domain.SagaEventHandler`2.Logger
  isExternal: false
  name: Logger
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: Cqrs.Domain.SagaEventHandler`2.#ctor*
  commentId: Overload:Cqrs.Domain.SagaEventHandler`2.#ctor
  isExternal: false
  name: SagaEventHandler
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaEventHandler
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaEventHandler
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: Cqrs.Domain.SagaEventHandler`2
  commentId: T:Cqrs.Domain.SagaEventHandler`2
  isExternal: false
  name: SagaEventHandler<TAuthenticationToken, TSaga>
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga)
  name.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
  spec.csharp:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  commentId: P:Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  isExternal: false
  name: SagaUnitOfWork
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
- uid: Cqrs.Domain.SagaEventHandler`2.GetSaga*
  commentId: Overload:Cqrs.Domain.SagaEventHandler`2.GetSaga
  isExternal: false
  name: GetSaga
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
