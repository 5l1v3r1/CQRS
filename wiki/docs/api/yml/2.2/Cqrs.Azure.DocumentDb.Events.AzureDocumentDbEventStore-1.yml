### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  commentId: T:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  id: AzureDocumentDbEventStore`1
  parent: Cqrs.Azure.DocumentDb.Events
  children:
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},ILogger,Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper,Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Guid)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Type,Guid,System.Boolean,System.Int32)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Guid)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Type,Guid,System.Boolean,System.Int32)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync``1(Guid,System.Boolean,System.Int32)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  - Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.UniqueIndexProperties
  langs:
  - csharp
  - vb
  name: AzureDocumentDbEventStore<TAuthenticationToken>
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbEventStore
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 20
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: 'public class AzureDocumentDbEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
    content.vb: >-
      Public Class AzureDocumentDbEventStore(Of TAuthenticationToken)

          Inherits EventStore(Of TAuthenticationToken)

          Implements IEventStore(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Cqrs.Events.EventStore{{TAuthenticationToken}}
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}
  inheritedMembers:
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.CqrsEventStoreStreamNamePattern
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.EventBuilder
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.EventDeserialiser
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.TelemetryHelper
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Logger
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,System.Guid)
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Guid)
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken)
  name.vb: AzureDocumentDbEventStore(Of TAuthenticationToken)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.UniqueIndexProperties
  commentId: F:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.UniqueIndexProperties
  id: UniqueIndexProperties
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: UniqueIndexProperties
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.UniqueIndexProperties
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.UniqueIndexProperties
  type: Field
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: UniqueIndexProperties
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 22
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected readonly string[] UniqueIndexProperties
    return:
      type: System.String[]
    content.vb: Protected ReadOnly UniqueIndexProperties As String()
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).UniqueIndexProperties
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).UniqueIndexProperties
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory
  commentId: P:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory
  id: AzureDocumentDbEventStoreConnectionStringFactory
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbEventStoreConnectionStringFactory
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStoreConnectionStringFactory
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStoreConnectionStringFactory
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbEventStoreConnectionStringFactory
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 24
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected IAzureDocumentDbEventStoreConnectionStringFactory AzureDocumentDbEventStoreConnectionStringFactory { get; }
    parameters: []
    return:
      type: Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory
    content.vb: Protected ReadOnly Property AzureDocumentDbEventStoreConnectionStringFactory As IAzureDocumentDbEventStoreConnectionStringFactory
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStoreConnectionStringFactory
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStoreConnectionStringFactory
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper
  commentId: P:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper
  id: AzureDocumentDbHelper
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbHelper
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbHelper
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbHelper
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 26
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected IAzureDocumentDbHelper AzureDocumentDbHelper { get; }
    parameters: []
    return:
      type: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
    content.vb: Protected ReadOnly Property AzureDocumentDbHelper As IAzureDocumentDbHelper
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},ILogger,Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper,Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},ILogger,Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper,Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)
  id: '#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},ILogger,Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper,Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)'
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IAzureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IAzureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStore(Cqrs.Events.IEventBuilder<TAuthenticationToken>, Cqrs.Events.IEventDeserialiser<TAuthenticationToken>, ILogger, Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper, Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 28
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: public AzureDocumentDbEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IAzureDocumentDbHelper azureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory azureDocumentDbEventStoreConnectionStringFactory)
    parameters:
    - id: eventBuilder
      type: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
    - id: eventDeserialiser
      type: Cqrs.Events.IEventDeserialiser{{TAuthenticationToken}}
    - id: logger
      type: ILogger
    - id: azureDocumentDbHelper
      type: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
    - id: azureDocumentDbEventStoreConnectionStringFactory
      type: Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory
    content.vb: Public Sub New(eventBuilder As IEventBuilder(Of TAuthenticationToken), eventDeserialiser As IEventDeserialiser(Of TAuthenticationToken), logger As ILogger, azureDocumentDbHelper As IAzureDocumentDbHelper, azureDocumentDbEventStoreConnectionStringFactory As IAzureDocumentDbEventStoreConnectionStringFactory)
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), ILogger, IAzureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStore(Cqrs.Events.IEventBuilder(Of TAuthenticationToken), Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken), ILogger, Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper, Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory)
  name.vb: AzureDocumentDbEventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), ILogger, IAzureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Type,Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Type,Guid,System.Boolean,System.Int32)
  id: Get(Type,Guid,System.Boolean,System.Int32)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.Get(Type, Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 35
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null)
    parameters:
    - id: aggregateRootType
      type: Type
    - id: aggregateId
      type: Guid
    - id: useLastEventOnly
      type: System.Boolean
    - id: fromVersion
      type: System.Int32
    return:
      type: IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Overrides Function Get(aggregateRootType As Type, aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = Nothing) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).Get(Type, Guid, System.Boolean, System.Int32)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Guid)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get(Guid)
  id: Get(Guid)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Guid)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.Get(Guid)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 40
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: public override IEnumerable<EventData> Get(Guid correlationId)
    parameters:
    - id: correlationId
      type: Guid
    return:
      type: IEnumerable{Cqrs.Events.EventData}
    content.vb: Public Overrides Function Get(correlationId As Guid) As IEnumerable(Of EventData)
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).Get(Guid)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).Get(Guid)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync``1(Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync``1(Guid,System.Boolean,System.Int32)
  id: GetAsync``1(Guid,System.Boolean,System.Int32)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: GetAsync<T>(Guid, Boolean, Int32)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync<T>(Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetAsync
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 45
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected Task<IEnumerable<IEvent<TAuthenticationToken>>> GetAsync<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null)
    parameters:
    - id: aggregateId
      type: Guid
    - id: useLastEventOnly
      type: System.Boolean
    - id: fromVersion
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: Task{IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}}
    content.vb: Protected Function GetAsync(Of T)(aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = Nothing) As Task(Of IEnumerable(Of IEvent(Of TAuthenticationToken)))
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Of T)(Guid, Boolean, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Of T)(Guid, System.Boolean, System.Int32)
  name.vb: GetAsync(Of T)(Guid, Boolean, Int32)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Type,Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Type,Guid,System.Boolean,System.Int32)
  id: GetAsync(Type,Guid,System.Boolean,System.Int32)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: GetAsync(Type, Guid, Boolean, Int32)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync(Type, Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetAsync
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 50
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected Task<IEnumerable<IEvent<TAuthenticationToken>>> GetAsync(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null)
    parameters:
    - id: aggregateRootType
      type: Type
    - id: aggregateId
      type: Guid
    - id: useLastEventOnly
      type: System.Boolean
    - id: fromVersion
      type: System.Int32
    return:
      type: Task{IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}}
    content.vb: Protected Function GetAsync(aggregateRootType As Type, aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = Nothing) As Task(Of IEnumerable(Of IEvent(Of TAuthenticationToken)))
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Type, Guid, Boolean, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Type, Guid, System.Boolean, System.Int32)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Guid)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync(Guid)
  id: GetAsync(Guid)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: GetAsync(Guid)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync(Guid)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync(Guid)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetAsync
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 73
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected Task<IEnumerable<EventData>> GetAsync(Guid correlationId)
    parameters:
    - id: correlationId
      type: Guid
    return:
      type: Task{IEnumerable{Cqrs.Events.EventData}}
    content.vb: Protected Function GetAsync(correlationId As Guid) As Task(Of IEnumerable(Of EventData))
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Guid)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync(Guid)
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  id: PersistEvent(Cqrs.Events.EventData)
  parent: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1
  langs:
  - csharp
  - vb
  name: PersistEvent(EventData)
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PersistEvent
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Events/AzureDocumentDbEventStore.cs
    startLine: 94
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Events
  syntax:
    content: protected override void PersistEvent(EventData eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.EventData
    content.vb: Protected Overrides Sub PersistEvent(eventData As EventData)
  overridden: Cqrs.Events.EventStore{{TAuthenticationToken}}.PersistEvent(Cqrs.Events.EventData)
  overload: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent*
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).PersistEvent(EventData)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
references:
- uid: Cqrs.Azure.DocumentDb.Events
  commentId: N:Cqrs.Azure.DocumentDb.Events
  isExternal: false
  name: Cqrs.Azure.DocumentDb.Events
  nameWithType: Cqrs.Azure.DocumentDb.Events
  fullName: Cqrs.Azure.DocumentDb.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.EventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.EventStore`1
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.CqrsEventStoreStreamNamePattern
  commentId: F:Cqrs.Events.EventStore{`0}.CqrsEventStoreStreamNamePattern
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  name: CqrsEventStoreStreamNamePattern
  nameWithType: EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  nameWithType.vb: EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.EventBuilder
  commentId: P:Cqrs.Events.EventStore{`0}.EventBuilder
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.EventBuilder
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.EventDeserialiser
  commentId: P:Cqrs.Events.EventStore{`0}.EventDeserialiser
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.EventDeserialiser
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventDeserialiser
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.TelemetryHelper
  commentId: P:Cqrs.Events.EventStore{`0}.TelemetryHelper
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.TelemetryHelper
  name: TelemetryHelper
  nameWithType: EventStore<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.TelemetryHelper
  nameWithType.vb: EventStore(Of TAuthenticationToken).TelemetryHelper
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).TelemetryHelper
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Logger
  commentId: P:Cqrs.Events.EventStore{`0}.Logger
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Logger
  name: Logger
  nameWithType: EventStore<TAuthenticationToken>.Logger
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Logger
  nameWithType.vb: EventStore(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Logger
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.Save``1(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: EventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  name: GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,System.Guid)
  commentId: M:Cqrs.Events.EventStore{`0}.GenerateStreamName(System.Type,System.Guid)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  name: GenerateStreamName(Type, Guid)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.Save(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore{`0}.Get``1(System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: EventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore{`0}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Guid)
  commentId: M:Cqrs.Events.EventStore{`0}.Get(System.Guid)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get(System.Guid)
  name: Get(Guid)
  nameWithType: EventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events.EventStore`1
  commentId: T:Cqrs.Events.EventStore`1
  isExternal: false
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  commentId: F:Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  isExternal: false
  name: CqrsEventStoreStreamNamePattern
  nameWithType: EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  nameWithType.vb: EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
- uid: Cqrs.Events.EventStore`1.EventBuilder
  commentId: P:Cqrs.Events.EventStore`1.EventBuilder
  isExternal: false
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.Events.EventStore`1.EventDeserialiser
  commentId: P:Cqrs.Events.EventStore`1.EventDeserialiser
  isExternal: false
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventDeserialiser
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.Events.EventStore`1.TelemetryHelper
  commentId: P:Cqrs.Events.EventStore`1.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: EventStore<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.TelemetryHelper
  nameWithType.vb: EventStore(Of TAuthenticationToken).TelemetryHelper
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).TelemetryHelper
- uid: Cqrs.Events.EventStore`1.Logger
  commentId: P:Cqrs.Events.EventStore`1.Logger
  isExternal: false
  name: Logger
  nameWithType: EventStore<TAuthenticationToken>.Logger
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Logger
  nameWithType.vb: EventStore(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Logger
- uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: EventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  commentId: M:Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  isExternal: true
  name: GenerateStreamName(Type, Guid)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: EventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get(System.Guid)
  commentId: M:Cqrs.Events.EventStore`1.Get(System.Guid)
  isExternal: true
  name: Get(Guid)
  nameWithType: EventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbEventStoreConnectionStringFactory
  isExternal: false
  name: AzureDocumentDbEventStoreConnectionStringFactory
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStoreConnectionStringFactory
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStoreConnectionStringFactory
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStoreConnectionStringFactory
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStoreConnectionStringFactory
- uid: Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory
  commentId: T:Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory
  parent: Cqrs.Azure.DocumentDb.Events
  isExternal: false
  name: IAzureDocumentDbEventStoreConnectionStringFactory
  nameWithType: IAzureDocumentDbEventStoreConnectionStringFactory
  fullName: Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.AzureDocumentDbHelper
  isExternal: false
  name: AzureDocumentDbHelper
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbHelper
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbHelper
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  commentId: T:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  parent: Cqrs.Azure.DocumentDb
  isExternal: false
  name: IAzureDocumentDbHelper
  nameWithType: IAzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb
  commentId: N:Cqrs.Azure.DocumentDb
  isExternal: false
  name: Cqrs.Azure.DocumentDb
  nameWithType: Cqrs.Azure.DocumentDb
  fullName: Cqrs.Azure.DocumentDb
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.#ctor
  isExternal: false
  name: AzureDocumentDbEventStore
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStore
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.AzureDocumentDbEventStore
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStore
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).AzureDocumentDbEventStore
- uid: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventBuilder{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventDeserialiser{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventDeserialiser{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventDeserialiser`1
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.Events.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Cqrs.Events.IEventBuilder`1
  commentId: T:Cqrs.Events.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventDeserialiser`1
  commentId: T:Cqrs.Events.IEventDeserialiser`1
  isExternal: false
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.Events.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.Get
  isExternal: false
  name: Get
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.Get
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.Get
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).Get
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: '!:IEnumerable{Cqrs.Events.IEvent{`0}}'
  definition: IEnumerable`1
  name: IEnumerable<IEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<IEvent<TAuthenticationToken>>
  fullName: IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  fullName.vb: IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{Cqrs.Events.EventData}
  commentId: '!:IEnumerable{Cqrs.Events.EventData}'
  definition: IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: IEnumerable<Cqrs.Events.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: IEnumerable(Of Cqrs.Events.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.GetAsync
  isExternal: false
  name: GetAsync
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.GetAsync
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).GetAsync
- uid: Task{IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}}
  commentId: '!:Task{IEnumerable{Cqrs.Events.IEvent{`0}}}'
  definition: Task`1
  name: Task<IEnumerable<IEvent<TAuthenticationToken>>>
  nameWithType: Task<IEnumerable<IEvent<TAuthenticationToken>>>
  fullName: Task<IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>>
  nameWithType.vb: Task(Of IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Task(Of IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Task(Of IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IEnumerable{Cqrs.Events.EventData}}
  commentId: '!:Task{IEnumerable{Cqrs.Events.EventData}}'
  definition: Task`1
  name: Task<IEnumerable<EventData>>
  nameWithType: Task<IEnumerable<EventData>>
  fullName: Task<IEnumerable<Cqrs.Events.EventData>>
  nameWithType.vb: Task(Of IEnumerable(Of EventData))
  fullName.vb: Task(Of IEnumerable(Of Cqrs.Events.EventData))
  name.vb: Task(Of IEnumerable(Of EventData))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.Events.EventStore{`0}.PersistEvent(Cqrs.Events.EventData)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  name: PersistEvent(EventData)
  nameWithType: EventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  nameWithType.vb: EventStore(Of TAuthenticationToken).PersistEvent(EventData)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore<TAuthenticationToken>.PersistEvent
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore(Of TAuthenticationToken).PersistEvent
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent*
  commentId: Overload:Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore`1.PersistEvent
  isExternal: false
  name: PersistEvent
  nameWithType: AzureDocumentDbEventStore<TAuthenticationToken>.PersistEvent
  fullName: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore<TAuthenticationToken>.PersistEvent
  nameWithType.vb: AzureDocumentDbEventStore(Of TAuthenticationToken).PersistEvent
  fullName.vb: Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore(Of TAuthenticationToken).PersistEvent
- uid: Cqrs.Events.EventData
  commentId: T:Cqrs.Events.EventData
  parent: Cqrs.Events
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Cqrs.Events.EventData
- uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  isExternal: false
  name: PersistEvent(EventData)
  nameWithType: EventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  nameWithType.vb: EventStore(Of TAuthenticationToken).PersistEvent(EventData)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore<TAuthenticationToken>.PersistEvent
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore(Of TAuthenticationToken).PersistEvent
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
