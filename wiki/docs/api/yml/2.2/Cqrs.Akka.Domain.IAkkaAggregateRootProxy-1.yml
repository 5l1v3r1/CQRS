### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  commentId: T:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  id: IAkkaAggregateRootProxy`1
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  - Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  langs:
  - csharp
  - vb
  name: IAkkaAggregateRootProxy<TAggregate>
  nameWithType: IAkkaAggregateRootProxy<TAggregate>
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>
  type: Interface
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IAkkaAggregateRootProxy
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
    startLine: 12
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public interface IAkkaAggregateRootProxy<out TAggregate>
    typeParameters:
    - id: TAggregate
    content.vb: Public Interface IAkkaAggregateRootProxy(Of Out TAggregate)
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate)
  name.vb: IAkkaAggregateRootProxy(Of TAggregate)
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  id: ActorReference
  parent: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  langs:
  - csharp
  - vb
  name: ActorReference
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.ActorReference
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ActorReference
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
    startLine: 14
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: IActorRef ActorReference { get; }
    parameters: []
    return:
      type: Akka.Actor.IActorRef
    content.vb: ReadOnly Property ActorReference As IActorRef
  overload: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference*
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).ActorReference
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).ActorReference
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  id: Aggregate
  parent: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  langs:
  - csharp
  - vb
  name: Aggregate
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.Aggregate
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.Aggregate
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Aggregate
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRootProxy.cs
    startLine: 16
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: TAggregate Aggregate { get; }
    parameters: []
    return:
      type: '{TAggregate}'
    content.vb: ReadOnly Property Aggregate As TAggregate
  overload: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate*
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).Aggregate
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).Aggregate
references:
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference*
  commentId: Overload:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.ActorReference
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).ActorReference
- uid: Akka.Actor.IActorRef
  commentId: T:Akka.Actor.IActorRef
  parent: Akka.Actor
  isExternal: true
  name: IActorRef
  nameWithType: IActorRef
  fullName: Akka.Actor.IActorRef
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate*
  commentId: Overload:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  isExternal: false
  name: Aggregate
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.Aggregate
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.Aggregate
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).Aggregate
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).Aggregate
- uid: '{TAggregate}'
  commentId: '!:TAggregate'
  definition: TAggregate
  name: TAggregate
  nameWithType: TAggregate
  fullName: TAggregate
- uid: TAggregate
  isExternal: false
  name: TAggregate
  nameWithType: TAggregate
  fullName: TAggregate
