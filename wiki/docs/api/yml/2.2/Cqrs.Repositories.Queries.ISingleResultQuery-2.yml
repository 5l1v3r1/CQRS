### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  id: ISingleResultQuery`2
  parent: Cqrs.Repositories.Queries
  children: []
  langs:
  - csharp
  - vb
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/ISingleResultQuery.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ISingleResultQuery
    path: Framework/Cqrs/Repositories/Queries/ISingleResultQuery.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA query that will produce a result that is a single <span class=\"typeparamref\">TData</span> item.\n"
  example: []
  syntax:
    content: 'public interface ISingleResultQuery<TQueryStrategy, out TData> : IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<TData> where TQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref>.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of result data.
    content.vb: >-
      Public Interface ISingleResultQuery(Of TQueryStrategy As IQueryStrategy, Out TData)

          Inherits IQueryWithStrategy(Of TQueryStrategy), IQueryWithResults(Of TData)
  inheritedMembers:
  - Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}.QueryStrategy
  - Cqrs.Repositories.Queries.IQueryWithResults{{TData}}.Result
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
references:
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}.QueryStrategy
  commentId: P:Cqrs.Repositories.Queries.IQueryWithStrategy{`0}.QueryStrategy
  parent: Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}
  definition: Cqrs.Repositories.Queries.IQueryWithStrategy`1.QueryStrategy
  name: QueryStrategy
  nameWithType: IQueryWithStrategy<TQueryStrategy>.QueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>.QueryStrategy
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy).QueryStrategy
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy).QueryStrategy
- uid: Cqrs.Repositories.Queries.IQueryWithResults{{TData}}.Result
  commentId: P:Cqrs.Repositories.Queries.IQueryWithResults{`1}.Result
  parent: Cqrs.Repositories.Queries.IQueryWithResults{{TData}}
  definition: Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  name: Result
  nameWithType: IQueryWithResults<TData>.Result
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TData>.Result
  nameWithType.vb: IQueryWithResults(Of TData).Result
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TData).Result
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1.QueryStrategy
  commentId: P:Cqrs.Repositories.Queries.IQueryWithStrategy`1.QueryStrategy
  isExternal: false
  name: QueryStrategy
  nameWithType: IQueryWithStrategy<TQueryStrategy>.QueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>.QueryStrategy
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy).QueryStrategy
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy).QueryStrategy
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}
  commentId: T:Cqrs.Repositories.Queries.IQueryWithStrategy{`0}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.IQueryWithStrategy`1
  name: IQueryWithStrategy<TQueryStrategy>
  nameWithType: IQueryWithStrategy<TQueryStrategy>
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy)
  name.vb: IQueryWithStrategy(Of TQueryStrategy)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  commentId: P:Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  isExternal: false
  name: Result
  nameWithType: IQueryWithResults<TResult>.Result
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>.Result
  nameWithType.vb: IQueryWithResults(Of TResult).Result
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult).Result
- uid: Cqrs.Repositories.Queries.IQueryWithResults{{TData}}
  commentId: T:Cqrs.Repositories.Queries.IQueryWithResults{`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.IQueryWithResults`1
  name: IQueryWithResults<TData>
  nameWithType: IQueryWithResults<TData>
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TData>
  nameWithType.vb: IQueryWithResults(Of TData)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TData)
  name.vb: IQueryWithResults(Of TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
  commentId: T:Cqrs.Repositories.Queries.IQueryWithStrategy`1
  isExternal: false
  name: IQueryWithStrategy<TQueryStrategy>
  nameWithType: IQueryWithStrategy<TQueryStrategy>
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy)
  name.vb: IQueryWithStrategy(Of TQueryStrategy)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1
  commentId: T:Cqrs.Repositories.Queries.IQueryWithResults`1
  isExternal: false
  name: IQueryWithResults<TResult>
  nameWithType: IQueryWithResults<TResult>
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>
  nameWithType.vb: IQueryWithResults(Of TResult)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult)
  name.vb: IQueryWithResults(Of TResult)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
