### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.IQueryFactory
  commentId: T:Cqrs.Repositories.Queries.IQueryFactory
  id: IQueryFactory
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  - Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  langs:
  - csharp
  - vb
  name: IQueryFactory
  nameWithType: IQueryFactory
  fullName: Cqrs.Repositories.Queries.IQueryFactory
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IQueryFactory
    path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA factory to create new instances of <xref href=\"Cqrs.Repositories.Queries.ResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface IQueryFactory
    content.vb: Public Interface IQueryFactory
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  id: CreateNewSingleResultQuery``2
  parent: Cqrs.Repositories.Queries.IQueryFactory
  langs:
  - csharp
  - vb
  name: CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  nameWithType: IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateNewSingleResultQuery
    path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreates a new <xref href=\"Cqrs.Repositories.Queries.ISingleResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'ISingleResultQuery<TUserQueryStrategy, TData> CreateNewSingleResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TUserQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref> it will use.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data the <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> will operate on.
    return:
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TUserQueryStrategy},{TData}}
    content.vb: Function CreateNewSingleResultQuery(Of TUserQueryStrategy As IQueryStrategy, TData) As ISingleResultQuery(Of TUserQueryStrategy, TData)
  overload: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery*
  nameWithType.vb: IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  fullName.vb: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  id: CreateNewCollectionResultQuery``2
  parent: Cqrs.Repositories.Queries.IQueryFactory
  langs:
  - csharp
  - vb
  name: CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  nameWithType: IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateNewCollectionResultQuery
    path: Framework/Cqrs/Repositories/Queries/IQueryFactory.cs
    startLine: 30
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreates a new <xref href=\"Cqrs.Repositories.Queries.ICollectionResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'ICollectionResultQuery<TUserQueryStrategy, TData> CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TUserQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref> it will use.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data the <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> will operate on.
    return:
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TUserQueryStrategy},{TData}}
    content.vb: Function CreateNewCollectionResultQuery(Of TUserQueryStrategy As IQueryStrategy, TData) As ICollectionResultQuery(Of TUserQueryStrategy, TData)
  overload: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery*
  nameWithType.vb: IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  fullName.vb: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
references:
- uid: Cqrs.Repositories.Queries.ResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ResultQuery`2
  isExternal: false
  name: ResultQuery<TQueryStrategy, TData>
  nameWithType: ResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData)
  name.vb: ResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery*
  commentId: Overload:Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery
  isExternal: false
  name: CreateNewSingleResultQuery
  nameWithType: IQueryFactory.CreateNewSingleResultQuery
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TUserQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{``0,``1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TUserQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TUserQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TUserQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TUserQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TUserQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TUserQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery`2
  isExternal: false
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery*
  commentId: Overload:Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery
  isExternal: false
  name: CreateNewCollectionResultQuery
  nameWithType: IQueryFactory.CreateNewCollectionResultQuery
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery{{TUserQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery{``0,``1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  name: ICollectionResultQuery<TUserQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TUserQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TUserQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TUserQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TUserQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TUserQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
