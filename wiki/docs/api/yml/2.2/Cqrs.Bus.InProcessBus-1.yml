### YamlMime:ManagedReference
items:
- uid: Cqrs.Bus.InProcessBus`1
  commentId: T:Cqrs.Bus.InProcessBus`1
  id: InProcessBus`1
  parent: Cqrs.Bus
  children:
  - Cqrs.Bus.InProcessBus`1.#ctor(Cqrs.Authentication.IAuthenticationTokenHelper{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Configuration.IConfigurationManager,Cqrs.Bus.IBusHelper)
  - Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper
  - Cqrs.Bus.InProcessBus`1.BusHelper
  - Cqrs.Bus.InProcessBus`1.ConfigurationManager
  - Cqrs.Bus.InProcessBus`1.CorrelationIdHelper
  - Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(``0)
  - Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(System.Collections.Generic.IEnumerable{``0})
  - Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start
  - Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start
  - Cqrs.Bus.InProcessBus`1.DependencyResolver
  - Cqrs.Bus.InProcessBus`1.EventWaits
  - Cqrs.Bus.InProcessBus`1.Logger
  - Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand``1(``0,Cqrs.Bus.RouteHandlerDelegate@)
  - Cqrs.Bus.InProcessBus`1.PrepareCommand``1(``0)
  - Cqrs.Bus.InProcessBus`1.Publish``1(``0)
  - Cqrs.Bus.InProcessBus`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  - Cqrs.Bus.InProcessBus`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  - Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  - Cqrs.Bus.InProcessBus`1.Send``1(``0)
  - Cqrs.Bus.InProcessBus`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Bus.InProcessBus`1.TelemetryHelper
  langs:
  - csharp
  - vb
  name: InProcessBus<TAuthenticationToken>
  nameWithType: InProcessBus<TAuthenticationToken>
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: InProcessBus
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 31
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nAn in process command bus \n(<xref href=\"Cqrs.Commands.ICommandPublisher%601\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Commands.ICommandReceiver%601\" data-throw-if-not-resolved=\"false\"></xref>)\nevent bus\n(<xref href=\"Cqrs.Events.IEventPublisher%601\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Events.IEventHandler%603\" data-throw-if-not-resolved=\"false\"></xref>)\nas well as a <xref href=\"Cqrs.Bus.IEventHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Bus.ICommandHandlerRegistrar\" data-throw-if-not-resolved=\"false\"></xref> that requires no networking.\n"
  example: []
  syntax:
    content: 'public class InProcessBus<TAuthenticationToken> : IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar, ICommandReceiver<TAuthenticationToken>, ICommandReceiver, IEventReceiver<TAuthenticationToken>, IEventReceiver'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class InProcessBus(Of TAuthenticationToken)
          Implements IPublishAndWaitCommandPublisher(Of TAuthenticationToken), ICommandPublisher(Of TAuthenticationToken), IEventPublisher(Of TAuthenticationToken), IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar, ICommandReceiver(Of TAuthenticationToken), ICommandReceiver, IEventReceiver(Of TAuthenticationToken), IEventReceiver
  inheritance:
  - System.Object
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  - Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  - Cqrs.Bus.IEventHandlerRegistrar
  - Cqrs.Bus.ICommandHandlerRegistrar
  - Cqrs.Bus.IHandlerRegistrar
  - Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
  - Cqrs.Commands.ICommandReceiver
  - Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  - Cqrs.Events.IEventReceiver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: InProcessBus(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken)
  name.vb: InProcessBus(Of TAuthenticationToken)
- uid: Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper
  commentId: P:Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper
  id: AuthenticationTokenHelper
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: AuthenticationTokenHelper
  nameWithType: InProcessBus<TAuthenticationToken>.AuthenticationTokenHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.AuthenticationTokenHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AuthenticationTokenHelper
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 47
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Authentication Token Helper\n"
  example: []
  syntax:
    content: protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; }
    parameters: []
    return:
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property AuthenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken)
  overload: Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).AuthenticationTokenHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).AuthenticationTokenHelper
- uid: Cqrs.Bus.InProcessBus`1.CorrelationIdHelper
  commentId: P:Cqrs.Bus.InProcessBus`1.CorrelationIdHelper
  id: CorrelationIdHelper
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: CorrelationIdHelper
  nameWithType: InProcessBus<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.CorrelationIdHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CorrelationIdHelper
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 52
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the CorrelationId Helper\n"
  example: []
  syntax:
    content: protected ICorrelationIdHelper CorrelationIdHelper { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Protected ReadOnly Property CorrelationIdHelper As ICorrelationIdHelper
  overload: Cqrs.Bus.InProcessBus`1.CorrelationIdHelper*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).CorrelationIdHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Bus.InProcessBus`1.DependencyResolver
  commentId: P:Cqrs.Bus.InProcessBus`1.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: InProcessBus<TAuthenticationToken>.DependencyResolver
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Dependency Resolver\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Bus.InProcessBus`1.DependencyResolver*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).DependencyResolver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).DependencyResolver
- uid: Cqrs.Bus.InProcessBus`1.Logger
  commentId: P:Cqrs.Bus.InProcessBus`1.Logger
  id: Logger
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: InProcessBus<TAuthenticationToken>.Logger
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 62
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Logger\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Bus.InProcessBus`1.Logger*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Logger
- uid: Cqrs.Bus.InProcessBus`1.ConfigurationManager
  commentId: P:Cqrs.Bus.InProcessBus`1.ConfigurationManager
  id: ConfigurationManager
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ConfigurationManager
  nameWithType: InProcessBus<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigurationManager
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 67
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Configuration Manager\n"
  example: []
  syntax:
    content: protected IConfigurationManager ConfigurationManager { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Protected ReadOnly Property ConfigurationManager As IConfigurationManager
  overload: Cqrs.Bus.InProcessBus`1.ConfigurationManager*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ConfigurationManager
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Bus.InProcessBus`1.BusHelper
  commentId: P:Cqrs.Bus.InProcessBus`1.BusHelper
  id: BusHelper
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: BusHelper
  nameWithType: InProcessBus<TAuthenticationToken>.BusHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.BusHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BusHelper
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 72
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Bus Helper\n"
  example: []
  syntax:
    content: protected IBusHelper BusHelper { get; }
    parameters: []
    return:
      type: Cqrs.Bus.IBusHelper
    content.vb: Protected ReadOnly Property BusHelper As IBusHelper
  overload: Cqrs.Bus.InProcessBus`1.BusHelper*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).BusHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).BusHelper
- uid: Cqrs.Bus.InProcessBus`1.EventWaits
  commentId: P:Cqrs.Bus.InProcessBus`1.EventWaits
  id: EventWaits
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: EventWaits
  nameWithType: InProcessBus<TAuthenticationToken>.EventWaits
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.EventWaits
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventWaits
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 77
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the current list of events waiting to be evaluated for <xref href=\"Cqrs.Bus.InProcessBus%601.PublishAndWait%60%602(%60%600%2cCqrs.Events.IEventReceiver%7b%600%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected IDictionary<Guid, IList<IEvent<TAuthenticationToken>>> EventWaits { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}}
    content.vb: Protected ReadOnly Property EventWaits As IDictionary(Of Guid, IList(Of IEvent(Of TAuthenticationToken)))
  overload: Cqrs.Bus.InProcessBus`1.EventWaits*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).EventWaits
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).EventWaits
- uid: Cqrs.Bus.InProcessBus`1.TelemetryHelper
  commentId: P:Cqrs.Bus.InProcessBus`1.TelemetryHelper
  id: TelemetryHelper
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: TelemetryHelper
  nameWithType: InProcessBus<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.TelemetryHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TelemetryHelper
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 82
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets or sets the Telemetry Helper\n"
  example: []
  syntax:
    content: protected ITelemetryHelper TelemetryHelper { get; set; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ITelemetryHelper
    content.vb: Protected Property TelemetryHelper As ITelemetryHelper
  overload: Cqrs.Bus.InProcessBus`1.TelemetryHelper*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).TelemetryHelper
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).TelemetryHelper
- uid: Cqrs.Bus.InProcessBus`1.#ctor(Cqrs.Authentication.IAuthenticationTokenHelper{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Configuration.IConfigurationManager,Cqrs.Bus.IBusHelper)
  commentId: M:Cqrs.Bus.InProcessBus`1.#ctor(Cqrs.Authentication.IAuthenticationTokenHelper{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Configuration.IConfigurationManager,Cqrs.Bus.IBusHelper)
  id: '#ctor(Cqrs.Authentication.IAuthenticationTokenHelper{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Configuration.IConfigurationManager,Cqrs.Bus.IBusHelper)'
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: InProcessBus(IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, IDependencyResolver, ILogger, IConfigurationManager, IBusHelper)
  nameWithType: InProcessBus<TAuthenticationToken>.InProcessBus(IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, IDependencyResolver, ILogger, IConfigurationManager, IBusHelper)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.InProcessBus(Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>, cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Configuration.IConfigurationManager, Cqrs.Bus.IBusHelper)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 92
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nInstantiates a new instance of the <xref href=\"Cqrs.Bus.InProcessBus%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public InProcessBus(IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, IDependencyResolver dependencyResolver, ILogger logger, IConfigurationManager configurationManager, IBusHelper busHelper)
    parameters:
    - id: authenticationTokenHelper
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    - id: correlationIdHelper
      type: cdmdotnet.Logging.ICorrelationIdHelper
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: configurationManager
      type: Cqrs.Configuration.IConfigurationManager
    - id: busHelper
      type: Cqrs.Bus.IBusHelper
    content.vb: Public Sub New(authenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken), correlationIdHelper As ICorrelationIdHelper, dependencyResolver As IDependencyResolver, logger As ILogger, configurationManager As IConfigurationManager, busHelper As IBusHelper)
  overload: Cqrs.Bus.InProcessBus`1.#ctor*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).InProcessBus(IAuthenticationTokenHelper(Of TAuthenticationToken), ICorrelationIdHelper, IDependencyResolver, ILogger, IConfigurationManager, IBusHelper)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).InProcessBus(Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken), cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Configuration.IConfigurationManager, Cqrs.Bus.IBusHelper)
  name.vb: InProcessBus(IAuthenticationTokenHelper(Of TAuthenticationToken), ICorrelationIdHelper, IDependencyResolver, ILogger, IConfigurationManager, IBusHelper)
- uid: Cqrs.Bus.InProcessBus`1.PrepareCommand``1(``0)
  commentId: M:Cqrs.Bus.InProcessBus`1.PrepareCommand``1(``0)
  id: PrepareCommand``1(``0)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PrepareCommand<TCommand>(TCommand)
  nameWithType: InProcessBus<TAuthenticationToken>.PrepareCommand<TCommand>(TCommand)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PrepareCommand<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareCommand
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 112
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSets the\n<xref href=\"Cqrs.Messages.IMessageWithAuthenticationToken%601.AuthenticationToken\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Cqrs.Messages.IMessage.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Cqrs.Messages.IMessage.OriginatingFramework\" data-throw-if-not-resolved=\"false\"></xref> to &quot;Built-In&quot; and\nadds a value of &quot;Built-In&quot; to the <xref href=\"Cqrs.Messages.IMessage.Frameworks\" data-throw-if-not-resolved=\"false\"></xref>\nif not already done so\n"
  example: []
  syntax:
    content: 'protected virtual void PrepareCommand<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Protected Overridable Sub PrepareCommand(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand)
  overload: Cqrs.Bus.InProcessBus`1.PrepareCommand*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PrepareCommand(Of TCommand)(TCommand)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PrepareCommand(Of TCommand)(TCommand)
  name.vb: PrepareCommand(Of TCommand)(TCommand)
- uid: Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand``1(``0,Cqrs.Bus.RouteHandlerDelegate@)
  commentId: M:Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand``1(``0,Cqrs.Bus.RouteHandlerDelegate@)
  id: PrepareAndValidateCommand``1(``0,Cqrs.Bus.RouteHandlerDelegate@)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PrepareAndValidateCommand<TCommand>(TCommand, out RouteHandlerDelegate)
  nameWithType: InProcessBus<TAuthenticationToken>.PrepareAndValidateCommand<TCommand>(TCommand, out RouteHandlerDelegate)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PrepareAndValidateCommand<TCommand>(TCommand, out Cqrs.Bus.RouteHandlerDelegate)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareAndValidateCommand
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 140
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nLocates a suitable <xref href=\"Cqrs.Commands.ICommandValidator%602\" data-throw-if-not-resolved=\"false\"></xref> to validate the provided <code data-dev-comment-type=\"paramref\">command</code> and validates the provided <code data-dev-comment-type=\"paramref\">command</code> if one is located\nCalls <xref href=\"Cqrs.Bus.InProcessBus%601.PrepareCommand%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref>\nChecks if the provided <code data-dev-comment-type=\"paramref\">command</code> is required to be processed\nLocates a single <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> for the provided <code data-dev-comment-type=\"paramref\">command</code>\n"
  example: []
  syntax:
    content: 'protected virtual bool PrepareAndValidateCommand<TCommand>(TCommand command, out RouteHandlerDelegate commandHandler)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    - id: commandHandler
      type: Cqrs.Bus.RouteHandlerDelegate
    typeParameters:
    - id: TCommand
    return:
      type: System.Boolean
      description: "\nFalse if a suitable <xref href=\"Cqrs.Commands.ICommandValidator%602\" data-throw-if-not-resolved=\"false\"></xref> is located and the provided <code data-dev-comment-type=\"paramref\">command</code> fails validation,\nFalse if no <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> is found but the command isn&apos;t required to be handled,\nTrue otherwise.\n"
    content.vb: Protected Overridable Function PrepareAndValidateCommand(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand, ByRef commandHandler As RouteHandlerDelegate) As Boolean
  overload: Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PrepareAndValidateCommand(Of TCommand)(TCommand, ByRef RouteHandlerDelegate)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PrepareAndValidateCommand(Of TCommand)(TCommand, ByRef Cqrs.Bus.RouteHandlerDelegate)
  name.vb: PrepareAndValidateCommand(Of TCommand)(TCommand, ByRef RouteHandlerDelegate)
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(``0)
  commentId: M:Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(``0)
  id: Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(``0)
  isEii: true
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType: InProcessBus<TAuthenticationToken>.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 189
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> on the command bus.\n"
  example: []
  syntax:
    content: 'void ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Sub Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand) Implements ICommandPublisher(Of TAuthenticationToken).Publish
  overload: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish*
  implements:
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(TCommand)
  name.vb: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(TCommand)
- uid: Cqrs.Bus.InProcessBus`1.Send``1(``0)
  commentId: M:Cqrs.Bus.InProcessBus`1.Send``1(``0)
  id: Send``1(``0)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: Send<TCommand>(TCommand)
  nameWithType: InProcessBus<TAuthenticationToken>.Send<TCommand>(TCommand)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Send<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Send
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 197
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> on the command bus.\n"
  example: []
  syntax:
    content: 'public virtual void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Public Overridable Sub Send(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand)
  overload: Cqrs.Bus.InProcessBus`1.Send*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  name.vb: Send(Of TCommand)(TCommand)
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(System.Collections.Generic.IEnumerable{``0})
  id: Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish``1(System.Collections.Generic.IEnumerable{``0})
  isEii: true
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: InProcessBus<TAuthenticationToken>.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 243
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">commands</code> on the command bus.\n"
  example: []
  syntax:
    content: 'void ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: commands
      type: System.Collections.Generic.IEnumerable{{TCommand}}
    typeParameters:
    - id: TCommand
    content.vb: Sub Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand As ICommand(Of TAuthenticationToken))(commands As IEnumerable(Of TCommand)) Implements ICommandPublisher(Of TAuthenticationToken).Publish
  overload: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish*
  implements:
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish(Of TCommand)(IEnumerable(Of TCommand))
- uid: Cqrs.Bus.InProcessBus`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Bus.InProcessBus`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  id: Send``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: Send<TCommand>(IEnumerable<TCommand>)
  nameWithType: InProcessBus<TAuthenticationToken>.Send<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Send<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Send
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 251
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">commands</code> on the command bus.\n"
  example: []
  syntax:
    content: 'public virtual void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: commands
      type: System.Collections.Generic.IEnumerable{{TCommand}}
    typeParameters:
    - id: TCommand
    content.vb: Public Overridable Sub Send(Of TCommand As ICommand(Of TAuthenticationToken))(commands As IEnumerable(Of TCommand))
  overload: Cqrs.Bus.InProcessBus`1.Send*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Send(Of TCommand)(IEnumerable(Of TCommand))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Send(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Send(Of TCommand)(IEnumerable(Of TCommand))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 300
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 312
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 324
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 339
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits until the specified condition is satisfied an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 352
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 365
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nSends the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.SendAndWait*
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.Publish``1(``0)
  commentId: M:Cqrs.Bus.InProcessBus`1.Publish``1(``0)
  id: Publish``1(``0)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: Publish<TEvent>(TEvent)
  nameWithType: InProcessBus<TAuthenticationToken>.Publish<TEvent>(TEvent)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Publish<TEvent>(TEvent)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 378
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">event</code> on the event bus.\n"
  example: []
  syntax:
    content: 'public virtual void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken>'
    parameters:
    - id: event
      type: '{TEvent}'
    typeParameters:
    - id: TEvent
    content.vb: Public Overridable Sub Publish(Of TEvent As IEvent(Of TAuthenticationToken))(event As TEvent)
  overload: Cqrs.Bus.InProcessBus`1.Publish*
  implements:
  - Cqrs.Events.IEventPublisher{{TAuthenticationToken}}.Publish``1({TEvent})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  name.vb: Publish(Of TEvent)(TEvent)
- uid: Cqrs.Bus.InProcessBus`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Bus.InProcessBus`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  id: Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: Publish<TEvent>(IEnumerable<TEvent>)
  nameWithType: InProcessBus<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Publish<TEvent>(System.Collections.Generic.IEnumerable<TEvent>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 459
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">events</code> on the event bus.\n"
  example: []
  syntax:
    content: 'public virtual void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken>'
    parameters:
    - id: events
      type: System.Collections.Generic.IEnumerable{{TEvent}}
    typeParameters:
    - id: TEvent
    content.vb: Public Overridable Sub Publish(Of TEvent As IEvent(Of TAuthenticationToken))(events As IEnumerable(Of TEvent))
  overload: Cqrs.Bus.InProcessBus`1.Publish*
  implements:
  - Cqrs.Events.IEventPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TEvent}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Publish(Of TEvent)(IEnumerable(Of TEvent))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Publish(Of TEvent)(System.Collections.Generic.IEnumerable(Of TEvent))
  name.vb: Publish(Of TEvent)(IEnumerable(Of TEvent))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 508
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 519
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 530
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 544
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits until the specified condition is satisfied an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 556
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 615
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: InProcessBus<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 631
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event or command handler that will listen and respond to events or commands.\n"
  example: []
  syntax:
    content: 'public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: targetedType
      type: System.Type
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Overridable Sub RegisterHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), targetedType As Type, holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.InProcessBus`1.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Type,System.Boolean)
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
- uid: Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.InProcessBus`1.RegisterHandler``1(System.Action{``0},System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: InProcessBus<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 645
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event or command handler that will listen and respond to events or commands.\n"
  example: []
  syntax:
    content: 'public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Overridable Sub RegisterHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.InProcessBus`1.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  id: RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: InProcessBus<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterGlobalEventHandler
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 654
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event handler that will listen and respond to all events.\n"
  example: []
  syntax:
    content: 'public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Sub RegisterGlobalEventHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler*
  implements:
  - Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{{TMessage}},System.Boolean)
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Bus.InProcessBus`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  id: ReceiveCommand(Cqrs.Commands.ICommand{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ReceiveCommand(ICommand<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ReceiveCommand(Cqrs.Commands.ICommand<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReceiveCommand
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 671
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nReceives a <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> from the command bus.\n"
  example: []
  syntax:
    content: public virtual bool ? ReceiveCommand(ICommand<TAuthenticationToken> command)
    parameters:
    - id: command
      type: Cqrs.Commands.ICommand{{TAuthenticationToken}}
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Overridable Function ReceiveCommand(command As ICommand(Of TAuthenticationToken)) As Boolean?
  overload: Cqrs.Bus.InProcessBus`1.ReceiveCommand*
  implements:
  - Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}.ReceiveCommand(Cqrs.Commands.ICommand{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ReceiveCommand(ICommand(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ReceiveCommand(Cqrs.Commands.ICommand(Of TAuthenticationToken))
  name.vb: ReceiveCommand(ICommand(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  id: ReceiveEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ReceiveEvent(IEvent<TAuthenticationToken>)
  nameWithType: InProcessBus<TAuthenticationToken>.ReceiveEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ReceiveEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReceiveEvent
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 680
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nReceives an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> from the event bus.\n"
  example: []
  syntax:
    content: public virtual bool ? ReceiveEvent(IEvent<TAuthenticationToken> event)
    parameters:
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Overridable Function ReceiveEvent(event As IEvent(Of TAuthenticationToken)) As Boolean?
  overload: Cqrs.Bus.InProcessBus`1.ReceiveEvent*
  implements:
  - Cqrs.Events.IEventReceiver{{TAuthenticationToken}}.ReceiveEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ReceiveEvent(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ReceiveEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ReceiveEvent(IEvent(Of TAuthenticationToken))
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start
  commentId: M:Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start
  id: Cqrs#Commands#ICommandReceiver#Start
  isEii: true
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: ICommandReceiver.Start()
  nameWithType: InProcessBus<TAuthenticationToken>.ICommandReceiver.Start()
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Commands.ICommandReceiver.Start()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Cqrs.Commands.ICommandReceiver.Start
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 686
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  syntax:
    content: void ICommandReceiver.Start()
    content.vb: Sub Cqrs.Commands.ICommandReceiver.Start Implements ICommandReceiver.Start
  overload: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start*
  implements:
  - Cqrs.Commands.ICommandReceiver.Start
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandReceiver.Start()
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandReceiver.Start()
  name.vb: Cqrs.Commands.ICommandReceiver.Start()
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start
  commentId: M:Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start
  id: Cqrs#Events#IEventReceiver#Start
  isEii: true
  parent: Cqrs.Bus.InProcessBus`1
  langs:
  - csharp
  - vb
  name: IEventReceiver.Start()
  nameWithType: InProcessBus<TAuthenticationToken>.IEventReceiver.Start()
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Events.IEventReceiver.Start()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/InProcessBus.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Cqrs.Events.IEventReceiver.Start
    path: Framework/Cqrs/Bus/InProcessBus.cs
    startLine: 695
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  syntax:
    content: void IEventReceiver.Start()
    content.vb: Sub Cqrs.Events.IEventReceiver.Start Implements IEventReceiver.Start
  overload: Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start*
  implements:
  - Cqrs.Events.IEventReceiver.Start
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Events.IEventReceiver.Start()
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Events.IEventReceiver.Start()
  name.vb: Cqrs.Events.IEventReceiver.Start()
references:
- uid: Cqrs.Commands.ICommandPublisher`1
  commentId: T:Cqrs.Commands.ICommandPublisher`1
  isExternal: false
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandReceiver`1
  commentId: T:Cqrs.Commands.ICommandReceiver`1
  isExternal: false
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher`1
  commentId: T:Cqrs.Events.IEventPublisher`1
  isExternal: false
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler`3
  commentId: T:Cqrs.Events.IEventHandler`3
  isExternal: false
  name: IEventHandler<TAuthenticationToken, TTarget, TEvent>
  nameWithType: IEventHandler<TAuthenticationToken, TTarget, TEvent>
  fullName: Cqrs.Events.IEventHandler<TAuthenticationToken, TTarget, TEvent>
  nameWithType.vb: IEventHandler(Of TAuthenticationToken, TTarget, TEvent)
  fullName.vb: Cqrs.Events.IEventHandler(Of TAuthenticationToken, TTarget, TEvent)
  name.vb: IEventHandler(Of TAuthenticationToken, TTarget, TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`3
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`3
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IEventHandlerRegistrar
  commentId: T:Cqrs.Bus.IEventHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IEventHandlerRegistrar
  nameWithType: IEventHandlerRegistrar
  fullName: Cqrs.Bus.IEventHandlerRegistrar
- uid: Cqrs.Bus.ICommandHandlerRegistrar
  commentId: T:Cqrs.Bus.ICommandHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: ICommandHandlerRegistrar
  nameWithType: ICommandHandlerRegistrar
  fullName: Cqrs.Bus.ICommandHandlerRegistrar
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Bus
  commentId: N:Cqrs.Bus
  isExternal: false
  name: Cqrs.Bus
  nameWithType: Cqrs.Bus
  fullName: Cqrs.Bus
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  name: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  name.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandPublisher{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandPublisher`1
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventPublisher{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventPublisher`1
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar
  commentId: T:Cqrs.Bus.IHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IHandlerRegistrar
  nameWithType: IHandlerRegistrar
  fullName: Cqrs.Bus.IHandlerRegistrar
- uid: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandReceiver{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandReceiver`1
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandReceiver
  commentId: T:Cqrs.Commands.ICommandReceiver
  parent: Cqrs.Commands
  isExternal: false
  name: ICommandReceiver
  nameWithType: ICommandReceiver
  fullName: Cqrs.Commands.ICommandReceiver
- uid: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventReceiver{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventReceiver`1
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventReceiver
  commentId: T:Cqrs.Events.IEventReceiver
  parent: Cqrs.Events
  isExternal: false
  name: IEventReceiver
  nameWithType: IEventReceiver
  fullName: Cqrs.Events.IEventReceiver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  commentId: T:Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  isExternal: false
  name: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  name.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Events.IEventReceiver`1
  commentId: T:Cqrs.Events.IEventReceiver`1
  isExternal: false
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.AuthenticationTokenHelper
  isExternal: false
  name: AuthenticationTokenHelper
  nameWithType: InProcessBus<TAuthenticationToken>.AuthenticationTokenHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.AuthenticationTokenHelper
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).AuthenticationTokenHelper
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).AuthenticationTokenHelper
- uid: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper{`0}
  parent: Cqrs.Authentication
  definition: Cqrs.Authentication.IAuthenticationTokenHelper`1
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper`1
  isExternal: false
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Authentication
  commentId: N:Cqrs.Authentication
  isExternal: false
  name: Cqrs.Authentication
  nameWithType: Cqrs.Authentication
  fullName: Cqrs.Authentication
- uid: Cqrs.Bus.InProcessBus`1.CorrelationIdHelper*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: InProcessBus<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).CorrelationIdHelper
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Bus.InProcessBus`1.DependencyResolver*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: InProcessBus<TAuthenticationToken>.DependencyResolver
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.DependencyResolver
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).DependencyResolver
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).DependencyResolver
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Bus.InProcessBus`1.Logger*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Logger
  isExternal: false
  name: Logger
  nameWithType: InProcessBus<TAuthenticationToken>.Logger
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Logger
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Logger
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Bus.InProcessBus`1.ConfigurationManager*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.ConfigurationManager
  isExternal: false
  name: ConfigurationManager
  nameWithType: InProcessBus<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ConfigurationManager
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ConfigurationManager
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.Bus.InProcessBus`1.BusHelper*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.BusHelper
  isExternal: false
  name: BusHelper
  nameWithType: InProcessBus<TAuthenticationToken>.BusHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.BusHelper
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).BusHelper
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).BusHelper
- uid: Cqrs.Bus.IBusHelper
  commentId: T:Cqrs.Bus.IBusHelper
  parent: Cqrs.Bus
  isExternal: false
  name: IBusHelper
  nameWithType: IBusHelper
  fullName: Cqrs.Bus.IBusHelper
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Bus.InProcessBus`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
- uid: Cqrs.Bus.InProcessBus`1.EventWaits*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.EventWaits
  isExternal: false
  name: EventWaits
  nameWithType: InProcessBus<TAuthenticationToken>.EventWaits
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.EventWaits
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).EventWaits
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).EventWaits
- uid: System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, IList<IEvent<TAuthenticationToken>>>
  nameWithType: IDictionary<Guid, IList<IEvent<TAuthenticationToken>>>
  fullName: System.Collections.Generic.IDictionary<System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>>
  nameWithType.vb: IDictionary(Of Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: IDictionary(Of Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Bus.InProcessBus`1.TelemetryHelper*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: InProcessBus<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.TelemetryHelper
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).TelemetryHelper
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).TelemetryHelper
- uid: cdmdotnet.Logging.ITelemetryHelper
  commentId: T:cdmdotnet.Logging.ITelemetryHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ITelemetryHelper
  nameWithType: ITelemetryHelper
  fullName: cdmdotnet.Logging.ITelemetryHelper
- uid: Cqrs.Bus.InProcessBus`1
  commentId: T:Cqrs.Bus.InProcessBus`1
  isExternal: false
  name: InProcessBus<TAuthenticationToken>
  nameWithType: InProcessBus<TAuthenticationToken>
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>
  nameWithType.vb: InProcessBus(Of TAuthenticationToken)
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken)
  name.vb: InProcessBus(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Bus.InProcessBus`1
    name: InProcessBus
    nameWithType: InProcessBus
    fullName: Cqrs.Bus.InProcessBus
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Bus.InProcessBus`1
    name: InProcessBus
    nameWithType: InProcessBus
    fullName: Cqrs.Bus.InProcessBus
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.#ctor*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.#ctor
  isExternal: false
  name: InProcessBus
  nameWithType: InProcessBus<TAuthenticationToken>.InProcessBus
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.InProcessBus
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).InProcessBus
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).InProcessBus
- uid: Cqrs.Messages.IMessageWithAuthenticationToken`1.AuthenticationToken
  commentId: P:Cqrs.Messages.IMessageWithAuthenticationToken`1.AuthenticationToken
  isExternal: false
  name: AuthenticationToken
  nameWithType: IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken
  fullName: Cqrs.Messages.IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken
  nameWithType.vb: IMessageWithAuthenticationToken(Of TAuthenticationToken).AuthenticationToken
  fullName.vb: Cqrs.Messages.IMessageWithAuthenticationToken(Of TAuthenticationToken).AuthenticationToken
- uid: Cqrs.Messages.IMessage.CorrelationId
  commentId: P:Cqrs.Messages.IMessage.CorrelationId
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: CorrelationId
  nameWithType: IMessage.CorrelationId
  fullName: Cqrs.Messages.IMessage.CorrelationId
- uid: Cqrs.Messages.IMessage.OriginatingFramework
  commentId: P:Cqrs.Messages.IMessage.OriginatingFramework
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: OriginatingFramework
  nameWithType: IMessage.OriginatingFramework
  fullName: Cqrs.Messages.IMessage.OriginatingFramework
- uid: Cqrs.Messages.IMessage.Frameworks
  commentId: P:Cqrs.Messages.IMessage.Frameworks
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: Frameworks
  nameWithType: IMessage.Frameworks
  fullName: Cqrs.Messages.IMessage.Frameworks
- uid: Cqrs.Bus.InProcessBus`1.PrepareCommand*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.PrepareCommand
  isExternal: false
  name: PrepareCommand
  nameWithType: InProcessBus<TAuthenticationToken>.PrepareCommand
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PrepareCommand
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PrepareCommand
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PrepareCommand
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: TCommand
  isExternal: false
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Commands.ICommandValidator`2
  commentId: T:Cqrs.Commands.ICommandValidator`2
  isExternal: false
  name: ICommandValidator<TAuthenticationToken, TCommand>
  nameWithType: ICommandValidator<TAuthenticationToken, TCommand>
  fullName: Cqrs.Commands.ICommandValidator<TAuthenticationToken, TCommand>
  nameWithType.vb: ICommandValidator(Of TAuthenticationToken, TCommand)
  fullName.vb: Cqrs.Commands.ICommandValidator(Of TAuthenticationToken, TCommand)
  name.vb: ICommandValidator(Of TAuthenticationToken, TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandValidator`2
    name: ICommandValidator
    nameWithType: ICommandValidator
    fullName: Cqrs.Commands.ICommandValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandValidator`2
    name: ICommandValidator
    nameWithType: ICommandValidator
    fullName: Cqrs.Commands.ICommandValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.PrepareCommand``1(``0)
  commentId: M:Cqrs.Bus.InProcessBus`1.PrepareCommand``1(``0)
- uid: Cqrs.Bus.RouteHandlerDelegate
  commentId: T:Cqrs.Bus.RouteHandlerDelegate
  parent: Cqrs.Bus
  isExternal: false
  name: RouteHandlerDelegate
  nameWithType: RouteHandlerDelegate
  fullName: Cqrs.Bus.RouteHandlerDelegate
- uid: Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.PrepareAndValidateCommand
  isExternal: false
  name: PrepareAndValidateCommand
  nameWithType: InProcessBus<TAuthenticationToken>.PrepareAndValidateCommand
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PrepareAndValidateCommand
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PrepareAndValidateCommand
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PrepareAndValidateCommand
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandPublisher{TAuthenticationToken}#Publish
  isExternal: false
  name: ICommandPublisher<TAuthenticationToken>.Publish
  nameWithType: InProcessBus<TAuthenticationToken>.ICommandPublisher<TAuthenticationToken>.Publish
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
  name.vb: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(``0)
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  isExternal: false
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.Send*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Send
  isExternal: false
  name: Send
  nameWithType: InProcessBus<TAuthenticationToken>.Send
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Send
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Send
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Send
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TCommand}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCommand>
  nameWithType: IEnumerable<TCommand>
  fullName: System.Collections.Generic.IEnumerable<TCommand>
  nameWithType.vb: IEnumerable(Of TCommand)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCommand)
  name.vb: IEnumerable(Of TCommand)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.SendAndWait*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.SendAndWait
  isExternal: false
  name: SendAndWait
  nameWithType: InProcessBus<TAuthenticationToken>.SendAndWait
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.SendAndWait
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).SendAndWait
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).SendAndWait
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: System.Threading.Timeout.Infinite
  commentId: F:System.Threading.Timeout.Infinite
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  nameWithType: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  fullName: System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>
  nameWithType.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent)
  name.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.Publish*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Publish
  isExternal: false
  name: Publish
  nameWithType: InProcessBus<TAuthenticationToken>.Publish
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Publish
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Publish
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Publish
- uid: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}.Publish``1({TEvent})
  commentId: M:Cqrs.Events.IEventPublisher{`0}.Publish``1(``0)
  parent: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
  name: Publish<TEvent>(TEvent)
  nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent)
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent)
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  name.vb: Publish(Of TEvent)(TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
    name: Publish<TEvent>
    nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>
    fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
    name: Publish(Of TEvent)
    nameWithType: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
    fullName: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
  commentId: M:Cqrs.Events.IEventPublisher`1.Publish``1(``0)
  isExternal: false
  name: Publish<TEvent>(TEvent)
  nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent)
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent)
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(TEvent)
  name.vb: Publish(Of TEvent)(TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
    name: Publish<TEvent>
    nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>
    fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(``0)
    name: Publish(Of TEvent)
    nameWithType: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
    fullName: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TEvent}})
  commentId: M:Cqrs.Events.IEventPublisher{`0}.Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  name: Publish<TEvent>(IEnumerable<TEvent>)
  nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>(System.Collections.Generic.IEnumerable<TEvent>)
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(IEnumerable(Of TEvent))
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(System.Collections.Generic.IEnumerable(Of TEvent))
  name.vb: Publish(Of TEvent)(IEnumerable(Of TEvent))
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TEvent>
    nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>
    fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TEvent)
    nameWithType: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
    fullName: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TEvent}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEvent>
  nameWithType: IEnumerable<TEvent>
  fullName: System.Collections.Generic.IEnumerable<TEvent>
  nameWithType.vb: IEnumerable(Of TEvent)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEvent)
  name.vb: IEnumerable(Of TEvent)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Publish<TEvent>(IEnumerable<TEvent>)
  nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>(System.Collections.Generic.IEnumerable<TEvent>)
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(IEnumerable(Of TEvent))
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)(System.Collections.Generic.IEnumerable(Of TEvent))
  name.vb: Publish(Of TEvent)(IEnumerable(Of TEvent))
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TEvent>
    nameWithType: IEventPublisher<TAuthenticationToken>.Publish<TEvent>
    fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>.Publish<TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TEvent)
    nameWithType: IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
    fullName: Cqrs.Events.IEventPublisher(Of TAuthenticationToken).Publish(Of TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.PublishAndWait*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.PublishAndWait
  isExternal: false
  name: PublishAndWait
  nameWithType: InProcessBus<TAuthenticationToken>.PublishAndWait
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.PublishAndWait
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).PublishAndWait
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).PublishAndWait
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  isExternal: false
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.RegisterHandler*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.RegisterHandler
  isExternal: false
  name: RegisterHandler
  nameWithType: InProcessBus<TAuthenticationToken>.RegisterHandler
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.RegisterHandler
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).RegisterHandler
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).RegisterHandler
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TMessage}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: System.Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: System.Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.RegisterGlobalEventHandler
  isExternal: false
  name: RegisterGlobalEventHandler
  nameWithType: InProcessBus<TAuthenticationToken>.RegisterGlobalEventHandler
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.RegisterGlobalEventHandler
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).RegisterGlobalEventHandler
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).RegisterGlobalEventHandler
- uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{{TMessage}},System.Boolean)
  commentId: M:Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.IEventHandlerRegistrar
  definition: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler<TMessage>
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler(Of TMessage)
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  isExternal: true
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler<TMessage>
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler(Of TMessage)
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.ReceiveCommand*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.ReceiveCommand
  isExternal: false
  name: ReceiveCommand
  nameWithType: InProcessBus<TAuthenticationToken>.ReceiveCommand
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ReceiveCommand
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ReceiveCommand
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ReceiveCommand
- uid: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}.ReceiveCommand(Cqrs.Commands.ICommand{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.ICommandReceiver{`0}.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  parent: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  name: ReceiveCommand(ICommand<TAuthenticationToken>)
  nameWithType: ICommandReceiver<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>)
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>.ReceiveCommand(Cqrs.Commands.ICommand<TAuthenticationToken>)
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken).ReceiveCommand(ICommand(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken).ReceiveCommand(Cqrs.Commands.ICommand(Of TAuthenticationToken))
  name.vb: ReceiveCommand(ICommand(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
    name: ReceiveCommand
    nameWithType: ICommandReceiver<TAuthenticationToken>.ReceiveCommand
    fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>.ReceiveCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
    name: ReceiveCommand
    nameWithType: ICommandReceiver(Of TAuthenticationToken).ReceiveCommand
    fullName: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken).ReceiveCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommand{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommand{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommand`1
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  commentId: M:Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
  isExternal: false
  name: ReceiveCommand(ICommand<TAuthenticationToken>)
  nameWithType: ICommandReceiver<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>)
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>.ReceiveCommand(Cqrs.Commands.ICommand<TAuthenticationToken>)
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken).ReceiveCommand(ICommand(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken).ReceiveCommand(Cqrs.Commands.ICommand(Of TAuthenticationToken))
  name.vb: ReceiveCommand(ICommand(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
    name: ReceiveCommand
    nameWithType: ICommandReceiver<TAuthenticationToken>.ReceiveCommand
    fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>.ReceiveCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1.ReceiveCommand(Cqrs.Commands.ICommand{`0})
    name: ReceiveCommand
    nameWithType: ICommandReceiver(Of TAuthenticationToken).ReceiveCommand
    fullName: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken).ReceiveCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.ReceiveEvent*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.ReceiveEvent
  isExternal: false
  name: ReceiveEvent
  nameWithType: InProcessBus<TAuthenticationToken>.ReceiveEvent
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.ReceiveEvent
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).ReceiveEvent
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).ReceiveEvent
- uid: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}.ReceiveEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.IEventReceiver{`0}.ReceiveEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  name: ReceiveEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventReceiver<TAuthenticationToken>.ReceiveEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>.ReceiveEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken).ReceiveEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken).ReceiveEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ReceiveEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
    name: ReceiveEvent
    nameWithType: IEventReceiver<TAuthenticationToken>.ReceiveEvent
    fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>.ReceiveEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
    name: ReceiveEvent
    nameWithType: IEventReceiver(Of TAuthenticationToken).ReceiveEvent
    fullName: Cqrs.Events.IEventReceiver(Of TAuthenticationToken).ReceiveEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: ReceiveEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventReceiver<TAuthenticationToken>.ReceiveEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>.ReceiveEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken).ReceiveEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken).ReceiveEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ReceiveEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
    name: ReceiveEvent
    nameWithType: IEventReceiver<TAuthenticationToken>.ReceiveEvent
    fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>.ReceiveEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1.ReceiveEvent(Cqrs.Events.IEvent{`0})
    name: ReceiveEvent
    nameWithType: IEventReceiver(Of TAuthenticationToken).ReceiveEvent
    fullName: Cqrs.Events.IEventReceiver(Of TAuthenticationToken).ReceiveEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Cqrs#Commands#ICommandReceiver#Start
  isExternal: false
  name: ICommandReceiver.Start
  nameWithType: InProcessBus<TAuthenticationToken>.ICommandReceiver.Start
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Commands.ICommandReceiver.Start
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandReceiver.Start
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Commands.ICommandReceiver.Start
  name.vb: Cqrs.Commands.ICommandReceiver.Start
- uid: Cqrs.Commands.ICommandReceiver.Start
  commentId: M:Cqrs.Commands.ICommandReceiver.Start
  parent: Cqrs.Commands.ICommandReceiver
  isExternal: false
  name: Start()
  nameWithType: ICommandReceiver.Start()
  fullName: Cqrs.Commands.ICommandReceiver.Start()
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver.Start
    name: Start
    nameWithType: ICommandReceiver.Start
    fullName: Cqrs.Commands.ICommandReceiver.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver.Start
    name: Start
    nameWithType: ICommandReceiver.Start
    fullName: Cqrs.Commands.ICommandReceiver.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start*
  commentId: Overload:Cqrs.Bus.InProcessBus`1.Cqrs#Events#IEventReceiver#Start
  isExternal: false
  name: IEventReceiver.Start
  nameWithType: InProcessBus<TAuthenticationToken>.IEventReceiver.Start
  fullName: Cqrs.Bus.InProcessBus<TAuthenticationToken>.Cqrs.Events.IEventReceiver.Start
  nameWithType.vb: InProcessBus(Of TAuthenticationToken).Cqrs.Events.IEventReceiver.Start
  fullName.vb: Cqrs.Bus.InProcessBus(Of TAuthenticationToken).Cqrs.Events.IEventReceiver.Start
  name.vb: Cqrs.Events.IEventReceiver.Start
- uid: Cqrs.Events.IEventReceiver.Start
  commentId: M:Cqrs.Events.IEventReceiver.Start
  parent: Cqrs.Events.IEventReceiver
  isExternal: false
  name: Start()
  nameWithType: IEventReceiver.Start()
  fullName: Cqrs.Events.IEventReceiver.Start()
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver.Start
    name: Start
    nameWithType: IEventReceiver.Start
    fullName: Cqrs.Events.IEventReceiver.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver.Start
    name: Start
    nameWithType: IEventReceiver.Start
    fullName: Cqrs.Events.IEventReceiver.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
