### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  commentId: T:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  id: TableStorageRepository`3
  parent: Cqrs.Azure.BlobStorage.Repositories
  children:
  - Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  - Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load(System.Guid,System.Boolean)
  langs:
  - csharp
  - vb
  name: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TableStorageRepository
    path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
    startLine: 22
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage.Repositories
  summary: "\nProvides basic repository methods for operations with an <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> using Azure Table Storage.\n"
  example: []
  syntax:
    content: 'public class TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> : Repository<TQueryStrategy, TQueryBuilder, TData>, IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : Entity, new ()'
    typeParameters:
    - id: TQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref>.
    - id: TQueryBuilder
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Repositories.Queries.QueryBuilder%602" data-throw-if-not-resolved="false"></xref> that will be used to build queries.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data held in storage.
    content.vb: >-
      Public Class TableStorageRepository(Of TQueryStrategy As IQueryStrategy, TQueryBuilder As QueryBuilder(Of TQueryStrategy, TData), TData As {Entity, New})
          Inherits Repository(Of TQueryStrategy, TQueryBuilder, TData)
          Implements IRepository(Of TQueryStrategy, TData)
  inheritance:
  - System.Object
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  inheritedMembers:
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateDataStoreFunction
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.QueryBuilder
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.TelemetryHelper
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Update({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Delete({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.DeleteAll
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Destroy({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Load(System.Guid,System.Boolean)
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  commentId: M:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  id: '#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)'
  parent: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  langs:
  - csharp
  - vb
  name: TableStorageRepository(Func<IDataStore<TData>>, TQueryBuilder)
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.TableStorageRepository(Func<IDataStore<TData>>, TQueryBuilder)
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.TableStorageRepository(System.Func<Cqrs.DataStores.IDataStore<TData>>, TQueryBuilder)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
    startLine: 30
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage.Repositories
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository%603\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public TableStorageRepository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder)
    parameters:
    - id: createDataStoreFunction
      type: System.Func{Cqrs.DataStores.IDataStore{{TData}}}
    - id: queryBuilder
      type: '{TQueryBuilder}'
    content.vb: Public Sub New(createDataStoreFunction As Func(Of IDataStore(Of TData)), queryBuilder As TQueryBuilder)
  overload: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor*
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).TableStorageRepository(Func(Of IDataStore(Of TData)), TQueryBuilder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).TableStorageRepository(System.Func(Of Cqrs.DataStores.IDataStore(Of TData)), TQueryBuilder)
  name.vb: TableStorageRepository(Func(Of IDataStore(Of TData)), TQueryBuilder)
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load(System.Guid,System.Boolean)
  id: Load(System.Guid,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  langs:
  - csharp
  - vb
  name: Load(Guid, Boolean)
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Azure/Cqrs.Azure.BlobStorage/Repositories/TableStorageRepository.cs
    startLine: 42
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage.Repositories
  summary: "\nLoad the <span class=\"typeparamref\">TData</span> from Azure Table Storage identified by the provided <span class=\"paramref\">rsn</span>.\n"
  example: []
  syntax:
    content: public override TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true)
    parameters:
    - id: rsn
      type: System.Guid
      description: The identifier if the <span class="typeparamref">TData</span> to load.
    - id: throwExceptionOnMissingEntity
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no data is found in storage.
    return:
      type: '{TData}'
    content.vb: Public Overrides Function Load(rsn As Guid, throwExceptionOnMissingEntity As Boolean = True) As TData
  overridden: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Load(System.Guid,System.Boolean)
  overload: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load*
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries.QueryBuilder`2
  commentId: T:Cqrs.Repositories.Queries.QueryBuilder`2
  isExternal: false
  name: QueryBuilder<TQueryStrategy, TData>
  nameWithType: QueryBuilder<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData)
  name.vb: QueryBuilder(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Repositories
  commentId: N:Cqrs.Azure.BlobStorage.Repositories
  isExternal: false
  name: Cqrs.Azure.BlobStorage.Repositories
  nameWithType: Cqrs.Azure.BlobStorage.Repositories
  fullName: Cqrs.Azure.BlobStorage.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  commentId: T:Cqrs.Repositories.Repository{`0,`1,`2}
  parent: Cqrs.Repositories
  definition: Cqrs.Repositories.Repository`3
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.IRepository{`0,`2}
  parent: Cqrs.Repositories
  definition: Cqrs.Repositories.IRepository`2
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.CreateDataStoreFunction
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.QueryBuilder
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.QueryBuilder
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.TelemetryHelper
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.TelemetryHelper
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.TelemetryHelper
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Create(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Create(`2)
  name: Create(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Create(System.Collections.Generic.IEnumerable{`2})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  name: Create(IEnumerable<TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Update({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Update(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Update(`2)
  name: Update(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Delete({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Delete(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Delete(`2)
  name: Delete(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.DeleteAll
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.DeleteAll
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.DeleteAll
  name: DeleteAll()
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Destroy({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Destroy(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Destroy(`2)
  name: Destroy(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Load(System.Guid,System.Boolean)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  name: Load(Guid, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Repository`3
  commentId: T:Cqrs.Repositories.Repository`3
  isExternal: false
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories
  commentId: N:Cqrs.Repositories
  isExternal: false
  name: Cqrs.Repositories
  nameWithType: Cqrs.Repositories
  fullName: Cqrs.Repositories
- uid: Cqrs.Repositories.IRepository`2
  commentId: T:Cqrs.Repositories.IRepository`2
  isExternal: false
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  isExternal: false
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository`3.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository`3.QueryBuilder
  isExternal: false
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories.Repository`3.TelemetryHelper
  commentId: P:Cqrs.Repositories.Repository`3.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: Cqrs.Repositories.Repository`3.Create(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Create(`2)
  isExternal: false
  name: Create(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  commentId: M:Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  isExternal: true
  name: Create(IEnumerable<TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  isExternal: true
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  isExternal: false
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Update(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Update(`2)
  isExternal: false
  name: Update(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Delete(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Delete(`2)
  isExternal: false
  name: Delete(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.DeleteAll
  commentId: M:Cqrs.Repositories.Repository`3.DeleteAll
  isExternal: false
  name: DeleteAll()
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Destroy(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Destroy(`2)
  isExternal: false
  name: Destroy(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  isExternal: true
  name: Load(Guid, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  commentId: M:Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  isExternal: true
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  commentId: T:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  isExternal: false
  name: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
    name: TableStorageRepository
    nameWithType: TableStorageRepository
    fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
    name: TableStorageRepository
    nameWithType: TableStorageRepository
    fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor*
  commentId: Overload:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.#ctor
  isExternal: false
  name: TableStorageRepository
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.TableStorageRepository
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.TableStorageRepository
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).TableStorageRepository
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).TableStorageRepository
- uid: System.Func{Cqrs.DataStores.IDataStore{{TData}}}
  commentId: T:System.Func{Cqrs.DataStores.IDataStore{`2}}
  parent: System
  definition: System.Func`1
  name: Func<IDataStore<TData>>
  nameWithType: Func<IDataStore<TData>>
  fullName: System.Func<Cqrs.DataStores.IDataStore<TData>>
  nameWithType.vb: Func(Of IDataStore(Of TData))
  fullName.vb: System.Func(Of Cqrs.DataStores.IDataStore(Of TData))
  name.vb: Func(Of IDataStore(Of TData))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TQueryBuilder}'
  commentId: '!:TQueryBuilder'
  definition: TQueryBuilder
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TQueryBuilder
  isExternal: false
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load*
  commentId: Overload:Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3.Load
  isExternal: false
  name: Load
  nameWithType: TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.Load
  fullName: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository<TQueryStrategy, TQueryBuilder, TData>.Load
  nameWithType.vb: TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).Load
  fullName.vb: Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository(Of TQueryStrategy, TQueryBuilder, TData).Load
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
