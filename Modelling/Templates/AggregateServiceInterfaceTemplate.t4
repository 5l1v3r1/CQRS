<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass + ", IEventService<" + authenticationTokenType + ">";
else
	baseClass = ": IEventService<" + authenticationTokenType + ">";

// using statements
#>

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Authentication;
using Cqrs.Services;

namespace <#= classNamespace #>.Services
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	<#= GetServiceContractAttribute(this.Element) #>
	public partial interface I<#= className #>Service <#= baseClass #>
	{
<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateServiceMethod")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>

		/// <summary>
		/// Create a new instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		[OperationContract]
		IServiceResponseWithResultData<Entities.<#= className #>Entity> Create<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest);
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateServiceMethod")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>

		/// <summary>
		/// Update an existing instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		[OperationContract]
		IServiceResponseWithResultData<Entities.<#= className #>Entity> Update<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest);
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteServiceMethod")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>

		/// <summary>
		/// Logically delete an existing instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		[OperationContract]
		IServiceResponse Delete<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest);
<#
		}

		IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => !string.IsNullOrWhiteSpace(associationEnd.Name) && associationEnd.TargetElement == this.Element);

		foreach(IAssociation relationship in relationships)
		{
			bool autoGenerated = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
			if (relationshipName.EndsWith("CommandHandler"))
				relationshipName = relationshipName.Substring(0, relationshipName.Length - 14);
#>

		[OperationContract]
		IServiceResponse <#= relationshipName #>(<#
			var methodSignatureParameter = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters> serviceRequest", authenticationTokenType, className, relationshipName);
#><#= methodSignatureParameter #>);
<#
		}
#>
	}
<#

		foreach(IAssociation relationship in relationships)
		{
			bool autoGenerated = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
			if (relationshipName.EndsWith("CommandHandler"))
				relationshipName = relationshipName.Substring(0, relationshipName.Length - 14);
#>

	/// <summary>
	/// The parameters for the <see cref="I<#= className #>Service.<#= relationshipName #>" /> method.
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	<#= GetServiceContractAttribute(this.Element) #>
	public partial class <#= className #><#= relationshipName #>Parameters
	{
<#

			if (!bool.Parse(((INamedElement)relationship.SourceElement).AppliedStereotypes.Single(property => property.Name == "Command").PropertyInstances.Single(property => property.Name == "CreatesNewInstance").Value))
			{
#>
		[DataMember]
		public System.Guid Rsn { get; set; }

<#
			}

			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
#>
<# WriteSummaryComment(relationshipProperty.Description); #>
		[DataMember]
		public <#= GetFullDisplayType(relationshipProperty) #> <#= relationshipProperty.Name #> { get; set; }

<#
			}
#>
	}
<#
		}
#>
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (!shouldGenerateCodeForElement)
		return false;

		var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
		return stereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildService" && property.Value == "true");
	}
#>