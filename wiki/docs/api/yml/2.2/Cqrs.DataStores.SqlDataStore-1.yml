### YamlMime:ManagedReference
items:
- uid: Cqrs.DataStores.SqlDataStore`1
  commentId: T:Cqrs.DataStores.SqlDataStore`1
  id: SqlDataStore`1
  parent: Cqrs.DataStores
  children:
  - Cqrs.DataStores.SqlDataStore`1.#ctor(Cqrs.Configuration.IConfigurationManager,cdmdotnet.Logging.ILogger)
  - Cqrs.DataStores.SqlDataStore`1.Add(`0)
  - Cqrs.DataStores.SqlDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  - Cqrs.DataStores.SqlDataStore`1.ConfigurationManager
  - Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext
  - Cqrs.DataStores.SqlDataStore`1.DbDataContext
  - Cqrs.DataStores.SqlDataStore`1.Destroy(`0)
  - Cqrs.DataStores.SqlDataStore`1.Dispose
  - Cqrs.DataStores.SqlDataStore`1.ElementType
  - Cqrs.DataStores.SqlDataStore`1.Expression
  - Cqrs.DataStores.SqlDataStore`1.GetEnumerator
  - Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings
  - Cqrs.DataStores.SqlDataStore`1.Logger
  - Cqrs.DataStores.SqlDataStore`1.Provider
  - Cqrs.DataStores.SqlDataStore`1.Remove(`0)
  - Cqrs.DataStores.SqlDataStore`1.RemoveAll
  - Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator
  - Cqrs.DataStores.SqlDataStore`1.Table
  - Cqrs.DataStores.SqlDataStore`1.Update(`0)
  - Cqrs.DataStores.SqlDataStore`1.WriteableConnections
  - Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings
  langs:
  - csharp
  - vb
  name: SqlDataStore<TData>
  nameWithType: SqlDataStore<TData>
  fullName: Cqrs.DataStores.SqlDataStore<TData>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SqlDataStore
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nA <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> using simplified SQL.\n"
  example: []
  syntax:
    content: 'public class SqlDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity'
    typeParameters:
    - id: TData
    content.vb: >-
      Public Class SqlDataStore(Of TData As Entity)

          Implements IDataStore(Of TData), IOrderedQueryable(Of TData), IQueryable(Of TData), IEnumerable(Of TData), IOrderedQueryable, IQueryable, IEnumerable, IDisposable
  inheritance:
  - System.Object
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}
  - System.Linq.IOrderedQueryable{{TData}}
  - System.Linq.IQueryable{{TData}}
  - System.Collections.Generic.IEnumerable{{TData}}
  - System.Linq.IOrderedQueryable
  - System.Linq.IQueryable
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
  - Cqrs.DataStores.IDataStore{`0}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  nameWithType.vb: SqlDataStore(Of TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData)
  name.vb: SqlDataStore(Of TData)
- uid: Cqrs.DataStores.SqlDataStore`1.ConfigurationManager
  commentId: P:Cqrs.DataStores.SqlDataStore`1.ConfigurationManager
  id: ConfigurationManager
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: ConfigurationManager
  nameWithType: SqlDataStore<TData>.ConfigurationManager
  fullName: Cqrs.DataStores.SqlDataStore<TData>.ConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigurationManager
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 36
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: ''
  example: []
  syntax:
    content: protected IConfigurationManager ConfigurationManager { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Protected ReadOnly Property ConfigurationManager As IConfigurationManager
  overload: Cqrs.DataStores.SqlDataStore`1.ConfigurationManager*
  nameWithType.vb: SqlDataStore(Of TData).ConfigurationManager
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).ConfigurationManager
- uid: Cqrs.DataStores.SqlDataStore`1.#ctor(Cqrs.Configuration.IConfigurationManager,cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.DataStores.SqlDataStore`1.#ctor(Cqrs.Configuration.IConfigurationManager,cdmdotnet.Logging.ILogger)
  id: '#ctor(Cqrs.Configuration.IConfigurationManager,cdmdotnet.Logging.ILogger)'
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: SqlDataStore(IConfigurationManager, ILogger)
  nameWithType: SqlDataStore<TData>.SqlDataStore(IConfigurationManager, ILogger)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.SqlDataStore(Cqrs.Configuration.IConfigurationManager, cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 41
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nInstantiates a new instance of the <xref href=\"Cqrs.DataStores.SqlDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> class\n"
  example: []
  syntax:
    content: public SqlDataStore(IConfigurationManager configurationManager, ILogger logger)
    parameters:
    - id: configurationManager
      type: Cqrs.Configuration.IConfigurationManager
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Public Sub New(configurationManager As IConfigurationManager, logger As ILogger)
  overload: Cqrs.DataStores.SqlDataStore`1.#ctor*
  nameWithType.vb: SqlDataStore(Of TData).SqlDataStore(IConfigurationManager, ILogger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).SqlDataStore(Cqrs.Configuration.IConfigurationManager, cdmdotnet.Logging.ILogger)
- uid: Cqrs.DataStores.SqlDataStore`1.DbDataContext
  commentId: P:Cqrs.DataStores.SqlDataStore`1.DbDataContext
  id: DbDataContext
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: DbDataContext
  nameWithType: SqlDataStore<TData>.DbDataContext
  fullName: Cqrs.DataStores.SqlDataStore<TData>.DbDataContext
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DbDataContext
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets or sets the DataContext.\n"
  example: []
  syntax:
    content: protected DataContext DbDataContext { get; }
    parameters: []
    return:
      type: System.Data.Linq.DataContext
    content.vb: Protected ReadOnly Property DbDataContext As DataContext
  overload: Cqrs.DataStores.SqlDataStore`1.DbDataContext*
  nameWithType.vb: SqlDataStore(Of TData).DbDataContext
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).DbDataContext
- uid: Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings
  commentId: P:Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings
  id: WriteableConnectionStrings
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: WriteableConnectionStrings
  nameWithType: SqlDataStore<TData>.WriteableConnectionStrings
  fullName: Cqrs.DataStores.SqlDataStore<TData>.WriteableConnectionStrings
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WriteableConnectionStrings
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 62
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets or sets the list of writeable connection strings for data mirroring\n"
  example: []
  syntax:
    content: protected IEnumerable<string> WriteableConnectionStrings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Protected ReadOnly Property WriteableConnectionStrings As IEnumerable(Of String)
  overload: Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings*
  nameWithType.vb: SqlDataStore(Of TData).WriteableConnectionStrings
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).WriteableConnectionStrings
- uid: Cqrs.DataStores.SqlDataStore`1.WriteableConnections
  commentId: P:Cqrs.DataStores.SqlDataStore`1.WriteableConnections
  id: WriteableConnections
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: WriteableConnections
  nameWithType: SqlDataStore<TData>.WriteableConnections
  fullName: Cqrs.DataStores.SqlDataStore<TData>.WriteableConnections
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WriteableConnections
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 72
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets or sets the list of writeable DataContexts for data mirroring\n"
  example: []
  syntax:
    content: protected IEnumerable<DataContext> WriteableConnections { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Data.Linq.DataContext}
    content.vb: Protected ReadOnly Property WriteableConnections As IEnumerable(Of DataContext)
  overload: Cqrs.DataStores.SqlDataStore`1.WriteableConnections*
  nameWithType.vb: SqlDataStore(Of TData).WriteableConnections
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).WriteableConnections
- uid: Cqrs.DataStores.SqlDataStore`1.Table
  commentId: P:Cqrs.DataStores.SqlDataStore`1.Table
  id: Table
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: SqlDataStore<TData>.Table
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Table
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Table
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 89
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets or sets the readable Table\n"
  example: []
  syntax:
    content: protected Table<TData> Table { get; }
    parameters: []
    return:
      type: System.Data.Linq.Table{{TData}}
    content.vb: Protected ReadOnly Property Table As Table(Of TData)
  overload: Cqrs.DataStores.SqlDataStore`1.Table*
  nameWithType.vb: SqlDataStore(Of TData).Table
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Table
- uid: Cqrs.DataStores.SqlDataStore`1.Logger
  commentId: P:Cqrs.DataStores.SqlDataStore`1.Logger
  id: Logger
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: SqlDataStore<TData>.Logger
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 94
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets or sets the Logger\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.DataStores.SqlDataStore`1.Logger*
  nameWithType.vb: SqlDataStore(Of TData).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Logger
- uid: Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext
  commentId: M:Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext
  id: CreateDbDataContext
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: CreateDbDataContext()
  nameWithType: SqlDataStore<TData>.CreateDbDataContext()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.CreateDbDataContext()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateDbDataContext
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 99
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nLocate the connection settings and create a <xref href=\"System.Data.Linq.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual DataContext CreateDbDataContext()
    return:
      type: System.Data.Linq.DataContext
    content.vb: Protected Overridable Function CreateDbDataContext As DataContext
  overload: Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext*
  nameWithType.vb: SqlDataStore(Of TData).CreateDbDataContext()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).CreateDbDataContext()
- uid: Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings
  commentId: M:Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings
  id: GetWriteableConnectionStrings
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: GetWriteableConnectionStrings()
  nameWithType: SqlDataStore<TData>.GetWriteableConnectionStrings()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.GetWriteableConnectionStrings()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetWriteableConnectionStrings
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 132
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nLocate the connection settings for persisting data.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<string> GetWriteableConnectionStrings()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Protected Overridable Function GetWriteableConnectionStrings As IEnumerable(Of String)
  overload: Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings*
  nameWithType.vb: SqlDataStore(Of TData).GetWriteableConnectionStrings()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).GetWriteableConnectionStrings()
- uid: Cqrs.DataStores.SqlDataStore`1.GetEnumerator
  commentId: M:Cqrs.DataStores.SqlDataStore`1.GetEnumerator
  id: GetEnumerator
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SqlDataStore<TData>.GetEnumerator()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEnumerator
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 202
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<TData> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of TData)
  overload: Cqrs.DataStores.SqlDataStore`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  nameWithType.vb: SqlDataStore(Of TData).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).GetEnumerator()
- uid: Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SqlDataStore<TData>.IEnumerable.GetEnumerator()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 213
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SqlDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Cqrs.DataStores.SqlDataStore`1.Expression
  commentId: P:Cqrs.DataStores.SqlDataStore`1.Expression
  id: Expression
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: SqlDataStore<TData>.Expression
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Expression
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Expression
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 228
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets the expression tree that is associated with the instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Expression Expression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\nThe <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public ReadOnly Property Expression As Expression
  overload: Cqrs.DataStores.SqlDataStore`1.Expression*
  implements:
  - System.Linq.IQueryable.Expression
  nameWithType.vb: SqlDataStore(Of TData).Expression
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Expression
- uid: Cqrs.DataStores.SqlDataStore`1.ElementType
  commentId: P:Cqrs.DataStores.SqlDataStore`1.ElementType
  id: ElementType
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: SqlDataStore<TData>.ElementType
  fullName: Cqrs.DataStores.SqlDataStore<TData>.ElementType
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ElementType
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 239
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets the type of the element(s) that are returned when the expression tree associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public Type ElementType { get; }
    parameters: []
    return:
      type: System.Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.\n"
    content.vb: Public ReadOnly Property ElementType As Type
  overload: Cqrs.DataStores.SqlDataStore`1.ElementType*
  implements:
  - System.Linq.IQueryable.ElementType
  nameWithType.vb: SqlDataStore(Of TData).ElementType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).ElementType
- uid: Cqrs.DataStores.SqlDataStore`1.Provider
  commentId: P:Cqrs.DataStores.SqlDataStore`1.Provider
  id: Provider
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: SqlDataStore<TData>.Provider
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Provider
  type: Property
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Provider
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 250
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nGets the query provider that is associated with this data source.\n"
  example: []
  syntax:
    content: public IQueryProvider Provider { get; }
    parameters: []
    return:
      type: System.Linq.IQueryProvider
      description: "\nThe <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this data source.\n"
    content.vb: Public ReadOnly Property Provider As IQueryProvider
  overload: Cqrs.DataStores.SqlDataStore`1.Provider*
  implements:
  - System.Linq.IQueryable.Provider
  nameWithType.vb: SqlDataStore(Of TData).Provider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Provider
- uid: Cqrs.DataStores.SqlDataStore`1.Dispose
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Dispose
  id: Dispose
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SqlDataStore<TData>.Dispose()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Dispose()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Dispose
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 262
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Cqrs.DataStores.SqlDataStore`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: SqlDataStore(Of TData).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Dispose()
- uid: Cqrs.DataStores.SqlDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Add(`0)
  id: Add(`0)
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: SqlDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 276
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nAdd the provided <span class=\"paramref\">data</span> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Add(data As TData)
  overload: Cqrs.DataStores.SqlDataStore`1.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  nameWithType.vb: SqlDataStore(Of TData).Add(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Add(TData)
- uid: Cqrs.DataStores.SqlDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: SqlDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 307
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nAdd the provided <span class=\"paramref\">data</span> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overridable Sub Add(data As IEnumerable(Of TData))
  overload: Cqrs.DataStores.SqlDataStore`1.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Add(System.Collections.Generic.IEnumerable{{TData}})
  nameWithType.vb: SqlDataStore(Of TData).Add(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.DataStores.SqlDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Remove(`0)
  id: Remove(`0)
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Remove(TData)
  nameWithType: SqlDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Remove(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Remove
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 340
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nWill mark the <span class=\"paramref\">data</span> as logically (or soft) deleted by setting <xref href=\"Cqrs.Entities.Entity.IsLogicallyDeleted\" data-throw-if-not-resolved=\"false\"></xref> to true in the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Remove(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Remove(data As TData)
  overload: Cqrs.DataStores.SqlDataStore`1.Remove*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  nameWithType.vb: SqlDataStore(Of TData).Remove(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Remove(TData)
- uid: Cqrs.DataStores.SqlDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: SqlDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 360
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nRemove the provided <span class=\"paramref\">data</span> (normally by <xref href=\"Cqrs.Entities.IEntity.Rsn\" data-throw-if-not-resolved=\"false\"></xref>) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Destroy(data As TData)
  overload: Cqrs.DataStores.SqlDataStore`1.Destroy*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  nameWithType.vb: SqlDataStore(Of TData).Destroy(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Destroy(TData)
- uid: Cqrs.DataStores.SqlDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.SqlDataStore`1.RemoveAll
  id: RemoveAll
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: SqlDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.SqlDataStore<TData>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 417
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nRemove all contents (normally by use of a truncate operation) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void RemoveAll()
    content.vb: Public Overridable Sub RemoveAll
  overload: Cqrs.DataStores.SqlDataStore`1.RemoveAll*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  nameWithType.vb: SqlDataStore(Of TData).RemoveAll()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).RemoveAll()
- uid: Cqrs.DataStores.SqlDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.SqlDataStore`1.Update(`0)
  id: Update(`0)
  parent: Cqrs.DataStores.SqlDataStore`1
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: SqlDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/SqlDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Cqrs/DataStores/SqlDataStore.cs
    startLine: 445
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nUpdate the provided <span class=\"paramref\">data</span> in the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Update(data As TData)
  overload: Cqrs.DataStores.SqlDataStore`1.Update*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  nameWithType.vb: SqlDataStore(Of TData).Update(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Update(TData)
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.DataStores.IDataStore{{TData}}
  commentId: T:Cqrs.DataStores.IDataStore{`0}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TData}}
  commentId: T:System.Linq.IOrderedQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TData>
  nameWithType: IOrderedQueryable<TData>
  fullName: System.Linq.IOrderedQueryable<TData>
  nameWithType.vb: IOrderedQueryable(Of TData)
  fullName.vb: System.Linq.IOrderedQueryable(Of TData)
  name.vb: IOrderedQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TData}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: System.Linq.IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: System.Linq.IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable
  commentId: T:System.Linq.IOrderedQueryable
  parent: System.Linq
  isExternal: true
  name: IOrderedQueryable
  nameWithType: IOrderedQueryable
  fullName: System.Linq.IOrderedQueryable
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  name: GetByKeyAndRow<TData>(Guid)
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>(Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>(System.Guid)
  nameWithType.vb: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(Guid)
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(System.Guid)
  name.vb: GetByKeyAndRow(Of TData)(Guid)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
    name: GetByKeyAndRow<TData>
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(System.Guid)
    name: GetByKeyAndRow(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  name: GetByKey<TData>()
  nameWithType: TableStorageStoreExtensions.GetByKey<TData>()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>()
  nameWithType.vb: TableStorageStoreExtensions.GetByKey(Of TData)()
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)()
  name.vb: GetByKey(Of TData)()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
    name: GetByKey<TData>
    nameWithType: TableStorageStoreExtensions.GetByKey<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1
    name: GetByKey(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKey(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByName<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(System.String)
  name.vb: GetByName(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByFolder<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(System.String)
  name.vb: GetByFolder(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  name: GetByFolder<TData>()
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>()
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>()
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)()
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)()
  name.vb: GetByFolder(Of TData)()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`0}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  definition: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TData, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TData, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TData, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  isExternal: true
  name: GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>(Cqrs.DataStores.IDataStore<TData>, System.Guid)
  nameWithType.vb: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.Guid)
  name.vb: GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
    name: GetByKeyAndRow<TData>
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
    name: GetByKeyAndRow(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: TableStorageStoreExtensions
  nameWithType: TableStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  isExternal: false
  name: GetByKey<TData>(IDataStore<TData>)
  nameWithType: TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>(Cqrs.DataStores.IDataStore<TData>)
  nameWithType.vb: TableStorageStoreExtensions.GetByKey(Of TData)(IDataStore(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)(Cqrs.DataStores.IDataStore(Of TData))
  name.vb: GetByKey(Of TData)(IDataStore(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByKey<TData>
    nameWithType: TableStorageStoreExtensions.GetByKey<TData>
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByKey(Of TData)
    nameWithType: TableStorageStoreExtensions.GetByKey(Of TData)
    fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByName<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByName(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: BlobStorageStoreExtensions
  nameWithType: BlobStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByFolder<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
  isExternal: false
  name: GetByFolder<TData>(IDataStore<TData>)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData))
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0})
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>(Cqrs.DataStores.IDataStore<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(Cqrs.DataStores.IDataStore(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TEntity, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TEntity, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  commentId: T:Cqrs.Sql.DataStores.SqlDataStoreExtensions
  parent: Cqrs.Sql.DataStores
  isExternal: false
  name: SqlDataStoreExtensions
  nameWithType: SqlDataStoreExtensions
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: Cqrs.Sql.DataStores
  commentId: N:Cqrs.Sql.DataStores
  isExternal: false
  name: Cqrs.Sql.DataStores
  nameWithType: Cqrs.Sql.DataStores
  fullName: Cqrs.Sql.DataStores
- uid: Cqrs.DataStores.SqlDataStore`1.ConfigurationManager*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.ConfigurationManager
  isExternal: false
  name: ConfigurationManager
  nameWithType: SqlDataStore<TData>.ConfigurationManager
  fullName: Cqrs.DataStores.SqlDataStore<TData>.ConfigurationManager
  nameWithType.vb: SqlDataStore(Of TData).ConfigurationManager
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).ConfigurationManager
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.DataStores.SqlDataStore`1
  commentId: T:Cqrs.DataStores.SqlDataStore`1
  isExternal: false
  name: SqlDataStore<TData>
  nameWithType: SqlDataStore<TData>
  fullName: Cqrs.DataStores.SqlDataStore<TData>
  nameWithType.vb: SqlDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData)
  name.vb: SqlDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.SqlDataStore`1
    name: SqlDataStore
    nameWithType: SqlDataStore
    fullName: Cqrs.DataStores.SqlDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.SqlDataStore`1
    name: SqlDataStore
    nameWithType: SqlDataStore
    fullName: Cqrs.DataStores.SqlDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.#ctor*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.#ctor
  isExternal: false
  name: SqlDataStore
  nameWithType: SqlDataStore<TData>.SqlDataStore
  fullName: Cqrs.DataStores.SqlDataStore<TData>.SqlDataStore
  nameWithType.vb: SqlDataStore(Of TData).SqlDataStore
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).SqlDataStore
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.DataStores.SqlDataStore`1.DbDataContext*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.DbDataContext
  isExternal: false
  name: DbDataContext
  nameWithType: SqlDataStore<TData>.DbDataContext
  fullName: Cqrs.DataStores.SqlDataStore<TData>.DbDataContext
  nameWithType.vb: SqlDataStore(Of TData).DbDataContext
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).DbDataContext
- uid: System.Data.Linq.DataContext
  commentId: T:System.Data.Linq.DataContext
  parent: System.Data.Linq
  isExternal: true
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
- uid: System.Data.Linq
  commentId: N:System.Data.Linq
  isExternal: false
  name: System.Data.Linq
  nameWithType: System.Data.Linq
  fullName: System.Data.Linq
- uid: Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.WriteableConnectionStrings
  isExternal: false
  name: WriteableConnectionStrings
  nameWithType: SqlDataStore<TData>.WriteableConnectionStrings
  fullName: Cqrs.DataStores.SqlDataStore<TData>.WriteableConnectionStrings
  nameWithType.vb: SqlDataStore(Of TData).WriteableConnectionStrings
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).WriteableConnectionStrings
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.WriteableConnections*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.WriteableConnections
  isExternal: false
  name: WriteableConnections
  nameWithType: SqlDataStore<TData>.WriteableConnections
  fullName: Cqrs.DataStores.SqlDataStore<TData>.WriteableConnections
  nameWithType.vb: SqlDataStore(Of TData).WriteableConnections
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).WriteableConnections
- uid: System.Collections.Generic.IEnumerable{System.Data.Linq.DataContext}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.Linq.DataContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DataContext>
  nameWithType: IEnumerable<DataContext>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Linq.DataContext>
  nameWithType.vb: IEnumerable(Of DataContext)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.Linq.DataContext)
  name.vb: IEnumerable(Of DataContext)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: System.Data.Linq.DataContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Linq.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: System.Data.Linq.DataContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.Table*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Table
  isExternal: false
  name: Table
  nameWithType: SqlDataStore<TData>.Table
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Table
  nameWithType.vb: SqlDataStore(Of TData).Table
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Table
- uid: System.Data.Linq.Table{{TData}}
  commentId: T:System.Data.Linq.Table{`0}
  parent: System.Data.Linq
  definition: System.Data.Linq.Table`1
  name: Table<TData>
  nameWithType: Table<TData>
  fullName: System.Data.Linq.Table<TData>
  nameWithType.vb: Table(Of TData)
  fullName.vb: System.Data.Linq.Table(Of TData)
  name.vb: Table(Of TData)
  spec.csharp:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Linq.Table`1
  commentId: T:System.Data.Linq.Table`1
  isExternal: true
  name: Table<TEntity>
  nameWithType: Table<TEntity>
  fullName: System.Data.Linq.Table<TEntity>
  nameWithType.vb: Table(Of TEntity)
  fullName.vb: System.Data.Linq.Table(Of TEntity)
  name.vb: Table(Of TEntity)
  spec.csharp:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.Logger*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Logger
  isExternal: false
  name: Logger
  nameWithType: SqlDataStore<TData>.Logger
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Logger
  nameWithType.vb: SqlDataStore(Of TData).Logger
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Logger
- uid: Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.CreateDbDataContext
  isExternal: false
  name: CreateDbDataContext
  nameWithType: SqlDataStore<TData>.CreateDbDataContext
  fullName: Cqrs.DataStores.SqlDataStore<TData>.CreateDbDataContext
  nameWithType.vb: SqlDataStore(Of TData).CreateDbDataContext
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).CreateDbDataContext
- uid: Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.GetWriteableConnectionStrings
  isExternal: false
  name: GetWriteableConnectionStrings
  nameWithType: SqlDataStore<TData>.GetWriteableConnectionStrings
  fullName: Cqrs.DataStores.SqlDataStore<TData>.GetWriteableConnectionStrings
  nameWithType.vb: SqlDataStore(Of TData).GetWriteableConnectionStrings
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).GetWriteableConnectionStrings
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.GetEnumerator*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: SqlDataStore<TData>.GetEnumerator
  fullName: Cqrs.DataStores.SqlDataStore<TData>.GetEnumerator
  nameWithType.vb: SqlDataStore(Of TData).GetEnumerator
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TData}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TData>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TData).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TData>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TData).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TData}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TData>
  nameWithType: IEnumerator<TData>
  fullName: System.Collections.Generic.IEnumerator<TData>
  nameWithType.vb: IEnumerator(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TData)
  name.vb: IEnumerator(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: SqlDataStore<TData>.IEnumerable.GetEnumerator
  fullName: Cqrs.DataStores.SqlDataStore<TData>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SqlDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.DataStores.SqlDataStore`1.Expression*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Expression
  isExternal: false
  name: Expression
  nameWithType: SqlDataStore<TData>.Expression
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Expression
  nameWithType.vb: SqlDataStore(Of TData).Expression
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Expression
- uid: System.Linq.IQueryable.Expression
  commentId: P:System.Linq.IQueryable.Expression
  parent: System.Linq.IQueryable
  isExternal: true
  name: Expression
  nameWithType: IQueryable.Expression
  fullName: System.Linq.IQueryable.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.DataStores.SqlDataStore`1.ElementType*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.ElementType
  isExternal: false
  name: ElementType
  nameWithType: SqlDataStore<TData>.ElementType
  fullName: Cqrs.DataStores.SqlDataStore<TData>.ElementType
  nameWithType.vb: SqlDataStore(Of TData).ElementType
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).ElementType
- uid: System.Linq.IQueryable.ElementType
  commentId: P:System.Linq.IQueryable.ElementType
  parent: System.Linq.IQueryable
  isExternal: true
  name: ElementType
  nameWithType: IQueryable.ElementType
  fullName: System.Linq.IQueryable.ElementType
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: Cqrs.DataStores.SqlDataStore`1.Provider*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Provider
  isExternal: false
  name: Provider
  nameWithType: SqlDataStore<TData>.Provider
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Provider
  nameWithType.vb: SqlDataStore(Of TData).Provider
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Provider
- uid: System.Linq.IQueryable.Provider
  commentId: P:System.Linq.IQueryable.Provider
  parent: System.Linq.IQueryable
  isExternal: true
  name: Provider
  nameWithType: IQueryable.Provider
  fullName: System.Linq.IQueryable.Provider
- uid: Cqrs.DataStores.SqlDataStore`1.Dispose*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SqlDataStore<TData>.Dispose
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Dispose
  nameWithType.vb: SqlDataStore(Of TData).Dispose
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.Add*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Add
  isExternal: false
  name: Add
  nameWithType: SqlDataStore<TData>.Add
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Add
  nameWithType.vb: SqlDataStore(Of TData).Add
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Add
- uid: Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Add(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(`0)
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.DataStores.IDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(`0)
  isExternal: false
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.DataStores.IDataStore{{TData}}.Add(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.Entity.IsLogicallyDeleted
  commentId: P:Cqrs.Entities.Entity.IsLogicallyDeleted
  parent: Cqrs.Entities.Entity
  isExternal: false
  name: IsLogicallyDeleted
  nameWithType: Entity.IsLogicallyDeleted
  fullName: Cqrs.Entities.Entity.IsLogicallyDeleted
- uid: Cqrs.DataStores.SqlDataStore`1.Remove*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Remove
  isExternal: false
  name: Remove
  nameWithType: SqlDataStore<TData>.Remove
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Remove
  nameWithType.vb: SqlDataStore(Of TData).Remove
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Remove
- uid: Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Remove(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Remove(`0)
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.Entity
  commentId: T:Cqrs.Entities.Entity
  parent: Cqrs.Entities
  isExternal: false
  name: Entity
  nameWithType: Entity
  fullName: Cqrs.Entities.Entity
- uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Remove(`0)
  isExternal: false
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: Cqrs.Entities.IEntity.Rsn
  commentId: P:Cqrs.Entities.IEntity.Rsn
  parent: Cqrs.Entities.IEntity
  isExternal: false
  name: Rsn
  nameWithType: IEntity.Rsn
  fullName: Cqrs.Entities.IEntity.Rsn
- uid: Cqrs.DataStores.SqlDataStore`1.Destroy*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Destroy
  isExternal: false
  name: Destroy
  nameWithType: SqlDataStore<TData>.Destroy
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Destroy
  nameWithType.vb: SqlDataStore(Of TData).Destroy
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Destroy
- uid: Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Destroy(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Destroy(`0)
  isExternal: false
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.RemoveAll*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: SqlDataStore<TData>.RemoveAll
  fullName: Cqrs.DataStores.SqlDataStore<TData>.RemoveAll
  nameWithType.vb: SqlDataStore(Of TData).RemoveAll
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).RemoveAll
- uid: Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore{`0}.RemoveAll
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.RemoveAll
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.SqlDataStore`1.Update*
  commentId: Overload:Cqrs.DataStores.SqlDataStore`1.Update
  isExternal: false
  name: Update
  nameWithType: SqlDataStore<TData>.Update
  fullName: Cqrs.DataStores.SqlDataStore<TData>.Update
  nameWithType.vb: SqlDataStore(Of TData).Update
  fullName.vb: Cqrs.DataStores.SqlDataStore(Of TData).Update
- uid: Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Update(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Update(`0)
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Update(`0)
  isExternal: false
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
