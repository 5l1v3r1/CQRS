<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4" kind="class" prot="public">
    <compoundname>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ReceiveActor</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4" prot="public" virt="non-virtual">Cqrs.Akka.Commands.IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
      <param>
        <type>TTarget</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a6c5acb131074e98841ddac12da654969_1a6c5acb131074e98841ddac12da654969" prot="protected" static="no" readable="no" writable="no" gettable="yes" settable="yes">
        <type>IActorRef</type>
        <definition>IActorRef Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.ActorReference</definition>
        <argsstring></argsstring>
        <name>ActorReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="22" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a37bf6191b21d98e14d9070b36bb2d0fe_1a37bf6191b21d98e14d9070b36bb2d0fe" prot="protected" static="no" readable="no" writable="no" gettable="yes" settable="yes">
        <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>ICommandReceiver&lt;TAuthenticationToken&gt; Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.CommandReceiver</definition>
        <argsstring></argsstring>
        <name>CommandReceiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="24" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a203cd12567f100fb3545b029f6ed0181_1a203cd12567f100fb3545b029f6ed0181" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.ConcurrentAkkaCommandSender</definition>
        <argsstring>(IActorRef actorReference, ICommandReceiver&lt; TAuthenticationToken &gt; commandReceiver)</argsstring>
        <name>ConcurrentAkkaCommandSender</name>
        <param>
          <type>IActorRef</type>
          <declname>actorReference</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>commandReceiver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="26" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a5f65348c92377342ad8400eb6b40a2ac_1a5f65348c92377342ad8400eb6b40a2ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_aeeb487ad5686d9c44d214b1daaf7833a_1aeeb487ad5686d9c44d214b1daaf7833a">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="34" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a46b88bf730db4a530586737d699e1f12_1a46b88bf730db4a530586737d699e1f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandSender_3_01TAuthenticationToken_01_4_a551d69f8679399fc0ce0fd99dead507a_1a551d69f8679399fc0ce0fd99dead507a">Send&lt; TCommand &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="42" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a6505fbb31a885de31e68b2b87e969c31_1a6505fbb31a885de31e68b2b87e969c31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_af0f033c0b949e5650032e4f00b11b595_1af0f033c0b949e5650032e4f00b11b595">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>commands</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="48" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a263a720c8c865bc246756307c0004aa6_1a263a720c8c865bc246756307c0004aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandSender_3_01TAuthenticationToken_01_4_a3fb3ec40a3e862f721a7c9204e67e832_1a3fb3ec40a3e862f721a7c9204e67e832">Send&lt; TCommand &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="57" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a655aa63a47944035c113f9668bcf1284_1a655aa63a47944035c113f9668bcf1284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_ab64dd5144f0688b0e23ffe289d4ffa2e_1ab64dd5144f0688b0e23ffe289d4ffa2e">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="68" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a171974eb1ba3eb7be9816bd7927227ac_1a171974eb1ba3eb7be9816bd7927227ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_aceee36522f8b677f3737ff0f9f2165ad_1aceee36522f8b677f3737ff0f9f2165ad">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="80" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_ad838e5f54cae4ff87d091feefc00d930_1ad838e5f54cae4ff87d091feefc00d930" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_ada9643fbf8206bcc72cc5817f747ada8_1ada9643fbf8206bcc72cc5817f747ada8">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="92" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a4fa4c2475a650e903b59013e939695f2_1a4fa4c2475a650e903b59013e939695f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_abc9bda930a4c8c57d8edf1044d2b8002_1abc9bda930a4c8c57d8edf1044d2b8002">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="107" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a17a0d4fa182f4288a5a6c48d6df1801b_1a17a0d4fa182f4288a5a6c48d6df1801b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_a230c249fa137eafc9857c3b73ae86fcd_1a230c249fa137eafc9857c3b73ae86fcd">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="120" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_afda9034e20ed82cd3742f1489ebe1b3a_1afda9034e20ed82cd3742f1489ebe1b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4_a8a9b1333e70cc9d8a91d6374354a851f_1a8a9b1333e70cc9d8a91d6374354a851f">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="133" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="133" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="36">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
      <node id="39">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>IAkkaCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IAkkaCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>ReceiveActor</label>
      </node>
      <node id="33">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="44">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
      <node id="47">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>IAkkaCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IAkkaCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_3_01TAuthenticationToken_01_4"/>
        <childnode refid="47" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>ReceiveActor</label>
      </node>
      <node id="41">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="21" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="18" bodyend="143"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a6c5acb131074e98841ddac12da654969_1a6c5acb131074e98841ddac12da654969" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>ActorReference</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a37bf6191b21d98e14d9070b36bb2d0fe_1a37bf6191b21d98e14d9070b36bb2d0fe" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>CommandReceiver</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a203cd12567f100fb3545b029f6ed0181_1a203cd12567f100fb3545b029f6ed0181" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>ConcurrentAkkaCommandSender</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a5f65348c92377342ad8400eb6b40a2ac_1a5f65348c92377342ad8400eb6b40a2ac" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a6505fbb31a885de31e68b2b87e969c31_1a6505fbb31a885de31e68b2b87e969c31" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a46b88bf730db4a530586737d699e1f12_1a46b88bf730db4a530586737d699e1f12" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a263a720c8c865bc246756307c0004aa6_1a263a720c8c865bc246756307c0004aa6" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a655aa63a47944035c113f9668bcf1284_1a655aa63a47944035c113f9668bcf1284" prot="public" virt="virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a171974eb1ba3eb7be9816bd7927227ac_1a171974eb1ba3eb7be9816bd7927227ac" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_ad838e5f54cae4ff87d091feefc00d930_1ad838e5f54cae4ff87d091feefc00d930" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a4fa4c2475a650e903b59013e939695f2_1a4fa4c2475a650e903b59013e939695f2" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_a17a0d4fa182f4288a5a6c48d6df1801b_1a17a0d4fa182f4288a5a6c48d6df1801b" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_3_01TAuthenticationToken_00_01TTarget_01_4_afda9034e20ed82cd3742f1489ebe1b3a_1afda9034e20ed82cd3742f1489ebe1b3a" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
