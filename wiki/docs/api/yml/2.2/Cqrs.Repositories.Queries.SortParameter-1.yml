### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.SortParameter`1
  commentId: T:Cqrs.Repositories.Queries.SortParameter`1
  id: SortParameter`1
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.SortParameter`1.Direction
  - Cqrs.Repositories.Queries.SortParameter`1.SortBy
  langs:
  - csharp
  - vb
  name: SortParameter<TSortBy>
  nameWithType: SortParameter<TSortBy>
  fullName: Cqrs.Repositories.Queries.SortParameter<TSortBy>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SortParameter
    path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
    startLine: 16
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nSorting information.\n"
  example: []
  syntax:
    content: public class SortParameter<TSortBy>
    typeParameters:
    - id: TSortBy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to sort by
    content.vb: Public Class SortParameter(Of TSortBy)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SortParameter(Of TSortBy)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Repositories.Queries.SortParameter(Of TSortBy)
  name.vb: SortParameter(Of TSortBy)
- uid: Cqrs.Repositories.Queries.SortParameter`1.SortBy
  commentId: P:Cqrs.Repositories.Queries.SortParameter`1.SortBy
  id: SortBy
  parent: Cqrs.Repositories.Queries.SortParameter`1
  langs:
  - csharp
  - vb
  name: SortBy
  nameWithType: SortParameter<TSortBy>.SortBy
  fullName: Cqrs.Repositories.Queries.SortParameter<TSortBy>.SortBy
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SortBy
    path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nWhat to sort by.\n"
  example: []
  syntax:
    content: public TSortBy SortBy { get; set; }
    parameters: []
    return:
      type: '{TSortBy}'
    content.vb: Public Property SortBy As TSortBy
  overload: Cqrs.Repositories.Queries.SortParameter`1.SortBy*
  nameWithType.vb: SortParameter(Of TSortBy).SortBy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Queries.SortParameter(Of TSortBy).SortBy
- uid: Cqrs.Repositories.Queries.SortParameter`1.Direction
  commentId: P:Cqrs.Repositories.Queries.SortParameter`1.Direction
  id: Direction
  parent: Cqrs.Repositories.Queries.SortParameter`1
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: SortParameter<TSortBy>.Direction
  fullName: Cqrs.Repositories.Queries.SortParameter<TSortBy>.Direction
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Direction
    path: Framework/Cqrs/Repositories/Queries/SortParameter.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe direction to sort.\n"
  example: []
  syntax:
    content: public SortParameter<TSortBy>.SortParameterDirectionType Direction { get; set; }
    parameters: []
    return:
      type: Cqrs.Repositories.Queries.SortParameter`1.SortParameterDirectionType
    content.vb: Public Property Direction As SortParameter(Of TSortBy).SortParameterDirectionType
  overload: Cqrs.Repositories.Queries.SortParameter`1.Direction*
  nameWithType.vb: SortParameter(Of TSortBy).Direction
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Queries.SortParameter(Of TSortBy).Direction
references:
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.SortParameter`1.SortBy*
  commentId: Overload:Cqrs.Repositories.Queries.SortParameter`1.SortBy
  isExternal: false
  name: SortBy
  nameWithType: SortParameter<TSortBy>.SortBy
  fullName: Cqrs.Repositories.Queries.SortParameter<TSortBy>.SortBy
  nameWithType.vb: SortParameter(Of TSortBy).SortBy
  fullName.vb: Cqrs.Repositories.Queries.SortParameter(Of TSortBy).SortBy
- uid: '{TSortBy}'
  commentId: '!:TSortBy'
  definition: TSortBy
  name: TSortBy
  nameWithType: TSortBy
  fullName: TSortBy
- uid: TSortBy
  commentId: '!:TSortBy'
  isExternal: false
  name: TSortBy
  nameWithType: TSortBy
  fullName: TSortBy
- uid: Cqrs.Repositories.Queries.SortParameter`1.Direction*
  commentId: Overload:Cqrs.Repositories.Queries.SortParameter`1.Direction
  isExternal: false
  name: Direction
  nameWithType: SortParameter<TSortBy>.Direction
  fullName: Cqrs.Repositories.Queries.SortParameter<TSortBy>.Direction
  nameWithType.vb: SortParameter(Of TSortBy).Direction
  fullName.vb: Cqrs.Repositories.Queries.SortParameter(Of TSortBy).Direction
- uid: Cqrs.Repositories.Queries.SortParameter`1.SortParameterDirectionType
  commentId: T:Cqrs.Repositories.Queries.SortParameter`1.SortParameterDirectionType
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: SortParameter.SortParameterDirectionType<>
  nameWithType: SortParameter.SortParameterDirectionType<>
  fullName: Cqrs.Repositories.Queries.SortParameter.SortParameterDirectionType<>
  nameWithType.vb: SortParameter.SortParameterDirectionType(Of )
  fullName.vb: Cqrs.Repositories.Queries.SortParameter.SortParameterDirectionType(Of )
  name.vb: SortParameter.SortParameterDirectionType(Of )
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.SortParameter`1.SortParameterDirectionType
    name: SortParameter.SortParameterDirectionType
    nameWithType: SortParameter.SortParameterDirectionType
    fullName: Cqrs.Repositories.Queries.SortParameter.SortParameterDirectionType
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.SortParameter`1.SortParameterDirectionType
    name: SortParameter.SortParameterDirectionType
    nameWithType: SortParameter.SortParameterDirectionType
    fullName: Cqrs.Repositories.Queries.SortParameter.SortParameterDirectionType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
