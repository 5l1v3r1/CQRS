### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.Factories.AggregateFactory
  commentId: T:Cqrs.Domain.Factories.AggregateFactory
  id: AggregateFactory
  parent: Cqrs.Domain.Factories
  children:
  - Cqrs.Domain.Factories.AggregateFactory.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  - Cqrs.Domain.Factories.AggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  - Cqrs.Domain.Factories.AggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  - Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
  - Cqrs.Domain.Factories.AggregateFactory.Logger
  langs:
  - csharp
  - vb
  name: AggregateFactory
  nameWithType: AggregateFactory
  fullName: Cqrs.Domain.Factories.AggregateFactory
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AggregateFactory
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 19
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nA factory for creating instances of aggregates.\n"
  example: []
  syntax:
    content: 'public class AggregateFactory : IAggregateFactory'
    content.vb: >-
      Public Class AggregateFactory

          Implements IAggregateFactory
  inheritance:
  - System.Object
  implements:
  - Cqrs.Domain.Factories.IAggregateFactory
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
  commentId: P:Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Domain.Factories.AggregateFactory
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: AggregateFactory.DependencyResolver
  fullName: Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nGets or sets the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref> used.\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Domain.Factories.AggregateFactory.DependencyResolver*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Domain.Factories.AggregateFactory.Logger
  commentId: P:Cqrs.Domain.Factories.AggregateFactory.Logger
  id: Logger
  parent: Cqrs.Domain.Factories.AggregateFactory
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: AggregateFactory.Logger
  fullName: Cqrs.Domain.Factories.AggregateFactory.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 29
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nGets or sets the <xref href=\"cdmdotnet.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used.\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Domain.Factories.AggregateFactory.Logger*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Domain.Factories.AggregateFactory.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.Domain.Factories.AggregateFactory.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)'
  parent: Cqrs.Domain.Factories.AggregateFactory
  langs:
  - csharp
  - vb
  name: AggregateFactory(IDependencyResolver, ILogger)
  nameWithType: AggregateFactory.AggregateFactory(IDependencyResolver, ILogger)
  fullName: Cqrs.Domain.Factories.AggregateFactory.AggregateFactory(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 34
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Domain.Factories.AggregateFactory\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AggregateFactory(IDependencyResolver dependencyResolver, ILogger logger)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver, logger As ILogger)
  overload: Cqrs.Domain.Factories.AggregateFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Domain.Factories.AggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  commentId: M:Cqrs.Domain.Factories.AggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  id: Create``1(System.Nullable{System.Guid},System.Boolean)
  parent: Cqrs.Domain.Factories.AggregateFactory
  langs:
  - csharp
  - vb
  name: Create<TAggregate>(Nullable<Guid>, Boolean)
  nameWithType: AggregateFactory.Create<TAggregate>(Nullable<Guid>, Boolean)
  fullName: Cqrs.Domain.Factories.AggregateFactory.Create<TAggregate>(System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 46
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nCreates instance of <span class=\"typeparamref\">TAggregate</span>.\n"
  example: []
  syntax:
    content: public virtual TAggregate Create<TAggregate>(Guid? rsn = null, bool tryDependencyResolutionFirst = true)
    parameters:
    - id: rsn
      type: System.Nullable{System.Guid}
      description: The identifier of the aggregate to create an instance of if an existing aggregate.
    - id: tryDependencyResolutionFirst
      type: System.Boolean
      description: Indicates the use of <xref href="Cqrs.Configuration.IDependencyResolver" data-throw-if-not-resolved="false"></xref> should be tried first.
    typeParameters:
    - id: TAggregate
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the aggregate to create.
    return:
      type: '{TAggregate}'
    content.vb: Public Overridable Function Create(Of TAggregate)(rsn As Guid? = Nothing, tryDependencyResolutionFirst As Boolean = True) As TAggregate
  overload: Cqrs.Domain.Factories.AggregateFactory.Create*
  implements:
  - Cqrs.Domain.Factories.IAggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  nameWithType.vb: AggregateFactory.Create(Of TAggregate)(Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Domain.Factories.AggregateFactory.Create(Of TAggregate)(System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Create(Of TAggregate)(Nullable(Of Guid), Boolean)
- uid: Cqrs.Domain.Factories.AggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  commentId: M:Cqrs.Domain.Factories.AggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  id: Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  parent: Cqrs.Domain.Factories.AggregateFactory
  langs:
  - csharp
  - vb
  name: Create(Type, Nullable<Guid>, Boolean)
  nameWithType: AggregateFactory.Create(Type, Nullable<Guid>, Boolean)
  fullName: Cqrs.Domain.Factories.AggregateFactory.Create(System.Type, System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Domain/Factories/AggregateFactory.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Factories
  summary: "\nCreates instance of type <span class=\"paramref\">aggregateType</span>\n"
  example: []
  syntax:
    content: public object Create(Type aggregateType, Guid? rsn = null, bool tryDependencyResolutionFirst = true)
    parameters:
    - id: aggregateType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the aggregate to create.
    - id: rsn
      type: System.Nullable{System.Guid}
      description: The identifier of the aggregate to create an instance of if an existing aggregate.
    - id: tryDependencyResolutionFirst
      type: System.Boolean
      description: Indicates the use of <xref href="Cqrs.Configuration.IDependencyResolver" data-throw-if-not-resolved="false"></xref> should be tried first.
    return:
      type: System.Object
    content.vb: Public Function Create(aggregateType As Type, rsn As Guid? = Nothing, tryDependencyResolutionFirst As Boolean = True) As Object
  overload: Cqrs.Domain.Factories.AggregateFactory.Create*
  implements:
  - Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  nameWithType.vb: AggregateFactory.Create(Type, Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.Factories.AggregateFactory.Create(System.Type, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Create(Type, Nullable(Of Guid), Boolean)
references:
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Domain.Factories.AggregateFactory.DependencyResolver*
  commentId: Overload:Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: AggregateFactory.DependencyResolver
  fullName: Cqrs.Domain.Factories.AggregateFactory.DependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Domain.Factories.AggregateFactory.Logger*
  commentId: Overload:Cqrs.Domain.Factories.AggregateFactory.Logger
  isExternal: false
  name: Logger
  nameWithType: AggregateFactory.Logger
  fullName: Cqrs.Domain.Factories.AggregateFactory.Logger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Domain.Factories.AggregateFactory
  commentId: T:Cqrs.Domain.Factories.AggregateFactory
  isExternal: false
  name: AggregateFactory
  nameWithType: AggregateFactory
  fullName: Cqrs.Domain.Factories.AggregateFactory
- uid: Cqrs.Domain.Factories.AggregateFactory.#ctor*
  commentId: Overload:Cqrs.Domain.Factories.AggregateFactory.#ctor
  isExternal: false
  name: AggregateFactory
  nameWithType: AggregateFactory.AggregateFactory
  fullName: Cqrs.Domain.Factories.AggregateFactory.AggregateFactory
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain.Factories.AggregateFactory.Create*
  commentId: Overload:Cqrs.Domain.Factories.AggregateFactory.Create
  isExternal: false
  name: Create
  nameWithType: AggregateFactory.Create
  fullName: Cqrs.Domain.Factories.AggregateFactory.Create
- uid: Cqrs.Domain.Factories.IAggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  commentId: M:Cqrs.Domain.Factories.IAggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
  parent: Cqrs.Domain.Factories.IAggregateFactory
  isExternal: true
  name: Create<TAggregate>(Nullable<Guid>, Boolean)
  nameWithType: IAggregateFactory.Create<TAggregate>(Nullable<Guid>, Boolean)
  fullName: Cqrs.Domain.Factories.IAggregateFactory.Create<TAggregate>(System.Nullable<System.Guid>, System.Boolean)
  nameWithType.vb: IAggregateFactory.Create(Of TAggregate)(Nullable(Of Guid), Boolean)
  fullName.vb: Cqrs.Domain.Factories.IAggregateFactory.Create(Of TAggregate)(System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Create(Of TAggregate)(Nullable(Of Guid), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
    name: Create<TAggregate>
    nameWithType: IAggregateFactory.Create<TAggregate>
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create<TAggregate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create``1(System.Nullable{System.Guid},System.Boolean)
    name: Create(Of TAggregate)
    nameWithType: IAggregateFactory.Create(Of TAggregate)
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create(Of TAggregate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TAggregate}'
  commentId: '!:TAggregate'
  definition: TAggregate
  name: TAggregate
  nameWithType: TAggregate
  fullName: TAggregate
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TAggregate
  isExternal: false
  name: TAggregate
  nameWithType: TAggregate
  fullName: TAggregate
- uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  commentId: M:Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  parent: Cqrs.Domain.Factories.IAggregateFactory
  isExternal: true
  name: Create(Type, Nullable<Guid>, Boolean)
  nameWithType: IAggregateFactory.Create(Type, Nullable<Guid>, Boolean)
  fullName: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type, System.Nullable<System.Guid>, System.Boolean)
  nameWithType.vb: IAggregateFactory.Create(Type, Nullable(Of Guid), Boolean)
  fullName.vb: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Create(Type, Nullable(Of Guid), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
    name: Create
    nameWithType: IAggregateFactory.Create
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
    name: Create
    nameWithType: IAggregateFactory.Create
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
