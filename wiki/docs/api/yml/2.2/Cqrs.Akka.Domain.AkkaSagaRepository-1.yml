### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1
  commentId: T:Cqrs.Akka.Domain.AkkaSagaRepository`1
  id: AkkaSagaRepository`1
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Akka.Events.IAkkaEventPublisherProxy{`0})
  - Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga``1(System.Guid)
  - Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher
  - Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  langs:
  - csharp
  - vb
  name: AkkaSagaRepository<TAuthenticationToken>
  nameWithType: AkkaSagaRepository<TAuthenticationToken>
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AkkaSagaRepository
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
    startLine: 18
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: 'public class AkkaSagaRepository<TAuthenticationToken> : SagaRepository<TAuthenticationToken>, IAkkaSagaRepository<TAuthenticationToken>, ISagaRepository<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
    content.vb: >-
      Public Class AkkaSagaRepository(Of TAuthenticationToken)

          Inherits SagaRepository(Of TAuthenticationToken)

          Implements IAkkaSagaRepository(Of TAuthenticationToken), ISagaRepository(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  implements:
  - Cqrs.Akka.Domain.IAkkaSagaRepository{{TAuthenticationToken}}
  - Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  inheritedMembers:
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.EventStore
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Publisher
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.SagaFactory
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.CorrelationIdHelper
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Save``1({TSaga},System.Nullable{System.Int32})
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  - Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.LoadSagaHistory``1({TSaga},System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}},System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken)
  name.vb: AkkaSagaRepository(Of TAuthenticationToken)
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher
  commentId: P:Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher
  id: EventPublisher
  parent: Cqrs.Akka.Domain.AkkaSagaRepository`1
  langs:
  - csharp
  - vb
  name: EventPublisher
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.EventPublisher
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.EventPublisher
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventPublisher
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
    startLine: 22
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: protected IAkkaEventPublisherProxy<TAuthenticationToken> EventPublisher { get; }
    parameters: []
    return:
      type: Cqrs.Akka.Events.IAkkaEventPublisherProxy{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property EventPublisher As IAkkaEventPublisherProxy(Of TAuthenticationToken)
  overload: Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher*
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).EventPublisher
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).EventPublisher
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Akka.Events.IAkkaEventPublisherProxy{`0})
  commentId: M:Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Akka.Events.IAkkaEventPublisherProxy{`0})
  id: '#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Akka.Events.IAkkaEventPublisherProxy{`0})'
  parent: Cqrs.Akka.Domain.AkkaSagaRepository`1
  langs:
  - csharp
  - vb
  name: AkkaSagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken>)
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.AkkaSagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken>)
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.AkkaSagaRepository(Cqrs.Domain.Factories.IAggregateFactory, Cqrs.Events.IEventStore<TAuthenticationToken>, Cqrs.Events.IEventPublisher<TAuthenticationToken>, cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Akka.Events.IAkkaEventPublisherProxy<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
    startLine: 24
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public AkkaSagaRepository(IAggregateFactory aggregateFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken> eventPublisher)
    parameters:
    - id: aggregateFactory
      type: Cqrs.Domain.Factories.IAggregateFactory
    - id: eventStore
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    - id: publisher
      type: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
    - id: correlationIdHelper
      type: cdmdotnet.Logging.ICorrelationIdHelper
    - id: eventPublisher
      type: Cqrs.Akka.Events.IAkkaEventPublisherProxy{{TAuthenticationToken}}
    content.vb: Public Sub New(aggregateFactory As IAggregateFactory, eventStore As IEventStore(Of TAuthenticationToken), publisher As IEventPublisher(Of TAuthenticationToken), correlationIdHelper As ICorrelationIdHelper, eventPublisher As IAkkaEventPublisherProxy(Of TAuthenticationToken))
  overload: Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor*
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).AkkaSagaRepository(IAggregateFactory, IEventStore(Of TAuthenticationToken), IEventPublisher(Of TAuthenticationToken), ICorrelationIdHelper, IAkkaEventPublisherProxy(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).AkkaSagaRepository(Cqrs.Domain.Factories.IAggregateFactory, Cqrs.Events.IEventStore(Of TAuthenticationToken), Cqrs.Events.IEventPublisher(Of TAuthenticationToken), cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Akka.Events.IAkkaEventPublisherProxy(Of TAuthenticationToken))
  name.vb: AkkaSagaRepository(IAggregateFactory, IEventStore(Of TAuthenticationToken), IEventPublisher(Of TAuthenticationToken), ICorrelationIdHelper, IAkkaEventPublisherProxy(Of TAuthenticationToken))
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga``1(System.Guid)
  commentId: M:Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga``1(System.Guid)
  id: CreateSaga``1(System.Guid)
  parent: Cqrs.Akka.Domain.AkkaSagaRepository`1
  langs:
  - csharp
  - vb
  name: CreateSaga<TSaga>(Guid)
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(Guid)
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSaga
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
    startLine: 32
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: 'protected override TSaga CreateSaga<TSaga>(Guid id)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: id
      type: System.Guid
    typeParameters:
    - id: TSaga
    return:
      type: '{TSaga}'
    content.vb: Protected Overrides Function CreateSaga(Of TSaga As ISaga(Of TAuthenticationToken))(id As Guid) As TSaga
  overridden: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.CreateSaga``1(System.Guid)
  overload: Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga*
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(Guid)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(System.Guid)
  name.vb: CreateSaga(Of TSaga)(Guid)
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  commentId: M:Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  id: PublishEvent(Cqrs.Events.ISagaEvent{`0})
  parent: Cqrs.Akka.Domain.AkkaSagaRepository`1
  langs:
  - csharp
  - vb
  name: PublishEvent(ISagaEvent<TAuthenticationToken>)
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.PublishEvent(ISagaEvent<TAuthenticationToken>)
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.ISagaEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishEvent
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaRepository.cs
    startLine: 39
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: protected override void PublishEvent(ISagaEvent<TAuthenticationToken> event)
    parameters:
    - id: event
      type: Cqrs.Events.ISagaEvent{{TAuthenticationToken}}
    content.vb: Protected Overrides Sub PublishEvent(event As ISagaEvent(Of TAuthenticationToken))
  overridden: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.PublishEvent(Cqrs.Events.ISagaEvent{{TAuthenticationToken}})
  overload: Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent*
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).PublishEvent(ISagaEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).PublishEvent(Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: PublishEvent(ISagaEvent(Of TAuthenticationToken))
references:
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.SagaRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.SagaRepository`1
  name: SagaRepository<TAuthenticationToken>
  nameWithType: SagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>
  nameWithType.vb: SagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken)
  name.vb: SagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.IAkkaSagaRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Akka.Domain.IAkkaSagaRepository{`0}
  parent: Cqrs.Akka.Domain
  definition: Cqrs.Akka.Domain.IAkkaSagaRepository`1
  name: IAkkaSagaRepository<TAuthenticationToken>
  nameWithType: IAkkaSagaRepository<TAuthenticationToken>
  fullName: Cqrs.Akka.Domain.IAkkaSagaRepository<TAuthenticationToken>
  nameWithType.vb: IAkkaSagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaRepository(Of TAuthenticationToken)
  name.vb: IAkkaSagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaSagaRepository`1
    name: IAkkaSagaRepository
    nameWithType: IAkkaSagaRepository
    fullName: Cqrs.Akka.Domain.IAkkaSagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaSagaRepository`1
    name: IAkkaSagaRepository
    nameWithType: IAkkaSagaRepository
    fullName: Cqrs.Akka.Domain.IAkkaSagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.ISagaRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.ISagaRepository`1
  name: ISagaRepository<TAuthenticationToken>
  nameWithType: ISagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken)
  name.vb: ISagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.EventStore
  commentId: P:Cqrs.Domain.SagaRepository{`0}.EventStore
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.EventStore
  name: EventStore
  nameWithType: SagaRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.EventStore
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Publisher
  commentId: P:Cqrs.Domain.SagaRepository{`0}.Publisher
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.Publisher
  name: Publisher
  nameWithType: SagaRepository<TAuthenticationToken>.Publisher
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Publisher
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Publisher
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Publisher
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.SagaFactory
  commentId: P:Cqrs.Domain.SagaRepository{`0}.SagaFactory
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.SagaFactory
  name: SagaFactory
  nameWithType: SagaRepository<TAuthenticationToken>.SagaFactory
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaFactory
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaFactory
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaFactory
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.CorrelationIdHelper
  commentId: P:Cqrs.Domain.SagaRepository{`0}.CorrelationIdHelper
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  name: CorrelationIdHelper
  nameWithType: SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Save``1({TSaga},System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.SagaRepository{`0}.Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.Save<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).Save(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.SagaRepository{`0}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.Get<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).Get(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.SagaRepository{`0}.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  name: LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: LoadSaga<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: LoadSaga(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.LoadSagaHistory``1({TSaga},System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}},System.Boolean)
  commentId: M:Cqrs.Domain.SagaRepository{`0}.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  name: LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>, System.Boolean)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)), System.Boolean)
  name.vb: LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.SagaRepository`1
  commentId: T:Cqrs.Domain.SagaRepository`1
  isExternal: false
  name: SagaRepository<TAuthenticationToken>
  nameWithType: SagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>
  nameWithType.vb: SagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken)
  name.vb: SagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Akka.Domain.IAkkaSagaRepository`1
  commentId: T:Cqrs.Akka.Domain.IAkkaSagaRepository`1
  isExternal: false
  name: IAkkaSagaRepository<TAuthenticationToken>
  nameWithType: IAkkaSagaRepository<TAuthenticationToken>
  fullName: Cqrs.Akka.Domain.IAkkaSagaRepository<TAuthenticationToken>
  nameWithType.vb: IAkkaSagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaRepository(Of TAuthenticationToken)
  name.vb: IAkkaSagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaSagaRepository`1
    name: IAkkaSagaRepository
    nameWithType: IAkkaSagaRepository
    fullName: Cqrs.Akka.Domain.IAkkaSagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaSagaRepository`1
    name: IAkkaSagaRepository
    nameWithType: IAkkaSagaRepository
    fullName: Cqrs.Akka.Domain.IAkkaSagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISagaRepository`1
  commentId: T:Cqrs.Domain.ISagaRepository`1
  isExternal: false
  name: ISagaRepository<TAuthenticationToken>
  nameWithType: ISagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken)
  name.vb: ISagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.EventStore
  commentId: P:Cqrs.Domain.SagaRepository`1.EventStore
  isExternal: false
  name: EventStore
  nameWithType: SagaRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.EventStore
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Domain.SagaRepository`1.Publisher
  commentId: P:Cqrs.Domain.SagaRepository`1.Publisher
  isExternal: false
  name: Publisher
  nameWithType: SagaRepository<TAuthenticationToken>.Publisher
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Publisher
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Publisher
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Publisher
- uid: Cqrs.Domain.SagaRepository`1.SagaFactory
  commentId: P:Cqrs.Domain.SagaRepository`1.SagaFactory
  isExternal: false
  name: SagaFactory
  nameWithType: SagaRepository<TAuthenticationToken>.SagaFactory
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaFactory
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaFactory
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaFactory
- uid: Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  commentId: P:Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  isExternal: true
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.Save<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).Save(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  isExternal: true
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.Get<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).Get(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  isExternal: true
  name: LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: LoadSaga<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: LoadSaga(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  commentId: M:Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  isExternal: true
  name: LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>, System.Boolean)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)), System.Boolean)
  name.vb: LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaRepository`1.EventPublisher
  isExternal: false
  name: EventPublisher
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.EventPublisher
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.EventPublisher
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).EventPublisher
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).EventPublisher
- uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy{{TAuthenticationToken}}
  commentId: T:Cqrs.Akka.Events.IAkkaEventPublisherProxy{`0}
  parent: Cqrs.Akka.Events
  definition: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
  name: IAkkaEventPublisherProxy<TAuthenticationToken>
  nameWithType: IAkkaEventPublisherProxy<TAuthenticationToken>
  fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy<TAuthenticationToken>
  nameWithType.vb: IAkkaEventPublisherProxy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Events.IAkkaEventPublisherProxy(Of TAuthenticationToken)
  name.vb: IAkkaEventPublisherProxy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
    name: IAkkaEventPublisherProxy
    nameWithType: IAkkaEventPublisherProxy
    fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
    name: IAkkaEventPublisherProxy
    nameWithType: IAkkaEventPublisherProxy
    fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
  commentId: T:Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
  isExternal: false
  name: IAkkaEventPublisherProxy<TAuthenticationToken>
  nameWithType: IAkkaEventPublisherProxy<TAuthenticationToken>
  fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy<TAuthenticationToken>
  nameWithType.vb: IAkkaEventPublisherProxy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Events.IAkkaEventPublisherProxy(Of TAuthenticationToken)
  name.vb: IAkkaEventPublisherProxy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
    name: IAkkaEventPublisherProxy
    nameWithType: IAkkaEventPublisherProxy
    fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Events.IAkkaEventPublisherProxy`1
    name: IAkkaEventPublisherProxy
    nameWithType: IAkkaEventPublisherProxy
    fullName: Cqrs.Akka.Events.IAkkaEventPublisherProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Events
  commentId: N:Cqrs.Akka.Events
  isExternal: false
  name: Cqrs.Akka.Events
  nameWithType: Cqrs.Akka.Events
  fullName: Cqrs.Akka.Events
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaRepository`1.#ctor
  isExternal: false
  name: AkkaSagaRepository
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.AkkaSagaRepository
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.AkkaSagaRepository
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).AkkaSagaRepository
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).AkkaSagaRepository
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventPublisher{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventPublisher`1
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Events.IEventPublisher`1
  commentId: T:Cqrs.Events.IEventPublisher`1
  isExternal: false
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.CreateSaga``1(System.Guid)
  commentId: M:Cqrs.Domain.SagaRepository{`0}.CreateSaga``1(System.Guid)
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  name: CreateSaga<TSaga>(Guid)
  nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(Guid)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(System.Guid)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(Guid)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(System.Guid)
  name.vb: CreateSaga(Of TSaga)(Guid)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
    name: CreateSaga<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
    name: CreateSaga(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaRepository`1.CreateSaga
  isExternal: false
  name: CreateSaga
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.CreateSaga
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.CreateSaga
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).CreateSaga
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).CreateSaga
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  commentId: M:Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  isExternal: true
  name: CreateSaga<TSaga>(Guid)
  nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(Guid)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(System.Guid)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(Guid)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(System.Guid)
  name.vb: CreateSaga(Of TSaga)(Guid)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
    name: CreateSaga<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
    name: CreateSaga(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}.PublishEvent(Cqrs.Events.ISagaEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Domain.SagaRepository{`0}.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  parent: Cqrs.Domain.SagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  name: PublishEvent(ISagaEvent<TAuthenticationToken>)
  nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent(ISagaEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.ISagaEvent<TAuthenticationToken>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).PublishEvent(ISagaEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent(Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: PublishEvent(ISagaEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
    name: PublishEvent
    nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
    name: PublishEvent
    nameWithType: SagaRepository(Of TAuthenticationToken).PublishEvent
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaRepository`1.PublishEvent
  isExternal: false
  name: PublishEvent
  nameWithType: AkkaSagaRepository<TAuthenticationToken>.PublishEvent
  fullName: Cqrs.Akka.Domain.AkkaSagaRepository<TAuthenticationToken>.PublishEvent
  nameWithType.vb: AkkaSagaRepository(Of TAuthenticationToken).PublishEvent
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaRepository(Of TAuthenticationToken).PublishEvent
- uid: Cqrs.Events.ISagaEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.ISagaEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.ISagaEvent`1
  name: ISagaEvent<TAuthenticationToken>
  nameWithType: ISagaEvent<TAuthenticationToken>
  fullName: Cqrs.Events.ISagaEvent<TAuthenticationToken>
  nameWithType.vb: ISagaEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.ISagaEvent(Of TAuthenticationToken)
  name.vb: ISagaEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  commentId: M:Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  isExternal: false
  name: PublishEvent(ISagaEvent<TAuthenticationToken>)
  nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent(ISagaEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.ISagaEvent<TAuthenticationToken>)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).PublishEvent(ISagaEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent(Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: PublishEvent(ISagaEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
    name: PublishEvent
    nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
    name: PublishEvent
    nameWithType: SagaRepository(Of TAuthenticationToken).PublishEvent
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.ISagaEvent`1
  commentId: T:Cqrs.Events.ISagaEvent`1
  isExternal: false
  name: ISagaEvent<TAuthenticationToken>
  nameWithType: ISagaEvent<TAuthenticationToken>
  fullName: Cqrs.Events.ISagaEvent<TAuthenticationToken>
  nameWithType.vb: ISagaEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.ISagaEvent(Of TAuthenticationToken)
  name.vb: ISagaEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
