### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.SingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.SingleResultQuery`2
  id: SingleResultQuery`2
  parent: Cqrs.Repositories.Queries
  children: []
  langs:
  - csharp
  - vb
  name: SingleResultQuery<TQueryStrategy, TData>
  nameWithType: SingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.SingleResultQuery<TQueryStrategy, TData>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/SingleResultQuery.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SingleResultQuery
    path: Framework/Cqrs/Repositories/Queries/SingleResultQuery.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA query that will produce a result that is a single <span class=\"typeparamref\">TData</span> item.\n"
  example: []
  syntax:
    content: 'public class SingleResultQuery<TQueryStrategy, TData> : ResultQuery<TQueryStrategy, TData>, ISingleResultQuery<TQueryStrategy, TData>, IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<TData> where TQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref>.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of result data.
    content.vb: >-
      Public Class SingleResultQuery(Of TQueryStrategy As IQueryStrategy, TData)

          Inherits ResultQuery(Of TQueryStrategy, TData)

          Implements ISingleResultQuery(Of TQueryStrategy, TData), IQueryWithStrategy(Of TQueryStrategy), IQueryWithResults(Of TData)
  inheritance:
  - System.Object
  - Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}
  implements:
  - Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
  - Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}
  - Cqrs.Repositories.Queries.IQueryWithResults{{TData}}
  inheritedMembers:
  - Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}.QueryStrategy
  - Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}.Result
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SingleResultQuery(Of TQueryStrategy, TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Repositories.Queries.SingleResultQuery(Of TQueryStrategy, TData)
  name.vb: SingleResultQuery(Of TQueryStrategy, TData)
references:
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ResultQuery`2
  name: ResultQuery<TQueryStrategy, TData>
  nameWithType: ResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData)
  name.vb: ResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy{{TQueryStrategy}}
  commentId: T:Cqrs.Repositories.Queries.IQueryWithStrategy{`0}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.IQueryWithStrategy`1
  name: IQueryWithStrategy<TQueryStrategy>
  nameWithType: IQueryWithStrategy<TQueryStrategy>
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy)
  name.vb: IQueryWithStrategy(Of TQueryStrategy)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithResults{{TData}}
  commentId: T:Cqrs.Repositories.Queries.IQueryWithResults{`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.IQueryWithResults`1
  name: IQueryWithResults<TData>
  nameWithType: IQueryWithResults<TData>
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TData>
  nameWithType.vb: IQueryWithResults(Of TData)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TData)
  name.vb: IQueryWithResults(Of TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}.QueryStrategy
  commentId: P:Cqrs.Repositories.Queries.ResultQuery{`0,`1}.QueryStrategy
  parent: Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.Queries.ResultQuery`2.QueryStrategy
  name: QueryStrategy
  nameWithType: ResultQuery<TQueryStrategy, TData>.QueryStrategy
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>.QueryStrategy
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData).QueryStrategy
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData).QueryStrategy
- uid: Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}.Result
  commentId: P:Cqrs.Repositories.Queries.ResultQuery{`0,`1}.Result
  parent: Cqrs.Repositories.Queries.ResultQuery{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.Queries.ResultQuery`2.Result
  name: Result
  nameWithType: ResultQuery<TQueryStrategy, TData>.Result
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>.Result
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData).Result
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData).Result
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.ResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ResultQuery`2
  isExternal: false
  name: ResultQuery<TQueryStrategy, TData>
  nameWithType: ResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData)
  name.vb: ResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
  commentId: T:Cqrs.Repositories.Queries.IQueryWithStrategy`1
  isExternal: false
  name: IQueryWithStrategy<TQueryStrategy>
  nameWithType: IQueryWithStrategy<TQueryStrategy>
  fullName: Cqrs.Repositories.Queries.IQueryWithStrategy<TQueryStrategy>
  nameWithType.vb: IQueryWithStrategy(Of TQueryStrategy)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithStrategy(Of TQueryStrategy)
  name.vb: IQueryWithStrategy(Of TQueryStrategy)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithStrategy`1
    name: IQueryWithStrategy
    nameWithType: IQueryWithStrategy
    fullName: Cqrs.Repositories.Queries.IQueryWithStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1
  commentId: T:Cqrs.Repositories.Queries.IQueryWithResults`1
  isExternal: false
  name: IQueryWithResults<TResult>
  nameWithType: IQueryWithResults<TResult>
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>
  nameWithType.vb: IQueryWithResults(Of TResult)
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult)
  name.vb: IQueryWithResults(Of TResult)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryWithResults`1
    name: IQueryWithResults
    nameWithType: IQueryWithResults
    fullName: Cqrs.Repositories.Queries.IQueryWithResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ResultQuery`2.QueryStrategy
  commentId: P:Cqrs.Repositories.Queries.ResultQuery`2.QueryStrategy
  isExternal: false
  name: QueryStrategy
  nameWithType: ResultQuery<TQueryStrategy, TData>.QueryStrategy
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>.QueryStrategy
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData).QueryStrategy
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData).QueryStrategy
- uid: Cqrs.Repositories.Queries.ResultQuery`2.Result
  commentId: P:Cqrs.Repositories.Queries.ResultQuery`2.Result
  isExternal: false
  name: Result
  nameWithType: ResultQuery<TQueryStrategy, TData>.Result
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>.Result
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData).Result
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData).Result
