### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IOrQueryPredicate
  id: IOrQueryPredicate
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  - Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  langs:
  - csharp
  - vb
  name: IOrQueryPredicate
  nameWithType: IOrQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IOrQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
    startLine: 13
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nAn <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> where either the <xref href=\"Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> must evaluate to true.\n"
  example: []
  syntax:
    content: 'public interface IOrQueryPredicate : IQueryPredicate'
    content.vb: >-
      Public Interface IOrQueryPredicate
          Inherits IQueryPredicate
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  commentId: P:Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  id: LeftQueryPredicate
  parent: Cqrs.Repositories.Queries.IOrQueryPredicate
  langs:
  - csharp
  - vb
  name: LeftQueryPredicate
  nameWithType: IOrQueryPredicate.LeftQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LeftQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe left side <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IQueryPredicate LeftQueryPredicate { get; }
    parameters: []
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: ReadOnly Property LeftQueryPredicate As IQueryPredicate
  overload: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  commentId: P:Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  id: RightQueryPredicate
  parent: Cqrs.Repositories.Queries.IOrQueryPredicate
  langs:
  - csharp
  - vb
  name: RightQueryPredicate
  nameWithType: IOrQueryPredicate.RightQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RightQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/IOrQueryPredicate.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe right side <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IQueryPredicate RightQueryPredicate { get; }
    parameters: []
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: ReadOnly Property RightQueryPredicate As IQueryPredicate
  overload: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Cqrs.Repositories.Queries.IQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IQueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryPredicate
  nameWithType: IQueryPredicate
  fullName: Cqrs.Repositories.Queries.IQueryPredicate
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  commentId: P:Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  commentId: P:Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate*
  commentId: Overload:Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
  isExternal: false
  name: LeftQueryPredicate
  nameWithType: IOrQueryPredicate.LeftQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate.LeftQueryPredicate
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate*
  commentId: Overload:Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
  isExternal: false
  name: RightQueryPredicate
  nameWithType: IOrQueryPredicate.RightQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate.RightQueryPredicate
