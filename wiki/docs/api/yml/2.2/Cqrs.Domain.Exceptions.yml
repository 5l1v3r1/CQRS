### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.Exceptions
  commentId: N:Cqrs.Domain.Exceptions
  id: Cqrs.Domain.Exceptions
  children:
  - Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  - Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException
  - Cqrs.Domain.Exceptions.ConcurrencyException
  - Cqrs.Domain.Exceptions.DuplicateCreateCommandException
  - Cqrs.Domain.Exceptions.DuplicateEventException`2
  - Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  - Cqrs.Domain.Exceptions.EntityNotFoundException`1
  - Cqrs.Domain.Exceptions.EventsOutOfOrderException
  - Cqrs.Domain.Exceptions.MissingParameterLessConstructorException
  - Cqrs.Domain.Exceptions.SagaNotFoundException`2
  langs:
  - csharp
  - vb
  name: Cqrs.Domain.Exceptions
  nameWithType: Cqrs.Domain.Exceptions
  fullName: Cqrs.Domain.Exceptions
  type: Namespace
  assemblies:
  - Cqrs
references:
- uid: Cqrs.Domain.Exceptions.EntityNotFoundException`1
  commentId: T:Cqrs.Domain.Exceptions.EntityNotFoundException`1
  isExternal: false
  name: EntityNotFoundException<TEntity>
  nameWithType: EntityNotFoundException<TEntity>
  fullName: Cqrs.Domain.Exceptions.EntityNotFoundException<TEntity>
  nameWithType.vb: EntityNotFoundException(Of TEntity)
  fullName.vb: Cqrs.Domain.Exceptions.EntityNotFoundException(Of TEntity)
  name.vb: EntityNotFoundException(Of TEntity)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.EntityNotFoundException`1
    name: EntityNotFoundException
    nameWithType: EntityNotFoundException
    fullName: Cqrs.Domain.Exceptions.EntityNotFoundException
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.EntityNotFoundException`1
    name: EntityNotFoundException
    nameWithType: EntityNotFoundException
    fullName: Cqrs.Domain.Exceptions.EntityNotFoundException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  commentId: T:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  isExternal: false
  name: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  name.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
    name: DuplicateSagaEventException
    nameWithType: DuplicateSagaEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
    name: DuplicateSagaEventException
    nameWithType: DuplicateSagaEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.SagaNotFoundException`2
  commentId: T:Cqrs.Domain.Exceptions.SagaNotFoundException`2
  isExternal: false
  name: SagaNotFoundException<TSaga, TAuthenticationToken>
  nameWithType: SagaNotFoundException<TSaga, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.SagaNotFoundException<TSaga, TAuthenticationToken>
  nameWithType.vb: SagaNotFoundException(Of TSaga, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.SagaNotFoundException(Of TSaga, TAuthenticationToken)
  name.vb: SagaNotFoundException(Of TSaga, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.SagaNotFoundException`2
    name: SagaNotFoundException
    nameWithType: SagaNotFoundException
    fullName: Cqrs.Domain.Exceptions.SagaNotFoundException
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.SagaNotFoundException`2
    name: SagaNotFoundException
    nameWithType: SagaNotFoundException
    fullName: Cqrs.Domain.Exceptions.SagaNotFoundException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException
  commentId: T:Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException
  isExternal: false
  name: AggregateOrEventMissingIdException
  nameWithType: AggregateOrEventMissingIdException
  fullName: Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException
- uid: Cqrs.Domain.Exceptions.DuplicateCreateCommandException
  commentId: T:Cqrs.Domain.Exceptions.DuplicateCreateCommandException
  isExternal: false
  name: DuplicateCreateCommandException
  nameWithType: DuplicateCreateCommandException
  fullName: Cqrs.Domain.Exceptions.DuplicateCreateCommandException
- uid: Cqrs.Domain.Exceptions.DuplicateEventException`2
  commentId: T:Cqrs.Domain.Exceptions.DuplicateEventException`2
  isExternal: false
  name: DuplicateEventException<TAggregateRoot, TAuthenticationToken>
  nameWithType: DuplicateEventException<TAggregateRoot, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.DuplicateEventException<TAggregateRoot, TAuthenticationToken>
  nameWithType.vb: DuplicateEventException(Of TAggregateRoot, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateEventException(Of TAggregateRoot, TAuthenticationToken)
  name.vb: DuplicateEventException(Of TAggregateRoot, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.DuplicateEventException`2
    name: DuplicateEventException
    nameWithType: DuplicateEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateEventException
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.DuplicateEventException`2
    name: DuplicateEventException
    nameWithType: DuplicateEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateEventException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.EventsOutOfOrderException
  commentId: T:Cqrs.Domain.Exceptions.EventsOutOfOrderException
  isExternal: false
  name: EventsOutOfOrderException
  nameWithType: EventsOutOfOrderException
  fullName: Cqrs.Domain.Exceptions.EventsOutOfOrderException
- uid: Cqrs.Domain.Exceptions.MissingParameterLessConstructorException
  commentId: T:Cqrs.Domain.Exceptions.MissingParameterLessConstructorException
  isExternal: false
  name: MissingParameterLessConstructorException
  nameWithType: MissingParameterLessConstructorException
  fullName: Cqrs.Domain.Exceptions.MissingParameterLessConstructorException
- uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  commentId: T:Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  isExternal: false
  name: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  name.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.ConcurrencyException
  commentId: T:Cqrs.Domain.Exceptions.ConcurrencyException
  isExternal: false
  name: ConcurrencyException
  nameWithType: ConcurrencyException
  fullName: Cqrs.Domain.Exceptions.ConcurrencyException
