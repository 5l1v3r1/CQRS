### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2
  commentId: T:Cqrs.Azure.BlobStorage.TableStorageStore`2
  id: TableStorageStore`2
  parent: Cqrs.Azure.BlobStorage
  children:
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`0)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`1)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`1})
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity})
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData``2(``0,System.Func{``0,Microsoft.WindowsAzure.Storage.Table.CloudTable,``1},System.Func{``0,System.String})
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity(`1)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`0)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`1)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow(System.Guid)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName(System.String)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`0)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`1)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove(`1)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult,`0)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`0)
  - Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`1)
  langs:
  - csharp
  - vb
  name: TableStorageStore<TData, TCollectionItemData>
  nameWithType: TableStorageStore<TData, TCollectionItemData>
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TableStorageStore
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 26
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nA <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> that uses Azure Storage for storage.\n"
  example: []
  syntax:
    content: 'public abstract class TableStorageStore<TData, TCollectionItemData> : StorageStore<TData, CloudTable>, IEnumerable<TData>, IDataStore<TCollectionItemData>, IOrderedQueryable<TCollectionItemData>, IQueryable<TCollectionItemData>, IEnumerable<TCollectionItemData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : TableEntity, new ()'
    typeParameters:
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Microsoft.WindowsAzure.Storage.Table.TableEntity" data-throw-if-not-resolved="false"></xref> Azure Table Storage will contain.
    - id: TCollectionItemData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Entities.IEntity" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.DataStores.IDataStore%601" data-throw-if-not-resolved="false"></xref> will contain.
    content.vb: >-
      Public MustInherit Class TableStorageStore(Of TData As {TableEntity, New}, TCollectionItemData)
          Inherits StorageStore(Of TData, CloudTable)
          Implements IEnumerable(Of TData), IDataStore(Of TCollectionItemData), IOrderedQueryable(Of TCollectionItemData), IQueryable(Of TCollectionItemData), IEnumerable(Of TCollectionItemData), IOrderedQueryable, IQueryable, IEnumerable, IDisposable
  inheritance:
  - System.Object
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  derivedClasses:
  - Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStore`1
  - Cqrs.Azure.BlobStorage.Events.TableStorageEventStore`1.RawTableStorageEventStore
  implements:
  - System.Collections.Generic.IEnumerable{{TData}}
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  - System.Linq.IOrderedQueryable{{TCollectionItemData}}
  - System.Linq.IQueryable{{TCollectionItemData}}
  - System.Collections.Generic.IEnumerable{{TCollectionItemData}}
  - System.Linq.IOrderedQueryable
  - System.Linq.IQueryable
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.WritableCollection
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.ReadableStorageAccount
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Logger
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetContainerName
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.IsContainerPublic
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.DefaultSettings
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetEnumerator
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.System#Collections#IEnumerable#GetEnumerator
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Expression
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.ElementType
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Provider
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Dispose
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add({TData})
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add(System.Collections.Generic.IEnumerable{{TData}})
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Destroy({TData})
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.RemoveAll
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Update({TData})
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String,System.Boolean)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.AzureStorageRetryPolicy
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.IO.Stream)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.String)
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Serialise({TData})
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialisationSettings
  - Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialiser
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Cqrs.DataStores.IDataStore{`1}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TCollectionItemData},System.Boolean}})
  - Cqrs.DataStores.IDataStore{`1}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  - Cqrs.DataStores.IDataStore{`1}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData)
  name.vb: TableStorageStore(Of TData, TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  commentId: P:Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  id: Collection
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Collection
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Collection
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Collection
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Collection
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 34
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets or set the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableQuery\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TableQuery<TData> Collection { get; }
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TData}}
    content.vb: Public ReadOnly Property Collection As TableQuery(Of TData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Collection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Collection
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  id: '#ctor(cdmdotnet.Logging.ILogger)'
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: TableStorageStore(ILogger)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.TableStorageStore(ILogger)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.TableStorageStore(cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 39
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nInitializes a new instance of the <xref href=\"Cqrs.Azure.BlobStorage.TableStorageStore%602\" data-throw-if-not-resolved=\"false\"></xref> class using the specified container.\n"
  example: []
  syntax:
    content: protected TableStorageStore(ILogger logger)
    parameters:
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected Sub New(logger As ILogger)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).TableStorageStore(ILogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).TableStorageStore(cdmdotnet.Logging.ILogger)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  id: Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Initialise(IStorageStoreConnectionStringFactory)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Initialise(IStorageStoreConnectionStringFactory)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Initialise
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 49
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nInitialises the <xref href=\"Cqrs.Azure.BlobStorage.StorageStore%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected override void Initialise(IStorageStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory)
    parameters:
    - id: tableStorageDataStoreConnectionStringFactory
      type: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    content.vb: Protected Overrides Sub Initialise(tableStorageDataStoreConnectionStringFactory As IStorageStoreConnectionStringFactory)
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Initialise(IStorageStoreConnectionStringFactory)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator
  isEii: true
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: IEnumerable<TCollectionItemData>.GetEnumerator()
  nameWithType: TableStorageStore<TData, TCollectionItemData>.IEnumerable<TCollectionItemData>.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 65
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: IEnumerator<TCollectionItemData> IEnumerable<TCollectionItemData>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TCollectionItemData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Function System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator As IEnumerator(Of TCollectionItemData) Implements IEnumerable(Of TCollectionItemData).GetEnumerator
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TCollectionItemData}}.GetEnumerator
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator()
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator
  id: GetEnumerator
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEnumerator
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 76
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public override IEnumerator<TData> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Public Overrides Function GetEnumerator As IEnumerator(Of TData)
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetEnumerator
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetEnumerator()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetEnumerator()
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression
  commentId: P:Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression
  id: Expression
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Expression
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Expression
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Expression
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 91
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the expression tree that is associated with the instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override Expression Expression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\nThe <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides ReadOnly Property Expression As Expression
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Expression
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression*
  implements:
  - System.Linq.IQueryable.Expression
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Expression
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Expression
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType
  commentId: P:Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType
  id: ElementType
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: TableStorageStore<TData, TCollectionItemData>.ElementType
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.ElementType
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ElementType
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 105
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the type of the element(s) that are returned when the expression tree associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public override Type ElementType { get; }
    parameters: []
    return:
      type: System.Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.\n"
    content.vb: Public Overrides ReadOnly Property ElementType As Type
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.ElementType
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType*
  implements:
  - System.Linq.IQueryable.ElementType
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).ElementType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).ElementType
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider
  commentId: P:Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider
  id: Provider
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Provider
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Provider
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Provider
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 119
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the query provider that is associated with this data source.\n"
  example: []
  syntax:
    content: public override IQueryProvider Provider { get; }
    parameters: []
    return:
      type: System.Linq.IQueryProvider
      description: "\nThe <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this data source.\n"
    content.vb: Public Overrides ReadOnly Property Provider As IQueryProvider
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Provider
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider*
  implements:
  - System.Linq.IQueryable.Provider
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Provider
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Provider
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData``2(``0,System.Func{``0,Microsoft.WindowsAzure.Storage.Table.CloudTable,``1},System.Func{``0,System.String})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData``2(``0,System.Func{``0,Microsoft.WindowsAzure.Storage.Table.CloudTable,``1},System.Func{``0,System.String})
  id: AsyncSaveData``2(``0,System.Func{``0,Microsoft.WindowsAzure.Storage.Table.CloudTable,``1},System.Func{``0,System.String})
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.AsyncSaveData<TSaveData, TResult>(TSaveData, System.Func<TSaveData, Microsoft.WindowsAzure.Storage.Table.CloudTable, TResult>, System.Func<TSaveData, System.String>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AsyncSaveData
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 132
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nSave the provided <code data-dev-comment-type=\"paramref\">data</code> asynchronously.\n"
  example: []
  syntax:
    content: protected virtual void AsyncSaveData<TSaveData, TResult>(TSaveData data, Func<TSaveData, CloudTable, TResult> function, Func<TSaveData, string> customFilenameFunction = null)
    parameters:
    - id: data
      type: '{TSaveData}'
    - id: function
      type: System.Func{{TSaveData},Microsoft.WindowsAzure.Storage.Table.CloudTable,{TResult}}
    - id: customFilenameFunction
      type: System.Func{{TSaveData},System.String}
    typeParameters:
    - id: TSaveData
    - id: TResult
    content.vb: Protected Overridable Sub AsyncSaveData(Of TSaveData, TResult)(data As TSaveData, function As Func(Of TSaveData, CloudTable, TResult), customFilenameFunction As Func(Of TSaveData, String) = Nothing)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).AsyncSaveData(Of TSaveData, TResult)(TSaveData, Func(Of TSaveData, CloudTable, TResult), Func(Of TSaveData, String))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).AsyncSaveData(Of TSaveData, TResult)(TSaveData, System.Func(Of TSaveData, Microsoft.WindowsAzure.Storage.Table.CloudTable, TResult), System.Func(Of TSaveData, System.String))
  name.vb: AsyncSaveData(Of TSaveData, TResult)(TSaveData, Func(Of TSaveData, CloudTable, TResult), Func(Of TSaveData, String))
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity(`1)
  id: CreateTableEntity(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: CreateTableEntity(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.CreateTableEntity(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.CreateTableEntity(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateTableEntity
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 161
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nCreates a new instance of <xref href=\"Microsoft.WindowsAzure.Storage.Table.ITableEntity\" data-throw-if-not-resolved=\"false\"></xref> populating it with the provided <code data-dev-comment-type=\"paramref\">data</code>.\n"
  example: []
  syntax:
    content: protected abstract ITableEntity CreateTableEntity(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
      description: The data to store.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    content.vb: Protected MustOverride Function CreateTableEntity(data As TCollectionItemData) As ITableEntity
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).CreateTableEntity(TCollectionItemData)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).CreateTableEntity(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`0)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`0)
  id: Add(`0)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(TData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 168
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public override void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overrides Sub Add(data As TData)
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add({TData})
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(TData)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(TData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(ITableEntity)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(ITableEntity)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 176
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(ITableEntity data)
    parameters:
    - id: data
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    content.vb: Public Overridable Sub Add(data As ITableEntity)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(ITableEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(IEnumerable<TData>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 211
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public override void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overrides Sub Add(data As IEnumerable(Of TData))
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add(System.Collections.Generic.IEnumerable{{TData}})
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity})
  id: Add(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity})
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<ITableEntity>)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(IEnumerable<ITableEntity>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(System.Collections.Generic.IEnumerable<Microsoft.WindowsAzure.Storage.Table.ITableEntity>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 219
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(IEnumerable<ITableEntity> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity}
    content.vb: Public Overridable Sub Add(data As IEnumerable(Of ITableEntity))
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(IEnumerable(Of ITableEntity))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(System.Collections.Generic.IEnumerable(Of Microsoft.WindowsAzure.Storage.Table.ITableEntity))
  name.vb: Add(IEnumerable(Of ITableEntity))
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`0)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Destroy(TData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 249
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRemove the provided <code data-dev-comment-type=\"paramref\">data</code> (normally by <xref href=\"Cqrs.Entities.IEntity.Rsn\" data-throw-if-not-resolved=\"false\"></xref>) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public override void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overrides Sub Destroy(data As TData)
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Destroy({TData})
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Destroy(TData)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Destroy(TData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(`1)
  id: Add(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 314
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
    content.vb: Public Overridable Sub Add(data As TCollectionItemData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Add({TCollectionItemData})
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(TCollectionItemData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add(System.Collections.Generic.IEnumerable{`1})
  id: Add(System.Collections.Generic.IEnumerable{`1})
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TCollectionItemData>)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add(IEnumerable<TCollectionItemData>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add(System.Collections.Generic.IEnumerable<TCollectionItemData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 323
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Add(IEnumerable<TCollectionItemData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TCollectionItemData}}
    content.vb: Public Overridable Sub Add(data As IEnumerable(Of TCollectionItemData))
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Add(System.Collections.Generic.IEnumerable{{TCollectionItemData}})
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add(IEnumerable(Of TCollectionItemData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add(System.Collections.Generic.IEnumerable(Of TCollectionItemData))
  name.vb: Add(IEnumerable(Of TCollectionItemData))
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove(`1)
  id: Remove(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Remove(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Remove(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Remove(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Remove
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 332
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nWill mark the <code data-dev-comment-type=\"paramref\">data</code> as logically (or soft).\n"
  example: []
  syntax:
    content: public abstract void Remove(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
    content.vb: Public MustOverride Sub Remove(data As TCollectionItemData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Remove({TCollectionItemData})
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Remove(TCollectionItemData)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Remove(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy(`1)
  id: Destroy(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Destroy(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Destroy(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Destroy(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 337
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRemove the provided <code data-dev-comment-type=\"paramref\">data</code> (normally by <xref href=\"Cqrs.Entities.IEntity.Rsn\" data-throw-if-not-resolved=\"false\"></xref>) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Destroy(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
    content.vb: Public Overridable Sub Destroy(data As TCollectionItemData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Destroy({TCollectionItemData})
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Destroy(TCollectionItemData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Destroy(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll
  id: RemoveAll
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: TableStorageStore<TData, TCollectionItemData>.RemoveAll()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 345
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRemove all contents (normally by use of a truncate operation) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public override void RemoveAll()
    content.vb: Public Overrides Sub RemoveAll
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.RemoveAll
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.RemoveAll
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).RemoveAll()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).RemoveAll()
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`1)
  id: Update(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Update(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Update(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Update(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 354
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nUpdate the provided <code data-dev-comment-type=\"paramref\">data</code> in the data store and persist the change.\n"
  example: []
  syntax:
    content: public virtual void Update(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
    content.vb: Public Overridable Sub Update(data As TCollectionItemData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Update*
  implements:
  - Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Update({TCollectionItemData})
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Update(TCollectionItemData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Update(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`0)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.Update(`0)
  id: Update(`0)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Update(TData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 362
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nUpdate the provided <code data-dev-comment-type=\"paramref\">data</code> in the data store and persist the change.\n"
  example: []
  syntax:
    content: public override void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overrides Sub Update(data As TData)
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Update({TData})
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.Update*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Update(TData)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Update(TData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`1)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`1)
  id: GetUpdatableTableEntity(`1)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetUpdatableTableEntity(TCollectionItemData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity(TCollectionItemData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity(TCollectionItemData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetUpdatableTableEntity
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 397
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> for updating.\n"
  example: []
  syntax:
    content: protected abstract TableOperation GetUpdatableTableEntity(TCollectionItemData data)
    parameters:
    - id: data
      type: '{TCollectionItemData}'
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
    content.vb: Protected MustOverride Function GetUpdatableTableEntity(data As TCollectionItemData) As TableOperation
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity(TCollectionItemData)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity(TCollectionItemData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`0)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity(`0)
  id: GetUpdatableTableEntity(`0)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetUpdatableTableEntity(TData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity(TData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetUpdatableTableEntity
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 402
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> for updating.\n"
  example: []
  syntax:
    content: protected abstract TableOperation GetUpdatableTableEntity(TData data)
    parameters:
    - id: data
      type: '{TData}'
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
    content.vb: Protected MustOverride Function GetUpdatableTableEntity(data As TData) As TableOperation
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity(TData)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity(TData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  id: CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: CreateSource(CloudStorageAccount, String, Boolean)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.CreateSource(CloudStorageAccount, String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSource
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 410
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nCreates a <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable\" data-throw-if-not-resolved=\"false\"></xref> with the specified name <code data-dev-comment-type=\"paramref\">sourceName</code> if it doesn&apos;t already exist.\n"
  example: []
  syntax:
    content: protected override CloudTable CreateSource(CloudStorageAccount storageAccount, string sourceName, bool isPublic = true)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account to create the <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTable" data-throw-if-not-resolved="false"></xref> is
    - id: sourceName
      type: System.String
      description: The name of the <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTable" data-throw-if-not-resolved="false"></xref>.
    - id: isPublic
      type: System.Boolean
      description: Whether or not this <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTable" data-throw-if-not-resolved="false"></xref> is publicly accessible.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.CloudTable
    content.vb: Protected Overrides Function CreateSource(storageAccount As CloudStorageAccount, sourceName As String, isPublic As Boolean = True) As CloudTable
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).CreateSource(CloudStorageAccount, String, Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow(System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow(System.Guid)
  id: GetByKeyAndRow(System.Guid)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetByKeyAndRow(Guid)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetByKeyAndRow(Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetByKeyAndRow(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetByKeyAndRow
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 444
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRetrieves the data from Azure Storage using <xref href=\"Cqrs.Azure.BlobStorage.TableStorageStore%602.Collection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual TData GetByKeyAndRow(Guid rsn)
    parameters:
    - id: rsn
      type: System.Guid
    return:
      type: '{TData}'
    content.vb: Public Overridable Function GetByKeyAndRow(rsn As Guid) As TData
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetByKeyAndRow(Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetByKeyAndRow(System.Guid)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey
  id: GetByKey
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetByKey()
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetByKey()
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetByKey()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetByKey
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 463
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRetrieves the data from Azure Storage using <xref href=\"Cqrs.Azure.BlobStorage.TableStorageStore%602.Collection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TData> GetByKey()
    return:
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overridable Function GetByKey As IEnumerable(Of TData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetByKey()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetByKey()
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult,`0)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult,`0)
  id: ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult,`0)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: ReplaceValues(TableResult, TData)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.ReplaceValues(TableResult, TData)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult, TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReplaceValues
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 483
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nExtracts <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableResult.Result\" data-throw-if-not-resolved=\"false\"></xref> of the provided <code data-dev-comment-type=\"paramref\">retrievedResult</code>\nIf <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableResult.Result\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"Cqrs.Azure.BlobStorage.IEventDataTableEntity%601\" data-throw-if-not-resolved=\"false\"></xref>\nthen <xref href=\"Cqrs.Azure.BlobStorage.IEventDataTableEntity%601.EventData\" data-throw-if-not-resolved=\"false\"></xref> is replaced with <code data-dev-comment-type=\"paramref\">data</code>.\nOtherwise <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableResult.Result\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"Cqrs.Azure.BlobStorage.IEntityTableEntity%601\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"Cqrs.Azure.BlobStorage.IEntityTableEntity%601.Entity\" data-throw-if-not-resolved=\"false\"></xref> is replaced with <code data-dev-comment-type=\"paramref\">data</code>.\n"
  example: []
  syntax:
    content: protected virtual ITableEntity ReplaceValues(TableResult retrievedResult, TData data)
    parameters:
    - id: retrievedResult
      type: Microsoft.WindowsAzure.Storage.Table.TableResult
      description: The existing data to update.
    - id: data
      type: '{TData}'
      description: The new data to store.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    content.vb: Protected Overridable Function ReplaceValues(retrievedResult As TableResult, data As TData) As ITableEntity
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).ReplaceValues(TableResult, TData)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult, TData)
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName(System.String)
  id: GetSafeSourceName(System.String)
  parent: Cqrs.Azure.BlobStorage.TableStorageStore`2
  langs:
  - csharp
  - vb
  name: GetSafeSourceName(String)
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetSafeSourceName(String)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetSafeSourceName(System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSafeSourceName
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStore.cs
    startLine: 501
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the provided <code data-dev-comment-type=\"paramref\">sourceName</code> in a safe to use format.\n"
  example: []
  syntax:
    content: protected override string GetSafeSourceName(string sourceName)
    parameters:
    - id: sourceName
      type: System.String
      description: The name to make safe.
    return:
      type: System.String
    content.vb: Protected Overrides Function GetSafeSourceName(sourceName As String) As String
  overridden: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String)
  overload: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName*
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetSafeSourceName(String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetSafeSourceName(System.String)
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.WindowsAzure.Storage.Table.TableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: TableEntity
  nameWithType: TableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEntity
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  commentId: T:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}
  parent: Cqrs.Azure.BlobStorage
  definition: Cqrs.Azure.BlobStorage.StorageStore`2
  name: StorageStore<TData, CloudTable>
  nameWithType: StorageStore<TData, CloudTable>
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>
  nameWithType.vb: StorageStore(Of TData, CloudTable)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable)
  name.vb: StorageStore(Of TData, CloudTable)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
    name: CloudTable
    nameWithType: CloudTable
    fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
    name: CloudTable
    nameWithType: CloudTable
    fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  commentId: T:Cqrs.DataStores.IDataStore{`1}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TCollectionItemData>
  nameWithType: IDataStore<TCollectionItemData>
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>
  nameWithType.vb: IDataStore(Of TCollectionItemData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData)
  name.vb: IDataStore(Of TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TCollectionItemData}}
  commentId: T:System.Linq.IOrderedQueryable{`1}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TCollectionItemData>
  nameWithType: IOrderedQueryable<TCollectionItemData>
  fullName: System.Linq.IOrderedQueryable<TCollectionItemData>
  nameWithType.vb: IOrderedQueryable(Of TCollectionItemData)
  fullName.vb: System.Linq.IOrderedQueryable(Of TCollectionItemData)
  name.vb: IOrderedQueryable(Of TCollectionItemData)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TCollectionItemData}}
  commentId: T:System.Linq.IQueryable{`1}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TCollectionItemData>
  nameWithType: IQueryable<TCollectionItemData>
  fullName: System.Linq.IQueryable<TCollectionItemData>
  nameWithType.vb: IQueryable(Of TCollectionItemData)
  fullName.vb: System.Linq.IQueryable(Of TCollectionItemData)
  name.vb: IQueryable(Of TCollectionItemData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TCollectionItemData}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCollectionItemData>
  nameWithType: IEnumerable<TCollectionItemData>
  fullName: System.Collections.Generic.IEnumerable<TCollectionItemData>
  nameWithType.vb: IEnumerable(Of TCollectionItemData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCollectionItemData)
  name.vb: IEnumerable(Of TCollectionItemData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable
  commentId: T:System.Linq.IOrderedQueryable
  parent: System.Linq
  isExternal: true
  name: IOrderedQueryable
  nameWithType: IOrderedQueryable
  fullName: System.Linq.IOrderedQueryable
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.WritableCollection
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.WritableCollection
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  name: WritableCollection
  nameWithType: StorageStore<TData, CloudTable>.WritableCollection
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.WritableCollection
  nameWithType.vb: StorageStore(Of TData, CloudTable).WritableCollection
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).WritableCollection
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.ReadableStorageAccount
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.ReadableStorageAccount
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  name: ReadableStorageAccount
  nameWithType: StorageStore<TData, CloudTable>.ReadableStorageAccount
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.ReadableStorageAccount
  nameWithType.vb: StorageStore(Of TData, CloudTable).ReadableStorageAccount
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).ReadableStorageAccount
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Logger
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Logger
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  name: Logger
  nameWithType: StorageStore<TData, CloudTable>.Logger
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Logger
  nameWithType.vb: StorageStore(Of TData, CloudTable).Logger
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Logger
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetContainerName
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetContainerName
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  name: GetContainerName
  nameWithType: StorageStore<TData, CloudTable>.GetContainerName
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetContainerName
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetContainerName
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetContainerName
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.IsContainerPublic
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.IsContainerPublic
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  name: IsContainerPublic
  nameWithType: StorageStore<TData, CloudTable>.IsContainerPublic
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.IsContainerPublic
  nameWithType.vb: StorageStore(Of TData, CloudTable).IsContainerPublic
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).IsContainerPublic
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.DefaultSettings
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.DefaultSettings
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  name: DefaultSettings
  nameWithType: StorageStore<TData, CloudTable>.DefaultSettings
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.DefaultSettings
  nameWithType.vb: StorageStore(Of TData, CloudTable).DefaultSettings
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).DefaultSettings
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  name: Initialise(IStorageStoreConnectionStringFactory)
  nameWithType: StorageStore<TData, CloudTable>.Initialise(IStorageStoreConnectionStringFactory)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Initialise(IStorageStoreConnectionStringFactory)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
    name: Initialise
    nameWithType: StorageStore<TData, CloudTable>.Initialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    name: IStorageStoreConnectionStringFactory
    nameWithType: IStorageStoreConnectionStringFactory
    fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
    name: Initialise
    nameWithType: StorageStore(Of TData, CloudTable).Initialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    name: IStorageStoreConnectionStringFactory
    nameWithType: IStorageStoreConnectionStringFactory
    fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetEnumerator
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: StorageStore<TData, CloudTable>.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetEnumerator()
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetEnumerator()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
    name: GetEnumerator
    nameWithType: StorageStore<TData, CloudTable>.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
    name: GetEnumerator
    nameWithType: StorageStore(Of TData, CloudTable).GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.System#Collections#IEnumerable#GetEnumerator
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: StorageStore<TData, CloudTable>.IEnumerable.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: StorageStore(Of TData, CloudTable).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: StorageStore<TData, CloudTable>.IEnumerable.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: StorageStore(Of TData, CloudTable).System.Collections.IEnumerable.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Expression
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Expression
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  name: Expression
  nameWithType: StorageStore<TData, CloudTable>.Expression
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Expression
  nameWithType.vb: StorageStore(Of TData, CloudTable).Expression
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Expression
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.ElementType
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.ElementType
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  name: ElementType
  nameWithType: StorageStore<TData, CloudTable>.ElementType
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.ElementType
  nameWithType.vb: StorageStore(Of TData, CloudTable).ElementType
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).ElementType
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Provider
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Provider
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  name: Provider
  nameWithType: StorageStore<TData, CloudTable>.Provider
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Provider
  nameWithType.vb: StorageStore(Of TData, CloudTable).Provider
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Provider
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Dispose
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Dispose
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  name: Dispose()
  nameWithType: StorageStore<TData, CloudTable>.Dispose()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Dispose()
  nameWithType.vb: StorageStore(Of TData, CloudTable).Dispose()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Dispose()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
    name: Dispose
    nameWithType: StorageStore<TData, CloudTable>.Dispose
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
    name: Dispose
    nameWithType: StorageStore(Of TData, CloudTable).Dispose
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add({TData})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  name: Add(TData)
  nameWithType: StorageStore<TData, CloudTable>.Add(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add(TData)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Add(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Add(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
    name: Add
    nameWithType: StorageStore<TData, CloudTable>.Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
    name: Add
    nameWithType: StorageStore(Of TData, CloudTable).Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<TData>)
  nameWithType: StorageStore<TData, CloudTable>.Add(IEnumerable<TData>)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: StorageStore<TData, CloudTable>.Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: StorageStore(Of TData, CloudTable).Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Destroy({TData})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Destroy(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  name: Destroy(TData)
  nameWithType: StorageStore<TData, CloudTable>.Destroy(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Destroy(TData)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Destroy(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
    name: Destroy
    nameWithType: StorageStore<TData, CloudTable>.Destroy
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
    name: Destroy
    nameWithType: StorageStore(Of TData, CloudTable).Destroy
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.RemoveAll
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.RemoveAll
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  name: RemoveAll()
  nameWithType: StorageStore<TData, CloudTable>.RemoveAll()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.RemoveAll()
  nameWithType.vb: StorageStore(Of TData, CloudTable).RemoveAll()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).RemoveAll()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
    name: RemoveAll
    nameWithType: StorageStore<TData, CloudTable>.RemoveAll
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
    name: RemoveAll
    nameWithType: StorageStore(Of TData, CloudTable).RemoveAll
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Update({TData})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Update(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  name: Update(TData)
  nameWithType: StorageStore<TData, CloudTable>.Update(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Update(TData)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Update(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Update(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
    name: Update
    nameWithType: StorageStore<TData, CloudTable>.Update
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
    name: Update
    nameWithType: StorageStore(Of TData, CloudTable).Update
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  name: CreateSource(CloudStorageAccount, String, Boolean)
  nameWithType: StorageStore<TData, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  nameWithType.vb: StorageStore(Of TData, CloudTable).CreateSource(CloudStorageAccount, String, Boolean)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
    name: CreateSource
    nameWithType: StorageStore<TData, CloudTable>.CreateSource
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.CreateSource
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
    name: CreateSource
    nameWithType: StorageStore(Of TData, CloudTable).CreateSource
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).CreateSource
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  name: GetSafeSourceName(String)
  nameWithType: StorageStore<TData, CloudTable>.GetSafeSourceName(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSafeSourceName(System.String)
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetSafeSourceName(String)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSafeSourceName(System.String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
    name: GetSafeSourceName
    nameWithType: StorageStore<TData, CloudTable>.GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
    name: GetSafeSourceName
    nameWithType: StorageStore(Of TData, CloudTable).GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSafeSourceName(System.String,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  name: GetSafeSourceName(String, Boolean)
  nameWithType: StorageStore<TData, CloudTable>.GetSafeSourceName(String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSafeSourceName(System.String, System.Boolean)
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetSafeSourceName(String, Boolean)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSafeSourceName(System.String, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
    name: GetSafeSourceName
    nameWithType: StorageStore<TData, CloudTable>.GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
    name: GetSafeSourceName
    nameWithType: StorageStore(Of TData, CloudTable).GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.AzureStorageRetryPolicy
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.AzureStorageRetryPolicy
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  name: AzureStorageRetryPolicy
  nameWithType: StorageStore<TData, CloudTable>.AzureStorageRetryPolicy
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.AzureStorageRetryPolicy
  nameWithType.vb: StorageStore(Of TData, CloudTable).AzureStorageRetryPolicy
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).AzureStorageRetryPolicy
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.IO.Stream)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.IO.Stream)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  name: Deserialise(Stream)
  nameWithType: StorageStore<TData, CloudTable>.Deserialise(Stream)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Deserialise(System.IO.Stream)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Deserialise(Stream)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Deserialise(System.IO.Stream)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
    name: Deserialise
    nameWithType: StorageStore<TData, CloudTable>.Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
    name: Deserialise
    nameWithType: StorageStore(Of TData, CloudTable).Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Deserialise(System.String)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  name: Deserialise(String)
  nameWithType: StorageStore<TData, CloudTable>.Deserialise(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Deserialise(System.String)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Deserialise(String)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Deserialise(System.String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
    name: Deserialise
    nameWithType: StorageStore<TData, CloudTable>.Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
    name: Deserialise
    nameWithType: StorageStore(Of TData, CloudTable).Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.Serialise({TData})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.Serialise(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  name: Serialise(TData)
  nameWithType: StorageStore<TData, CloudTable>.Serialise(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Serialise(TData)
  nameWithType.vb: StorageStore(Of TData, CloudTable).Serialise(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Serialise(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
    name: Serialise
    nameWithType: StorageStore<TData, CloudTable>.Serialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Serialise
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
    name: Serialise
    nameWithType: StorageStore(Of TData, CloudTable).Serialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).Serialise
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialisationSettings
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialisationSettings
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  name: GetSerialisationSettings()
  nameWithType: StorageStore<TData, CloudTable>.GetSerialisationSettings()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSerialisationSettings()
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetSerialisationSettings()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSerialisationSettings()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: StorageStore<TData, CloudTable>.GetSerialisationSettings
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: StorageStore(Of TData, CloudTable).GetSerialisationSettings
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialiser
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore{`0,Microsoft.WindowsAzure.Storage.Table.CloudTable}.GetSerialiser
  parent: Cqrs.Azure.BlobStorage.StorageStore{{TData},Microsoft.WindowsAzure.Storage.Table.CloudTable}
  definition: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  name: GetSerialiser()
  nameWithType: StorageStore<TData, CloudTable>.GetSerialiser()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSerialiser()
  nameWithType.vb: StorageStore(Of TData, CloudTable).GetSerialiser()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSerialiser()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
    name: GetSerialiser
    nameWithType: StorageStore<TData, CloudTable>.GetSerialiser
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSerialiser
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
    name: GetSerialiser
    nameWithType: StorageStore(Of TData, CloudTable).GetSerialiser
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, Microsoft.WindowsAzure.Storage.Table.CloudTable).GetSerialiser
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`1}.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TCollectionItemData},System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  definition: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TCollectionItemData, TDbEntity>(Expression<Func<TCollectionItemData, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TCollectionItemData, TDbEntity>(Expression<Func<TCollectionItemData, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TCollectionItemData, TDbEntity>(System.Linq.Expressions.Expression<System.Func<TCollectionItemData, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TCollectionItemData, TDbEntity)(Expression(Of Func(Of TCollectionItemData, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TCollectionItemData, TDbEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TCollectionItemData, System.Boolean)))
  name.vb: Where(Of TCollectionItemData, TDbEntity)(Expression(Of Func(Of TCollectionItemData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TCollectionItemData, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TCollectionItemData, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TCollectionItemData, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TCollectionItemData, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TCollectionItemData, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TCollectionItemData, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`1}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByName<TCollectionItemData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TCollectionItemData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TCollectionItemData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TCollectionItemData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TCollectionItemData)(System.String)
  name.vb: GetByName(Of TCollectionItemData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName<TCollectionItemData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TCollectionItemData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TCollectionItemData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName(Of TCollectionItemData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TCollectionItemData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TCollectionItemData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{`1}.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByFolder<TCollectionItemData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TCollectionItemData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TCollectionItemData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TCollectionItemData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TCollectionItemData)(System.String)
  name.vb: GetByFolder(Of TCollectionItemData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder<TCollectionItemData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TCollectionItemData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TCollectionItemData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder(Of TCollectionItemData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TCollectionItemData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TCollectionItemData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: Cqrs.Azure.BlobStorage.StorageStore`2
  commentId: T:Cqrs.Azure.BlobStorage.StorageStore`2
  isExternal: false
  name: StorageStore<TData, TSource>
  nameWithType: StorageStore<TData, TSource>
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>
  nameWithType.vb: StorageStore(Of TData, TSource)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource)
  name.vb: StorageStore(Of TData, TSource)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  isExternal: false
  name: WritableCollection
  nameWithType: StorageStore<TData, TSource>.WritableCollection
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.WritableCollection
  nameWithType.vb: StorageStore(Of TData, TSource).WritableCollection
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).WritableCollection
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  isExternal: false
  name: ReadableStorageAccount
  nameWithType: StorageStore<TData, TSource>.ReadableStorageAccount
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ReadableStorageAccount
  nameWithType.vb: StorageStore(Of TData, TSource).ReadableStorageAccount
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ReadableStorageAccount
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  isExternal: false
  name: Logger
  nameWithType: StorageStore<TData, TSource>.Logger
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Logger
  nameWithType.vb: StorageStore(Of TData, TSource).Logger
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Logger
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  isExternal: false
  name: GetContainerName
  nameWithType: StorageStore<TData, TSource>.GetContainerName
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetContainerName
  nameWithType.vb: StorageStore(Of TData, TSource).GetContainerName
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetContainerName
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  isExternal: false
  name: IsContainerPublic
  nameWithType: StorageStore<TData, TSource>.IsContainerPublic
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.IsContainerPublic
  nameWithType.vb: StorageStore(Of TData, TSource).IsContainerPublic
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).IsContainerPublic
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  isExternal: false
  name: DefaultSettings
  nameWithType: StorageStore<TData, TSource>.DefaultSettings
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.DefaultSettings
  nameWithType.vb: StorageStore(Of TData, TSource).DefaultSettings
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).DefaultSettings
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  isExternal: false
  name: Initialise(IStorageStoreConnectionStringFactory)
  nameWithType: StorageStore<TData, TSource>.Initialise(IStorageStoreConnectionStringFactory)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  nameWithType.vb: StorageStore(Of TData, TSource).Initialise(IStorageStoreConnectionStringFactory)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
    name: Initialise
    nameWithType: StorageStore<TData, TSource>.Initialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    name: IStorageStoreConnectionStringFactory
    nameWithType: IStorageStoreConnectionStringFactory
    fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
    name: Initialise
    nameWithType: StorageStore(Of TData, TSource).Initialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    name: IStorageStoreConnectionStringFactory
    nameWithType: IStorageStoreConnectionStringFactory
    fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  isExternal: false
  name: GetEnumerator()
  nameWithType: StorageStore<TData, TSource>.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetEnumerator()
  nameWithType.vb: StorageStore(Of TData, TSource).GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetEnumerator()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
    name: GetEnumerator
    nameWithType: StorageStore<TData, TSource>.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
    name: GetEnumerator
    nameWithType: StorageStore(Of TData, TSource).GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: StorageStore<TData, TSource>.IEnumerable.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: StorageStore<TData, TSource>.IEnumerable.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  isExternal: false
  name: Expression
  nameWithType: StorageStore<TData, TSource>.Expression
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Expression
  nameWithType.vb: StorageStore(Of TData, TSource).Expression
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Expression
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  isExternal: false
  name: ElementType
  nameWithType: StorageStore<TData, TSource>.ElementType
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ElementType
  nameWithType.vb: StorageStore(Of TData, TSource).ElementType
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ElementType
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  isExternal: false
  name: Provider
  nameWithType: StorageStore<TData, TSource>.Provider
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Provider
  nameWithType.vb: StorageStore(Of TData, TSource).Provider
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Provider
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  isExternal: false
  name: Dispose()
  nameWithType: StorageStore<TData, TSource>.Dispose()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Dispose()
  nameWithType.vb: StorageStore(Of TData, TSource).Dispose()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Dispose()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
    name: Dispose
    nameWithType: StorageStore<TData, TSource>.Dispose
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
    name: Dispose
    nameWithType: StorageStore(Of TData, TSource).Dispose
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  isExternal: false
  name: Add(TData)
  nameWithType: StorageStore<TData, TSource>.Add(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add(TData)
  nameWithType.vb: StorageStore(Of TData, TSource).Add(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
    name: Add
    nameWithType: StorageStore<TData, TSource>.Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
    name: Add
    nameWithType: StorageStore(Of TData, TSource).Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<TData>)
  nameWithType: StorageStore<TData, TSource>.Add(IEnumerable<TData>)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: StorageStore(Of TData, TSource).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: StorageStore<TData, TSource>.Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: StorageStore(Of TData, TSource).Add
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  isExternal: false
  name: Destroy(TData)
  nameWithType: StorageStore<TData, TSource>.Destroy(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Destroy(TData)
  nameWithType.vb: StorageStore(Of TData, TSource).Destroy(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
    name: Destroy
    nameWithType: StorageStore<TData, TSource>.Destroy
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
    name: Destroy
    nameWithType: StorageStore(Of TData, TSource).Destroy
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  isExternal: false
  name: RemoveAll()
  nameWithType: StorageStore<TData, TSource>.RemoveAll()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.RemoveAll()
  nameWithType.vb: StorageStore(Of TData, TSource).RemoveAll()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).RemoveAll()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
    name: RemoveAll
    nameWithType: StorageStore<TData, TSource>.RemoveAll
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
    name: RemoveAll
    nameWithType: StorageStore(Of TData, TSource).RemoveAll
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  isExternal: false
  name: Update(TData)
  nameWithType: StorageStore<TData, TSource>.Update(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Update(TData)
  nameWithType.vb: StorageStore(Of TData, TSource).Update(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Update(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
    name: Update
    nameWithType: StorageStore<TData, TSource>.Update
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
    name: Update
    nameWithType: StorageStore(Of TData, TSource).Update
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  isExternal: true
  name: CreateSource(CloudStorageAccount, String, Boolean)
  nameWithType: StorageStore<TData, TSource>.CreateSource(CloudStorageAccount, String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  nameWithType.vb: StorageStore(Of TData, TSource).CreateSource(CloudStorageAccount, String, Boolean)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
    name: CreateSource
    nameWithType: StorageStore<TData, TSource>.CreateSource
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.CreateSource
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
    name: CreateSource
    nameWithType: StorageStore(Of TData, TSource).CreateSource
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).CreateSource
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  isExternal: true
  name: GetSafeSourceName(String)
  nameWithType: StorageStore<TData, TSource>.GetSafeSourceName(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName(System.String)
  nameWithType.vb: StorageStore(Of TData, TSource).GetSafeSourceName(String)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName(System.String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
    name: GetSafeSourceName
    nameWithType: StorageStore<TData, TSource>.GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
    name: GetSafeSourceName
    nameWithType: StorageStore(Of TData, TSource).GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  isExternal: true
  name: GetSafeSourceName(String, Boolean)
  nameWithType: StorageStore<TData, TSource>.GetSafeSourceName(String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName(System.String, System.Boolean)
  nameWithType.vb: StorageStore(Of TData, TSource).GetSafeSourceName(String, Boolean)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName(System.String, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
    name: GetSafeSourceName
    nameWithType: StorageStore<TData, TSource>.GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
    name: GetSafeSourceName
    nameWithType: StorageStore(Of TData, TSource).GetSafeSourceName
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  isExternal: false
  name: AzureStorageRetryPolicy
  nameWithType: StorageStore<TData, TSource>.AzureStorageRetryPolicy
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.AzureStorageRetryPolicy
  nameWithType.vb: StorageStore(Of TData, TSource).AzureStorageRetryPolicy
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).AzureStorageRetryPolicy
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  isExternal: true
  name: Deserialise(Stream)
  nameWithType: StorageStore<TData, TSource>.Deserialise(Stream)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise(System.IO.Stream)
  nameWithType.vb: StorageStore(Of TData, TSource).Deserialise(Stream)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise(System.IO.Stream)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
    name: Deserialise
    nameWithType: StorageStore<TData, TSource>.Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
    name: Deserialise
    nameWithType: StorageStore(Of TData, TSource).Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  isExternal: true
  name: Deserialise(String)
  nameWithType: StorageStore<TData, TSource>.Deserialise(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise(System.String)
  nameWithType.vb: StorageStore(Of TData, TSource).Deserialise(String)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise(System.String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
    name: Deserialise
    nameWithType: StorageStore<TData, TSource>.Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
    name: Deserialise
    nameWithType: StorageStore(Of TData, TSource).Deserialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  isExternal: false
  name: Serialise(TData)
  nameWithType: StorageStore<TData, TSource>.Serialise(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Serialise(TData)
  nameWithType.vb: StorageStore(Of TData, TSource).Serialise(TData)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Serialise(TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
    name: Serialise
    nameWithType: StorageStore<TData, TSource>.Serialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Serialise
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
    name: Serialise
    nameWithType: StorageStore(Of TData, TSource).Serialise
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Serialise
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  isExternal: false
  name: GetSerialisationSettings()
  nameWithType: StorageStore<TData, TSource>.GetSerialisationSettings()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialisationSettings()
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialisationSettings()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialisationSettings()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: StorageStore<TData, TSource>.GetSerialisationSettings
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: StorageStore(Of TData, TSource).GetSerialisationSettings
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  isExternal: false
  name: GetSerialiser()
  nameWithType: StorageStore<TData, TSource>.GetSerialiser()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialiser()
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialiser()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialiser()
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
    name: GetSerialiser
    nameWithType: StorageStore<TData, TSource>.GetSerialiser
    fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialiser
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
    name: GetSerialiser
    nameWithType: StorageStore(Of TData, TSource).GetSerialiser
    fullName: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialiser
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>(Cqrs.DataStores.IDataStore<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(Cqrs.DataStores.IDataStore(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TEntity, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TEntity, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  commentId: T:Cqrs.Sql.DataStores.SqlDataStoreExtensions
  parent: Cqrs.Sql.DataStores
  isExternal: false
  name: SqlDataStoreExtensions
  nameWithType: SqlDataStoreExtensions
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByName<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByName(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: BlobStorageStoreExtensions
  nameWithType: BlobStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByFolder<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores
  commentId: N:Cqrs.Sql.DataStores
  isExternal: false
  name: Cqrs.Sql.DataStores
  nameWithType: Cqrs.Sql.DataStores
  fullName: Cqrs.Sql.DataStores
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuery
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  isExternal: false
  name: Collection
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Collection
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Collection
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Collection
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Collection
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TData}}
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuery{`0}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
  name: TableQuery<TData>
  nameWithType: TableQuery<TData>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery<TData>
  nameWithType.vb: TableQuery(Of TData)
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TData)
  name.vb: TableQuery(Of TData)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    nameWithType: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    nameWithType: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuery`1
  isExternal: true
  name: TableQuery<TElement>
  nameWithType: TableQuery<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>
  nameWithType.vb: TableQuery(Of TElement)
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement)
  name.vb: TableQuery(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    nameWithType: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    nameWithType: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2
  commentId: T:Cqrs.Azure.BlobStorage.TableStorageStore`2
  isExternal: false
  name: TableStorageStore<TData, TCollectionItemData>
  nameWithType: TableStorageStore<TData, TCollectionItemData>
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData)
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData)
  name.vb: TableStorageStore(Of TData, TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStore`2
    name: TableStorageStore
    nameWithType: TableStorageStore
    fullName: Cqrs.Azure.BlobStorage.TableStorageStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.TableStorageStore`2
    name: TableStorageStore
    nameWithType: TableStorageStore
    fullName: Cqrs.Azure.BlobStorage.TableStorageStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.#ctor
  isExternal: false
  name: TableStorageStore
  nameWithType: TableStorageStore<TData, TCollectionItemData>.TableStorageStore
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.TableStorageStore
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).TableStorageStore
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).TableStorageStore
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Initialise
  isExternal: false
  name: Initialise
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Initialise
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Initialise
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Initialise
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Initialise
- uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  commentId: T:Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: IStorageStoreConnectionStringFactory
  nameWithType: IStorageStoreConnectionStringFactory
  fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.System#Collections#Generic#IEnumerable{TCollectionItemData}#GetEnumerator
  isExternal: false
  name: IEnumerable<TCollectionItemData>.GetEnumerator
  nameWithType: TableStorageStore<TData, TCollectionItemData>.IEnumerable<TCollectionItemData>.GetEnumerator
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TCollectionItemData}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TCollectionItemData}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TCollectionItemData>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TCollectionItemData).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCollectionItemData).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TCollectionItemData>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TCollectionItemData>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TCollectionItemData).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TCollectionItemData).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TCollectionItemData}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TCollectionItemData>
  nameWithType: IEnumerator<TCollectionItemData>
  fullName: System.Collections.Generic.IEnumerator<TCollectionItemData>
  nameWithType.vb: IEnumerator(Of TCollectionItemData)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TCollectionItemData)
  name.vb: IEnumerator(Of TCollectionItemData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetEnumerator
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetEnumerator
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetEnumerator
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{TData}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TData>
  nameWithType: IEnumerator<TData>
  fullName: System.Collections.Generic.IEnumerator<TData>
  nameWithType.vb: IEnumerator(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TData)
  name.vb: IEnumerator(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Expression
  isExternal: false
  name: Expression
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Expression
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Expression
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Expression
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Expression
- uid: System.Linq.IQueryable.Expression
  commentId: P:System.Linq.IQueryable.Expression
  parent: System.Linq.IQueryable
  isExternal: true
  name: Expression
  nameWithType: IQueryable.Expression
  fullName: System.Linq.IQueryable.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.ElementType
  isExternal: false
  name: ElementType
  nameWithType: TableStorageStore<TData, TCollectionItemData>.ElementType
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.ElementType
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).ElementType
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).ElementType
- uid: System.Linq.IQueryable.ElementType
  commentId: P:System.Linq.IQueryable.ElementType
  parent: System.Linq.IQueryable
  isExternal: true
  name: ElementType
  nameWithType: IQueryable.ElementType
  fullName: System.Linq.IQueryable.ElementType
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Provider
  isExternal: false
  name: Provider
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Provider
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Provider
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Provider
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Provider
- uid: System.Linq.IQueryable.Provider
  commentId: P:System.Linq.IQueryable.Provider
  parent: System.Linq.IQueryable
  isExternal: true
  name: Provider
  nameWithType: IQueryable.Provider
  fullName: System.Linq.IQueryable.Provider
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.AsyncSaveData
  isExternal: false
  name: AsyncSaveData
  nameWithType: TableStorageStore<TData, TCollectionItemData>.AsyncSaveData
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.AsyncSaveData
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).AsyncSaveData
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).AsyncSaveData
- uid: '{TSaveData}'
  commentId: '!:TSaveData'
  definition: TSaveData
  name: TSaveData
  nameWithType: TSaveData
  fullName: TSaveData
- uid: System.Func{{TSaveData},Microsoft.WindowsAzure.Storage.Table.CloudTable,{TResult}}
  commentId: T:System.Func{``0,Microsoft.WindowsAzure.Storage.Table.CloudTable,``1}
  parent: System
  definition: System.Func`3
  name: Func<TSaveData, CloudTable, TResult>
  nameWithType: Func<TSaveData, CloudTable, TResult>
  fullName: System.Func<TSaveData, Microsoft.WindowsAzure.Storage.Table.CloudTable, TResult>
  nameWithType.vb: Func(Of TSaveData, CloudTable, TResult)
  fullName.vb: System.Func(Of TSaveData, Microsoft.WindowsAzure.Storage.Table.CloudTable, TResult)
  name.vb: Func(Of TSaveData, CloudTable, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaveData
    nameWithType: TSaveData
    fullName: TSaveData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
    name: CloudTable
    nameWithType: CloudTable
    fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaveData
    nameWithType: TSaveData
    fullName: TSaveData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
    name: CloudTable
    nameWithType: CloudTable
    fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSaveData},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<TSaveData, String>
  nameWithType: Func<TSaveData, String>
  fullName: System.Func<TSaveData, System.String>
  nameWithType.vb: Func(Of TSaveData, String)
  fullName.vb: System.Func(Of TSaveData, System.String)
  name.vb: Func(Of TSaveData, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaveData
    nameWithType: TSaveData
    fullName: TSaveData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaveData
    nameWithType: TSaveData
    fullName: TSaveData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TSaveData
  commentId: '!:TSaveData'
  isExternal: false
  name: TSaveData
  nameWithType: TSaveData
  fullName: TSaveData
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.ITableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: ITableEntity
  nameWithType: ITableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateTableEntity
  isExternal: false
  name: CreateTableEntity
  nameWithType: TableStorageStore<TData, TCollectionItemData>.CreateTableEntity
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.CreateTableEntity
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).CreateTableEntity
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).CreateTableEntity
- uid: '{TCollectionItemData}'
  commentId: '!:TCollectionItemData'
  definition: TCollectionItemData
  name: TCollectionItemData
  nameWithType: TCollectionItemData
  fullName: TCollectionItemData
- uid: TCollectionItemData
  isExternal: false
  name: TCollectionItemData
  nameWithType: TCollectionItemData
  fullName: TCollectionItemData
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Add*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Add
  isExternal: false
  name: Add
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Add
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Add
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Add
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Add
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ITableEntity>
  nameWithType: IEnumerable<ITableEntity>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.WindowsAzure.Storage.Table.ITableEntity>
  nameWithType.vb: IEnumerable(Of ITableEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  name.vb: IEnumerable(Of ITableEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    name: ITableEntity
    nameWithType: ITableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    name: ITableEntity
    nameWithType: ITableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.IEntity.Rsn
  commentId: P:Cqrs.Entities.IEntity.Rsn
  parent: Cqrs.Entities.IEntity
  isExternal: false
  name: Rsn
  nameWithType: IEntity.Rsn
  fullName: Cqrs.Entities.IEntity.Rsn
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Destroy
  isExternal: false
  name: Destroy
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Destroy
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Destroy
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Destroy
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Destroy
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Add({TCollectionItemData})
  commentId: M:Cqrs.DataStores.IDataStore{`1}.Add(`1)
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(`0)
  name: Add(TCollectionItemData)
  nameWithType: IDataStore<TCollectionItemData>.Add(TCollectionItemData)
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Add(TCollectionItemData)
  nameWithType.vb: IDataStore(Of TCollectionItemData).Add(TCollectionItemData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Add(TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TCollectionItemData>.Add
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TCollectionItemData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(`0)
  isExternal: false
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Add(System.Collections.Generic.IEnumerable{{TCollectionItemData}})
  commentId: M:Cqrs.DataStores.IDataStore{`1}.Add(System.Collections.Generic.IEnumerable{`1})
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<TCollectionItemData>)
  nameWithType: IDataStore<TCollectionItemData>.Add(IEnumerable<TCollectionItemData>)
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Add(System.Collections.Generic.IEnumerable<TCollectionItemData>)
  nameWithType.vb: IDataStore(Of TCollectionItemData).Add(IEnumerable(Of TCollectionItemData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Add(System.Collections.Generic.IEnumerable(Of TCollectionItemData))
  name.vb: Add(IEnumerable(Of TCollectionItemData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TCollectionItemData>.Add
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TCollectionItemData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Remove
  isExternal: false
  name: Remove
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Remove
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Remove
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Remove
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Remove
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Remove({TCollectionItemData})
  commentId: M:Cqrs.DataStores.IDataStore{`1}.Remove(`1)
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.Remove(`0)
  name: Remove(TCollectionItemData)
  nameWithType: IDataStore<TCollectionItemData>.Remove(TCollectionItemData)
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Remove(TCollectionItemData)
  nameWithType.vb: IDataStore(Of TCollectionItemData).Remove(TCollectionItemData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Remove(TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TCollectionItemData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TCollectionItemData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Remove(`0)
  isExternal: false
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Destroy({TCollectionItemData})
  commentId: M:Cqrs.DataStores.IDataStore{`1}.Destroy(`1)
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  name: Destroy(TCollectionItemData)
  nameWithType: IDataStore<TCollectionItemData>.Destroy(TCollectionItemData)
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Destroy(TCollectionItemData)
  nameWithType.vb: IDataStore(Of TCollectionItemData).Destroy(TCollectionItemData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Destroy(TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TCollectionItemData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TCollectionItemData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Destroy(`0)
  isExternal: false
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: TableStorageStore<TData, TCollectionItemData>.RemoveAll
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.RemoveAll
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).RemoveAll
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).RemoveAll
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore{`1}.RemoveAll
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.RemoveAll
  name: RemoveAll()
  nameWithType: IDataStore<TCollectionItemData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TCollectionItemData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TCollectionItemData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TCollectionItemData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Update*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.Update
  isExternal: false
  name: Update
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Update
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Update
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Update
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Update
- uid: Cqrs.DataStores.IDataStore{{TCollectionItemData}}.Update({TCollectionItemData})
  commentId: M:Cqrs.DataStores.IDataStore{`1}.Update(`1)
  parent: Cqrs.DataStores.IDataStore{{TCollectionItemData}}
  definition: Cqrs.DataStores.IDataStore`1.Update(`0)
  name: Update(TCollectionItemData)
  nameWithType: IDataStore<TCollectionItemData>.Update(TCollectionItemData)
  fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Update(TCollectionItemData)
  nameWithType.vb: IDataStore(Of TCollectionItemData).Update(TCollectionItemData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Update(TCollectionItemData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TCollectionItemData>.Update
    fullName: Cqrs.DataStores.IDataStore<TCollectionItemData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TCollectionItemData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TCollectionItemData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollectionItemData
    nameWithType: TCollectionItemData
    fullName: TCollectionItemData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Update(`0)
  isExternal: false
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: TableOperation
  nameWithType: TableOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetUpdatableTableEntity
  isExternal: false
  name: GetUpdatableTableEntity
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetUpdatableTableEntity
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetUpdatableTableEntity
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
  commentId: T:Microsoft.WindowsAzure.Storage.Table.CloudTable
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: CloudTable
  nameWithType: CloudTable
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.CreateSource
  isExternal: false
  name: CreateSource
  nameWithType: TableStorageStore<TData, TCollectionItemData>.CreateSource
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.CreateSource
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).CreateSource
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).CreateSource
- uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
  commentId: T:Microsoft.WindowsAzure.Storage.CloudStorageAccount
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: CloudStorageAccount
  nameWithType: CloudStorageAccount
  fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  commentId: P:Cqrs.Azure.BlobStorage.TableStorageStore`2.Collection
  isExternal: false
  name: Collection
  nameWithType: TableStorageStore<TData, TCollectionItemData>.Collection
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.Collection
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).Collection
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).Collection
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKeyAndRow
  isExternal: false
  name: GetByKeyAndRow
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetByKeyAndRow
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetByKeyAndRow
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetByKeyAndRow
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetByKeyAndRow
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetByKey
  isExternal: false
  name: GetByKey
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetByKey
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetByKey
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetByKey
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetByKey
- uid: Microsoft.WindowsAzure.Storage.Table.TableResult.Result
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableResult.Result
- uid: Cqrs.Azure.BlobStorage.IEventDataTableEntity`1
  commentId: T:Cqrs.Azure.BlobStorage.IEventDataTableEntity`1
  isExternal: false
  name: IEventDataTableEntity<TEventData>
  nameWithType: IEventDataTableEntity<TEventData>
  fullName: Cqrs.Azure.BlobStorage.IEventDataTableEntity<TEventData>
  nameWithType.vb: IEventDataTableEntity(Of TEventData)
  fullName.vb: Cqrs.Azure.BlobStorage.IEventDataTableEntity(Of TEventData)
  name.vb: IEventDataTableEntity(Of TEventData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.IEventDataTableEntity`1
    name: IEventDataTableEntity
    nameWithType: IEventDataTableEntity
    fullName: Cqrs.Azure.BlobStorage.IEventDataTableEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.IEventDataTableEntity`1
    name: IEventDataTableEntity
    nameWithType: IEventDataTableEntity
    fullName: Cqrs.Azure.BlobStorage.IEventDataTableEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.IEventDataTableEntity`1.EventData
  commentId: P:Cqrs.Azure.BlobStorage.IEventDataTableEntity`1.EventData
  isExternal: false
  name: EventData
  nameWithType: IEventDataTableEntity<TEventData>.EventData
  fullName: Cqrs.Azure.BlobStorage.IEventDataTableEntity<TEventData>.EventData
  nameWithType.vb: IEventDataTableEntity(Of TEventData).EventData
  fullName.vb: Cqrs.Azure.BlobStorage.IEventDataTableEntity(Of TEventData).EventData
- uid: Cqrs.Azure.BlobStorage.IEntityTableEntity`1
  commentId: T:Cqrs.Azure.BlobStorage.IEntityTableEntity`1
  isExternal: false
  name: IEntityTableEntity<TEntity>
  nameWithType: IEntityTableEntity<TEntity>
  fullName: Cqrs.Azure.BlobStorage.IEntityTableEntity<TEntity>
  nameWithType.vb: IEntityTableEntity(Of TEntity)
  fullName.vb: Cqrs.Azure.BlobStorage.IEntityTableEntity(Of TEntity)
  name.vb: IEntityTableEntity(Of TEntity)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.IEntityTableEntity`1
    name: IEntityTableEntity
    nameWithType: IEntityTableEntity
    fullName: Cqrs.Azure.BlobStorage.IEntityTableEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.IEntityTableEntity`1
    name: IEntityTableEntity
    nameWithType: IEntityTableEntity
    fullName: Cqrs.Azure.BlobStorage.IEntityTableEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.IEntityTableEntity`1.Entity
  commentId: P:Cqrs.Azure.BlobStorage.IEntityTableEntity`1.Entity
  isExternal: false
  name: Entity
  nameWithType: IEntityTableEntity<TEntity>.Entity
  fullName: Cqrs.Azure.BlobStorage.IEntityTableEntity<TEntity>.Entity
  nameWithType.vb: IEntityTableEntity(Of TEntity).Entity
  fullName.vb: Cqrs.Azure.BlobStorage.IEntityTableEntity(Of TEntity).Entity
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.ReplaceValues
  isExternal: false
  name: ReplaceValues
  nameWithType: TableStorageStore<TData, TCollectionItemData>.ReplaceValues
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.ReplaceValues
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).ReplaceValues
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).ReplaceValues
- uid: Microsoft.WindowsAzure.Storage.Table.TableResult
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableResult
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: TableResult
  nameWithType: TableResult
  fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
- uid: Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStore`2.GetSafeSourceName
  isExternal: false
  name: GetSafeSourceName
  nameWithType: TableStorageStore<TData, TCollectionItemData>.GetSafeSourceName
  fullName: Cqrs.Azure.BlobStorage.TableStorageStore<TData, TCollectionItemData>.GetSafeSourceName
  nameWithType.vb: TableStorageStore(Of TData, TCollectionItemData).GetSafeSourceName
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStore(Of TData, TCollectionItemData).GetSafeSourceName
