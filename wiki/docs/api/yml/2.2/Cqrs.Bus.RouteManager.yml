### YamlMime:ManagedReference
items:
- uid: Cqrs.Bus.RouteManager
  commentId: T:Cqrs.Bus.RouteManager
  id: RouteManager
  parent: Cqrs.Bus
  children:
  - Cqrs.Bus.RouteManager.#ctor
  - Cqrs.Bus.RouteManager.GetHandlers``1(``0,System.Boolean)
  - Cqrs.Bus.RouteManager.GetSingleHandler``1(``0,System.Boolean)
  - Cqrs.Bus.RouteManager.GetSingleHandler``1(System.Boolean)
  - Cqrs.Bus.RouteManager.GlobalEventRoute
  - Cqrs.Bus.RouteManager.IsACommand(System.Type)
  - Cqrs.Bus.RouteManager.IsACommand``1(``0)
  - Cqrs.Bus.RouteManager.IsAnEvent(System.Type)
  - Cqrs.Bus.RouteManager.IsAnEvent``1(``0)
  - Cqrs.Bus.RouteManager.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  - Cqrs.Bus.RouteManager.Routes
  langs:
  - csharp
  - vb
  name: RouteManager
  nameWithType: RouteManager
  fullName: Cqrs.Bus.RouteManager
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RouteManager
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nManages <xref href=\"Cqrs.Bus.Route\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class RouteManager : IHandlerRegistrar'
    content.vb: >-
      Public Class RouteManager
          Implements IHandlerRegistrar
  inheritance:
  - System.Object
  implements:
  - Cqrs.Bus.IHandlerRegistrar
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Bus.RouteManager.Routes
  commentId: P:Cqrs.Bus.RouteManager.Routes
  id: Routes
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: Routes
  nameWithType: RouteManager.Routes
  fullName: Cqrs.Bus.RouteManager.Routes
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Routes
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nThe <xref href=\"Cqrs.Bus.Route\" data-throw-if-not-resolved=\"false\"></xref> to execute per <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected IDictionary<Type, Route> Routes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Type,Cqrs.Bus.Route}
    content.vb: Protected ReadOnly Property Routes As IDictionary(Of Type, Route)
  overload: Cqrs.Bus.RouteManager.Routes*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Bus.RouteManager.GlobalEventRoute
  commentId: P:Cqrs.Bus.RouteManager.GlobalEventRoute
  id: GlobalEventRoute
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: GlobalEventRoute
  nameWithType: RouteManager.GlobalEventRoute
  fullName: Cqrs.Bus.RouteManager.GlobalEventRoute
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GlobalEventRoute
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nA <xref href=\"Cqrs.Bus.Route\" data-throw-if-not-resolved=\"false\"></xref> to execute for all <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Route GlobalEventRoute { get; }
    parameters: []
    return:
      type: Cqrs.Bus.Route
    content.vb: Public ReadOnly Property GlobalEventRoute As Route
  overload: Cqrs.Bus.RouteManager.GlobalEventRoute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Bus.RouteManager.#ctor
  commentId: M:Cqrs.Bus.RouteManager.#ctor
  id: '#ctor'
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: RouteManager()
  nameWithType: RouteManager.RouteManager()
  fullName: Cqrs.Bus.RouteManager.RouteManager()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Bus.RouteManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RouteManager()
    content.vb: Public Sub New
  overload: Cqrs.Bus.RouteManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: RouteManager.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.RouteManager.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 59
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event or command handler that will listen and respond to events or commands.\n"
  example: []
  syntax:
    content: 'public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: targetedType
      type: System.Type
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Overridable Sub RegisterHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), targetedType As Type, holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.RouteManager.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Type,System.Boolean)
  nameWithType.vb: RouteManager.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Bus.RouteManager.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
- uid: Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.RegisterHandler``1(System.Action{``0},System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: RouteManager.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.RouteManager.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 84
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event or command handler that will listen and respond to events or commands.\n"
  example: []
  syntax:
    content: 'public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Sub RegisterHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.RouteManager.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  nameWithType.vb: RouteManager.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.RouteManager.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  id: RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: RouteManager.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterGlobalEventHandler
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 93
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nRegister an event handler that will listen and respond to all events.\n"
  example: []
  syntax:
    content: 'public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Sub RegisterGlobalEventHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler*
  nameWithType.vb: RouteManager.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Bus.RouteManager.GetSingleHandler``1(System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.GetSingleHandler``1(System.Boolean)
  id: GetSingleHandler``1(System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: GetSingleHandler<TMessage>(Boolean)
  nameWithType: RouteManager.GetSingleHandler<TMessage>(Boolean)
  fullName: Cqrs.Bus.RouteManager.GetSingleHandler<TMessage>(System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSingleHandler
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 117
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets the single <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> expected for handling <code data-dev-comment-type=\"typeparamref\">TMessage</code>.\n"
  example: []
  syntax:
    content: 'public RouteHandlerDelegate GetSingleHandler<TMessage>(bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage'
    parameters:
    - id: throwExceptionOnNoRouteHandlers
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> found.
    typeParameters:
    - id: TMessage
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> to find a <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> for.
    return:
      type: Cqrs.Bus.RouteHandlerDelegate
    content.vb: Public Function GetSingleHandler(Of TMessage As IMessage)(throwExceptionOnNoRouteHandlers As Boolean = True) As RouteHandlerDelegate
  overload: Cqrs.Bus.RouteManager.GetSingleHandler*
  exceptions:
  - type: Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
    commentId: T:Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
    description: If more than one <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref>.
  - type: Cqrs.Exceptions.NoCommandHandlerRegisteredException
    commentId: T:Cqrs.Exceptions.NoCommandHandlerRegisteredException
    description: If no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> and <code data-dev-comment-type="paramref">throwExceptionOnNoRouteHandlers</code> is true.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nIf more than one <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> is found and <code data-dev-comment-type=\"typeparamref\">TMessage</code> is not an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> OR\nIf no <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> is found and <code data-dev-comment-type=\"typeparamref\">TMessage</code> is not an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> and <code data-dev-comment-type=\"paramref\">throwExceptionOnNoRouteHandlers</code> is true."
  nameWithType.vb: RouteManager.GetSingleHandler(Of TMessage)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.RouteManager.GetSingleHandler(Of TMessage)(System.Boolean)
  name.vb: GetSingleHandler(Of TMessage)(Boolean)
- uid: Cqrs.Bus.RouteManager.GetSingleHandler``1(``0,System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.GetSingleHandler``1(``0,System.Boolean)
  id: GetSingleHandler``1(``0,System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: GetSingleHandler<TMessage>(TMessage, Boolean)
  nameWithType: RouteManager.GetSingleHandler<TMessage>(TMessage, Boolean)
  fullName: Cqrs.Bus.RouteManager.GetSingleHandler<TMessage>(TMessage, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSingleHandler
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 156
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets the single <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> expected for handling <code data-dev-comment-type=\"typeparamref\">TMessage</code>.\n"
  example: []
  syntax:
    content: 'public RouteHandlerDelegate GetSingleHandler<TMessage>(TMessage message, bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage'
    parameters:
    - id: message
      type: '{TMessage}'
      description: 'The <code data-dev-comment-type="typeparamref">TMessage</code> to find a <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> for. '
    - id: throwExceptionOnNoRouteHandlers
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> found.
    typeParameters:
    - id: TMessage
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> to find a <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> for.
    return:
      type: Cqrs.Bus.RouteHandlerDelegate
    content.vb: Public Function GetSingleHandler(Of TMessage As IMessage)(message As TMessage, throwExceptionOnNoRouteHandlers As Boolean = True) As RouteHandlerDelegate
  overload: Cqrs.Bus.RouteManager.GetSingleHandler*
  exceptions:
  - type: Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
    commentId: T:Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
    description: If more than one <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref>.
  - type: Cqrs.Exceptions.NoCommandHandlerRegisteredException
    commentId: T:Cqrs.Exceptions.NoCommandHandlerRegisteredException
    description: If no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> and <code data-dev-comment-type="paramref">throwExceptionOnNoRouteHandlers</code> is true.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nIf more than one <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> is found and <code data-dev-comment-type=\"typeparamref\">TMessage</code> is not an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> OR\nIf no <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> is found and <code data-dev-comment-type=\"typeparamref\">TMessage</code> is not an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> and <code data-dev-comment-type=\"paramref\">throwExceptionOnNoRouteHandlers</code> is true."
  nameWithType.vb: RouteManager.GetSingleHandler(Of TMessage)(TMessage, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.RouteManager.GetSingleHandler(Of TMessage)(TMessage, System.Boolean)
  name.vb: GetSingleHandler(Of TMessage)(TMessage, Boolean)
- uid: Cqrs.Bus.RouteManager.GetHandlers``1(``0,System.Boolean)
  commentId: M:Cqrs.Bus.RouteManager.GetHandlers``1(``0,System.Boolean)
  id: GetHandlers``1(``0,System.Boolean)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: GetHandlers<TMessage>(TMessage, Boolean)
  nameWithType: RouteManager.GetHandlers<TMessage>(TMessage, Boolean)
  fullName: Cqrs.Bus.RouteManager.GetHandlers<TMessage>(TMessage, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetHandlers
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 197
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nGets the collection <xref href=\"Cqrs.Bus.RouteHandlerDelegate\" data-throw-if-not-resolved=\"false\"></xref> that are expected for handling <code data-dev-comment-type=\"typeparamref\">TMessage</code>.\n"
  example: []
  syntax:
    content: 'public IEnumerable<RouteHandlerDelegate> GetHandlers<TMessage>(TMessage message, bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage'
    parameters:
    - id: message
      type: '{TMessage}'
      description: 'The <code data-dev-comment-type="typeparamref">TMessage</code> to find a <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> for. '
    - id: throwExceptionOnNoRouteHandlers
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> found.
    typeParameters:
    - id: TMessage
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> to find a <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> for.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Bus.RouteHandlerDelegate}
    content.vb: Public Function GetHandlers(Of TMessage As IMessage)(message As TMessage, throwExceptionOnNoRouteHandlers As Boolean = True) As IEnumerable(Of RouteHandlerDelegate)
  overload: Cqrs.Bus.RouteManager.GetHandlers*
  exceptions:
  - type: Cqrs.Exceptions.NoCommandHandlerRegisteredException
    commentId: T:Cqrs.Exceptions.NoCommandHandlerRegisteredException
    description: If no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> and <code data-dev-comment-type="paramref">throwExceptionOnNoRouteHandlers</code> is true.
  - type: Cqrs.Exceptions.NoEventHandlerRegisteredException
    commentId: T:Cqrs.Exceptions.NoEventHandlerRegisteredException
    description: If no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is an <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> and <code data-dev-comment-type="paramref">throwExceptionOnNoRouteHandlers</code> is true.
  - type: Cqrs.Exceptions.NoHandlerRegisteredException
    commentId: T:Cqrs.Exceptions.NoHandlerRegisteredException
    description: If no <xref href="Cqrs.Bus.RouteHandlerDelegate" data-throw-if-not-resolved="false"></xref> is found and <code data-dev-comment-type="typeparamref">TMessage</code> is not either an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> or an <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> and <code data-dev-comment-type="paramref">throwExceptionOnNoRouteHandlers</code> is true.
  nameWithType.vb: RouteManager.GetHandlers(Of TMessage)(TMessage, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Bus.RouteManager.GetHandlers(Of TMessage)(TMessage, System.Boolean)
  name.vb: GetHandlers(Of TMessage)(TMessage, Boolean)
- uid: Cqrs.Bus.RouteManager.IsACommand``1(``0)
  commentId: M:Cqrs.Bus.RouteManager.IsACommand``1(``0)
  id: IsACommand``1(``0)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: IsACommand<TMessage>(TMessage)
  nameWithType: RouteManager.IsACommand<TMessage>(TMessage)
  fullName: Cqrs.Bus.RouteManager.IsACommand<TMessage>(TMessage)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsACommand
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 233
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nChecks if the provided <code data-dev-comment-type=\"paramref\">message</code> is an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual bool IsACommand<TMessage>(TMessage message)
    parameters:
    - id: message
      type: '{TMessage}'
      description: 'The <code data-dev-comment-type="typeparamref">TMessage</code> to check. '
    typeParameters:
    - id: TMessage
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref">message</code> is an <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function IsACommand(Of TMessage)(message As TMessage) As Boolean
  overload: Cqrs.Bus.RouteManager.IsACommand*
  nameWithType.vb: RouteManager.IsACommand(Of TMessage)(TMessage)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Bus.RouteManager.IsACommand(Of TMessage)(TMessage)
  name.vb: IsACommand(Of TMessage)(TMessage)
- uid: Cqrs.Bus.RouteManager.IsACommand(System.Type)
  commentId: M:Cqrs.Bus.RouteManager.IsACommand(System.Type)
  id: IsACommand(System.Type)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: IsACommand(Type)
  nameWithType: RouteManager.IsACommand(Type)
  fullName: Cqrs.Bus.RouteManager.IsACommand(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsACommand
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 244
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nChecks if the provided <code data-dev-comment-type=\"paramref\">messageType</code> implements <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual bool IsACommand(Type messageType)
    parameters:
    - id: messageType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of object to check.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref">messageType</code> implements <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function IsACommand(messageType As Type) As Boolean
  overload: Cqrs.Bus.RouteManager.IsACommand*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Bus.RouteManager.IsAnEvent``1(``0)
  commentId: M:Cqrs.Bus.RouteManager.IsAnEvent``1(``0)
  id: IsAnEvent``1(``0)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: IsAnEvent<TMessage>(TMessage)
  nameWithType: RouteManager.IsAnEvent<TMessage>(TMessage)
  fullName: Cqrs.Bus.RouteManager.IsAnEvent<TMessage>(TMessage)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsAnEvent
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 264
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nChecks if the provided <code data-dev-comment-type=\"paramref\">message</code> is an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual bool IsAnEvent<TMessage>(TMessage message)
    parameters:
    - id: message
      type: '{TMessage}'
      description: 'The <code data-dev-comment-type="typeparamref">TMessage</code> to check. '
    typeParameters:
    - id: TMessage
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref">message</code> is an <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function IsAnEvent(Of TMessage)(message As TMessage) As Boolean
  overload: Cqrs.Bus.RouteManager.IsAnEvent*
  nameWithType.vb: RouteManager.IsAnEvent(Of TMessage)(TMessage)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Bus.RouteManager.IsAnEvent(Of TMessage)(TMessage)
  name.vb: IsAnEvent(Of TMessage)(TMessage)
- uid: Cqrs.Bus.RouteManager.IsAnEvent(System.Type)
  commentId: M:Cqrs.Bus.RouteManager.IsAnEvent(System.Type)
  id: IsAnEvent(System.Type)
  parent: Cqrs.Bus.RouteManager
  langs:
  - csharp
  - vb
  name: IsAnEvent(Type)
  nameWithType: RouteManager.IsAnEvent(Type)
  fullName: Cqrs.Bus.RouteManager.IsAnEvent(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Bus/RouteManager.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsAnEvent
    path: Framework/Cqrs/Bus/RouteManager.cs
    startLine: 275
  assemblies:
  - Cqrs
  namespace: Cqrs.Bus
  summary: "\nChecks if the provided <code data-dev-comment-type=\"paramref\">messageType</code> implements <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual bool IsAnEvent(Type messageType)
    parameters:
    - id: messageType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of object to check.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref">messageType</code> implements <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function IsAnEvent(messageType As Type) As Boolean
  overload: Cqrs.Bus.RouteManager.IsAnEvent*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Cqrs.Bus.Route
  commentId: T:Cqrs.Bus.Route
  parent: Cqrs.Bus
  isExternal: false
  name: Route
  nameWithType: Route
  fullName: Cqrs.Bus.Route
- uid: Cqrs.Bus
  commentId: N:Cqrs.Bus
  isExternal: false
  name: Cqrs.Bus
  nameWithType: Cqrs.Bus
  fullName: Cqrs.Bus
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Bus.IHandlerRegistrar
  commentId: T:Cqrs.Bus.IHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IHandlerRegistrar
  nameWithType: IHandlerRegistrar
  fullName: Cqrs.Bus.IHandlerRegistrar
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Bus.RouteManager.Routes*
  commentId: Overload:Cqrs.Bus.RouteManager.Routes
  isExternal: false
  name: Routes
  nameWithType: RouteManager.Routes
  fullName: Cqrs.Bus.RouteManager.Routes
- uid: System.Collections.Generic.IDictionary{System.Type,Cqrs.Bus.Route}
  commentId: T:System.Collections.Generic.IDictionary{System.Type,Cqrs.Bus.Route}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Type, Route>
  nameWithType: IDictionary<Type, Route>
  fullName: System.Collections.Generic.IDictionary<System.Type, Cqrs.Bus.Route>
  nameWithType.vb: IDictionary(Of Type, Route)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Type, Cqrs.Bus.Route)
  name.vb: IDictionary(Of Type, Route)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Bus.Route
    name: Route
    nameWithType: Route
    fullName: Cqrs.Bus.Route
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Bus.Route
    name: Route
    nameWithType: Route
    fullName: Cqrs.Bus.Route
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.RouteManager.GlobalEventRoute*
  commentId: Overload:Cqrs.Bus.RouteManager.GlobalEventRoute
  isExternal: false
  name: GlobalEventRoute
  nameWithType: RouteManager.GlobalEventRoute
  fullName: Cqrs.Bus.RouteManager.GlobalEventRoute
- uid: Cqrs.Bus.RouteManager
  commentId: T:Cqrs.Bus.RouteManager
  parent: Cqrs.Bus
  isExternal: false
  name: RouteManager
  nameWithType: RouteManager
  fullName: Cqrs.Bus.RouteManager
- uid: Cqrs.Bus.RouteManager.#ctor*
  commentId: Overload:Cqrs.Bus.RouteManager.#ctor
  isExternal: false
  name: RouteManager
  nameWithType: RouteManager.RouteManager
  fullName: Cqrs.Bus.RouteManager.RouteManager
- uid: Cqrs.Bus.RouteManager.RegisterHandler*
  commentId: Overload:Cqrs.Bus.RouteManager.RegisterHandler
  isExternal: false
  name: RegisterHandler
  nameWithType: RouteManager.RegisterHandler
  fullName: Cqrs.Bus.RouteManager.RegisterHandler
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TMessage}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: System.Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: System.Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler*
  commentId: Overload:Cqrs.Bus.RouteManager.RegisterGlobalEventHandler
  isExternal: false
  name: RegisterGlobalEventHandler
  nameWithType: RouteManager.RegisterGlobalEventHandler
  fullName: Cqrs.Bus.RouteManager.RegisterGlobalEventHandler
- uid: Cqrs.Bus.RouteHandlerDelegate
  commentId: T:Cqrs.Bus.RouteHandlerDelegate
  parent: Cqrs.Bus
  isExternal: false
  name: RouteHandlerDelegate
  nameWithType: RouteHandlerDelegate
  fullName: Cqrs.Bus.RouteHandlerDelegate
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.RouteManager.GetSingleHandler*
  commentId: Overload:Cqrs.Bus.RouteManager.GetSingleHandler
  isExternal: false
  name: GetSingleHandler
  nameWithType: RouteManager.GetSingleHandler
  fullName: Cqrs.Bus.RouteManager.GetSingleHandler
- uid: Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
  commentId: T:Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
  isExternal: false
  name: MultipleCommandHandlersRegisteredException
  nameWithType: MultipleCommandHandlersRegisteredException
  fullName: Cqrs.Exceptions.MultipleCommandHandlersRegisteredException
- uid: Cqrs.Exceptions.NoCommandHandlerRegisteredException
  commentId: T:Cqrs.Exceptions.NoCommandHandlerRegisteredException
  isExternal: false
  name: NoCommandHandlerRegisteredException
  nameWithType: NoCommandHandlerRegisteredException
  fullName: Cqrs.Exceptions.NoCommandHandlerRegisteredException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: '{TMessage}'
  commentId: '!:TMessage'
  definition: TMessage
  name: TMessage
  nameWithType: TMessage
  fullName: TMessage
- uid: TMessage
  isExternal: false
  name: TMessage
  nameWithType: TMessage
  fullName: TMessage
- uid: Cqrs.Bus.RouteManager.GetHandlers*
  commentId: Overload:Cqrs.Bus.RouteManager.GetHandlers
  isExternal: false
  name: GetHandlers
  nameWithType: RouteManager.GetHandlers
  fullName: Cqrs.Bus.RouteManager.GetHandlers
- uid: Cqrs.Exceptions.NoEventHandlerRegisteredException
  commentId: T:Cqrs.Exceptions.NoEventHandlerRegisteredException
  isExternal: false
  name: NoEventHandlerRegisteredException
  nameWithType: NoEventHandlerRegisteredException
  fullName: Cqrs.Exceptions.NoEventHandlerRegisteredException
- uid: Cqrs.Exceptions.NoHandlerRegisteredException
  commentId: T:Cqrs.Exceptions.NoHandlerRegisteredException
  parent: Cqrs.Exceptions
  isExternal: false
  name: NoHandlerRegisteredException
  nameWithType: NoHandlerRegisteredException
  fullName: Cqrs.Exceptions.NoHandlerRegisteredException
- uid: System.Collections.Generic.IEnumerable{Cqrs.Bus.RouteHandlerDelegate}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Bus.RouteHandlerDelegate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RouteHandlerDelegate>
  nameWithType: IEnumerable<RouteHandlerDelegate>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Bus.RouteHandlerDelegate>
  nameWithType.vb: IEnumerable(Of RouteHandlerDelegate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Bus.RouteHandlerDelegate)
  name.vb: IEnumerable(Of RouteHandlerDelegate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Bus.RouteHandlerDelegate
    name: RouteHandlerDelegate
    nameWithType: RouteHandlerDelegate
    fullName: Cqrs.Bus.RouteHandlerDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Bus.RouteHandlerDelegate
    name: RouteHandlerDelegate
    nameWithType: RouteHandlerDelegate
    fullName: Cqrs.Bus.RouteHandlerDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Exceptions
  commentId: N:Cqrs.Exceptions
  isExternal: false
  name: Cqrs.Exceptions
  nameWithType: Cqrs.Exceptions
  fullName: Cqrs.Exceptions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.RouteManager.IsACommand*
  commentId: Overload:Cqrs.Bus.RouteManager.IsACommand
  isExternal: false
  name: IsACommand
  nameWithType: RouteManager.IsACommand
  fullName: Cqrs.Bus.RouteManager.IsACommand
- uid: Cqrs.Bus.RouteManager.IsAnEvent*
  commentId: Overload:Cqrs.Bus.RouteManager.IsAnEvent
  isExternal: false
  name: IsAnEvent
  nameWithType: RouteManager.IsAnEvent
  fullName: Cqrs.Bus.RouteManager.IsAnEvent
