### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  id: SayHelloWorldCommandHandler
  parent: Cqrs.Akka.Tests.Unit.Commands.Handlers
  children:
  - Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor(Cqrs.Akka.Domain.IAkkaAggregateResolver)
  - Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
  - Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  langs:
  - csharp
  - vb
  name: SayHelloWorldCommandHandler
  nameWithType: SayHelloWorldCommandHandler
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SayHelloWorldCommandHandler
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
    startLine: 20
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Commands.Handlers
  summary: "\nHandles the <xref href=\"Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class SayHelloWorldCommandHandler : ICommandHandler<Guid, SayHelloWorldCommand>, IMessageHandler<SayHelloWorldCommand>, ICommandHandle, IHandler'
    content.vb: >-
      Public Class SayHelloWorldCommandHandler
          Implements ICommandHandler(Of Guid, SayHelloWorldCommand), IMessageHandler(Of SayHelloWorldCommand), ICommandHandle, IHandler
  inheritance:
  - System.Object
  implements:
  - Cqrs.Commands.ICommandHandler{System.Guid,Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  - Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  - Cqrs.Commands.ICommandHandle
  - Cqrs.Messages.IHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor(Cqrs.Akka.Domain.IAkkaAggregateResolver)
  commentId: M:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor(Cqrs.Akka.Domain.IAkkaAggregateResolver)
  id: '#ctor(Cqrs.Akka.Domain.IAkkaAggregateResolver)'
  parent: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  langs:
  - csharp
  - vb
  name: SayHelloWorldCommandHandler(IAkkaAggregateResolver)
  nameWithType: SayHelloWorldCommandHandler.SayHelloWorldCommandHandler(IAkkaAggregateResolver)
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.SayHelloWorldCommandHandler(Cqrs.Akka.Domain.IAkkaAggregateResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
    startLine: 26
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Commands.Handlers
  summary: "\nInstantiates the <xref href=\"Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler\" data-throw-if-not-resolved=\"false\"></xref> class registering any <xref href=\"Akka.Actor.ReceiveActor.Receive%60%601(System.Func%7b%60%600%2cSystem.Threading.Tasks.Task%7d)\" data-throw-if-not-resolved=\"false\"></xref> required.\n"
  example: []
  syntax:
    content: public SayHelloWorldCommandHandler(IAkkaAggregateResolver aggregateResolver)
    parameters:
    - id: aggregateResolver
      type: Cqrs.Akka.Domain.IAkkaAggregateResolver
    content.vb: Public Sub New(aggregateResolver As IAkkaAggregateResolver)
  overload: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
  commentId: P:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
  id: AggregateResolver
  parent: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  langs:
  - csharp
  - vb
  name: AggregateResolver
  nameWithType: SayHelloWorldCommandHandler.AggregateResolver
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AggregateResolver
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
    startLine: 34
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Commands.Handlers
  summary: "\nResolves Akka.Net actor based <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected IAkkaAggregateResolver AggregateResolver { get; }
    parameters: []
    return:
      type: Cqrs.Akka.Domain.IAkkaAggregateResolver
    content.vb: Protected ReadOnly Property AggregateResolver As IAkkaAggregateResolver
  overload: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  commentId: M:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  id: Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  parent: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  langs:
  - csharp
  - vb
  name: Handle(SayHelloWorldCommand)
  nameWithType: SayHelloWorldCommandHandler.Handle(SayHelloWorldCommand)
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Akka.Net/Cqrs.Akka.Tests.Unit/Commands/Handlers/SayHelloWorldCommandHandler.cs
    startLine: 42
  assemblies:
  - Cqrs.Akka.Tests.Unit
  namespace: Cqrs.Akka.Tests.Unit.Commands.Handlers
  summary: "\nResponds to the provided <code data-dev-comment-type=\"paramref\">command</code>.\n"
  example: []
  syntax:
    content: public void Handle(SayHelloWorldCommand command)
    parameters:
    - id: command
      type: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
      description: The <xref href="Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand" data-throw-if-not-resolved="false"></xref> to respond to or &quot;handle&quot;
    content.vb: Public Sub Handle(command As SayHelloWorldCommand)
  overload: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  parent: Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: SayHelloWorldCommand
  nameWithType: SayHelloWorldCommand
  fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers
  commentId: N:Cqrs.Akka.Tests.Unit.Commands.Handlers
  isExternal: false
  name: Cqrs.Akka.Tests.Unit.Commands.Handlers
  nameWithType: Cqrs.Akka.Tests.Unit.Commands.Handlers
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Commands.ICommandHandler{System.Guid,Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  commentId: T:Cqrs.Commands.ICommandHandler{System.Guid,Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandHandler`2
  name: ICommandHandler<Guid, SayHelloWorldCommand>
  nameWithType: ICommandHandler<Guid, SayHelloWorldCommand>
  fullName: Cqrs.Commands.ICommandHandler<System.Guid, Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand>
  nameWithType.vb: ICommandHandler(Of Guid, SayHelloWorldCommand)
  fullName.vb: Cqrs.Commands.ICommandHandler(Of System.Guid, Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  name.vb: ICommandHandler(Of Guid, SayHelloWorldCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<SayHelloWorldCommand>
  nameWithType: IMessageHandler<SayHelloWorldCommand>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand>
  nameWithType.vb: IMessageHandler(Of SayHelloWorldCommand)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  name.vb: IMessageHandler(Of SayHelloWorldCommand)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandHandle
  commentId: T:Cqrs.Commands.ICommandHandle
  parent: Cqrs.Commands
  isExternal: false
  name: ICommandHandle
  nameWithType: ICommandHandle
  fullName: Cqrs.Commands.ICommandHandle
- uid: Cqrs.Messages.IHandler
  commentId: T:Cqrs.Messages.IHandler
  parent: Cqrs.Messages
  isExternal: false
  name: IHandler
  nameWithType: IHandler
  fullName: Cqrs.Messages.IHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Tests.Unit.Commands
  commentId: N:Cqrs.Akka.Tests.Unit.Commands
  isExternal: false
  name: Cqrs.Akka.Tests.Unit.Commands
  nameWithType: Cqrs.Akka.Tests.Unit.Commands
  fullName: Cqrs.Akka.Tests.Unit.Commands
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Commands.ICommandHandler`2
  commentId: T:Cqrs.Commands.ICommandHandler`2
  isExternal: false
  name: ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType: ICommandHandler<TAuthenticationToken, TCommand>
  fullName: Cqrs.Commands.ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  fullName.vb: Cqrs.Commands.ICommandHandler(Of TAuthenticationToken, TCommand)
  name.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Messages.IMessageHandler`1
  commentId: T:Cqrs.Messages.IMessageHandler`1
  isExternal: false
  name: IMessageHandler<TMessage>
  nameWithType: IMessageHandler<TMessage>
  fullName: Cqrs.Messages.IMessageHandler<TMessage>
  nameWithType.vb: IMessageHandler(Of TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage)
  name.vb: IMessageHandler(Of TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  commentId: T:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
  isExternal: false
  name: SayHelloWorldCommandHandler
  nameWithType: SayHelloWorldCommandHandler
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  isExternal: true
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.#ctor
  isExternal: false
  name: SayHelloWorldCommandHandler
  nameWithType: SayHelloWorldCommandHandler.SayHelloWorldCommandHandler
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.SayHelloWorldCommandHandler
- uid: Cqrs.Akka.Domain.IAkkaAggregateResolver
  commentId: T:Cqrs.Akka.Domain.IAkkaAggregateResolver
  parent: Cqrs.Akka.Domain
  isExternal: false
  name: IAkkaAggregateResolver
  nameWithType: IAkkaAggregateResolver
  fullName: Cqrs.Akka.Domain.IAkkaAggregateResolver
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
  isExternal: false
  name: AggregateResolver
  nameWithType: SayHelloWorldCommandHandler.AggregateResolver
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.AggregateResolver
- uid: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle*
  commentId: Overload:Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle
  isExternal: false
  name: Handle
  nameWithType: SayHelloWorldCommandHandler.Handle
  fullName: Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.Handle
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(SayHelloWorldCommand)
  nameWithType: IMessageHandler<SayHelloWorldCommand>.Handle(SayHelloWorldCommand)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand>.Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  nameWithType.vb: IMessageHandler(Of SayHelloWorldCommand).Handle(SayHelloWorldCommand)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand).Handle(Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<SayHelloWorldCommand>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of SayHelloWorldCommand).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
    name: SayHelloWorldCommand
    nameWithType: SayHelloWorldCommand
    fullName: Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  commentId: M:Cqrs.Messages.IMessageHandler`1.Handle(`0)
  isExternal: false
  name: Handle(TMessage)
  nameWithType: IMessageHandler<TMessage>.Handle(TMessage)
  fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle(TMessage)
  nameWithType.vb: IMessageHandler(Of TMessage).Handle(TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage).Handle(TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TMessage>.Handle
    fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TMessage).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of TMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
