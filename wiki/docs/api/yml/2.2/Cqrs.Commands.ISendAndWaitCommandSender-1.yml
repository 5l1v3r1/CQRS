### YamlMime:ManagedReference
items:
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1
  commentId: T:Cqrs.Commands.ISendAndWaitCommandSender`1
  id: ISendAndWaitCommandSender`1
  parent: Cqrs.Commands
  children:
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  langs:
  - csharp
  - vb
  name: ISendAndWaitCommandSender<TAuthenticationToken>
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ISendAndWaitCommandSender
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use IPublishAndWaitCommandPublisher instead.")]

      public interface ISendAndWaitCommandSender<TAuthenticationToken> : ICommandSender<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      <Obsolete("Use IPublishAndWaitCommandPublisher instead.")>

      Public Interface ISendAndWaitCommandSender(Of TAuthenticationToken)
          Inherits ICommandSender(Of TAuthenticationToken)
  inheritedMembers:
  - Cqrs.Commands.ICommandSender{{TAuthenticationToken}}.Send``1({TCommand})
  - Cqrs.Commands.ICommandSender{{TAuthenticationToken}}.Send``1(System.Collections.Generic.IEnumerable{{TCommand}})
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use IPublishAndWaitCommandPublisher instead.
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken)
  name.vb: ISendAndWaitCommandSender(Of TAuthenticationToken)
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits for an event of <span class=\"typeparamref\">TEvent</span>\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 35
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits for an event of <span class=\"typeparamref\">TEvent</span> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 44
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits for an event of <span class=\"typeparamref\">TEvent</span> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 53
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits until the specified condition is satisfied an event of <span class=\"typeparamref\">TEvent</span>\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <span class="typeparamref">TEvent</span> that is desired, return null to keep trying.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 63
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits for an event of <span class=\"typeparamref\">TEvent</span> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <span class="typeparamref">TEvent</span> that is desired, return null to keep trying.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: SendAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.ISendAndWaitCommandSender`1
  langs:
  - csharp
  - vb
  name: SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAndWait
    path: Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs
    startLine: 73
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nSends the provided <span class=\"paramref\">command</span> and waits for an event of <span class=\"typeparamref\">TEvent</span> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <span class="typeparamref">TCommand</span> to send.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <span class="typeparamref">TEvent</span> that is desired, return null to keep trying.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Function SendAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: SendAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
references:
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Commands.ICommandSender{{TAuthenticationToken}}.Send``1({TCommand})
  commentId: M:Cqrs.Commands.ICommandSender{`0}.Send``1(``0)
  parent: Cqrs.Commands.ICommandSender{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandSender`1.Send``1(``0)
  name: Send<TCommand>(TCommand)
  nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>(TCommand)
  nameWithType.vb: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  name.vb: Send(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(``0)
    name: Send<TCommand>
    nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>
    fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(``0)
    name: Send(Of TCommand)
    nameWithType: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
    fullName: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandSender{{TAuthenticationToken}}.Send``1(System.Collections.Generic.IEnumerable{{TCommand}})
  commentId: M:Cqrs.Commands.ICommandSender{`0}.Send``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Commands.ICommandSender{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  name: Send<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Send(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
    name: Send<TCommand>
    nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>
    fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
    name: Send(Of TCommand)
    nameWithType: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
    fullName: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(``0)
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Commands.ICommandSender`1.Send``1(``0)
  commentId: M:Cqrs.Commands.ICommandSender`1.Send``1(``0)
  isExternal: false
  name: Send<TCommand>(TCommand)
  nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>(TCommand)
  nameWithType.vb: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(TCommand)
  name.vb: Send(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(``0)
    name: Send<TCommand>
    nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>
    fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(``0)
    name: Send(Of TCommand)
    nameWithType: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
    fullName: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandSender{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandSender{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandSender`1
  name: ICommandSender<TAuthenticationToken>
  nameWithType: ICommandSender<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>
  nameWithType.vb: ICommandSender(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken)
  name.vb: ICommandSender(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: Cqrs.Commands.ICommandSender
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: Cqrs.Commands.ICommandSender
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Send<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Send(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
    name: Send<TCommand>
    nameWithType: ICommandSender<TAuthenticationToken>.Send<TCommand>
    fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>.Send<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1.Send``1(System.Collections.Generic.IEnumerable{``0})
    name: Send(Of TCommand)
    nameWithType: ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
    fullName: Cqrs.Commands.ICommandSender(Of TAuthenticationToken).Send(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  isExternal: false
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandPublisher{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandPublisher`1
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandSender`1
  commentId: T:Cqrs.Commands.ICommandSender`1
  isExternal: false
  name: ICommandSender<TAuthenticationToken>
  nameWithType: ICommandSender<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandSender<TAuthenticationToken>
  nameWithType.vb: ICommandSender(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandSender(Of TAuthenticationToken)
  name.vb: ICommandSender(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandSender`1
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: Cqrs.Commands.ICommandSender
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandSender`1
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: Cqrs.Commands.ICommandSender
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1
  commentId: T:Cqrs.Commands.ICommandPublisher`1
  isExternal: false
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventReceiver`1
  commentId: T:Cqrs.Events.IEventReceiver`1
  isExternal: false
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait*
  commentId: Overload:Cqrs.Commands.ISendAndWaitCommandSender`1.SendAndWait
  isExternal: false
  name: SendAndWait
  nameWithType: ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait
  fullName: Cqrs.Commands.ISendAndWaitCommandSender<TAuthenticationToken>.SendAndWait
  nameWithType.vb: ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait
  fullName.vb: Cqrs.Commands.ISendAndWaitCommandSender(Of TAuthenticationToken).SendAndWait
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventReceiver{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventReceiver`1
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TCommand
  isExternal: false
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: System.Threading.Timeout.Infinite
  commentId: F:System.Threading.Timeout.Infinite
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  nameWithType: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  fullName: System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>
  nameWithType.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent)
  name.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
