### YamlMime:ManagedReference
items:
- uid: Cqrs.Configuration.DependencyResolver
  commentId: T:Cqrs.Configuration.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Configuration
  children:
  - Cqrs.Configuration.DependencyResolver.Current
  - Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  - Cqrs.Configuration.DependencyResolver.Resolve``1
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: DependencyResolver
  fullName: Cqrs.Configuration.DependencyResolver
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Configuration/DependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Configuration/DependencyResolver.cs
    startLine: 7
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nProvides an ability to resolve instances of objects.\n"
  example: []
  syntax:
    content: 'public abstract class DependencyResolver : IDependencyResolver'
    content.vb: >-
      Public MustInherit Class DependencyResolver
          Implements IDependencyResolver
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver
  implements:
  - Cqrs.Configuration.IDependencyResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Cqrs.Configuration.DependencyResolver.Current
  commentId: P:Cqrs.Configuration.DependencyResolver.Current
  id: Current
  parent: Cqrs.Configuration.DependencyResolver
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: DependencyResolver.Current
  fullName: Cqrs.Configuration.DependencyResolver.Current
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Configuration/DependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Current
    path: Framework/Cqrs/Configuration/DependencyResolver.cs
    startLine: 12
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nThe current instance of the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IDependencyResolver Current { get; protected set; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Public Shared Property Current As IDependencyResolver
  overload: Cqrs.Configuration.DependencyResolver.Current*
  modifiers.csharp:
  - public
  - static
  - get
  - protected set
  modifiers.vb:
  - Public
  - Shared
  - Get
  - Protected Set
- uid: Cqrs.Configuration.DependencyResolver.Resolve``1
  commentId: M:Cqrs.Configuration.DependencyResolver.Resolve``1
  id: Resolve``1
  parent: Cqrs.Configuration.DependencyResolver
  langs:
  - csharp
  - vb
  name: Resolve<T>()
  nameWithType: DependencyResolver.Resolve<T>()
  fullName: Cqrs.Configuration.DependencyResolver.Resolve<T>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/DependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Cqrs/Configuration/DependencyResolver.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nResolves a single instance for the specified <span class=\"typeparamref\">T</span>.\nDifferent implementations may return the first or last instance found or may return an exception.\n"
  example: []
  syntax:
    content: public abstract T Resolve<T>()
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of object you want to resolve.
    return:
      type: '{T}'
      description: An instance of type <span class="typeparamref">T</span>.
    content.vb: Public MustOverride Function Resolve(Of T) As T
  overload: Cqrs.Configuration.DependencyResolver.Resolve*
  implements:
  - Cqrs.Configuration.IDependencyResolver.Resolve``1
  nameWithType.vb: DependencyResolver.Resolve(Of T)()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Configuration.DependencyResolver.Resolve(Of T)()
  name.vb: Resolve(Of T)()
- uid: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  commentId: M:Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  id: Resolve(System.Type)
  parent: Cqrs.Configuration.DependencyResolver
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: DependencyResolver.Resolve(Type)
  fullName: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Configuration/DependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Cqrs/Configuration/DependencyResolver.cs
    startLine: 30
  assemblies:
  - Cqrs
  namespace: Cqrs.Configuration
  summary: "\nResolves a single instance for the specified <span class=\"paramref\">type</span>.\nDifferent implementations may return the first or last instance found or may return an exception.\n"
  example: []
  syntax:
    content: public abstract object Resolve(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of object you want to resolve.
    return:
      type: System.Object
      description: An instance of type <span class="paramref">type</span>.
    content.vb: Public MustOverride Function Resolve(type As Type) As Object
  overload: Cqrs.Configuration.DependencyResolver.Resolve*
  implements:
  - Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration.DependencyResolver.Current*
  commentId: Overload:Cqrs.Configuration.DependencyResolver.Current
  isExternal: false
  name: Current
  nameWithType: DependencyResolver.Current
  fullName: Cqrs.Configuration.DependencyResolver.Current
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Configuration.DependencyResolver.Resolve*
  commentId: Overload:Cqrs.Configuration.DependencyResolver.Resolve
  isExternal: false
  name: Resolve
  nameWithType: DependencyResolver.Resolve
  fullName: Cqrs.Configuration.DependencyResolver.Resolve
- uid: Cqrs.Configuration.IDependencyResolver.Resolve``1
  commentId: M:Cqrs.Configuration.IDependencyResolver.Resolve``1
  parent: Cqrs.Configuration.IDependencyResolver
  isExternal: false
  name: Resolve<T>()
  nameWithType: IDependencyResolver.Resolve<T>()
  fullName: Cqrs.Configuration.IDependencyResolver.Resolve<T>()
  nameWithType.vb: IDependencyResolver.Resolve(Of T)()
  fullName.vb: Cqrs.Configuration.IDependencyResolver.Resolve(Of T)()
  name.vb: Resolve(Of T)()
  spec.csharp:
  - uid: Cqrs.Configuration.IDependencyResolver.Resolve``1
    name: Resolve<T>
    nameWithType: IDependencyResolver.Resolve<T>
    fullName: Cqrs.Configuration.IDependencyResolver.Resolve<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.IDependencyResolver.Resolve``1
    name: Resolve(Of T)
    nameWithType: IDependencyResolver.Resolve(Of T)
    fullName: Cqrs.Configuration.IDependencyResolver.Resolve(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
  commentId: M:Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
  parent: Cqrs.Configuration.IDependencyResolver
  isExternal: true
  name: Resolve(Type)
  nameWithType: IDependencyResolver.Resolve(Type)
  fullName: Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
  spec.csharp:
  - uid: Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
    name: Resolve
    nameWithType: IDependencyResolver.Resolve
    fullName: Cqrs.Configuration.IDependencyResolver.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.IDependencyResolver.Resolve(System.Type)
    name: Resolve
    nameWithType: IDependencyResolver.Resolve
    fullName: Cqrs.Configuration.IDependencyResolver.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
