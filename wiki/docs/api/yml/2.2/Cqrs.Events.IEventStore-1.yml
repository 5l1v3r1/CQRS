### YamlMime:ManagedReference
items:
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  id: IEventStore`1
  parent: Cqrs.Events
  children:
  - Cqrs.Events.IEventStore`1.Get(System.Guid)
  - Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  - Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  - Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  - Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  langs:
  - csharp
  - vb
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IEventStore
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 19
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nStores instances of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for replay, <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> rehydration.\n"
  example: []
  syntax:
    content: public interface IEventStore<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: Public Interface IEventStore(Of TAuthenticationToken)
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
- uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  id: Save``1(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventStore`1
  langs:
  - csharp
  - vb
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nSaves the provided <code data-dev-comment-type=\"paramref\">event</code>.\n"
  example: []
  syntax:
    content: void Save<T>(IEvent<TAuthenticationToken> event)
    parameters:
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to be saved.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    content.vb: Sub Save(Of T)(event As IEvent(Of TAuthenticationToken))
  overload: Cqrs.Events.IEventStore`1.Save*
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
- uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  id: Save(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventStore`1
  langs:
  - csharp
  - vb
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nSaves the provided <code data-dev-comment-type=\"paramref\">event</code>.\n"
  example: []
  syntax:
    content: void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event)
    parameters:
    - id: aggregateRootType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to be saved.
    content.vb: Sub Save(aggregateRootType As Type, event As IEvent(Of TAuthenticationToken))
  overload: Cqrs.Events.IEventStore`1.Save*
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
- uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  id: Get``1(System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.IEventStore`1
  langs:
  - csharp
  - vb
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nGets a collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for the <code data-dev-comment-type=\"typeparamref\">T</code> with the ID matching the provided <code data-dev-comment-type=\"paramref\">aggregateId</code>.\n"
  example: []
  syntax:
    content: IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1)
    parameters:
    - id: aggregateId
      type: System.Guid
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601.Id" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    - id: useLastEventOnly
      type: System.Boolean
      description: Loads only the last event<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: fromVersion
      type: System.Int32
      description: Load events starting from this version
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Function Get(Of T)(aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = -1) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.Events.IEventStore`1.Get*
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
- uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  id: Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.IEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 51
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nGets a collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> of type <code data-dev-comment-type=\"paramref\">aggregateRootType</code> with the ID matching the provided <code data-dev-comment-type=\"paramref\">aggregateId</code>.\n"
  example: []
  syntax:
    content: IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1)
    parameters:
    - id: aggregateRootType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    - id: aggregateId
      type: System.Guid
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601.Id" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    - id: useLastEventOnly
      type: System.Boolean
      description: Loads only the last event<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: fromVersion
      type: System.Int32
      description: Load events starting from this version
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Function Get(aggregateRootType As Type, aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = -1) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.Events.IEventStore`1.Get*
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
- uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
  commentId: M:Cqrs.Events.IEventStore`1.Get(System.Guid)
  id: Get(System.Guid)
  parent: Cqrs.Events.IEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Guid)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/IEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Events/IEventStore.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nGet all <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> instances for the given <code data-dev-comment-type=\"paramref\">correlationId</code>.\n"
  example: []
  syntax:
    content: IEnumerable<EventData> Get(Guid correlationId)
    parameters:
    - id: correlationId
      type: System.Guid
      description: The <xref href="Cqrs.Messages.IMessage.CorrelationId" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> instances to retrieve.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
    content.vb: Function Get(correlationId As Guid) As IEnumerable(Of EventData)
  overload: Cqrs.Events.IEventStore`1.Get*
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Guid)
references:
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events.IEventStore`1.Save*
  commentId: Overload:Cqrs.Events.IEventStore`1.Save
  isExternal: false
  name: Save
  nameWithType: IEventStore<TAuthenticationToken>.Save
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.Id
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Events.IEventStore`1.Get*
  commentId: Overload:Cqrs.Events.IEventStore`1.Get
  isExternal: false
  name: Get
  nameWithType: IEventStore<TAuthenticationToken>.Get
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Messages.IMessage.CorrelationId
  commentId: P:Cqrs.Messages.IMessage.CorrelationId
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: CorrelationId
  nameWithType: IMessage.CorrelationId
  fullName: Cqrs.Messages.IMessage.CorrelationId
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
