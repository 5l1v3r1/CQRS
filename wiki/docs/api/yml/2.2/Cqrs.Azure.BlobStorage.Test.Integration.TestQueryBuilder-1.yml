### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  commentId: T:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  id: TestQueryBuilder`1
  parent: Cqrs.Azure.BlobStorage.Test.Integration
  children:
  - Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor(Cqrs.DataStores.IDataStore{`0},Cqrs.Configuration.IDependencyResolver)
  - Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  langs:
  - csharp
  - vb
  name: TestQueryBuilder<TData>
  nameWithType: TestQueryBuilder<TData>
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>
  type: Class
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestQueryBuilder
    path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
    startLine: 20
  assemblies:
  - Cqrs.Azure.BlobStorage.Test.Integration
  namespace: Cqrs.Azure.BlobStorage.Test.Integration
  summary: "\nA test <xref href=\"Cqrs.Repositories.Queries.QueryBuilder%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class TestQueryBuilder<TData> : QueryBuilder<TestQueryStrategy, TData>, IQueryBuilder<TestQueryStrategy, TData> where TData : Entity'
    typeParameters:
    - id: TData
    content.vb: >-
      Public Class TestQueryBuilder(Of TData As Entity)

          Inherits QueryBuilder(Of TestQueryStrategy, TData)

          Implements IQueryBuilder(Of TestQueryStrategy, TData)
  inheritance:
  - System.Object
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  implements:
  - Cqrs.Repositories.Queries.IQueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  inheritedMembers:
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.DataStore
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.DependencyResolver
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetEmptyQueryPredicate
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionNameOfType``1(System.Func{{TParameter1},Cqrs.Repositories.Queries.IQueryPredicate})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``1(System.Func{{T}})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``1(System.Func{{TParameter1},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``2(System.Func{{TParameter1},{TParameter2},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``3(System.Func{{TParameter1},{TParameter2},{TParameter3},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``4(System.Func{{TParameter1},{TParameter2},{TParameter3},{TParameter4},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``5(System.Func{{TParameter1},{TParameter2},{TParameter3},{TParameter4},{TParameter5},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetNullQueryStrategy
  - Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.ApplySorting(Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,System.Linq.IQueryable{{TData}}@)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TestQueryBuilder(Of TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData)
  name.vb: TestQueryBuilder(Of TData)
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor(Cqrs.DataStores.IDataStore{`0},Cqrs.Configuration.IDependencyResolver)
  commentId: M:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor(Cqrs.DataStores.IDataStore{`0},Cqrs.Configuration.IDependencyResolver)
  id: '#ctor(Cqrs.DataStores.IDataStore{`0},Cqrs.Configuration.IDependencyResolver)'
  parent: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  langs:
  - csharp
  - vb
  name: TestQueryBuilder(IDataStore<TData>, IDependencyResolver)
  nameWithType: TestQueryBuilder<TData>.TestQueryBuilder(IDataStore<TData>, IDependencyResolver)
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>.TestQueryBuilder(Cqrs.DataStores.IDataStore<TData>, Cqrs.Configuration.IDependencyResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
    startLine: 26
  assemblies:
  - Cqrs.Azure.BlobStorage.Test.Integration
  namespace: Cqrs.Azure.BlobStorage.Test.Integration
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TestQueryBuilder(IDataStore<TData> dataStore, IDependencyResolver dependencyResolver)
    parameters:
    - id: dataStore
      type: Cqrs.DataStores.IDataStore{{TData}}
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Public Sub New(dataStore As IDataStore(Of TData), dependencyResolver As IDependencyResolver)
  overload: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor*
  nameWithType.vb: TestQueryBuilder(Of TData).TestQueryBuilder(IDataStore(Of TData), IDependencyResolver)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData).TestQueryBuilder(Cqrs.DataStores.IDataStore(Of TData), Cqrs.Configuration.IDependencyResolver)
  name.vb: TestQueryBuilder(IDataStore(Of TData), IDependencyResolver)
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  commentId: M:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  id: GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  langs:
  - csharp
  - vb
  name: GeneratePredicate(QueryPredicate, IQueryable<TData>)
  nameWithType: TestQueryBuilder<TData>.GeneratePredicate(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GeneratePredicate
    path: Framework/Azure/Tests/Cqrs.Azure.BlobStorage.Test.Integration/TestQueryBuilder.cs
    startLine: 36
  assemblies:
  - Cqrs.Azure.BlobStorage.Test.Integration
  namespace: Cqrs.Azure.BlobStorage.Test.Integration
  summary: "\nRaises a <xref href=\"System.NotImplementedException\" data-throw-if-not-resolved=\"false\"></xref> as it&apos;s currently not needed.\n"
  example: []
  syntax:
    content: protected override IQueryable<TData> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable = null)
    parameters:
    - id: queryPredicate
      type: Cqrs.Repositories.Queries.QueryPredicate
    - id: leftHandQueryable
      type: System.Linq.IQueryable{{TData}}
    return:
      type: System.Linq.IQueryable{{TData}}
    content.vb: Protected Overrides Function GeneratePredicate(queryPredicate As QueryPredicate, leftHandQueryable As IQueryable(Of TData) = Nothing) As IQueryable(Of TData)
  overridden: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  overload: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate*
  nameWithType.vb: TestQueryBuilder(Of TData).GeneratePredicate(QueryPredicate, IQueryable(Of TData))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData).GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicate(QueryPredicate, IQueryable(Of TData))
references:
- uid: Cqrs.Repositories.Queries.QueryBuilder`2
  commentId: T:Cqrs.Repositories.Queries.QueryBuilder`2
  isExternal: false
  name: QueryBuilder<TQueryStrategy, TData>
  nameWithType: QueryBuilder<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData)
  name.vb: QueryBuilder(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Test.Integration
  commentId: N:Cqrs.Azure.BlobStorage.Test.Integration
  isExternal: false
  name: Cqrs.Azure.BlobStorage.Test.Integration
  nameWithType: Cqrs.Azure.BlobStorage.Test.Integration
  fullName: Cqrs.Azure.BlobStorage.Test.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  commentId: T:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.QueryBuilder`2
  name: QueryBuilder<TestQueryStrategy, TData>
  nameWithType: QueryBuilder<TestQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData)
  name.vb: QueryBuilder(Of TestQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2
    name: QueryBuilder
    nameWithType: QueryBuilder
    fullName: Cqrs.Repositories.Queries.QueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.IQueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  commentId: T:Cqrs.Repositories.Queries.IQueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.IQueryBuilder`2
  name: IQueryBuilder<TestQueryStrategy, TData>
  nameWithType: IQueryBuilder<TestQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>
  nameWithType.vb: IQueryBuilder(Of TestQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData)
  name.vb: IQueryBuilder(Of TestQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryBuilder`2
    name: IQueryBuilder
    nameWithType: IQueryBuilder
    fullName: Cqrs.Repositories.Queries.IQueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryBuilder`2
    name: IQueryBuilder
    nameWithType: IQueryBuilder
    fullName: Cqrs.Repositories.Queries.IQueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.DataStore
  commentId: P:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.DataStore
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.DataStore
  name: DataStore
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.DataStore
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.DataStore
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).DataStore
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).DataStore
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.DependencyResolver
  commentId: P:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.DependencyResolver
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.DependencyResolver
  name: DependencyResolver
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.DependencyResolver
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.DependencyResolver
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).DependencyResolver
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).DependencyResolver
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  name: CreateQueryable(ISingleResultQuery<TestQueryStrategy, TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TestQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).CreateQueryable(ISingleResultQuery(Of TestQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData))
  name.vb: CreateQueryable(ISingleResultQuery(Of TestQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  name: CreateQueryable(ICollectionResultQuery<TestQueryStrategy, TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TestQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).CreateQueryable(ICollectionResultQuery(Of TestQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData))
  name.vb: CreateQueryable(ICollectionResultQuery(Of TestQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetEmptyQueryPredicate
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetEmptyQueryPredicate
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
  name: GetEmptyQueryPredicate()
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetEmptyQueryPredicate()
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetEmptyQueryPredicate()
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetEmptyQueryPredicate()
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetEmptyQueryPredicate()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
    name: GetEmptyQueryPredicate
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetEmptyQueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetEmptyQueryPredicate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
    name: GetEmptyQueryPredicate
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetEmptyQueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetEmptyQueryPredicate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicate(IQueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate(IQueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicate(IQueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicate(IQueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateIsNotLogicallyDeleted
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateIsNotLogicallyDeleted
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{{TData}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  name: GeneratePredicate(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicate(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicate(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionNameOfType``1(System.Func{{TParameter1},Cqrs.Repositories.Queries.IQueryPredicate})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
  name: GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(System.Func<TParameter1, Cqrs.Repositories.Queries.IQueryPredicate>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)(Func(Of TParameter1, IQueryPredicate))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)(System.Func(Of TParameter1, Cqrs.Repositories.Queries.IQueryPredicate))
  name.vb: GetFunctionNameOfType(Of TParameter1)(Func(Of TParameter1, IQueryPredicate))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
    name: GetFunctionNameOfType<TParameter1>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
    name: GetFunctionNameOfType(Of TParameter1)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``1(System.Func{{T}})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``1(System.Func{``0})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
  name: GetFunctionName<T>(Func<T>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<T>(Func<T>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<T>(System.Func<T>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of T)(Func(Of T))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of T)(System.Func(Of T))
  name.vb: GetFunctionName(Of T)(Func(Of T))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
    name: GetFunctionName<T>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<T>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
    name: GetFunctionName(Of T)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of T)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``1(System.Func{{TParameter1},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``1(System.Func{``0,Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
  name: GetFunctionName<TParameter1>(Func<TParameter1, TestQueryStrategy>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1>(Func<TParameter1, TestQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1>(System.Func<TParameter1, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1)(Func(Of TParameter1, TestQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1)(System.Func(Of TParameter1, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1)(Func(Of TParameter1, TestQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
    name: GetFunctionName<TParameter1>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
    name: GetFunctionName(Of TParameter1)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``2(System.Func{{TParameter1},{TParameter2},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``2(System.Func{``0,``1,Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
  name: GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TestQueryStrategy>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TestQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(System.Func<TParameter1, TParameter2, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)(Func(Of TParameter1, TParameter2, TestQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)(System.Func(Of TParameter1, TParameter2, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2)(Func(Of TParameter1, TParameter2, TestQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
    name: GetFunctionName<TParameter1, TParameter2>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
    name: GetFunctionName(Of TParameter1, TParameter2)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``3(System.Func{{TParameter1},{TParameter2},{TParameter3},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``3(System.Func{``0,``1,``2,Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
  name: GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TestQueryStrategy>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TestQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(System.Func<TParameter1, TParameter2, TParameter3, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)(Func(Of TParameter1, TParameter2, TParameter3, TestQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)(System.Func(Of TParameter1, TParameter2, TParameter3, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3)(Func(Of TParameter1, TParameter2, TParameter3, TestQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``4(System.Func{{TParameter1},{TParameter2},{TParameter3},{TParameter4},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``4(System.Func{``0,``1,``2,``3,Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
  name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TestQueryStrategy>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TestQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(System.Func<TParameter1, TParameter2, TParameter3, TParameter4, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TestQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(System.Func(Of TParameter1, TParameter2, TParameter3, TParameter4, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TestQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetFunctionName``5(System.Func{{TParameter1},{TParameter2},{TParameter3},{TParameter4},{TParameter5},Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy})
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
  name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TestQueryStrategy>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TestQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(System.Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TestQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(System.Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TestQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter5
    nameWithType: TParameter5
    fullName: TParameter5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter5
    nameWithType: TParameter5
    fullName: TParameter5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.GetNullQueryStrategy
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.GetNullQueryStrategy
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
  name: GetNullQueryStrategy()
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetNullQueryStrategy()
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetNullQueryStrategy()
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).GetNullQueryStrategy()
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetNullQueryStrategy()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
    name: GetNullQueryStrategy
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.GetNullQueryStrategy
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GetNullQueryStrategy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
    name: GetNullQueryStrategy
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).GetNullQueryStrategy
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).GetNullQueryStrategy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}.ApplySorting(Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,System.Linq.IQueryable{{TData}}@)
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,`0}.ApplySorting(Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,System.Linq.IQueryable{`0}@)
  parent: Cqrs.Repositories.Queries.QueryBuilder{Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy,{TData}}
  definition: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
  name: ApplySorting(TestQueryStrategy, IQueryable<TData>)
  nameWithType: QueryBuilder<TestQueryStrategy, TData>.ApplySorting(TestQueryStrategy, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.ApplySorting(Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TestQueryStrategy, TData).ApplySorting(TestQueryStrategy, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).ApplySorting(Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, System.Linq.IQueryable(Of TData))
  name.vb: ApplySorting(TestQueryStrategy, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
    name: ApplySorting
    nameWithType: QueryBuilder<TestQueryStrategy, TData>.ApplySorting
    fullName: Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.ApplySorting
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
    name: ApplySorting
    nameWithType: QueryBuilder(Of TestQueryStrategy, TData).ApplySorting
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData).ApplySorting
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
    name: TestQueryStrategy
    nameWithType: TestQueryStrategy
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Queries.IQueryBuilder`2
  commentId: T:Cqrs.Repositories.Queries.IQueryBuilder`2
  isExternal: false
  name: IQueryBuilder<TQueryStrategy, TData>
  nameWithType: IQueryBuilder<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<TQueryStrategy, TData>
  nameWithType.vb: IQueryBuilder(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of TQueryStrategy, TData)
  name.vb: IQueryBuilder(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryBuilder`2
    name: IQueryBuilder
    nameWithType: IQueryBuilder
    fullName: Cqrs.Repositories.Queries.IQueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryBuilder`2
    name: IQueryBuilder
    nameWithType: IQueryBuilder
    fullName: Cqrs.Repositories.Queries.IQueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.DataStore
  commentId: P:Cqrs.Repositories.Queries.QueryBuilder`2.DataStore
  isExternal: false
  name: DataStore
  nameWithType: QueryBuilder<TQueryStrategy, TData>.DataStore
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.DataStore
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).DataStore
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).DataStore
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.DependencyResolver
  commentId: P:Cqrs.Repositories.Queries.QueryBuilder`2.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: QueryBuilder<TQueryStrategy, TData>.DependencyResolver
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.DependencyResolver
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).DependencyResolver
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).DependencyResolver
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  isExternal: false
  name: CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).CreateQueryable(ISingleResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData))
  name.vb: CreateQueryable(ISingleResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder<TQueryStrategy, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  isExternal: false
  name: CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).CreateQueryable(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: CreateQueryable(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder<TQueryStrategy, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: CreateQueryable
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).CreateQueryable
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
  isExternal: false
  name: GetEmptyQueryPredicate()
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate()
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate()
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetEmptyQueryPredicate()
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetEmptyQueryPredicate()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
    name: GetEmptyQueryPredicate
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetEmptyQueryPredicate
    name: GetEmptyQueryPredicate
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetEmptyQueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetEmptyQueryPredicate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicate(IQueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(IQueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate(IQueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicate(IQueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.IQueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateIsNotLogicallyDeleted
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateIsNotLogicallyDeleted(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateIsNotLogicallyDeleted
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateIsNotLogicallyDeleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeAny``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeAny(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompany``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompany(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.OnGeneratePredicateWithPermissionScopeCompanyAndUser``1(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).OnGeneratePredicateWithPermissionScopeCompanyAndUser(Of TAuthenticationToken)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
  isExternal: true
  name: GeneratePredicate(QueryPredicate, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(QueryPredicate, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate(QueryPredicate, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable(Of TData))
  name.vb: GeneratePredicate(QueryPredicate, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate,System.Linq.IQueryable{`1})
    name: GeneratePredicate
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GeneratePredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryPredicate
    name: QueryPredicate
    nameWithType: QueryPredicate
    fullName: Cqrs.Repositories.Queries.QueryPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
  isExternal: true
  name: GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(System.Func<TParameter1, Cqrs.Repositories.Queries.IQueryPredicate>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)(Func(Of TParameter1, IQueryPredicate))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)(System.Func(Of TParameter1, Cqrs.Repositories.Queries.IQueryPredicate))
  name.vb: GetFunctionNameOfType(Of TParameter1)(Func(Of TParameter1, IQueryPredicate))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
    name: GetFunctionNameOfType<TParameter1>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionNameOfType``1(System.Func{``0,Cqrs.Repositories.Queries.IQueryPredicate})
    name: GetFunctionNameOfType(Of TParameter1)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionNameOfType(Of TParameter1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Repositories.Queries.IQueryPredicate
    name: IQueryPredicate
    nameWithType: IQueryPredicate
    fullName: Cqrs.Repositories.Queries.IQueryPredicate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
  isExternal: true
  name: GetFunctionName<T>(Func<T>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<T>(Func<T>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<T>(System.Func<T>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of T)(Func(Of T))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of T)(System.Func(Of T))
  name.vb: GetFunctionName(Of T)(Func(Of T))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
    name: GetFunctionName<T>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<T>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0})
    name: GetFunctionName(Of T)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of T)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
  isExternal: true
  name: GetFunctionName<TParameter1>(Func<TParameter1, TQueryStrategy>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1>(Func<TParameter1, TQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1>(System.Func<TParameter1, TQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1)(Func(Of TParameter1, TQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1)(System.Func(Of TParameter1, TQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1)(Func(Of TParameter1, TQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
    name: GetFunctionName<TParameter1>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``1(System.Func{``0,`0})
    name: GetFunctionName(Of TParameter1)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
  isExternal: true
  name: GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TQueryStrategy>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(System.Func<TParameter1, TParameter2, TQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)(Func(Of TParameter1, TParameter2, TQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)(System.Func(Of TParameter1, TParameter2, TQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2)(Func(Of TParameter1, TParameter2, TQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
    name: GetFunctionName<TParameter1, TParameter2>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``2(System.Func{``0,``1,`0})
    name: GetFunctionName(Of TParameter1, TParameter2)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
  isExternal: true
  name: GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TQueryStrategy>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(System.Func<TParameter1, TParameter2, TParameter3, TQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)(Func(Of TParameter1, TParameter2, TParameter3, TQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)(System.Func(Of TParameter1, TParameter2, TParameter3, TQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3)(Func(Of TParameter1, TParameter2, TParameter3, TQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``3(System.Func{``0,``1,``2,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
  isExternal: true
  name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(System.Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(System.Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``4(System.Func{``0,``1,``2,``3,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
  isExternal: true
  name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(System.Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(System.Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy))
  name.vb: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)(Func(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
    name: GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter5
    nameWithType: TParameter5
    fullName: TParameter5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetFunctionName``5(System.Func{``0,``1,``2,``3,``4,`0})
    name: GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetFunctionName(Of TParameter1, TParameter2, TParameter3, TParameter4, TParameter5)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter3
    nameWithType: TParameter3
    fullName: TParameter3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter4
    nameWithType: TParameter4
    fullName: TParameter4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter5
    nameWithType: TParameter5
    fullName: TParameter5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
  isExternal: false
  name: GetNullQueryStrategy()
  nameWithType: QueryBuilder<TQueryStrategy, TData>.GetNullQueryStrategy()
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetNullQueryStrategy()
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).GetNullQueryStrategy()
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetNullQueryStrategy()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
    name: GetNullQueryStrategy
    nameWithType: QueryBuilder<TQueryStrategy, TData>.GetNullQueryStrategy
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetNullQueryStrategy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.GetNullQueryStrategy
    name: GetNullQueryStrategy
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).GetNullQueryStrategy
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).GetNullQueryStrategy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
  commentId: M:Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
  isExternal: true
  name: ApplySorting(TQueryStrategy, IQueryable<TData>)
  nameWithType: QueryBuilder<TQueryStrategy, TData>.ApplySorting(TQueryStrategy, IQueryable<TData>)
  fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.ApplySorting(TQueryStrategy, System.Linq.IQueryable<TData>)
  nameWithType.vb: QueryBuilder(Of TQueryStrategy, TData).ApplySorting(TQueryStrategy, IQueryable(Of TData))
  fullName.vb: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).ApplySorting(TQueryStrategy, System.Linq.IQueryable(Of TData))
  name.vb: ApplySorting(TQueryStrategy, IQueryable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
    name: ApplySorting
    nameWithType: QueryBuilder<TQueryStrategy, TData>.ApplySorting
    fullName: Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.ApplySorting
  - name: (
    nameWithType: (
    fullName: (
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryBuilder`2.ApplySorting(`0,System.Linq.IQueryable{`1}@)
    name: ApplySorting
    nameWithType: QueryBuilder(Of TQueryStrategy, TData).ApplySorting
    fullName: Cqrs.Repositories.Queries.QueryBuilder(Of TQueryStrategy, TData).ApplySorting
  - name: (
    nameWithType: (
    fullName: (
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  commentId: T:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
  isExternal: false
  name: TestQueryBuilder<TData>
  nameWithType: TestQueryBuilder<TData>
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>
  nameWithType.vb: TestQueryBuilder(Of TData)
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData)
  name.vb: TestQueryBuilder(Of TData)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
    name: TestQueryBuilder
    nameWithType: TestQueryBuilder
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1
    name: TestQueryBuilder
    nameWithType: TestQueryBuilder
    fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor*
  commentId: Overload:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.#ctor
  isExternal: false
  name: TestQueryBuilder
  nameWithType: TestQueryBuilder<TData>.TestQueryBuilder
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>.TestQueryBuilder
  nameWithType.vb: TestQueryBuilder(Of TData).TestQueryBuilder
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData).TestQueryBuilder
- uid: Cqrs.DataStores.IDataStore{{TData}}
  commentId: T:Cqrs.DataStores.IDataStore{`0}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
- uid: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate*
  commentId: Overload:Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder`1.GeneratePredicate
  isExternal: false
  name: GeneratePredicate
  nameWithType: TestQueryBuilder<TData>.GeneratePredicate
  fullName: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder<TData>.GeneratePredicate
  nameWithType.vb: TestQueryBuilder(Of TData).GeneratePredicate
  fullName.vb: Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder(Of TData).GeneratePredicate
- uid: Cqrs.Repositories.Queries.QueryPredicate
  commentId: T:Cqrs.Repositories.Queries.QueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: QueryPredicate
  nameWithType: QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryPredicate
- uid: System.Linq.IQueryable{{TData}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: System.Linq.IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: System.Linq.IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
