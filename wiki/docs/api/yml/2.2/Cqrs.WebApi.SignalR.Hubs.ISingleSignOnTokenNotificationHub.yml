### YamlMime:ManagedReference
items:
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  commentId: T:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  id: ISingleSignOnTokenNotificationHub
  parent: Cqrs.WebApi.SignalR.Hubs
  children:
  - Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent``1(Cqrs.Events.IEvent{``0})
  - Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  - Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  - Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent``1(Cqrs.Events.IEvent{``0},System.Guid[])
  langs:
  - csharp
  - vb
  name: ISingleSignOnTokenNotificationHub
  nameWithType: ISingleSignOnTokenNotificationHub
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  type: Interface
  source:
    remote:
      path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ISingleSignOnTokenNotificationHub
    path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
    startLine: 17
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.SignalR.Hubs
  summary: "\nSends <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to different groups of users.\n"
  example: []
  syntax:
    content: public interface ISingleSignOnTokenNotificationHub
    content.vb: Public Interface ISingleSignOnTokenNotificationHub
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent``1(Cqrs.Events.IEvent{``0},System.Guid[])
  commentId: M:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent``1(Cqrs.Events.IEvent{``0},System.Guid[])
  id: SendUsersEvent``1(Cqrs.Events.IEvent{``0},System.Guid[])
  parent: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  langs:
  - csharp
  - vb
  name: SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, Guid[])
  nameWithType: ISingleSignOnTokenNotificationHub.SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, Guid[])
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent<TSingleSignOnToken>(Cqrs.Events.IEvent<TSingleSignOnToken>, System.Guid[])
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendUsersEvent
    path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
    startLine: 22
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.SignalR.Hubs
  summary: "\nSend out an event to specific user RSNs\n"
  example: []
  syntax:
    content: 'void SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, params Guid[] userRsnCollection)where TSingleSignOnToken : ISingleSignOnToken'
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TSingleSignOnToken}}
    - id: userRsnCollection
      type: System.Guid[]
    typeParameters:
    - id: TSingleSignOnToken
    content.vb: Sub SendUsersEvent(Of TSingleSignOnToken As ISingleSignOnToken)(eventData As IEvent(Of TSingleSignOnToken), ParamArray userRsnCollection As Guid())
  overload: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent*
  nameWithType.vb: ISingleSignOnTokenNotificationHub.SendUsersEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), Guid())
  fullName.vb: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent(Of TSingleSignOnToken)(Cqrs.Events.IEvent(Of TSingleSignOnToken), System.Guid())
  name.vb: SendUsersEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), Guid())
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  commentId: M:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  id: SendUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  parent: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  langs:
  - csharp
  - vb
  name: SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String)
  nameWithType: ISingleSignOnTokenNotificationHub.SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String)
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent<TSingleSignOnToken>(Cqrs.Events.IEvent<TSingleSignOnToken>, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendUserEvent
    path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
    startLine: 28
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.SignalR.Hubs
  summary: "\nSend out an event to specific user token\n"
  example: []
  syntax:
    content: 'void SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken'
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TSingleSignOnToken}}
    - id: userToken
      type: System.String
    typeParameters:
    - id: TSingleSignOnToken
    content.vb: Sub SendUserEvent(Of TSingleSignOnToken As ISingleSignOnToken)(eventData As IEvent(Of TSingleSignOnToken), userToken As String)
  overload: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent*
  nameWithType.vb: ISingleSignOnTokenNotificationHub.SendUserEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), String)
  fullName.vb: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent(Of TSingleSignOnToken)(Cqrs.Events.IEvent(Of TSingleSignOnToken), System.String)
  name.vb: SendUserEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), String)
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent``1(Cqrs.Events.IEvent{``0})
  commentId: M:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent``1(Cqrs.Events.IEvent{``0})
  id: SendAllUsersEvent``1(Cqrs.Events.IEvent{``0})
  parent: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  langs:
  - csharp
  - vb
  name: SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>)
  nameWithType: ISingleSignOnTokenNotificationHub.SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>)
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent<TSingleSignOnToken>(Cqrs.Events.IEvent<TSingleSignOnToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendAllUsersEvent
    path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
    startLine: 34
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.SignalR.Hubs
  summary: "\nSend out an event to all users\n"
  example: []
  syntax:
    content: 'void SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData)where TSingleSignOnToken : ISingleSignOnToken'
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TSingleSignOnToken}}
    typeParameters:
    - id: TSingleSignOnToken
    content.vb: Sub SendAllUsersEvent(Of TSingleSignOnToken As ISingleSignOnToken)(eventData As IEvent(Of TSingleSignOnToken))
  overload: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent*
  nameWithType.vb: ISingleSignOnTokenNotificationHub.SendAllUsersEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken))
  fullName.vb: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent(Of TSingleSignOnToken)(Cqrs.Events.IEvent(Of TSingleSignOnToken))
  name.vb: SendAllUsersEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken))
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  commentId: M:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  id: SendExceptThisUserEvent``1(Cqrs.Events.IEvent{``0},System.String)
  parent: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub
  langs:
  - csharp
  - vb
  name: SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String)
  nameWithType: ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String)
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(Cqrs.Events.IEvent<TSingleSignOnToken>, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SendExceptThisUserEvent
    path: Framework/Cqrs.WebApi/SignalR/Hubs/ISingleSignOnTokenNotificationHub.cs
    startLine: 40
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.SignalR.Hubs
  summary: "\nSend out an event to all users except the specific user token\n"
  example: []
  syntax:
    content: 'void SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken'
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TSingleSignOnToken}}
    - id: userToken
      type: System.String
    typeParameters:
    - id: TSingleSignOnToken
    content.vb: Sub SendExceptThisUserEvent(Of TSingleSignOnToken As ISingleSignOnToken)(eventData As IEvent(Of TSingleSignOnToken), userToken As String)
  overload: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent*
  nameWithType.vb: ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), String)
  fullName.vb: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent(Of TSingleSignOnToken)(Cqrs.Events.IEvent(Of TSingleSignOnToken), System.String)
  name.vb: SendExceptThisUserEvent(Of TSingleSignOnToken)(IEvent(Of TSingleSignOnToken), String)
references:
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.SignalR.Hubs
  commentId: N:Cqrs.WebApi.SignalR.Hubs
  isExternal: false
  name: Cqrs.WebApi.SignalR.Hubs
  nameWithType: Cqrs.WebApi.SignalR.Hubs
  fullName: Cqrs.WebApi.SignalR.Hubs
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent*
  commentId: Overload:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent
  isExternal: false
  name: SendUsersEvent
  nameWithType: ISingleSignOnTokenNotificationHub.SendUsersEvent
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUsersEvent
- uid: Cqrs.Events.IEvent{{TSingleSignOnToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TSingleSignOnToken>
  nameWithType: IEvent<TSingleSignOnToken>
  fullName: Cqrs.Events.IEvent<TSingleSignOnToken>
  nameWithType.vb: IEvent(Of TSingleSignOnToken)
  fullName.vb: Cqrs.Events.IEvent(Of TSingleSignOnToken)
  name.vb: IEvent(Of TSingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TSingleSignOnToken
    nameWithType: TSingleSignOnToken
    fullName: TSingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSingleSignOnToken
    nameWithType: TSingleSignOnToken
    fullName: TSingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid[]
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent*
  commentId: Overload:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent
  isExternal: false
  name: SendUserEvent
  nameWithType: ISingleSignOnTokenNotificationHub.SendUserEvent
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendUserEvent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent*
  commentId: Overload:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent
  isExternal: false
  name: SendAllUsersEvent
  nameWithType: ISingleSignOnTokenNotificationHub.SendAllUsersEvent
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendAllUsersEvent
- uid: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent*
  commentId: Overload:Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent
  isExternal: false
  name: SendExceptThisUserEvent
  nameWithType: ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent
  fullName: Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent
