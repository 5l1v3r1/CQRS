### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.QueryParameter
  commentId: T:Cqrs.Repositories.Queries.QueryParameter
  id: QueryParameter
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.QueryParameter.#ctor
  - Cqrs.Repositories.Queries.QueryParameter.#ctor(System.String,System.Object)
  - Cqrs.Repositories.Queries.QueryParameter.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  - Cqrs.Repositories.Queries.QueryParameter.CompareTo(System.Object)
  - Cqrs.Repositories.Queries.QueryParameter.GetParameterValue``1
  - Cqrs.Repositories.Queries.QueryParameter.ParameterName
  - Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  langs:
  - csharp
  - vb
  name: QueryParameter
  nameWithType: QueryParameter
  fullName: Cqrs.Repositories.Queries.QueryParameter
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryParameter
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInformation about a parameter pass to a function in a <xref href=\"Cqrs.Repositories.Queries.IQueryStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class QueryParameter : IComparable<QueryParameter>'
    content.vb: >-
      Public Class QueryParameter

          Implements IComparable(Of QueryParameter)
  inheritance:
  - System.Object
  implements:
  - System.IComparable{Cqrs.Repositories.Queries.QueryParameter}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Cqrs.Repositories.Queries.QueryParameter.Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Repositories.Queries.QueryParameter.#ctor
  commentId: M:Cqrs.Repositories.Queries.QueryParameter.#ctor
  id: '#ctor'
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: QueryParameter()
  nameWithType: QueryParameter.QueryParameter()
  fullName: Cqrs.Repositories.Queries.QueryParameter.QueryParameter()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 20
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Repositories.Queries.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public QueryParameter()
    content.vb: Public Sub New
  overload: Cqrs.Repositories.Queries.QueryParameter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryParameter.#ctor(System.String,System.Object)
  commentId: M:Cqrs.Repositories.Queries.QueryParameter.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: QueryParameter(String, Object)
  nameWithType: QueryParameter.QueryParameter(String, Object)
  fullName: Cqrs.Repositories.Queries.QueryParameter.QueryParameter(System.String, System.Object)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 25
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Repositories.Queries.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public QueryParameter(string parameterName, object parameterValue)
    parameters:
    - id: parameterName
      type: System.String
    - id: parameterValue
      type: System.Object
    content.vb: Public Sub New(parameterName As String, parameterValue As Object)
  overload: Cqrs.Repositories.Queries.QueryParameter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterName
  commentId: P:Cqrs.Repositories.Queries.QueryParameter.ParameterName
  id: ParameterName
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: ParameterName
  nameWithType: QueryParameter.ParameterName
  fullName: Cqrs.Repositories.Queries.QueryParameter.ParameterName
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ParameterName
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 34
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe name of the parameter.\n"
  example: []
  syntax:
    content: public string ParameterName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ParameterName As String
  overload: Cqrs.Repositories.Queries.QueryParameter.ParameterName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  commentId: P:Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  id: ParameterValue
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: ParameterValue
  nameWithType: QueryParameter.ParameterValue
  fullName: Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ParameterValue
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 39
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe value of the parameter.\n"
  example: []
  syntax:
    content: public object ParameterValue { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property ParameterValue As Object
  overload: Cqrs.Repositories.Queries.QueryParameter.ParameterValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue``1
  commentId: M:Cqrs.Repositories.Queries.QueryParameter.GetParameterValue``1
  id: GetParameterValue``1
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: GetParameterValue<T>()
  nameWithType: QueryParameter.GetParameterValue<T>()
  fullName: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue<T>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetParameterValue
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 44
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nReturns <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterValue\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">T</span>.\n"
  example: []
  syntax:
    content: public T GetParameterValue<T>()
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetParameterValue(Of T) As T
  overload: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue*
  nameWithType.vb: QueryParameter.GetParameterValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue(Of T)()
  name.vb: GetParameterValue(Of T)()
- uid: Cqrs.Repositories.Queries.QueryParameter.CompareTo(System.Object)
  commentId: M:Cqrs.Repositories.Queries.QueryParameter.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: QueryParameter.CompareTo(Object)
  fullName: Cqrs.Repositories.Queries.QueryParameter.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CompareTo
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 59
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCompares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.\n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'An object to compare with this instance. '
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <span class=\"paramref\">obj</span>. Zero This instance is equal to <span class=\"paramref\">obj</span>. Greater than zero This instance is greater than <span class=\"paramref\">obj</span>. \n"
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: Cqrs.Repositories.Queries.QueryParameter.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: '<span class="paramref">obj</span> is not the same type as this instance. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryParameter.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  commentId: M:Cqrs.Repositories.Queries.QueryParameter.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  id: CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  parent: Cqrs.Repositories.Queries.QueryParameter
  langs:
  - csharp
  - vb
  name: CompareTo(QueryParameter)
  nameWithType: QueryParameter.CompareTo(QueryParameter)
  fullName: Cqrs.Repositories.Queries.QueryParameter.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CompareTo
    path: Framework/Cqrs/Repositories/Queries/QueryParameter.cs
    startLine: 78
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCompares the current object with another object of the same type.\n"
  example: []
  syntax:
    content: public int CompareTo(QueryParameter other)
    parameters:
    - id: other
      type: Cqrs.Repositories.Queries.QueryParameter
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <span class=\"paramref\">other</span> parameter.Zero This object is equal to <span class=\"paramref\">other</span>. Greater than zero This object is greater than <span class=\"paramref\">other</span>. \n"
    content.vb: Public Function CompareTo(other As QueryParameter) As Integer
  overload: Cqrs.Repositories.Queries.QueryParameter.CompareTo*
  implements:
  - System.IComparable{Cqrs.Repositories.Queries.QueryParameter}.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{Cqrs.Repositories.Queries.QueryParameter}
  commentId: T:System.IComparable{Cqrs.Repositories.Queries.QueryParameter}
  parent: System
  definition: System.IComparable`1
  name: IComparable<QueryParameter>
  nameWithType: IComparable<QueryParameter>
  fullName: System.IComparable<Cqrs.Repositories.Queries.QueryParameter>
  nameWithType.vb: IComparable(Of QueryParameter)
  fullName.vb: System.IComparable(Of Cqrs.Repositories.Queries.QueryParameter)
  name.vb: IComparable(Of QueryParameter)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryParameter.Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  definition: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  name: GetValue<TResult>()
  nameWithType: QueryPredicateExtensions.GetValue<TResult>()
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>()
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)()
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)()
  name.vb: GetValue(Of TResult)()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1
    name: GetValue<TResult>
    nameWithType: QueryPredicateExtensions.GetValue<TResult>
    fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1
    name: GetValue(Of TResult)
    nameWithType: QueryPredicateExtensions.GetValue(Of TResult)
    fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  isExternal: false
  name: GetValue<TResult>(QueryParameter)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(QueryParameter)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(Cqrs.Repositories.Queries.QueryParameter)
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(QueryParameter)
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(Cqrs.Repositories.Queries.QueryParameter)
  name.vb: GetValue(Of TResult)(QueryParameter)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
    name: GetValue<TResult>
    nameWithType: QueryPredicateExtensions.GetValue<TResult>
    fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
    name: GetValue(Of TResult)
    nameWithType: QueryPredicateExtensions.GetValue(Of TResult)
    fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions
  commentId: T:Cqrs.Repositories.Queries.QueryPredicateExtensions
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: QueryPredicateExtensions
  nameWithType: QueryPredicateExtensions
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions
- uid: Cqrs.Repositories.Queries.QueryParameter
  commentId: T:Cqrs.Repositories.Queries.QueryParameter
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: QueryParameter
  nameWithType: QueryParameter
  fullName: Cqrs.Repositories.Queries.QueryParameter
- uid: Cqrs.Repositories.Queries.QueryParameter.#ctor*
  commentId: Overload:Cqrs.Repositories.Queries.QueryParameter.#ctor
  isExternal: false
  name: QueryParameter
  nameWithType: QueryParameter.QueryParameter
  fullName: Cqrs.Repositories.Queries.QueryParameter.QueryParameter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterName*
  commentId: Overload:Cqrs.Repositories.Queries.QueryParameter.ParameterName
  isExternal: false
  name: ParameterName
  nameWithType: QueryParameter.ParameterName
  fullName: Cqrs.Repositories.Queries.QueryParameter.ParameterName
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterValue*
  commentId: Overload:Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  isExternal: false
  name: ParameterValue
  nameWithType: QueryParameter.ParameterValue
  fullName: Cqrs.Repositories.Queries.QueryParameter.ParameterValue
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  commentId: P:Cqrs.Repositories.Queries.QueryParameter.ParameterValue
- uid: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue*
  commentId: Overload:Cqrs.Repositories.Queries.QueryParameter.GetParameterValue
  isExternal: false
  name: GetParameterValue
  nameWithType: QueryParameter.GetParameterValue
  fullName: Cqrs.Repositories.Queries.QueryParameter.GetParameterValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Cqrs.Repositories.Queries.QueryParameter.CompareTo*
  commentId: Overload:Cqrs.Repositories.Queries.QueryParameter.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: QueryParameter.CompareTo
  fullName: Cqrs.Repositories.Queries.QueryParameter.CompareTo
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable{Cqrs.Repositories.Queries.QueryParameter}.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  commentId: M:System.IComparable{Cqrs.Repositories.Queries.QueryParameter}.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  parent: System.IComparable{Cqrs.Repositories.Queries.QueryParameter}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(QueryParameter)
  nameWithType: IComparable<QueryParameter>.CompareTo(QueryParameter)
  fullName: System.IComparable<Cqrs.Repositories.Queries.QueryParameter>.CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  nameWithType.vb: IComparable(Of QueryParameter).CompareTo(QueryParameter)
  fullName.vb: System.IComparable(Of Cqrs.Repositories.Queries.QueryParameter).CompareTo(Cqrs.Repositories.Queries.QueryParameter)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<QueryParameter>.CompareTo
    fullName: System.IComparable<Cqrs.Repositories.Queries.QueryParameter>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of QueryParameter).CompareTo
    fullName: System.IComparable(Of Cqrs.Repositories.Queries.QueryParameter).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
