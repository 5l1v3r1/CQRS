### YamlMime:ManagedReference
items:
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  commentId: T:Cqrs.Tests.Substitutes.TestSagaEventHandlers
  id: TestSagaEventHandlers
  parent: Cqrs.Tests.Substitutes
  children:
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken})
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  - Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
  langs:
  - csharp
  - vb
  name: TestSagaEventHandlers
  nameWithType: TestSagaEventHandlers
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestSagaEventHandlers
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 9
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public class TestSagaEventHandlers : SagaEventHandler<ISingleSignOnToken, TestSaga>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomething>, IMessageHandler<TestAggregateDidSomething>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse>, IMessageHandler<TestAggregateDidSomethingElse>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse2>, IMessageHandler<TestAggregateDidSomethingElse2>, IEventHandler, IHandler'
    content.vb: >-
      Public Class TestSagaEventHandlers
          Inherits SagaEventHandler(Of ISingleSignOnToken, TestSaga)
          Implements IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomething), IMessageHandler(Of TestAggregateDidSomething), IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse), IMessageHandler(Of TestAggregateDidSomethingElse), IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse2), IMessageHandler(Of TestAggregateDidSomethingElse2), IEventHandler, IHandler
  inheritance:
  - System.Object
  - Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  implements:
  - Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  - Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  - Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  - Cqrs.Events.IEventHandler
  - Cqrs.Messages.IHandler
  inheritedMembers:
  - Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.SagaUnitOfWork
  - Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.DependencyResolver
  - Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.Logger
  - Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.GetSaga(System.Guid)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
  commentId: P:Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
  id: TimesRun
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: TimesRun
  nameWithType: TestSagaEventHandlers.TimesRun
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TimesRun
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 15
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public int TimesRun { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property TimesRun As Integer
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken})
  commentId: M:Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken})
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger,Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken})'
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: TestSagaEventHandlers(IDependencyResolver, ILogger, ISagaUnitOfWork<ISingleSignOnToken>)
  nameWithType: TestSagaEventHandlers.TestSagaEventHandlers(IDependencyResolver, ILogger, ISagaUnitOfWork<ISingleSignOnToken>)
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TestSagaEventHandlers(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Domain.ISagaUnitOfWork<Cqrs.Authentication.ISingleSignOnToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 17
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public TestSagaEventHandlers(IDependencyResolver dependencyResolver, ILogger logger, ISagaUnitOfWork<ISingleSignOnToken> sagaUnitOfWork)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: sagaUnitOfWork
      type: Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken}
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver, logger As ILogger, sagaUnitOfWork As ISagaUnitOfWork(Of ISingleSignOnToken))
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor*
  nameWithType.vb: TestSagaEventHandlers.TestSagaEventHandlers(IDependencyResolver, ILogger, ISagaUnitOfWork(Of ISingleSignOnToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TestSagaEventHandlers(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger, Cqrs.Domain.ISagaUnitOfWork(Of Cqrs.Authentication.ISingleSignOnToken))
  name.vb: TestSagaEventHandlers(IDependencyResolver, ILogger, ISagaUnitOfWork(Of ISingleSignOnToken))
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver,cdmdotnet.Logging.ILogger)'
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: TestSagaEventHandlers(IDependencyResolver, ILogger)
  nameWithType: TestSagaEventHandlers.TestSagaEventHandlers(IDependencyResolver, ILogger)
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TestSagaEventHandlers(Cqrs.Configuration.IDependencyResolver, cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 24
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  summary: "\nA constructor for the <xref href=\"Cqrs.Domain.Factories.IAggregateFactory\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public TestSagaEventHandlers(IDependencyResolver dependencyResolver, ILogger logger)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver, logger As ILogger)
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  commentId: M:Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  id: Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: Handle(TestAggregateDidSomething)
  nameWithType: TestSagaEventHandlers.Handle(TestAggregateDidSomething)
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 30
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public void Handle(TestAggregateDidSomething message)
    parameters:
    - id: message
      type: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    content.vb: Public Sub Handle(message As TestAggregateDidSomething)
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  commentId: M:Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  id: Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: Handle(TestAggregateDidSomethingElse)
  nameWithType: TestSagaEventHandlers.Handle(TestAggregateDidSomethingElse)
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 49
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public void Handle(TestAggregateDidSomethingElse message)
    parameters:
    - id: message
      type: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    content.vb: Public Sub Handle(message As TestAggregateDidSomethingElse)
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  commentId: M:Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  id: Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  parent: Cqrs.Tests.Substitutes.TestSagaEventHandlers
  langs:
  - csharp
  - vb
  name: Handle(TestAggregateDidSomethingElse2)
  nameWithType: TestSagaEventHandlers.Handle(TestAggregateDidSomethingElse2)
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Cqrs.Tests/Substitutes/TestSaga.cs
    startLine: 63
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public void Handle(TestAggregateDidSomethingElse2 message)
    parameters:
    - id: message
      type: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    content.vb: Public Sub Handle(message As TestAggregateDidSomethingElse2)
  overload: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Tests.Substitutes
  commentId: N:Cqrs.Tests.Substitutes
  isExternal: false
  name: Cqrs.Tests.Substitutes
  nameWithType: Cqrs.Tests.Substitutes
  fullName: Cqrs.Tests.Substitutes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  commentId: T:Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.SagaEventHandler`2
  name: SagaEventHandler<ISingleSignOnToken, TestSaga>
  nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>
  fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>
  nameWithType.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga)
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga)
  name.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga)
  spec.csharp:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestSaga
    name: TestSaga
    nameWithType: TestSaga
    fullName: Cqrs.Tests.Substitutes.TestSaga
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestSaga
    name: TestSaga
    nameWithType: TestSaga
    fullName: Cqrs.Tests.Substitutes.TestSaga
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  commentId: T:Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventHandler`2
  name: IEventHandler<ISingleSignOnToken, TestAggregateDidSomething>
  nameWithType: IEventHandler<ISingleSignOnToken, TestAggregateDidSomething>
  fullName: Cqrs.Events.IEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomething>
  nameWithType.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomething)
  fullName.vb: Cqrs.Events.IEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  name.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomething)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<TestAggregateDidSomething>
  nameWithType: IMessageHandler<TestAggregateDidSomething>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomething>
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomething)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  name.vb: IMessageHandler(Of TestAggregateDidSomething)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  commentId: T:Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventHandler`2
  name: IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse>
  nameWithType: IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse>
  fullName: Cqrs.Events.IEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse>
  nameWithType.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse)
  fullName.vb: Cqrs.Events.IEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  name.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<TestAggregateDidSomethingElse>
  nameWithType: IMessageHandler<TestAggregateDidSomethingElse>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse>
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomethingElse)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  name.vb: IMessageHandler(Of TestAggregateDidSomethingElse)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  commentId: T:Cqrs.Events.IEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventHandler`2
  name: IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse2>
  nameWithType: IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse2>
  fullName: Cqrs.Events.IEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2>
  nameWithType.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse2)
  fullName.vb: Cqrs.Events.IEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  name.vb: IEventHandler(Of ISingleSignOnToken, TestAggregateDidSomethingElse2)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<TestAggregateDidSomethingElse2>
  nameWithType: IMessageHandler<TestAggregateDidSomethingElse2>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2>
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomethingElse2)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  name.vb: IMessageHandler(Of TestAggregateDidSomethingElse2)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler
  commentId: T:Cqrs.Events.IEventHandler
  parent: Cqrs.Events
  isExternal: false
  name: IEventHandler
  nameWithType: IEventHandler
  fullName: Cqrs.Events.IEventHandler
- uid: Cqrs.Messages.IHandler
  commentId: T:Cqrs.Messages.IHandler
  parent: Cqrs.Messages
  isExternal: false
  name: IHandler
  nameWithType: IHandler
  fullName: Cqrs.Messages.IHandler
- uid: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.SagaUnitOfWork
  commentId: P:Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.SagaUnitOfWork
  parent: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  definition: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  name: SagaUnitOfWork
  nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>.SagaUnitOfWork
  fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>.SagaUnitOfWork
  nameWithType.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga).SagaUnitOfWork
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga).SagaUnitOfWork
- uid: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.DependencyResolver
  commentId: P:Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.DependencyResolver
  parent: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  definition: Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  name: DependencyResolver
  nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>.DependencyResolver
  fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>.DependencyResolver
  nameWithType.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga).DependencyResolver
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga).DependencyResolver
- uid: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.Logger
  commentId: P:Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.Logger
  parent: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  definition: Cqrs.Domain.SagaEventHandler`2.Logger
  name: Logger
  nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>.Logger
  fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>.Logger
  nameWithType.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga).Logger
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga).Logger
- uid: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.GetSaga(System.Guid)
  commentId: M:Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}.GetSaga(System.Guid)
  parent: Cqrs.Domain.SagaEventHandler{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSaga}
  definition: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  name: GetSaga(Guid)
  nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>.GetSaga(Guid)
  fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>.GetSaga(System.Guid)
  nameWithType.vb: SagaEventHandler(Of ISingleSignOnToken, TestSaga).GetSaga(Guid)
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga).GetSaga(System.Guid)
  spec.csharp:
  - uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
    name: GetSaga
    nameWithType: SagaEventHandler<ISingleSignOnToken, TestSaga>.GetSaga
    fullName: Cqrs.Domain.SagaEventHandler<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga>.GetSaga
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
    name: GetSaga
    nameWithType: SagaEventHandler(Of ISingleSignOnToken, TestSaga).GetSaga
    fullName: Cqrs.Domain.SagaEventHandler(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSaga).GetSaga
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.SagaEventHandler`2
  commentId: T:Cqrs.Domain.SagaEventHandler`2
  isExternal: false
  name: SagaEventHandler<TAuthenticationToken, TSaga>
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga)
  name.vb: SagaEventHandler(Of TAuthenticationToken, TSaga)
  spec.csharp:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaEventHandler`2
    name: SagaEventHandler
    nameWithType: SagaEventHandler
    fullName: Cqrs.Domain.SagaEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Events.IEventHandler`2
  commentId: T:Cqrs.Events.IEventHandler`2
  isExternal: false
  name: IEventHandler<TAuthenticationToken, TEvent>
  nameWithType: IEventHandler<TAuthenticationToken, TEvent>
  fullName: Cqrs.Events.IEventHandler<TAuthenticationToken, TEvent>
  nameWithType.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  fullName.vb: Cqrs.Events.IEventHandler(Of TAuthenticationToken, TEvent)
  name.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Messages.IMessageHandler`1
  commentId: T:Cqrs.Messages.IMessageHandler`1
  isExternal: false
  name: IMessageHandler<TMessage>
  nameWithType: IMessageHandler<TMessage>
  fullName: Cqrs.Messages.IMessageHandler<TMessage>
  nameWithType.vb: IMessageHandler(Of TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage)
  name.vb: IMessageHandler(Of TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  commentId: P:Cqrs.Domain.SagaEventHandler`2.SagaUnitOfWork
  isExternal: false
  name: SagaUnitOfWork
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.SagaUnitOfWork
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).SagaUnitOfWork
- uid: Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  commentId: P:Cqrs.Domain.SagaEventHandler`2.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.DependencyResolver
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).DependencyResolver
- uid: Cqrs.Domain.SagaEventHandler`2.Logger
  commentId: P:Cqrs.Domain.SagaEventHandler`2.Logger
  isExternal: false
  name: Logger
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.Logger
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).Logger
- uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  commentId: M:Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
  isExternal: true
  name: GetSaga(Guid)
  nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga(Guid)
  fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga(System.Guid)
  nameWithType.vb: SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga(Guid)
  fullName.vb: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga(System.Guid)
  spec.csharp:
  - uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
    name: GetSaga
    nameWithType: SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga
    fullName: Cqrs.Domain.SagaEventHandler<TAuthenticationToken, TSaga>.GetSaga
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaEventHandler`2.GetSaga(System.Guid)
    name: GetSaga
    nameWithType: SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga
    fullName: Cqrs.Domain.SagaEventHandler(Of TAuthenticationToken, TSaga).GetSaga
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
  isExternal: false
  name: TimesRun
  nameWithType: TestSagaEventHandlers.TimesRun
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TimesRun
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSagaEventHandlers.#ctor
  isExternal: false
  name: TestSagaEventHandlers
  nameWithType: TestSagaEventHandlers.TestSagaEventHandlers
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.TestSagaEventHandlers
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken}
  commentId: T:Cqrs.Domain.ISagaUnitOfWork{Cqrs.Authentication.ISingleSignOnToken}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.ISagaUnitOfWork`1
  name: ISagaUnitOfWork<ISingleSignOnToken>
  nameWithType: ISagaUnitOfWork<ISingleSignOnToken>
  fullName: Cqrs.Domain.ISagaUnitOfWork<Cqrs.Authentication.ISingleSignOnToken>
  nameWithType.vb: ISagaUnitOfWork(Of ISingleSignOnToken)
  fullName.vb: Cqrs.Domain.ISagaUnitOfWork(Of Cqrs.Authentication.ISingleSignOnToken)
  name.vb: ISagaUnitOfWork(Of ISingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Domain.ISagaUnitOfWork`1
  commentId: T:Cqrs.Domain.ISagaUnitOfWork`1
  isExternal: false
  name: ISagaUnitOfWork<TAuthenticationToken>
  nameWithType: ISagaUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaUnitOfWork<TAuthenticationToken>
  nameWithType.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaUnitOfWork(Of TAuthenticationToken)
  name.vb: ISagaUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaUnitOfWork`1
    name: ISagaUnitOfWork
    nameWithType: ISagaUnitOfWork
    fullName: Cqrs.Domain.ISagaUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle
  isExternal: false
  name: Handle
  nameWithType: TestSagaEventHandlers.Handle
  fullName: Cqrs.Tests.Substitutes.TestSagaEventHandlers.Handle
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomething}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(TestAggregateDidSomething)
  nameWithType: IMessageHandler<TestAggregateDidSomething>.Handle(TestAggregateDidSomething)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomething>.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomething).Handle(TestAggregateDidSomething)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomething).Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomething)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TestAggregateDidSomething>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomething>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TestAggregateDidSomething).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomething).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
    name: TestAggregateDidSomething
    nameWithType: TestAggregateDidSomething
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestAggregateDidSomething
  commentId: T:Cqrs.Tests.Substitutes.TestAggregateDidSomething
  parent: Cqrs.Tests.Substitutes
  isExternal: false
  name: TestAggregateDidSomething
  nameWithType: TestAggregateDidSomething
  fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomething
- uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  commentId: M:Cqrs.Messages.IMessageHandler`1.Handle(`0)
  isExternal: false
  name: Handle(TMessage)
  nameWithType: IMessageHandler<TMessage>.Handle(TMessage)
  fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle(TMessage)
  nameWithType.vb: IMessageHandler(Of TMessage).Handle(TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage).Handle(TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TMessage>.Handle
    fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TMessage).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of TMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(TestAggregateDidSomethingElse)
  nameWithType: IMessageHandler<TestAggregateDidSomethingElse>.Handle(TestAggregateDidSomethingElse)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse>.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomethingElse).Handle(TestAggregateDidSomethingElse)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse).Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TestAggregateDidSomethingElse>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TestAggregateDidSomethingElse).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
    name: TestAggregateDidSomethingElse
    nameWithType: TestAggregateDidSomethingElse
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  commentId: T:Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
  parent: Cqrs.Tests.Substitutes
  isExternal: false
  name: TestAggregateDidSomethingElse
  nameWithType: TestAggregateDidSomethingElse
  fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(TestAggregateDidSomethingElse2)
  nameWithType: IMessageHandler<TestAggregateDidSomethingElse2>.Handle(TestAggregateDidSomethingElse2)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2>.Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  nameWithType.vb: IMessageHandler(Of TestAggregateDidSomethingElse2).Handle(TestAggregateDidSomethingElse2)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2).Handle(Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TestAggregateDidSomethingElse2>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TestAggregateDidSomethingElse2).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
    name: TestAggregateDidSomethingElse2
    nameWithType: TestAggregateDidSomethingElse2
    fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  commentId: T:Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
  parent: Cqrs.Tests.Substitutes
  isExternal: false
  name: TestAggregateDidSomethingElse2
  nameWithType: TestAggregateDidSomethingElse2
  fullName: Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2
