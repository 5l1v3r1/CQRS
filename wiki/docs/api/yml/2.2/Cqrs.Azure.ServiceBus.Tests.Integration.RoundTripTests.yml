### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests
  commentId: T:Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests
  id: RoundTripTests
  parent: Cqrs.Azure.ServiceBus.Tests.Integration
  children:
  - Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions
  - Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions
  langs:
  - csharp
  - vb
  name: RoundTripTests
  nameWithType: RoundTripTests
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests
  type: Class
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RoundTripTests
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
    startLine: 22
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nA series of tests publishing <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [TestFixture]

      public class RoundTripTests
    content.vb: >-
      <TestFixture>

      Public Class RoundTripTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: NUnit.Framework.TestFixtureAttribute
    ctor: NUnit.Framework.TestFixtureAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions
  commentId: M:Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions
  id: Publish_TestEvent_NoExceptions
  parent: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests
  langs:
  - csharp
  - vb
  name: Publish_TestEvent_NoExceptions()
  nameWithType: RoundTripTests.Publish_TestEvent_NoExceptions()
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions()
  type: Method
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish_TestEvent_NoExceptions
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
    startLine: 30
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nTests a test <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> can be published via\n<xref href=\"Cqrs.Azure.ServiceBus.AzureEventBusPublisher%601\" data-throw-if-not-resolved=\"false\"></xref> and two <xref href=\"Cqrs.Events.IEventHandler\" data-throw-if-not-resolved=\"false\"></xref>\nWill fire updating test flags.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void Publish_TestEvent_NoExceptions()
    content.vb: >-
      <Test>

      Public Sub Publish_TestEvent_NoExceptions
  overload: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions
  commentId: M:Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions
  id: Publish_TestCommand_NoExceptions
  parent: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests
  langs:
  - csharp
  - vb
  name: Publish_TestCommand_NoExceptions()
  nameWithType: RoundTripTests.Publish_TestCommand_NoExceptions()
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions()
  type: Method
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish_TestCommand_NoExceptions
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/RoundTripTests.cs
    startLine: 60
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nTests a test <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> can be published via\n<xref href=\"Cqrs.Azure.ServiceBus.AzureCommandBusPublisher%601\" data-throw-if-not-resolved=\"false\"></xref> and two <xref href=\"Cqrs.Events.IEventHandler\" data-throw-if-not-resolved=\"false\"></xref>\nWill fire updating test flags.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void Publish_TestCommand_NoExceptions()
    content.vb: >-
      <Test>

      Public Sub Publish_TestCommand_NoExceptions
  overload: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.Tests.Integration
  commentId: N:Cqrs.Azure.ServiceBus.Tests.Integration
  isExternal: false
  name: Cqrs.Azure.ServiceBus.Tests.Integration
  nameWithType: Cqrs.Azure.ServiceBus.Tests.Integration
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Azure.ServiceBus.AzureEventBusPublisher`1
  commentId: T:Cqrs.Azure.ServiceBus.AzureEventBusPublisher`1
  isExternal: false
  name: AzureEventBusPublisher<TAuthenticationToken>
  nameWithType: AzureEventBusPublisher<TAuthenticationToken>
  fullName: Cqrs.Azure.ServiceBus.AzureEventBusPublisher<TAuthenticationToken>
  nameWithType.vb: AzureEventBusPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Azure.ServiceBus.AzureEventBusPublisher(Of TAuthenticationToken)
  name.vb: AzureEventBusPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Azure.ServiceBus.AzureEventBusPublisher`1
    name: AzureEventBusPublisher
    nameWithType: AzureEventBusPublisher
    fullName: Cqrs.Azure.ServiceBus.AzureEventBusPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.ServiceBus.AzureEventBusPublisher`1
    name: AzureEventBusPublisher
    nameWithType: AzureEventBusPublisher
    fullName: Cqrs.Azure.ServiceBus.AzureEventBusPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventHandler
  commentId: T:Cqrs.Events.IEventHandler
  parent: Cqrs.Events
  isExternal: false
  name: IEventHandler
  nameWithType: IEventHandler
  fullName: Cqrs.Events.IEventHandler
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions*
  commentId: Overload:Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions
  isExternal: false
  name: Publish_TestEvent_NoExceptions
  nameWithType: RoundTripTests.Publish_TestEvent_NoExceptions
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestEvent_NoExceptions
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher`1
  commentId: T:Cqrs.Azure.ServiceBus.AzureCommandBusPublisher`1
  isExternal: false
  name: AzureCommandBusPublisher<TAuthenticationToken>
  nameWithType: AzureCommandBusPublisher<TAuthenticationToken>
  fullName: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher<TAuthenticationToken>
  nameWithType.vb: AzureCommandBusPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher(Of TAuthenticationToken)
  name.vb: AzureCommandBusPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher`1
    name: AzureCommandBusPublisher
    nameWithType: AzureCommandBusPublisher
    fullName: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher`1
    name: AzureCommandBusPublisher
    nameWithType: AzureCommandBusPublisher
    fullName: Cqrs.Azure.ServiceBus.AzureCommandBusPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions*
  commentId: Overload:Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions
  isExternal: false
  name: Publish_TestCommand_NoExceptions
  nameWithType: RoundTripTests.Publish_TestCommand_NoExceptions
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.Publish_TestCommand_NoExceptions
