### YamlMime:ManagedReference
items:
- uid: Cqrs.Commands.ICommandPublisher`1
  commentId: T:Cqrs.Commands.ICommandPublisher`1
  id: ICommandPublisher`1
  parent: Cqrs.Commands
  children:
  - Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  - Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Commands/ICommandPublisher.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ICommandPublisher
    path: Framework/Cqrs/Commands/ICommandPublisher.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nPublishes an <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public interface ICommandPublisher<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
    content.vb: Public Interface ICommandPublisher(Of TAuthenticationToken)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  id: Publish``1(``0)
  parent: Cqrs.Commands.ICommandPublisher`1
  langs:
  - csharp
  - vb
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ICommandPublisher.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Cqrs/Commands/ICommandPublisher.cs
    startLine: 20
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nPublishes the provided <span class=\"paramref\">command</span> on the command bus.\n"
  example: []
  syntax:
    content: 'void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Sub Publish(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand)
  overload: Cqrs.Commands.ICommandPublisher`1.Publish*
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  id: Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Commands.ICommandPublisher`1
  langs:
  - csharp
  - vb
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ICommandPublisher.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Cqrs/Commands/ICommandPublisher.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nPublishes the provided <span class=\"paramref\">commands</span> on the command bus.\n"
  example: []
  syntax:
    content: 'void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: commands
      type: System.Collections.Generic.IEnumerable{{TCommand}}
    typeParameters:
    - id: TCommand
    content.vb: Sub Publish(Of TCommand As ICommand(Of TAuthenticationToken))(commands As IEnumerable(Of TCommand))
  overload: Cqrs.Commands.ICommandPublisher`1.Publish*
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
references:
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Commands.ICommandPublisher`1.Publish*
  commentId: Overload:Cqrs.Commands.ICommandPublisher`1.Publish
  isExternal: false
  name: Publish
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: TCommand
  isExternal: false
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: System.Collections.Generic.IEnumerable{{TCommand}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCommand>
  nameWithType: IEnumerable<TCommand>
  fullName: System.Collections.Generic.IEnumerable<TCommand>
  nameWithType.vb: IEnumerable(Of TCommand)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCommand)
  name.vb: IEnumerable(Of TCommand)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
