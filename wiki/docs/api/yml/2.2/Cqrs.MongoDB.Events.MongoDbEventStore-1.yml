### YamlMime:ManagedReference
items:
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1
  commentId: T:Cqrs.MongoDB.Events.MongoDbEventStore`1
  id: MongoDbEventStore`1
  parent: Cqrs.MongoDB.Events
  children:
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},cdmdotnet.Logging.ILogger,Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory,Cqrs.Configuration.IConfigurationManager)
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Guid)
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData})
  - Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes
  langs:
  - csharp
  - vb
  name: MongoDbEventStore<TAuthenticationToken>
  nameWithType: MongoDbEventStore<TAuthenticationToken>
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoDbEventStore
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 30
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  summary: "\nA MongoDB based <xref href=\"Cqrs.Events.EventStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class MongoDbEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class MongoDbEventStore(Of TAuthenticationToken)
          Inherits EventStore(Of TAuthenticationToken)
          Implements IEventStore(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Cqrs.Events.EventStore{{TAuthenticationToken}}
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}
  inheritedMembers:
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.CqrsEventStoreStreamNamePattern
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.EventBuilder
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.EventDeserialiser
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.TelemetryHelper
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Logger
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,System.Guid)
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  - Cqrs.Events.EventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken)
  name.vb: MongoDbEventStore(Of TAuthenticationToken)
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection
  commentId: P:Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection
  id: MongoCollection
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: MongoCollection
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoCollection
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoCollection
  type: Property
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoCollection
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 32
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected IMongoCollection<MongoDbEventData> MongoCollection { get; }
    parameters: []
    return:
      type: MongoDB.Driver.IMongoCollection{Cqrs.MongoDB.Events.MongoDbEventData}
    content.vb: Protected ReadOnly Property MongoCollection As IMongoCollection(Of MongoDbEventData)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoCollection
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoCollection
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory
  commentId: P:Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory
  id: MongoDbEventStoreConnectionStringFactory
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: MongoDbEventStoreConnectionStringFactory
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoDbEventStoreConnectionStringFactory
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoDbEventStoreConnectionStringFactory
  type: Property
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoDbEventStoreConnectionStringFactory
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 34
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected IMongoDbEventStoreConnectionStringFactory MongoDbEventStoreConnectionStringFactory { get; }
    parameters: []
    return:
      type: Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory
    content.vb: Protected ReadOnly Property MongoDbEventStoreConnectionStringFactory As IMongoDbEventStoreConnectionStringFactory
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStoreConnectionStringFactory
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStoreConnectionStringFactory
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager
  commentId: P:Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager
  id: ConfigurationManager
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: ConfigurationManager
  nameWithType: MongoDbEventStore<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.ConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigurationManager
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 36
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected IConfigurationManager ConfigurationManager { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Protected ReadOnly Property ConfigurationManager As IConfigurationManager
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).ConfigurationManager
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},cdmdotnet.Logging.ILogger,Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory,Cqrs.Configuration.IConfigurationManager)
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},cdmdotnet.Logging.ILogger,Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory,Cqrs.Configuration.IConfigurationManager)
  id: '#ctor(Cqrs.Events.IEventBuilder{`0},Cqrs.Events.IEventDeserialiser{`0},cdmdotnet.Logging.ILogger,Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory,Cqrs.Configuration.IConfigurationManager)'
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: MongoDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IMongoDbEventStoreConnectionStringFactory, IConfigurationManager)
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IMongoDbEventStoreConnectionStringFactory, IConfigurationManager)
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoDbEventStore(Cqrs.Events.IEventBuilder<TAuthenticationToken>, Cqrs.Events.IEventDeserialiser<TAuthenticationToken>, cdmdotnet.Logging.ILogger, Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory, Cqrs.Configuration.IConfigurationManager)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 57
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: public MongoDbEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IMongoDbEventStoreConnectionStringFactory mongoDbEventStoreConnectionStringFactory, IConfigurationManager configurationManager)
    parameters:
    - id: eventBuilder
      type: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
    - id: eventDeserialiser
      type: Cqrs.Events.IEventDeserialiser{{TAuthenticationToken}}
    - id: logger
      type: cdmdotnet.Logging.ILogger
    - id: mongoDbEventStoreConnectionStringFactory
      type: Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory
    - id: configurationManager
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Public Sub New(eventBuilder As IEventBuilder(Of TAuthenticationToken), eventDeserialiser As IEventDeserialiser(Of TAuthenticationToken), logger As ILogger, mongoDbEventStoreConnectionStringFactory As IMongoDbEventStoreConnectionStringFactory, configurationManager As IConfigurationManager)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), ILogger, IMongoDbEventStoreConnectionStringFactory, IConfigurationManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStore(Cqrs.Events.IEventBuilder(Of TAuthenticationToken), Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken), cdmdotnet.Logging.ILogger, Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory, Cqrs.Configuration.IConfigurationManager)
  name.vb: MongoDbEventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), ILogger, IMongoDbEventStoreConnectionStringFactory, IConfigurationManager)
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection
  id: GetCollection
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: GetCollection()
  nameWithType: MongoDbEventStore<TAuthenticationToken>.GetCollection()
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.GetCollection()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetCollection
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 69
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected virtual IMongoCollection<MongoDbEventData> GetCollection()
    return:
      type: MongoDB.Driver.IMongoCollection{Cqrs.MongoDB.Events.MongoDbEventData}
    content.vb: Protected Overridable Function GetCollection As IMongoCollection(Of MongoDbEventData)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).GetCollection()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).GetCollection()
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes
  id: VerifyIndexes
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: VerifyIndexes()
  nameWithType: MongoDbEventStore<TAuthenticationToken>.VerifyIndexes()
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.VerifyIndexes()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: VerifyIndexes
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 77
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected virtual void VerifyIndexes()
    content.vb: Protected Overridable Sub VerifyIndexes
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).VerifyIndexes()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).VerifyIndexes()
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData})
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData})
  id: VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData})
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: VerifyIndex(MongoDbIndex<MongoDbEventData>)
  nameWithType: MongoDbEventStore<TAuthenticationToken>.VerifyIndex(MongoDbIndex<MongoDbEventData>)
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex<Cqrs.MongoDB.Events.MongoDbEventData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: VerifyIndex
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 85
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected virtual void VerifyIndex(MongoDbIndex<MongoDbEventData> mongoIndex)
    parameters:
    - id: mongoIndex
      type: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData}
    content.vb: Protected Overridable Sub VerifyIndex(mongoIndex As MongoDbIndex(Of MongoDbEventData))
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).VerifyIndex(MongoDbIndex(Of MongoDbEventData))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).VerifyIndex(Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex(Of Cqrs.MongoDB.Events.MongoDbEventData))
  name.vb: VerifyIndex(MongoDbIndex(Of MongoDbEventData))
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  id: Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: MongoDbEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 135
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1)
    parameters:
    - id: aggregateRootType
      type: System.Type
    - id: aggregateId
      type: System.Guid
    - id: useLastEventOnly
      type: System.Boolean
    - id: fromVersion
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Overrides Function Get(aggregateRootType As Type, aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = -1) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overridden: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.Get*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Guid)
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.Get(System.Guid)
  id: Get(System.Guid)
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: Get(Guid)
  nameWithType: MongoDbEventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.Get(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 152
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: public override IEnumerable<EventData> Get(Guid correlationId)
    parameters:
    - id: correlationId
      type: System.Guid
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
    content.vb: Public Overrides Function Get(correlationId As Guid) As IEnumerable(Of EventData)
  overridden: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Guid)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.Get*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).Get(Guid)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).Get(System.Guid)
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent(Cqrs.Events.EventData)
  id: PersistEvent(Cqrs.Events.EventData)
  parent: Cqrs.MongoDB.Events.MongoDbEventStore`1
  langs:
  - csharp
  - vb
  name: PersistEvent(EventData)
  nameWithType: MongoDbEventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PersistEvent
    path: Framework/Cqrs.MongoDB/Events/MongoDbEventStore.cs
    startLine: 162
  assemblies:
  - Cqrs.MongoDB
  namespace: Cqrs.MongoDB.Events
  syntax:
    content: protected override void PersistEvent(EventData eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.EventData
    content.vb: Protected Overrides Sub PersistEvent(eventData As EventData)
  overridden: Cqrs.Events.EventStore{{TAuthenticationToken}}.PersistEvent(Cqrs.Events.EventData)
  overload: Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent*
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).PersistEvent(EventData)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
references:
- uid: Cqrs.Events.EventStore`1
  commentId: T:Cqrs.Events.EventStore`1
  isExternal: false
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.MongoDB.Events
  commentId: N:Cqrs.MongoDB.Events
  isExternal: false
  name: Cqrs.MongoDB.Events
  nameWithType: Cqrs.MongoDB.Events
  fullName: Cqrs.MongoDB.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.EventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.EventStore`1
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.Events.EventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.CqrsEventStoreStreamNamePattern
  commentId: F:Cqrs.Events.EventStore{`0}.CqrsEventStoreStreamNamePattern
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  name: CqrsEventStoreStreamNamePattern
  nameWithType: EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  nameWithType.vb: EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.EventBuilder
  commentId: P:Cqrs.Events.EventStore{`0}.EventBuilder
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.EventBuilder
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.EventDeserialiser
  commentId: P:Cqrs.Events.EventStore{`0}.EventDeserialiser
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.EventDeserialiser
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventDeserialiser
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.TelemetryHelper
  commentId: P:Cqrs.Events.EventStore{`0}.TelemetryHelper
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.TelemetryHelper
  name: TelemetryHelper
  nameWithType: EventStore<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.TelemetryHelper
  nameWithType.vb: EventStore(Of TAuthenticationToken).TelemetryHelper
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).TelemetryHelper
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Logger
  commentId: P:Cqrs.Events.EventStore{`0}.Logger
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Logger
  name: Logger
  nameWithType: EventStore<TAuthenticationToken>.Logger
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Logger
  nameWithType.vb: EventStore(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Logger
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.Save``1(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: EventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  name: GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.GenerateStreamName(System.Type,System.Guid)
  commentId: M:Cqrs.Events.EventStore{`0}.GenerateStreamName(System.Type,System.Guid)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  name: GenerateStreamName(Type, Guid)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.EventStore{`0}.Save(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore{`0}.Get``1(System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: EventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  commentId: F:Cqrs.Events.EventStore`1.CqrsEventStoreStreamNamePattern
  isExternal: false
  name: CqrsEventStoreStreamNamePattern
  nameWithType: EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  nameWithType.vb: EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
- uid: Cqrs.Events.EventStore`1.EventBuilder
  commentId: P:Cqrs.Events.EventStore`1.EventBuilder
  isExternal: false
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.Events.EventStore`1.EventDeserialiser
  commentId: P:Cqrs.Events.EventStore`1.EventDeserialiser
  isExternal: false
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.EventDeserialiser
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.Events.EventStore`1.TelemetryHelper
  commentId: P:Cqrs.Events.EventStore`1.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: EventStore<TAuthenticationToken>.TelemetryHelper
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.TelemetryHelper
  nameWithType.vb: EventStore(Of TAuthenticationToken).TelemetryHelper
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).TelemetryHelper
- uid: Cqrs.Events.EventStore`1.Logger
  commentId: P:Cqrs.Events.EventStore`1.Logger
  isExternal: false
  name: Logger
  nameWithType: EventStore<TAuthenticationToken>.Logger
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Logger
  nameWithType.vb: EventStore(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Logger
- uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: EventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: GenerateStreamName(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,Cqrs.Events.IEvent{`0})
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  commentId: M:Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
  isExternal: true
  name: GenerateStreamName(Type, Guid)
  nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).GenerateStreamName(Type, Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName(System.Type, System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore<TAuthenticationToken>.GenerateStreamName
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.GenerateStreamName(System.Type,System.Guid)
    name: GenerateStreamName
    nameWithType: EventStore(Of TAuthenticationToken).GenerateStreamName
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).GenerateStreamName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: EventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: EventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: EventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoCollection
  isExternal: false
  name: MongoCollection
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoCollection
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoCollection
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoCollection
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoCollection
- uid: MongoDB.Driver.IMongoCollection{Cqrs.MongoDB.Events.MongoDbEventData}
  commentId: T:MongoDB.Driver.IMongoCollection{Cqrs.MongoDB.Events.MongoDbEventData}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IMongoCollection`1
  name: IMongoCollection<MongoDbEventData>
  nameWithType: IMongoCollection<MongoDbEventData>
  fullName: MongoDB.Driver.IMongoCollection<Cqrs.MongoDB.Events.MongoDbEventData>
  nameWithType.vb: IMongoCollection(Of MongoDbEventData)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of Cqrs.MongoDB.Events.MongoDbEventData)
  name.vb: IMongoCollection(Of MongoDbEventData)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.MongoDB.Events.MongoDbEventData
    name: MongoDbEventData
    nameWithType: MongoDbEventData
    fullName: Cqrs.MongoDB.Events.MongoDbEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.MongoDB.Events.MongoDbEventData
    name: MongoDbEventData
    nameWithType: MongoDbEventData
    fullName: Cqrs.MongoDB.Events.MongoDbEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IMongoCollection`1
  commentId: T:MongoDB.Driver.IMongoCollection`1
  isExternal: true
  name: IMongoCollection<TDocument>
  nameWithType: IMongoCollection<TDocument>
  fullName: MongoDB.Driver.IMongoCollection<TDocument>
  nameWithType.vb: IMongoCollection(Of TDocument)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of TDocument)
  name.vb: IMongoCollection(Of TDocument)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: false
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.MongoDbEventStoreConnectionStringFactory
  isExternal: false
  name: MongoDbEventStoreConnectionStringFactory
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoDbEventStoreConnectionStringFactory
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoDbEventStoreConnectionStringFactory
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStoreConnectionStringFactory
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStoreConnectionStringFactory
- uid: Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory
  commentId: T:Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory
  parent: Cqrs.MongoDB.Events
  isExternal: false
  name: IMongoDbEventStoreConnectionStringFactory
  nameWithType: IMongoDbEventStoreConnectionStringFactory
  fullName: Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.ConfigurationManager
  isExternal: false
  name: ConfigurationManager
  nameWithType: MongoDbEventStore<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.ConfigurationManager
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).ConfigurationManager
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.#ctor
  isExternal: false
  name: MongoDbEventStore
  nameWithType: MongoDbEventStore<TAuthenticationToken>.MongoDbEventStore
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.MongoDbEventStore
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStore
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).MongoDbEventStore
- uid: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventBuilder{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventDeserialiser{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventDeserialiser{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventDeserialiser`1
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.Events.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Events.IEventBuilder`1
  commentId: T:Cqrs.Events.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventDeserialiser`1
  commentId: T:Cqrs.Events.IEventDeserialiser`1
  isExternal: false
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.Events.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.Events.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.GetCollection
  isExternal: false
  name: GetCollection
  nameWithType: MongoDbEventStore<TAuthenticationToken>.GetCollection
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.GetCollection
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).GetCollection
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).GetCollection
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndexes
  isExternal: false
  name: VerifyIndexes
  nameWithType: MongoDbEventStore<TAuthenticationToken>.VerifyIndexes
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.VerifyIndexes
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).VerifyIndexes
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).VerifyIndexes
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.VerifyIndex
  isExternal: false
  name: VerifyIndex
  nameWithType: MongoDbEventStore<TAuthenticationToken>.VerifyIndex
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.VerifyIndex
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).VerifyIndex
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).VerifyIndex
- uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData}
  commentId: T:Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex{Cqrs.MongoDB.Events.MongoDbEventData}
  parent: Cqrs.MongoDB.DataStores.Indexes
  definition: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
  name: MongoDbIndex<MongoDbEventData>
  nameWithType: MongoDbIndex<MongoDbEventData>
  fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex<Cqrs.MongoDB.Events.MongoDbEventData>
  nameWithType.vb: MongoDbIndex(Of MongoDbEventData)
  fullName.vb: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex(Of Cqrs.MongoDB.Events.MongoDbEventData)
  name.vb: MongoDbIndex(Of MongoDbEventData)
  spec.csharp:
  - uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
    name: MongoDbIndex
    nameWithType: MongoDbIndex
    fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.MongoDB.Events.MongoDbEventData
    name: MongoDbEventData
    nameWithType: MongoDbEventData
    fullName: Cqrs.MongoDB.Events.MongoDbEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
    name: MongoDbIndex
    nameWithType: MongoDbIndex
    fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.MongoDB.Events.MongoDbEventData
    name: MongoDbEventData
    nameWithType: MongoDbEventData
    fullName: Cqrs.MongoDB.Events.MongoDbEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
  commentId: T:Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
  isExternal: false
  name: MongoDbIndex<TEntity>
  nameWithType: MongoDbIndex<TEntity>
  fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex<TEntity>
  nameWithType.vb: MongoDbIndex(Of TEntity)
  fullName.vb: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex(Of TEntity)
  name.vb: MongoDbIndex(Of TEntity)
  spec.csharp:
  - uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
    name: MongoDbIndex
    nameWithType: MongoDbIndex
    fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex`1
    name: MongoDbIndex
    nameWithType: MongoDbIndex
    fullName: Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.MongoDB.DataStores.Indexes
  commentId: N:Cqrs.MongoDB.DataStores.Indexes
  isExternal: false
  name: Cqrs.MongoDB.DataStores.Indexes
  nameWithType: Cqrs.MongoDB.DataStores.Indexes
  fullName: Cqrs.MongoDB.DataStores.Indexes
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore{`0}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.Get*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.Get
  isExternal: false
  name: Get
  nameWithType: MongoDbEventStore<TAuthenticationToken>.Get
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.Get
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).Get
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.Get(System.Guid)
  commentId: M:Cqrs.Events.EventStore{`0}.Get(System.Guid)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.Get(System.Guid)
  name: Get(Guid)
  nameWithType: EventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore`1.Get(System.Guid)
  commentId: M:Cqrs.Events.EventStore`1.Get(System.Guid)
  isExternal: true
  name: Get(Guid)
  nameWithType: EventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.Get(System.Guid)
    name: Get
    nameWithType: EventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventStore{{TAuthenticationToken}}.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.Events.EventStore{`0}.PersistEvent(Cqrs.Events.EventData)
  parent: Cqrs.Events.EventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  name: PersistEvent(EventData)
  nameWithType: EventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  nameWithType.vb: EventStore(Of TAuthenticationToken).PersistEvent(EventData)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore<TAuthenticationToken>.PersistEvent
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore(Of TAuthenticationToken).PersistEvent
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent*
  commentId: Overload:Cqrs.MongoDB.Events.MongoDbEventStore`1.PersistEvent
  isExternal: false
  name: PersistEvent
  nameWithType: MongoDbEventStore<TAuthenticationToken>.PersistEvent
  fullName: Cqrs.MongoDB.Events.MongoDbEventStore<TAuthenticationToken>.PersistEvent
  nameWithType.vb: MongoDbEventStore(Of TAuthenticationToken).PersistEvent
  fullName.vb: Cqrs.MongoDB.Events.MongoDbEventStore(Of TAuthenticationToken).PersistEvent
- uid: Cqrs.Events.EventData
  commentId: T:Cqrs.Events.EventData
  parent: Cqrs.Events
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Cqrs.Events.EventData
- uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  commentId: M:Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
  isExternal: false
  name: PersistEvent(EventData)
  nameWithType: EventStore<TAuthenticationToken>.PersistEvent(EventData)
  fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)
  nameWithType.vb: EventStore(Of TAuthenticationToken).PersistEvent(EventData)
  fullName.vb: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent(Cqrs.Events.EventData)
  spec.csharp:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore<TAuthenticationToken>.PersistEvent
    fullName: Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.EventStore`1.PersistEvent(Cqrs.Events.EventData)
    name: PersistEvent
    nameWithType: EventStore(Of TAuthenticationToken).PersistEvent
    fullName: Cqrs.Events.EventStore(Of TAuthenticationToken).PersistEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
