### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.IQueryBuilder`2
  commentId: T:Cqrs.Repositories.Queries.IQueryBuilder`2
  id: IQueryBuilder`2
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  - Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  langs:
  - csharp
  - vb
  name: IQueryBuilder<TQueryStrategy, TData>
  nameWithType: IQueryBuilder<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<TQueryStrategy, TData>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IQueryBuilder
    path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> from a <span class=\"typeparamref\">TQueryStrategy</span>.\n"
  example: []
  syntax:
    content: >-
      public interface IQueryBuilder<TQueryStrategy, TData>

          where TQueryStrategy : IQueryStrategy
    typeParameters:
    - id: TQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref>.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data to query.
    content.vb: Public Interface IQueryBuilder(Of TQueryStrategy As IQueryStrategy, TData)
  nameWithType.vb: IQueryBuilder(Of TQueryStrategy, TData)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of TQueryStrategy, TData)
  name.vb: IQueryBuilder(Of TQueryStrategy, TData)
- uid: Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  id: CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1})
  parent: Cqrs.Repositories.Queries.IQueryBuilder`2
  langs:
  - csharp
  - vb
  name: CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>)
  nameWithType: IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateQueryable
    path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreate an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> of <span class=\"typeparamref\">TData</span>\nthat expects a single <span class=\"typeparamref\">TData</span> item.\n"
  example: []
  syntax:
    content: IQueryable<TData> CreateQueryable(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery)
    parameters:
    - id: singleResultQuery
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
      description: The query.
    return:
      type: System.Linq.IQueryable{{TData}}
    content.vb: Function CreateQueryable(singleResultQuery As ISingleResultQuery(Of TQueryStrategy, TData)) As IQueryable(Of TData)
  overload: Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable*
  nameWithType.vb: IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable(ISingleResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData))
  name.vb: CreateQueryable(ISingleResultQuery(Of TQueryStrategy, TData))
- uid: Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  id: CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  parent: Cqrs.Repositories.Queries.IQueryBuilder`2
  langs:
  - csharp
  - vb
  name: CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateQueryable
    path: Framework/Cqrs/Repositories/Queries/IQueryBuilder.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreate an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> of <span class=\"typeparamref\">TData</span>\nthat expects a collection of <span class=\"typeparamref\">TData</span> items.\n"
  example: []
  syntax:
    content: IQueryable<TData> CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData> collectionResultQuery)
    parameters:
    - id: collectionResultQuery
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
      description: The query.
    return:
      type: System.Linq.IQueryable{{TData}}
    content.vb: Function CreateQueryable(collectionResultQuery As ICollectionResultQuery(Of TQueryStrategy, TData)) As IQueryable(Of TData)
  overload: Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable*
  nameWithType.vb: IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: CreateQueryable(ICollectionResultQuery(Of TQueryStrategy, TData))
references:
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable*
  commentId: Overload:Cqrs.Repositories.Queries.IQueryBuilder`2.CreateQueryable
  isExternal: false
  name: CreateQueryable
  nameWithType: IQueryBuilder<TQueryStrategy, TData>.CreateQueryable
  fullName: Cqrs.Repositories.Queries.IQueryBuilder<TQueryStrategy, TData>.CreateQueryable
  nameWithType.vb: IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable
  fullName.vb: Cqrs.Repositories.Queries.IQueryBuilder(Of TQueryStrategy, TData).CreateQueryable
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TData}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: System.Linq.IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: System.Linq.IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery`2
  isExternal: false
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
