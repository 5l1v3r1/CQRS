### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  commentId: T:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  id: ConcurrentAkkaCommandPublisher`2
  parent: Cqrs.Akka.Commands
  children:
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor(Akka.Actor.IActorRef,Cqrs.Commands.ICommandReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(``0)
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(System.Collections.Generic.IEnumerable{``0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(``0)
  - Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConcurrentAkkaCommandPublisher
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 22
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nA <xref href=\"Cqrs.Akka.Commands.IAkkaCommandPublisher%601\" data-throw-if-not-resolved=\"false\"></xref> that ensure concurrency regardless of what it passes the command onto as it is a <xref href=\"Akka.Actor.ReceiveActor\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> : ReceiveActor, IInternalActor, IInitializableActor, IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>, IConcurrentAkkaCommandPublisher<TAuthenticationToken>, IAkkaCommandPublisher<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    - id: TTarget
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object that is targeted that needs concurrency.
    content.vb: >-
      Public Class ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
          Inherits ReceiveActor
          Implements IInternalActor, IInitializableActor, IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget), IConcurrentAkkaCommandPublisher(Of TAuthenticationToken), IAkkaCommandPublisher(Of TAuthenticationToken), IPublishAndWaitCommandPublisher(Of TAuthenticationToken), ICommandPublisher(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Akka.Actor.ActorBase
  - Akka.Actor.UntypedActor
  - Akka.Actor.ReceiveActor
  implements:
  - Akka.Actor.IInternalActor
  - Akka.Actor.Internal.IInitializableActor
  - Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{{TAuthenticationToken},{TTarget}}
  - Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{{TAuthenticationToken}}
  - Cqrs.Akka.Commands.IAkkaCommandPublisher{{TAuthenticationToken}}
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  inheritedMembers:
  - Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  - Akka.Actor.ReceiveActor.OnReceive(System.Object)
  - Akka.Actor.ReceiveActor.Become(System.Action)
  - Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  - Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  - Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  - Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  - Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  - Akka.Actor.UntypedActor.Receive(System.Object)
  - Akka.Actor.UntypedActor.RunTask(System.Action)
  - Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.Context
  - Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  - Akka.Actor.ActorBase.Unhandled(System.Object)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.UnbecomeStacked
  - Akka.Actor.ActorBase.Unbecome
  - Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  - Akka.Actor.ActorBase.SupervisorStrategy
  - Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.AroundPreStart
  - Akka.Actor.ActorBase.PreStart
  - Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PostRestart(System.Exception)
  - Akka.Actor.ActorBase.AroundPostStop
  - Akka.Actor.ActorBase.PostStop
  - Akka.Actor.ActorBase.Sender
  - Akka.Actor.ActorBase.Self
  - Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  - Akka.Actor.ActorBase.EmptyReceive
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  name.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference
  commentId: P:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference
  id: ActorReference
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: ActorReference
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ActorReference
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ActorReference
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ActorReference
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 26
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected IActorRef ActorReference { get; }
    parameters: []
    return:
      type: Akka.Actor.IActorRef
    content.vb: Protected ReadOnly Property ActorReference As IActorRef
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference*
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ActorReference
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ActorReference
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver
  commentId: P:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver
  id: CommandReceiver
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: CommandReceiver
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.CommandReceiver
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.CommandReceiver
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CommandReceiver
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 28
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected ICommandReceiver<TAuthenticationToken> CommandReceiver { get; }
    parameters: []
    return:
      type: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property CommandReceiver As ICommandReceiver(Of TAuthenticationToken)
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver*
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).CommandReceiver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).CommandReceiver
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor(Akka.Actor.IActorRef,Cqrs.Commands.ICommandReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor(Akka.Actor.IActorRef,Cqrs.Commands.ICommandReceiver{`0})
  id: '#ctor(Akka.Actor.IActorRef,Cqrs.Commands.ICommandReceiver{`0})'
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: ConcurrentAkkaCommandPublisher(IActorRef, ICommandReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ConcurrentAkkaCommandPublisher(IActorRef, ICommandReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ConcurrentAkkaCommandPublisher(Akka.Actor.IActorRef, Cqrs.Commands.ICommandReceiver<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 30
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: public ConcurrentAkkaCommandPublisher(IActorRef actorReference, ICommandReceiver<TAuthenticationToken> commandReceiver)
    parameters:
    - id: actorReference
      type: Akka.Actor.IActorRef
    - id: commandReceiver
      type: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
    content.vb: Public Sub New(actorReference As IActorRef, commandReceiver As ICommandReceiver(Of TAuthenticationToken))
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor*
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ConcurrentAkkaCommandPublisher(IActorRef, ICommandReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ConcurrentAkkaCommandPublisher(Akka.Actor.IActorRef, Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken))
  name.vb: ConcurrentAkkaCommandPublisher(IActorRef, ICommandReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(``0)
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(``0)
  id: Publish``1(``0)
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: Publish<TCommand>(TCommand)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 38
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: 'public void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Public Sub Publish(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand)
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish*
  implements:
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish(Of TCommand)(TCommand)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(``0)
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(``0)
  id: Send``1(``0)
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: Send<TCommand>(TCommand)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send<TCommand>(TCommand)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send<TCommand>(TCommand)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Send
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 46
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: 'public void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
    typeParameters:
    - id: TCommand
    content.vb: Public Sub Send(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand)
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send*
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send(Of TCommand)(TCommand)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send(Of TCommand)(TCommand)
  name.vb: Send(Of TCommand)(TCommand)
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish``1(System.Collections.Generic.IEnumerable{``0})
  id: Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publish
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 52
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: 'public void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: commands
      type: System.Collections.Generic.IEnumerable{{TCommand}}
    typeParameters:
    - id: TCommand
    content.vb: Public Sub Publish(Of TCommand As ICommand(Of TAuthenticationToken))(commands As IEnumerable(Of TCommand))
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish*
  implements:
  - Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish(Of TCommand)(IEnumerable(Of TCommand))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send``1(System.Collections.Generic.IEnumerable{``0})
  id: Send``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: Send<TCommand>(IEnumerable<TCommand>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Send
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 61
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: 'public void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: commands
      type: System.Collections.Generic.IEnumerable{{TCommand}}
    typeParameters:
    - id: TCommand
    content.vb: Public Sub Send(Of TCommand As ICommand(Of TAuthenticationToken))(commands As IEnumerable(Of TCommand))
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send*
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send(Of TCommand)(IEnumerable(Of TCommand))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Send(Of TCommand)(IEnumerable(Of TCommand))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 72
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Overridable Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 84
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 96
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 111
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits until the specified condition is satisfied an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code>\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 124
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), millisecondsTimeout As Integer, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  id: PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2
  langs:
  - csharp
  - vb
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishAndWait
    path: Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs
    startLine: 137
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  summary: "\nPublishes the provided <code data-dev-comment-type=\"paramref\">command</code> and waits for an event of <code data-dev-comment-type=\"typeparamref\">TEvent</code> or exits if the specified timeout is expired.\n"
  example: []
  syntax:
    content: 'public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <code data-dev-comment-type="typeparamref">TCommand</code> to publish.
    - id: condition
      type: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
      description: A delegate to be executed over and over until it returns the <code data-dev-comment-type="typeparamref">TEvent</code> that is desired, return null to keep trying.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: eventReceiver
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
      description: If provided, is the <xref href="Cqrs.Events.IEventReceiver%601" data-throw-if-not-resolved="false"></xref> that the event is expected to be returned on.
    typeParameters:
    - id: TCommand
    - id: TEvent
    return:
      type: '{TEvent}'
    content.vb: Public Function PublishAndWait(Of TCommand As ICommand(Of TAuthenticationToken), TEvent)(command As TCommand, condition As Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), timeout As TimeSpan, eventReceiver As IEventReceiver(Of TAuthenticationToken) = Nothing) As TEvent
  overload: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  implements:
  - Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
references:
- uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  commentId: T:Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  isExternal: false
  name: IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor
  commentId: T:Akka.Actor.ReceiveActor
  parent: Akka.Actor
  isExternal: true
  name: ReceiveActor
  nameWithType: ReceiveActor
  fullName: Akka.Actor.ReceiveActor
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Akka.Commands
  commentId: N:Cqrs.Akka.Commands
  isExternal: false
  name: Cqrs.Akka.Commands
  nameWithType: Cqrs.Akka.Commands
  fullName: Cqrs.Akka.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Akka.Actor.ActorBase
  commentId: T:Akka.Actor.ActorBase
  parent: Akka.Actor
  isExternal: true
  name: ActorBase
  nameWithType: ActorBase
  fullName: Akka.Actor.ActorBase
- uid: Akka.Actor.UntypedActor
  commentId: T:Akka.Actor.UntypedActor
  parent: Akka.Actor
  isExternal: true
  name: UntypedActor
  nameWithType: UntypedActor
  fullName: Akka.Actor.UntypedActor
- uid: Akka.Actor.IInternalActor
  commentId: T:Akka.Actor.IInternalActor
  parent: Akka.Actor
  isExternal: true
  name: IInternalActor
  nameWithType: IInternalActor
  fullName: Akka.Actor.IInternalActor
- uid: Akka.Actor.Internal.IInitializableActor
  commentId: T:Akka.Actor.Internal.IInitializableActor
  parent: Akka.Actor.Internal
  isExternal: true
  name: IInitializableActor
  nameWithType: IInitializableActor
  fullName: Akka.Actor.Internal.IInitializableActor
- uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{{TAuthenticationToken},{TTarget}}
  commentId: T:Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{`0,`1}
  parent: Cqrs.Akka.Commands
  definition: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
  name: IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  nameWithType: IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  nameWithType.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  fullName.vb: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  name.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher{`0}
  parent: Cqrs.Akka.Commands
  definition: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
  name: IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.IAkkaCommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Akka.Commands.IAkkaCommandPublisher{`0}
  parent: Cqrs.Akka.Commands
  definition: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  name: IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  name: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  name.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandPublisher{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandPublisher`1
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  commentId: M:Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: IInitializableActor.Init()
  nameWithType: ReceiveActor.IInitializableActor.Init()
  fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  nameWithType.vb: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  name.vb: Akka.Actor.Internal.IInitializableActor.Init()
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: IInitializableActor.Init
    nameWithType: ReceiveActor.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: Akka.Actor.Internal.IInitializableActor.Init
    nameWithType: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  commentId: M:Akka.Actor.ReceiveActor.OnReceive(System.Object)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: OnReceive(Object)
  nameWithType: ReceiveActor.OnReceive(Object)
  fullName: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action)
  nameWithType: ReceiveActor.Become(Action)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: BecomeStacked(Action)
  nameWithType: ReceiveActor.BecomeStacked(Action)
  fullName: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action, Boolean)
  nameWithType: ReceiveActor.Become(Action, Boolean)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Action<Object>, Predicate<Object>)
  nameWithType: ReceiveActor.Receive(Type, Action<Object>, Predicate<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Action(Of Object), Predicate(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action(Of System.Object), System.Predicate(Of System.Object))
  name.vb: Receive(Type, Action(Of Object), Predicate(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Predicate<Object>, Action<Object>)
  nameWithType: ReceiveActor.Receive(Type, Predicate<Object>, Action<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Predicate(Of Object), Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate(Of System.Object), System.Action(Of System.Object))
  name.vb: Receive(Type, Predicate(Of Object), Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Func<Object, Boolean>)
  nameWithType: ReceiveActor.Receive(Type, Func<Object, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Type, Func(Of Object, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func(Of System.Object, System.Boolean))
  name.vb: Receive(Type, Func(Of Object, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: ReceiveAny(Action<Object>)
  nameWithType: ReceiveActor.ReceiveAny(Action<Object>)
  fullName: Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.ReceiveAny(Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.ReceiveAny(System.Action(Of System.Object))
  name.vb: ReceiveAny(Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Receive(System.Object)
  commentId: M:Akka.Actor.UntypedActor.Receive(System.Object)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Receive(Object)
  nameWithType: UntypedActor.Receive(Object)
  fullName: Akka.Actor.UntypedActor.Receive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Action)
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Action)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Action)
  nameWithType: UntypedActor.RunTask(Action)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Action)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Func<Task>)
  nameWithType: UntypedActor.RunTask(Func<Task>)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: UntypedActor.RunTask(Func(Of Task))
  fullName.vb: Akka.Actor.UntypedActor.RunTask(System.Func(Of System.Threading.Tasks.Task))
  name.vb: RunTask(Func(Of Task))
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive, Boolean)
  nameWithType: UntypedActor.Become(UntypedReceive, Boolean)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive)
  nameWithType: UntypedActor.Become(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: BecomeStacked(UntypedReceive)
  nameWithType: UntypedActor.BecomeStacked(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Context
  commentId: P:Akka.Actor.UntypedActor.Context
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Context
  nameWithType: UntypedActor.Context
  fullName: Akka.Actor.UntypedActor.Context
- uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundReceive(Receive, Object)
  nameWithType: ActorBase.AroundReceive(Receive, Object)
  fullName: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unhandled(System.Object)
  commentId: M:Akka.Actor.ActorBase.Unhandled(System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unhandled(Object)
  nameWithType: ActorBase.Unhandled(Object)
  fullName: Akka.Actor.ActorBase.Unhandled(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive, Boolean)
  nameWithType: ActorBase.Become(Receive, Boolean)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive)
  nameWithType: ActorBase.Become(Receive)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: BecomeStacked(Receive)
  nameWithType: ActorBase.BecomeStacked(Receive)
  fullName: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.UnbecomeStacked
  commentId: M:Akka.Actor.ActorBase.UnbecomeStacked
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: UnbecomeStacked()
  nameWithType: ActorBase.UnbecomeStacked()
  fullName: Akka.Actor.ActorBase.UnbecomeStacked()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unbecome
  commentId: M:Akka.Actor.ActorBase.Unbecome
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unbecome()
  nameWithType: ActorBase.Unbecome()
  fullName: Akka.Actor.ActorBase.Unbecome()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  commentId: M:Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SetReceiveTimeout(Nullable<TimeSpan>)
  nameWithType: ActorBase.SetReceiveTimeout(Nullable<TimeSpan>)
  fullName: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>)
  nameWithType.vb: ActorBase.SetReceiveTimeout(Nullable(Of TimeSpan))
  fullName.vb: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable(Of System.TimeSpan))
  name.vb: SetReceiveTimeout(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SupervisorStrategy
  commentId: M:Akka.Actor.ActorBase.SupervisorStrategy
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SupervisorStrategy()
  nameWithType: ActorBase.SupervisorStrategy()
  fullName: Akka.Actor.ActorBase.SupervisorStrategy()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreRestart(Exception, Object)
  nameWithType: ActorBase.AroundPreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreStart
  commentId: M:Akka.Actor.ActorBase.AroundPreStart
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreStart()
  nameWithType: ActorBase.AroundPreStart()
  fullName: Akka.Actor.ActorBase.AroundPreStart()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PreStart
  commentId: M:Akka.Actor.ActorBase.PreStart
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PreStart()
  nameWithType: ActorBase.PreStart()
  fullName: Akka.Actor.ActorBase.PreStart()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PreStart
    name: PreStart
    nameWithType: ActorBase.PreStart
    fullName: Akka.Actor.ActorBase.PreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PreStart
    name: PreStart
    nameWithType: ActorBase.PreStart
    fullName: Akka.Actor.ActorBase.PreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostRestart(Exception, Object)
  nameWithType: ActorBase.AroundPostRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PreRestart(Exception, Object)
  nameWithType: ActorBase.PreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
  commentId: M:Akka.Actor.ActorBase.PostRestart(System.Exception)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostRestart(Exception)
  nameWithType: ActorBase.PostRestart(Exception)
  fullName: Akka.Actor.ActorBase.PostRestart(System.Exception)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostStop
  commentId: M:Akka.Actor.ActorBase.AroundPostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostStop()
  nameWithType: ActorBase.AroundPostStop()
  fullName: Akka.Actor.ActorBase.AroundPostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostStop
  commentId: M:Akka.Actor.ActorBase.PostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostStop()
  nameWithType: ActorBase.PostStop()
  fullName: Akka.Actor.ActorBase.PostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Sender
  commentId: P:Akka.Actor.ActorBase.Sender
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Sender
  nameWithType: ActorBase.Sender
  fullName: Akka.Actor.ActorBase.Sender
- uid: Akka.Actor.ActorBase.Self
  commentId: P:Akka.Actor.ActorBase.Self
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Self
  nameWithType: ActorBase.Self
  fullName: Akka.Actor.ActorBase.Self
- uid: Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  commentId: P:Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: IInternalActor.ActorContext
  nameWithType: ActorBase.IInternalActor.ActorContext
  fullName: Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext
  nameWithType.vb: ActorBase.Akka.Actor.IInternalActor.ActorContext
  name.vb: Akka.Actor.IInternalActor.ActorContext
- uid: Akka.Actor.ActorBase.EmptyReceive
  commentId: P:Akka.Actor.ActorBase.EmptyReceive
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: EmptyReceive
  nameWithType: ActorBase.EmptyReceive
  fullName: Akka.Actor.ActorBase.EmptyReceive
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Akka.Actor.Internal
  commentId: N:Akka.Actor.Internal
  isExternal: false
  name: Akka.Actor.Internal
  nameWithType: Akka.Actor.Internal
  fullName: Akka.Actor.Internal
- uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
  commentId: T:Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
  isExternal: false
  name: IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  nameWithType: IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>
  nameWithType.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  fullName.vb: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  name.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`2
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
  commentId: T:Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
  isExternal: false
  name: IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IConcurrentAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher`1
    name: IConcurrentAkkaCommandPublisher
    nameWithType: IConcurrentAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  commentId: T:Cqrs.Commands.IPublishAndWaitCommandPublisher`1
  isExternal: false
  name: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  name.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1
    name: IPublishAndWaitCommandPublisher
    nameWithType: IPublishAndWaitCommandPublisher
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Commands.ICommandPublisher`1
  commentId: T:Cqrs.Commands.ICommandPublisher`1
  isExternal: false
  name: ICommandPublisher<TAuthenticationToken>
  nameWithType: ICommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken)
  name.vb: ICommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1
    name: ICommandPublisher
    nameWithType: ICommandPublisher
    fullName: Cqrs.Commands.ICommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  isExternal: true
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  isExternal: true
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  isExternal: true
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  isExternal: true
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ActorReference
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ActorReference
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ActorReference
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ActorReference
- uid: Akka.Actor.IActorRef
  commentId: T:Akka.Actor.IActorRef
  parent: Akka.Actor
  isExternal: true
  name: IActorRef
  nameWithType: IActorRef
  fullName: Akka.Actor.IActorRef
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.CommandReceiver
  isExternal: false
  name: CommandReceiver
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.CommandReceiver
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.CommandReceiver
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).CommandReceiver
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).CommandReceiver
- uid: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandReceiver{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandReceiver`1
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandReceiver`1
  commentId: T:Cqrs.Commands.ICommandReceiver`1
  isExternal: false
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.#ctor
  isExternal: false
  name: ConcurrentAkkaCommandPublisher
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ConcurrentAkkaCommandPublisher
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.ConcurrentAkkaCommandPublisher
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ConcurrentAkkaCommandPublisher
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).ConcurrentAkkaCommandPublisher
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Publish
  isExternal: false
  name: Publish
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Publish
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Publish
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1({TCommand})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(``0)
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
  isExternal: false
  name: Publish<TCommand>(TCommand)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(TCommand)
  name.vb: Publish(Of TCommand)(TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(``0)
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: TCommand
  isExternal: false
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.Send
  isExternal: false
  name: Send
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.Send
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).Send
- uid: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}.Publish``1(System.Collections.Generic.IEnumerable{{TCommand}})
  commentId: M:Cqrs.Commands.ICommandPublisher{`0}.Publish``1(System.Collections.Generic.IEnumerable{``0})
  parent: Cqrs.Commands.ICommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TCommand}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCommand>
  nameWithType: IEnumerable<TCommand>
  fullName: System.Collections.Generic.IEnumerable<TCommand>
  nameWithType.vb: IEnumerable(Of TCommand)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCommand)
  name.vb: IEnumerable(Of TCommand)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Publish<TCommand>(IEnumerable<TCommand>)
  nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)
  fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(System.Collections.Generic.IEnumerable<TCommand>)
  nameWithType.vb: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(IEnumerable(Of TCommand))
  fullName.vb: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)(System.Collections.Generic.IEnumerable(Of TCommand))
  name.vb: Publish(Of TCommand)(IEnumerable(Of TCommand))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish<TCommand>
    nameWithType: ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
    fullName: Cqrs.Commands.ICommandPublisher<TAuthenticationToken>.Publish<TCommand>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.ICommandPublisher`1.Publish``1(System.Collections.Generic.IEnumerable{``0})
    name: Publish(Of TCommand)
    nameWithType: ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
    fullName: Cqrs.Commands.ICommandPublisher(Of TAuthenticationToken).Publish(Of TCommand)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Events.IEventReceiver`1
  commentId: T:Cqrs.Events.IEventReceiver`1
  isExternal: false
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait*
  commentId: Overload:Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher`2.PublishAndWait
  isExternal: false
  name: PublishAndWait
  nameWithType: ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait
  fullName: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>.PublishAndWait
  nameWithType.vb: ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait
  fullName.vb: Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher(Of TAuthenticationToken, TTarget).PublishAndWait
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventReceiver{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventReceiver`1
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
  isExternal: false
  name: PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: System.Threading.Timeout.Infinite
  commentId: F:System.Threading.Timeout.Infinite
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  nameWithType: Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>
  fullName: System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>
  nameWithType.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent)
  name.vb: Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.Int32,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.Int32, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.Int32, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), Int32, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.Int32,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}.PublishAndWait``2({TCommand},System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}},{TEvent}},System.TimeSpan,Cqrs.Events.IEventReceiver{{TAuthenticationToken}})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher{`0}.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  parent: Cqrs.Commands.IPublishAndWaitCommandPublisher{{TAuthenticationToken}}
  definition: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  commentId: M:Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
  isExternal: true
  name: PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>)
  fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, System.Func<System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>, TEvent>, System.TimeSpan, Cqrs.Events.IEventReceiver<TAuthenticationToken>)
  nameWithType.vb: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  fullName.vb: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)(TCommand, System.Func(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), TEvent), System.TimeSpan, Cqrs.Events.IEventReceiver(Of TAuthenticationToken))
  name.vb: PublishAndWait(Of TCommand, TEvent)(TCommand, Func(Of IEnumerable(Of IEvent(Of TAuthenticationToken)), TEvent), TimeSpan, IEventReceiver(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait<TCommand, TEvent>
    nameWithType: IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Commands.IPublishAndWaitCommandPublisher`1.PublishAndWait``2(``0,System.Func{System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}},``1},System.TimeSpan,Cqrs.Events.IEventReceiver{`0})
    name: PublishAndWait(Of TCommand, TEvent)
    nameWithType: IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
    fullName: Cqrs.Commands.IPublishAndWaitCommandPublisher(Of TAuthenticationToken).PublishAndWait(Of TCommand, TEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
