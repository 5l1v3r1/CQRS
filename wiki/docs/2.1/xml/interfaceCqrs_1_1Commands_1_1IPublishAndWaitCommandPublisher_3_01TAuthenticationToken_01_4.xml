<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4" kind="interface" prot="public">
    <compoundname>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</compoundname>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4" prot="public" virt="non-virtual">Cqrs.Commands.ICommandPublisher&lt; TAuthenticationToken &gt;</basecompoundref>
    <derivedcompoundref refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4" prot="public" virt="non-virtual">Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a19ffb318c830e9f05d4adae985232f30_1a19ffb318c830e9f05d4adae985232f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_a38c0684e313f42bfb36b40703db94ccb_1a38c0684e313f42bfb36b40703db94ccb">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_ad3761879cf9e09c9e89cabf8067b6de4_1ad3761879cf9e09c9e89cabf8067b6de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_a977e49340f771248ddf485eeee650e04_1a977e49340f771248ddf485eeee650e04">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a02ef39482cb50e6e15e06144adca1ed5_1a02ef39482cb50e6e15e06144adca1ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_a4178bdc4e17f28b0b89e11611693ab14_1a4178bdc4e17f28b0b89e11611693ab14">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a83e4480bf8cd6015254d700056cf1647_1a83e4480bf8cd6015254d700056cf1647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_aad4ec1abb47389db59034e5d7d1aa322_1aad4ec1abb47389db59034e5d7d1aa322">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a4b6636f2dba029321c62a78c473590be_1a4b6636f2dba029321c62a78c473590be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_addd5bfd0feddfad326e63a548e7eb679_1addd5bfd0feddfad326e63a548e7eb679">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a0460fc2091d52ba3463973fea5028bc6_1a0460fc2091d52ba3463973fea5028bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4_ae818b3610165e0036bca718f97349641_1ae818b3610165e0036bca718f97349641">PublishAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Publishes an ICommand{TAuthenticationToken} </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1279">
        <label>Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="1280" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1281">
        <label>Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Bus_1_1InProcessBus_3_01TAuthenticationToken_01_4"/>
        <childnode refid="1279" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1280">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1282">
        <label>Cqrs.Commands.IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="1283" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1283">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" line="20" column="1" bodyfile="/mnt/c/code/git/cqrs/Framework/Cqrs/Commands/IPublishAndWaitCommandPublisher.cs" bodystart="19" bodyend="75"/>
    <listofallmembers>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_aeeb487ad5686d9c44d214b1daaf7833a_1aeeb487ad5686d9c44d214b1daaf7833a" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_af0f033c0b949e5650032e4f00b11b595_1af0f033c0b949e5650032e4f00b11b595" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a19ffb318c830e9f05d4adae985232f30_1a19ffb318c830e9f05d4adae985232f30" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_ad3761879cf9e09c9e89cabf8067b6de4_1ad3761879cf9e09c9e89cabf8067b6de4" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a02ef39482cb50e6e15e06144adca1ed5_1a02ef39482cb50e6e15e06144adca1ed5" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a83e4480bf8cd6015254d700056cf1647_1a83e4480bf8cd6015254d700056cf1647" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a4b6636f2dba029321c62a78c473590be_1a4b6636f2dba029321c62a78c473590be" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a0460fc2091d52ba3463973fea5028bc6_1a0460fc2091d52ba3463973fea5028bc6" prot="public" virt="non-virtual"><scope>Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
