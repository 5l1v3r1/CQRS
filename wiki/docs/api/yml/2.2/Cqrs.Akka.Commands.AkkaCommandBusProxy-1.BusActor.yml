### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  commentId: T:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  id: AkkaCommandBusProxy`1.BusActor
  parent: Cqrs.Akka.Commands
  children:
  - Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor(Cqrs.Akka.Commands.IAkkaCommandPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  - Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper
  - Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver
  - Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper
  - Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive(Cqrs.Commands.ICommand{`0})
  langs:
  - csharp
  - vb
  name: AkkaCommandBusProxy<TAuthenticationToken>.BusActor
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BusActor
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 82
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: 'public class BusActor : ReceiveActor, IInternalActor, IInitializableActor'
    content.vb: >-
      Public Class BusActor

          Inherits ReceiveActor

          Implements IInternalActor, IInitializableActor
  inheritance:
  - System.Object
  - Akka.Actor.ActorBase
  - Akka.Actor.UntypedActor
  - Akka.Actor.ReceiveActor
  implements:
  - Akka.Actor.IInternalActor
  - Akka.Actor.Internal.IInitializableActor
  inheritedMembers:
  - Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  - Akka.Actor.ReceiveActor.OnReceive(System.Object)
  - Akka.Actor.ReceiveActor.Become(System.Action)
  - Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  - Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  - Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  - Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  - Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  - Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  - Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  - Akka.Actor.UntypedActor.Receive(System.Object)
  - Akka.Actor.UntypedActor.RunTask(System.Action)
  - Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  - Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  - Akka.Actor.UntypedActor.Context
  - Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  - Akka.Actor.ActorBase.Unhandled(System.Object)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  - Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  - Akka.Actor.ActorBase.UnbecomeStacked
  - Akka.Actor.ActorBase.Unbecome
  - Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  - Akka.Actor.ActorBase.SupervisorStrategy
  - Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.AroundPreStart
  - Akka.Actor.ActorBase.PreStart
  - Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  - Akka.Actor.ActorBase.PostRestart(System.Exception)
  - Akka.Actor.ActorBase.AroundPostStop
  - Akka.Actor.ActorBase.PostStop
  - Akka.Actor.ActorBase.Sender
  - Akka.Actor.ActorBase.Self
  - Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  - Akka.Actor.ActorBase.EmptyReceive
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor
  name.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor(Cqrs.Akka.Commands.IAkkaCommandPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  commentId: M:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor(Cqrs.Akka.Commands.IAkkaCommandPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})
  id: '#ctor(Cqrs.Akka.Commands.IAkkaCommandPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper,Cqrs.Authentication.IAuthenticationTokenHelper{`0})'
  parent: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  langs:
  - csharp
  - vb
  name: BusActor(IAkkaCommandPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>)
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.BusActor(IAkkaCommandPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.BusActor(Cqrs.Akka.Commands.IAkkaCommandPublisher<TAuthenticationToken>, cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 85
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: public BusActor(IAkkaCommandPublisher<TAuthenticationToken> commandHandlerResolver, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper)
    parameters:
    - id: commandHandlerResolver
      type: Cqrs.Akka.Commands.IAkkaCommandPublisher{{TAuthenticationToken}}
    - id: correlationIdHelper
      type: cdmdotnet.Logging.ICorrelationIdHelper
    - id: authenticationTokenHelper
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    content.vb: Public Sub New(commandHandlerResolver As IAkkaCommandPublisher(Of TAuthenticationToken), correlationIdHelper As ICorrelationIdHelper, authenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken))
  overload: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor*
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.BusActor(IAkkaCommandPublisher(Of TAuthenticationToken), ICorrelationIdHelper, IAuthenticationTokenHelper(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.BusActor(Cqrs.Akka.Commands.IAkkaCommandPublisher(Of TAuthenticationToken), cdmdotnet.Logging.ICorrelationIdHelper, Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken))
  name.vb: BusActor(IAkkaCommandPublisher(Of TAuthenticationToken), ICorrelationIdHelper, IAuthenticationTokenHelper(Of TAuthenticationToken))
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver
  commentId: P:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver
  id: CommandHandlerResolver
  parent: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  langs:
  - csharp
  - vb
  name: CommandHandlerResolver
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CommandHandlerResolver
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CommandHandlerResolver
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CommandHandlerResolver
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 93
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected IAkkaCommandPublisher<TAuthenticationToken> CommandHandlerResolver { get; }
    parameters: []
    return:
      type: Cqrs.Akka.Commands.IAkkaCommandPublisher{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property CommandHandlerResolver As IAkkaCommandPublisher(Of TAuthenticationToken)
  overload: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver*
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CommandHandlerResolver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CommandHandlerResolver
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper
  commentId: P:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper
  id: CorrelationIdHelper
  parent: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  langs:
  - csharp
  - vb
  name: CorrelationIdHelper
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CorrelationIdHelper
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CorrelationIdHelper
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CorrelationIdHelper
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 95
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected ICorrelationIdHelper CorrelationIdHelper { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Protected ReadOnly Property CorrelationIdHelper As ICorrelationIdHelper
  overload: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper*
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CorrelationIdHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CorrelationIdHelper
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper
  commentId: P:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper
  id: AuthenticationTokenHelper
  parent: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  langs:
  - csharp
  - vb
  name: AuthenticationTokenHelper
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.AuthenticationTokenHelper
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.AuthenticationTokenHelper
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AuthenticationTokenHelper
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 97
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; }
    parameters: []
    return:
      type: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property AuthenticationTokenHelper As IAuthenticationTokenHelper(Of TAuthenticationToken)
  overload: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper*
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.AuthenticationTokenHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.AuthenticationTokenHelper
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive(Cqrs.Commands.ICommand{`0})
  commentId: M:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive(Cqrs.Commands.ICommand{`0})
  id: ExecuteReceive(Cqrs.Commands.ICommand{`0})
  parent: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor
  langs:
  - csharp
  - vb
  name: ExecuteReceive(ICommand<TAuthenticationToken>)
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.ExecuteReceive(ICommand<TAuthenticationToken>)
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.ExecuteReceive(Cqrs.Commands.ICommand<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ExecuteReceive
    path: Framework/Akka.Net/Cqrs.Akka/Commands/AkkaCommandBusProxy.cs
    startLine: 99
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Commands
  syntax:
    content: protected virtual void ExecuteReceive(ICommand<TAuthenticationToken> command)
    parameters:
    - id: command
      type: Cqrs.Commands.ICommand{{TAuthenticationToken}}
    content.vb: Protected Overridable Sub ExecuteReceive(command As ICommand(Of TAuthenticationToken))
  overload: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive*
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.ExecuteReceive(ICommand(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.ExecuteReceive(Cqrs.Commands.ICommand(Of TAuthenticationToken))
  name.vb: ExecuteReceive(ICommand(Of TAuthenticationToken))
references:
- uid: Cqrs.Akka.Commands
  commentId: N:Cqrs.Akka.Commands
  isExternal: false
  name: Cqrs.Akka.Commands
  nameWithType: Cqrs.Akka.Commands
  fullName: Cqrs.Akka.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Akka.Actor.ActorBase
  commentId: T:Akka.Actor.ActorBase
  parent: Akka.Actor
  isExternal: true
  name: ActorBase
  nameWithType: ActorBase
  fullName: Akka.Actor.ActorBase
- uid: Akka.Actor.UntypedActor
  commentId: T:Akka.Actor.UntypedActor
  parent: Akka.Actor
  isExternal: true
  name: UntypedActor
  nameWithType: UntypedActor
  fullName: Akka.Actor.UntypedActor
- uid: Akka.Actor.ReceiveActor
  commentId: T:Akka.Actor.ReceiveActor
  parent: Akka.Actor
  isExternal: true
  name: ReceiveActor
  nameWithType: ReceiveActor
  fullName: Akka.Actor.ReceiveActor
- uid: Akka.Actor.IInternalActor
  commentId: T:Akka.Actor.IInternalActor
  parent: Akka.Actor
  isExternal: true
  name: IInternalActor
  nameWithType: IInternalActor
  fullName: Akka.Actor.IInternalActor
- uid: Akka.Actor.Internal.IInitializableActor
  commentId: T:Akka.Actor.Internal.IInitializableActor
  parent: Akka.Actor.Internal
  isExternal: true
  name: IInitializableActor
  nameWithType: IInitializableActor
  fullName: Akka.Actor.Internal.IInitializableActor
- uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  commentId: M:Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: IInitializableActor.Init()
  nameWithType: ReceiveActor.IInitializableActor.Init()
  fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  nameWithType.vb: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init()
  name.vb: Akka.Actor.Internal.IInitializableActor.Init()
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: IInitializableActor.Init
    nameWithType: ReceiveActor.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Akka#Actor#Internal#IInitializableActor#Init
    name: Akka.Actor.Internal.IInitializableActor.Init
    nameWithType: ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    fullName: Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  commentId: M:Akka.Actor.ReceiveActor.OnReceive(System.Object)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: OnReceive(Object)
  nameWithType: ReceiveActor.OnReceive(Object)
  fullName: Akka.Actor.ReceiveActor.OnReceive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.OnReceive(System.Object)
    name: OnReceive
    nameWithType: ReceiveActor.OnReceive
    fullName: Akka.Actor.ReceiveActor.OnReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action)
  nameWithType: ReceiveActor.Become(Action)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  commentId: M:Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: BecomeStacked(Action)
  nameWithType: ReceiveActor.BecomeStacked(Action)
  fullName: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.BecomeStacked(System.Action)
    name: BecomeStacked
    nameWithType: ReceiveActor.BecomeStacked
    fullName: Akka.Actor.ReceiveActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  commentId: M:Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Become(Action, Boolean)
  nameWithType: ReceiveActor.Become(Action, Boolean)
  fullName: Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Become(System.Action,System.Boolean)
    name: Become
    nameWithType: ReceiveActor.Become
    fullName: Akka.Actor.ReceiveActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{{T}},System.Predicate{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{{T}},System.Action{{T}})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Action<Object>, Predicate<Object>)
  nameWithType: ReceiveActor.Receive(Type, Action<Object>, Predicate<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Action(Of Object), Predicate(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Action(Of System.Object), System.Predicate(Of System.Object))
  name.vb: Receive(Type, Action(Of Object), Predicate(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Action{System.Object},System.Predicate{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Predicate<Object>, Action<Object>)
  nameWithType: ReceiveActor.Receive(Type, Predicate<Object>, Action<Object>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.Receive(Type, Predicate(Of Object), Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate(Of System.Object), System.Action(Of System.Object))
  name.vb: Receive(Type, Predicate(Of Object), Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Predicate{System.Object},System.Action{System.Object})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{{T},System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  definition: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: Receive(Type, Func<Object, Boolean>)
  nameWithType: ReceiveActor.Receive(Type, Func<Object, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Type, Func(Of Object, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(System.Type, System.Func(Of System.Object, System.Boolean))
  name.vb: Receive(Type, Func(Of Object, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive(System.Type,System.Func{System.Object,System.Boolean})
    name: Receive
    nameWithType: ReceiveActor.Receive
    fullName: Akka.Actor.ReceiveActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  commentId: M:Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
  parent: Akka.Actor.ReceiveActor
  isExternal: true
  name: ReceiveAny(Action<Object>)
  nameWithType: ReceiveActor.ReceiveAny(Action<Object>)
  fullName: Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>)
  nameWithType.vb: ReceiveActor.ReceiveAny(Action(Of Object))
  fullName.vb: Akka.Actor.ReceiveActor.ReceiveAny(System.Action(Of System.Object))
  name.vb: ReceiveAny(Action(Of Object))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.ReceiveAny(System.Action{System.Object})
    name: ReceiveAny
    nameWithType: ReceiveActor.ReceiveAny
    fullName: Akka.Actor.ReceiveActor.ReceiveAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Receive(System.Object)
  commentId: M:Akka.Actor.UntypedActor.Receive(System.Object)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Receive(Object)
  nameWithType: UntypedActor.Receive(Object)
  fullName: Akka.Actor.UntypedActor.Receive(System.Object)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Receive(System.Object)
    name: Receive
    nameWithType: UntypedActor.Receive
    fullName: Akka.Actor.UntypedActor.Receive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Action)
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Action)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Action)
  nameWithType: UntypedActor.RunTask(Action)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Action)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Action)
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: RunTask(Func<Task>)
  nameWithType: UntypedActor.RunTask(Func<Task>)
  fullName: Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: UntypedActor.RunTask(Func(Of Task))
  fullName.vb: Akka.Actor.UntypedActor.RunTask(System.Func(Of System.Threading.Tasks.Task))
  name.vb: RunTask(Func(Of Task))
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.RunTask(System.Func{System.Threading.Tasks.Task})
    name: RunTask
    nameWithType: UntypedActor.RunTask
    fullName: Akka.Actor.UntypedActor.RunTask
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive, Boolean)
  nameWithType: UntypedActor.Become(UntypedReceive, Boolean)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive,System.Boolean)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Become(UntypedReceive)
  nameWithType: UntypedActor.Become(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive)
    name: Become
    nameWithType: UntypedActor.Become
    fullName: Akka.Actor.UntypedActor.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  commentId: M:Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: BecomeStacked(UntypedReceive)
  nameWithType: UntypedActor.BecomeStacked(UntypedReceive)
  fullName: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
  spec.csharp:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive)
    name: BecomeStacked
    nameWithType: UntypedActor.BecomeStacked
    fullName: Akka.Actor.UntypedActor.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.UntypedReceive
    name: UntypedReceive
    nameWithType: UntypedReceive
    fullName: Akka.Actor.UntypedReceive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.UntypedActor.Context
  commentId: P:Akka.Actor.UntypedActor.Context
  parent: Akka.Actor.UntypedActor
  isExternal: true
  name: Context
  nameWithType: UntypedActor.Context
  fullName: Akka.Actor.UntypedActor.Context
- uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundReceive(Receive, Object)
  nameWithType: ActorBase.AroundReceive(Receive, Object)
  fullName: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive,System.Object)
    name: AroundReceive
    nameWithType: ActorBase.AroundReceive
    fullName: Akka.Actor.ActorBase.AroundReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unhandled(System.Object)
  commentId: M:Akka.Actor.ActorBase.Unhandled(System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unhandled(Object)
  nameWithType: ActorBase.Unhandled(Object)
  fullName: Akka.Actor.ActorBase.Unhandled(System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unhandled(System.Object)
    name: Unhandled
    nameWithType: ActorBase.Unhandled
    fullName: Akka.Actor.ActorBase.Unhandled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive, Boolean)
  nameWithType: ActorBase.Become(Receive, Boolean)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive,System.Boolean)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Become(Receive)
  nameWithType: ActorBase.Become(Receive)
  fullName: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Become(Akka.Actor.Receive)
    name: Become
    nameWithType: ActorBase.Become
    fullName: Akka.Actor.ActorBase.Become
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  commentId: M:Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: BecomeStacked(Receive)
  nameWithType: ActorBase.BecomeStacked(Receive)
  fullName: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive)
    name: BecomeStacked
    nameWithType: ActorBase.BecomeStacked
    fullName: Akka.Actor.ActorBase.BecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Akka.Actor.Receive
    name: Receive
    nameWithType: Receive
    fullName: Akka.Actor.Receive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.UnbecomeStacked
  commentId: M:Akka.Actor.ActorBase.UnbecomeStacked
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: UnbecomeStacked()
  nameWithType: ActorBase.UnbecomeStacked()
  fullName: Akka.Actor.ActorBase.UnbecomeStacked()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.UnbecomeStacked
    name: UnbecomeStacked
    nameWithType: ActorBase.UnbecomeStacked
    fullName: Akka.Actor.ActorBase.UnbecomeStacked
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Unbecome
  commentId: M:Akka.Actor.ActorBase.Unbecome
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Unbecome()
  nameWithType: ActorBase.Unbecome()
  fullName: Akka.Actor.ActorBase.Unbecome()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.Unbecome
    name: Unbecome
    nameWithType: ActorBase.Unbecome
    fullName: Akka.Actor.ActorBase.Unbecome
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  commentId: M:Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SetReceiveTimeout(Nullable<TimeSpan>)
  nameWithType: ActorBase.SetReceiveTimeout(Nullable<TimeSpan>)
  fullName: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>)
  nameWithType.vb: ActorBase.SetReceiveTimeout(Nullable(Of TimeSpan))
  fullName.vb: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable(Of System.TimeSpan))
  name.vb: SetReceiveTimeout(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable{System.TimeSpan})
    name: SetReceiveTimeout
    nameWithType: ActorBase.SetReceiveTimeout
    fullName: Akka.Actor.ActorBase.SetReceiveTimeout
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.SupervisorStrategy
  commentId: M:Akka.Actor.ActorBase.SupervisorStrategy
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: SupervisorStrategy()
  nameWithType: ActorBase.SupervisorStrategy()
  fullName: Akka.Actor.ActorBase.SupervisorStrategy()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.SupervisorStrategy
    name: SupervisorStrategy
    nameWithType: ActorBase.SupervisorStrategy
    fullName: Akka.Actor.ActorBase.SupervisorStrategy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreRestart(Exception, Object)
  nameWithType: ActorBase.AroundPreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreRestart(System.Exception,System.Object)
    name: AroundPreRestart
    nameWithType: ActorBase.AroundPreRestart
    fullName: Akka.Actor.ActorBase.AroundPreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPreStart
  commentId: M:Akka.Actor.ActorBase.AroundPreStart
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPreStart()
  nameWithType: ActorBase.AroundPreStart()
  fullName: Akka.Actor.ActorBase.AroundPreStart()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPreStart
    name: AroundPreStart
    nameWithType: ActorBase.AroundPreStart
    fullName: Akka.Actor.ActorBase.AroundPreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PreStart
  commentId: M:Akka.Actor.ActorBase.PreStart
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PreStart()
  nameWithType: ActorBase.PreStart()
  fullName: Akka.Actor.ActorBase.PreStart()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PreStart
    name: PreStart
    nameWithType: ActorBase.PreStart
    fullName: Akka.Actor.ActorBase.PreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PreStart
    name: PreStart
    nameWithType: ActorBase.PreStart
    fullName: Akka.Actor.ActorBase.PreStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostRestart(Exception, Object)
  nameWithType: ActorBase.AroundPostRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostRestart(System.Exception,System.Object)
    name: AroundPostRestart
    nameWithType: ActorBase.AroundPostRestart
    fullName: Akka.Actor.ActorBase.AroundPostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  commentId: M:Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PreRestart(Exception, Object)
  nameWithType: ActorBase.PreRestart(Exception, Object)
  fullName: Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)
    name: PreRestart
    nameWithType: ActorBase.PreRestart
    fullName: Akka.Actor.ActorBase.PreRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
  commentId: M:Akka.Actor.ActorBase.PostRestart(System.Exception)
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostRestart(Exception)
  nameWithType: ActorBase.PostRestart(Exception)
  fullName: Akka.Actor.ActorBase.PostRestart(System.Exception)
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostRestart(System.Exception)
    name: PostRestart
    nameWithType: ActorBase.PostRestart
    fullName: Akka.Actor.ActorBase.PostRestart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.AroundPostStop
  commentId: M:Akka.Actor.ActorBase.AroundPostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: AroundPostStop()
  nameWithType: ActorBase.AroundPostStop()
  fullName: Akka.Actor.ActorBase.AroundPostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.AroundPostStop
    name: AroundPostStop
    nameWithType: ActorBase.AroundPostStop
    fullName: Akka.Actor.ActorBase.AroundPostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.PostStop
  commentId: M:Akka.Actor.ActorBase.PostStop
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: PostStop()
  nameWithType: ActorBase.PostStop()
  fullName: Akka.Actor.ActorBase.PostStop()
  spec.csharp:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ActorBase.PostStop
    name: PostStop
    nameWithType: ActorBase.PostStop
    fullName: Akka.Actor.ActorBase.PostStop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ActorBase.Sender
  commentId: P:Akka.Actor.ActorBase.Sender
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Sender
  nameWithType: ActorBase.Sender
  fullName: Akka.Actor.ActorBase.Sender
- uid: Akka.Actor.ActorBase.Self
  commentId: P:Akka.Actor.ActorBase.Self
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: Self
  nameWithType: ActorBase.Self
  fullName: Akka.Actor.ActorBase.Self
- uid: Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  commentId: P:Akka.Actor.ActorBase.Akka#Actor#IInternalActor#ActorContext
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: IInternalActor.ActorContext
  nameWithType: ActorBase.IInternalActor.ActorContext
  fullName: Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext
  nameWithType.vb: ActorBase.Akka.Actor.IInternalActor.ActorContext
  name.vb: Akka.Actor.IInternalActor.ActorContext
- uid: Akka.Actor.ActorBase.EmptyReceive
  commentId: P:Akka.Actor.ActorBase.EmptyReceive
  parent: Akka.Actor.ActorBase
  isExternal: true
  name: EmptyReceive
  nameWithType: ActorBase.EmptyReceive
  fullName: Akka.Actor.ActorBase.EmptyReceive
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Akka.Actor.Internal
  commentId: N:Akka.Actor.Internal
  isExternal: false
  name: Akka.Actor.Internal
  nameWithType: Akka.Actor.Internal
  fullName: Akka.Actor.Internal
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
  isExternal: true
  name: Receive<T>(Func<T, Task>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Task>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Task))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: Receive(Of T)(Func(Of T, Task))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Threading.Tasks.Task})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
  isExternal: true
  name: Receive<T>(Action<T>, Predicate<T>)
  nameWithType: ReceiveActor.Receive<T>(Action<T>, Predicate<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Action(Of T), Predicate(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Action(Of T), System.Predicate(Of T))
  name.vb: Receive(Of T)(Action(Of T), Predicate(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Action{``0},System.Predicate{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
  isExternal: true
  name: Receive<T>(Predicate<T>, Action<T>)
  nameWithType: ReceiveActor.Receive<T>(Predicate<T>, Action<T>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Predicate(Of T), Action(Of T))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Predicate(Of T), System.Action(Of T))
  name.vb: Receive(Of T)(Predicate(Of T), Action(Of T))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Predicate{``0},System.Action{``0})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  commentId: M:Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
  isExternal: true
  name: Receive<T>(Func<T, Boolean>)
  nameWithType: ReceiveActor.Receive<T>(Func<T, Boolean>)
  fullName: Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>)
  nameWithType.vb: ReceiveActor.Receive(Of T)(Func(Of T, Boolean))
  fullName.vb: Akka.Actor.ReceiveActor.Receive(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Receive(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive<T>
    nameWithType: ReceiveActor.Receive<T>
    fullName: Akka.Actor.ReceiveActor.Receive<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Akka.Actor.ReceiveActor.Receive``1(System.Func{``0,System.Boolean})
    name: Receive(Of T)
    nameWithType: ReceiveActor.Receive(Of T)
    fullName: Akka.Actor.ReceiveActor.Receive(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor*
  commentId: Overload:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.#ctor
  isExternal: false
  name: BusActor
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.BusActor
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.BusActor
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.BusActor
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.BusActor
- uid: Cqrs.Akka.Commands.IAkkaCommandPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Akka.Commands.IAkkaCommandPublisher{`0}
  parent: Cqrs.Akka.Commands
  definition: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  name: IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: Cqrs.Authentication.IAuthenticationTokenHelper{{TAuthenticationToken}}
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper{`0}
  parent: Cqrs.Authentication
  definition: Cqrs.Authentication.IAuthenticationTokenHelper`1
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  commentId: T:Cqrs.Akka.Commands.IAkkaCommandPublisher`1
  isExternal: false
  name: IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType: IAkkaCommandPublisher<TAuthenticationToken>
  fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher<TAuthenticationToken>
  nameWithType.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Akka.Commands.IAkkaCommandPublisher(Of TAuthenticationToken)
  name.vb: IAkkaCommandPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Commands.IAkkaCommandPublisher`1
    name: IAkkaCommandPublisher
    nameWithType: IAkkaCommandPublisher
    fullName: Cqrs.Akka.Commands.IAkkaCommandPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
  commentId: T:Cqrs.Authentication.IAuthenticationTokenHelper`1
  isExternal: false
  name: IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType: IAuthenticationTokenHelper<TAuthenticationToken>
  fullName: Cqrs.Authentication.IAuthenticationTokenHelper<TAuthenticationToken>
  nameWithType.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.Authentication.IAuthenticationTokenHelper(Of TAuthenticationToken)
  name.vb: IAuthenticationTokenHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Authentication.IAuthenticationTokenHelper`1
    name: IAuthenticationTokenHelper
    nameWithType: IAuthenticationTokenHelper
    fullName: Cqrs.Authentication.IAuthenticationTokenHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Authentication
  commentId: N:Cqrs.Authentication
  isExternal: false
  name: Cqrs.Authentication
  nameWithType: Cqrs.Authentication
  fullName: Cqrs.Authentication
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver*
  commentId: Overload:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CommandHandlerResolver
  isExternal: false
  name: CommandHandlerResolver
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CommandHandlerResolver
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CommandHandlerResolver
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CommandHandlerResolver
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CommandHandlerResolver
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper*
  commentId: Overload:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CorrelationIdHelper
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.CorrelationIdHelper
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CorrelationIdHelper
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.CorrelationIdHelper
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper*
  commentId: Overload:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.AuthenticationTokenHelper
  isExternal: false
  name: AuthenticationTokenHelper
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.AuthenticationTokenHelper
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.AuthenticationTokenHelper
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.AuthenticationTokenHelper
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.AuthenticationTokenHelper
- uid: Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive*
  commentId: Overload:Cqrs.Akka.Commands.AkkaCommandBusProxy`1.BusActor.ExecuteReceive
  isExternal: false
  name: ExecuteReceive
  nameWithType: AkkaCommandBusProxy<TAuthenticationToken>.BusActor.ExecuteReceive
  fullName: Cqrs.Akka.Commands.AkkaCommandBusProxy<TAuthenticationToken>.BusActor.ExecuteReceive
  nameWithType.vb: AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.ExecuteReceive
  fullName.vb: Cqrs.Akka.Commands.AkkaCommandBusProxy(Of TAuthenticationToken).BusActor.ExecuteReceive
- uid: Cqrs.Commands.ICommand{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommand{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommand`1
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
