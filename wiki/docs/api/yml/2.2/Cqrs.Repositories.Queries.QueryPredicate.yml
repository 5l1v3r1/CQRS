### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.QueryPredicate
  commentId: T:Cqrs.Repositories.Queries.QueryPredicate
  id: QueryPredicate
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.QueryPredicate.#ctor
  - Cqrs.Repositories.Queries.QueryPredicate.Name
  - Cqrs.Repositories.Queries.QueryPredicate.Parameters
  langs:
  - csharp
  - vb
  name: QueryPredicate
  nameWithType: QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryPredicate
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryPredicate
    path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInformation about a query.\n"
  example: []
  syntax:
    content: 'public class QueryPredicate : IQueryPredicateData, IQueryPredicate'
    content.vb: >-
      Public Class QueryPredicate
          Implements IQueryPredicateData, IQueryPredicate
  inheritance:
  - System.Object
  implements:
  - Cqrs.Repositories.Queries.IQueryPredicateData
  - Cqrs.Repositories.Queries.IQueryPredicate
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Repositories.Queries.QueryPredicate.Name
  commentId: P:Cqrs.Repositories.Queries.QueryPredicate.Name
  id: Name
  parent: Cqrs.Repositories.Queries.QueryPredicate
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: QueryPredicate.Name
  fullName: Cqrs.Repositories.Queries.QueryPredicate.Name
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Name
    path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe Name of the function in the <xref href=\"Cqrs.Repositories.Queries.IQueryStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Cqrs.Repositories.Queries.QueryPredicate.Name*
  implements:
  - Cqrs.Repositories.Queries.IQueryPredicateData.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Repositories.Queries.QueryPredicate.Parameters
  commentId: P:Cqrs.Repositories.Queries.QueryPredicate.Parameters
  id: Parameters
  parent: Cqrs.Repositories.Queries.QueryPredicate
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: QueryPredicate.Parameters
  fullName: Cqrs.Repositories.Queries.QueryPredicate.Parameters
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Parameters
    path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
    startLine: 27
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe parameters passed to function in the <xref href=\"Cqrs.Repositories.Queries.IQueryStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SortedSet<QueryParameter> Parameters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
    content.vb: Public ReadOnly Property Parameters As SortedSet(Of QueryParameter)
  overload: Cqrs.Repositories.Queries.QueryPredicate.Parameters*
  implements:
  - Cqrs.Repositories.Queries.IQueryPredicateData.Parameters
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Repositories.Queries.QueryPredicate.#ctor
  commentId: M:Cqrs.Repositories.Queries.QueryPredicate.#ctor
  id: '#ctor'
  parent: Cqrs.Repositories.Queries.QueryPredicate
  langs:
  - csharp
  - vb
  name: QueryPredicate()
  nameWithType: QueryPredicate.QueryPredicate()
  fullName: Cqrs.Repositories.Queries.QueryPredicate.QueryPredicate()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Repositories/Queries/QueryPredicate.cs
    startLine: 34
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Repositories.Queries.QueryPredicate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public QueryPredicate()
    content.vb: Public Sub New
  overload: Cqrs.Repositories.Queries.QueryPredicate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Queries.IQueryPredicateData
  commentId: T:Cqrs.Repositories.Queries.IQueryPredicateData
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryPredicateData
  nameWithType: IQueryPredicateData
  fullName: Cqrs.Repositories.Queries.IQueryPredicateData
- uid: Cqrs.Repositories.Queries.IQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IQueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryPredicate
  nameWithType: IQueryPredicate
  fullName: Cqrs.Repositories.Queries.IQueryPredicate
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries.QueryPredicate.Name*
  commentId: Overload:Cqrs.Repositories.Queries.QueryPredicate.Name
  isExternal: false
  name: Name
  nameWithType: QueryPredicate.Name
  fullName: Cqrs.Repositories.Queries.QueryPredicate.Name
- uid: Cqrs.Repositories.Queries.IQueryPredicateData.Name
  commentId: P:Cqrs.Repositories.Queries.IQueryPredicateData.Name
  parent: Cqrs.Repositories.Queries.IQueryPredicateData
  isExternal: false
  name: Name
  nameWithType: IQueryPredicateData.Name
  fullName: Cqrs.Repositories.Queries.IQueryPredicateData.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.Repositories.Queries.QueryPredicate.Parameters*
  commentId: Overload:Cqrs.Repositories.Queries.QueryPredicate.Parameters
  isExternal: false
  name: Parameters
  nameWithType: QueryPredicate.Parameters
  fullName: Cqrs.Repositories.Queries.QueryPredicate.Parameters
- uid: Cqrs.Repositories.Queries.IQueryPredicateData.Parameters
  commentId: P:Cqrs.Repositories.Queries.IQueryPredicateData.Parameters
  parent: Cqrs.Repositories.Queries.IQueryPredicateData
  isExternal: false
  name: Parameters
  nameWithType: IQueryPredicateData.Parameters
  fullName: Cqrs.Repositories.Queries.IQueryPredicateData.Parameters
- uid: System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
  commentId: T:System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedSet`1
  name: SortedSet<QueryParameter>
  nameWithType: SortedSet<QueryParameter>
  fullName: System.Collections.Generic.SortedSet<Cqrs.Repositories.Queries.QueryParameter>
  nameWithType.vb: SortedSet(Of QueryParameter)
  fullName.vb: System.Collections.Generic.SortedSet(Of Cqrs.Repositories.Queries.QueryParameter)
  name.vb: SortedSet(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedSet`1
  commentId: T:System.Collections.Generic.SortedSet`1
  isExternal: true
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  nameWithType.vb: SortedSet(Of T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  name.vb: SortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Repositories.Queries.QueryPredicate
  commentId: T:Cqrs.Repositories.Queries.QueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: QueryPredicate
  nameWithType: QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryPredicate
- uid: Cqrs.Repositories.Queries.QueryPredicate.#ctor*
  commentId: Overload:Cqrs.Repositories.Queries.QueryPredicate.#ctor
  isExternal: false
  name: QueryPredicate
  nameWithType: QueryPredicate.QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryPredicate.QueryPredicate
