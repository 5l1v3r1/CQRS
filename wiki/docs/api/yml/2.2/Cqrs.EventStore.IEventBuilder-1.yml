### YamlMime:ManagedReference
items:
- uid: Cqrs.EventStore.IEventBuilder`1
  commentId: T:Cqrs.EventStore.IEventBuilder`1
  id: IEventBuilder`1
  parent: Cqrs.EventStore
  children:
  - Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  - Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  - Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  - Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  - Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  langs:
  - csharp
  - vb
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IEventBuilder
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 18
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nBuilds <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> from various input formats.\n"
  example: []
  syntax:
    content: public interface IEventBuilder<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: Public Interface IEventBuilder(Of TAuthenticationToken)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  id: CreateFrameworkEvent(System.String)
  parent: Cqrs.EventStore.IEventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 24
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> from the provided <code data-dev-comment-type=\"paramref\">eventDataBody</code>.\n"
  example: []
  syntax:
    content: EventData CreateFrameworkEvent(string eventDataBody)
    parameters:
    - id: eventDataBody
      type: System.String
      description: A JSON string of serialised data.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Function CreateFrameworkEvent(eventDataBody As String) As EventData
  overload: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent*
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String)
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.IEventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 30
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <code data-dev-comment-type=\"paramref\">eventData</code>.\n"
  example: []
  syntax:
    content: EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="EventStore.ClientAPI.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Function CreateFrameworkEvent(eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent*
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.IEventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 37
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <code data-dev-comment-type=\"paramref\">eventData</code>.\n"
  example: []
  syntax:
    content: EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: type
      type: System.String
      description: The name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the target object the serialised data is.
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="EventStore.ClientAPI.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Function CreateFrameworkEvent(type As String, eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent*
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  id: CreateFrameworkEvent(System.String,System.String)
  parent: Cqrs.EventStore.IEventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String, String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 44
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> from the provided <code data-dev-comment-type=\"paramref\">eventDataBody</code>.\n"
  example: []
  syntax:
    content: EventData CreateFrameworkEvent(string type, string eventDataBody)
    parameters:
    - id: type
      type: System.String
      description: The name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the target object the serialised data is.
    - id: eventDataBody
      type: System.String
      description: A JSON string of serialised data.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Function CreateFrameworkEvent(type As String, eventDataBody As String) As EventData
  overload: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent*
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, System.String)
- uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  id: CreateClientConnectedEvent(System.String)
  parent: Cqrs.EventStore.IEventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateClientConnectedEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateClientConnectedEvent
    path: Framework/Cqrs.EventStore/IEventBuilder.cs
    startLine: 50
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> that notifies people a client has connected.\n"
  example: []
  syntax:
    content: EventData CreateClientConnectedEvent(string clientName)
    parameters:
    - id: clientName
      type: System.String
      description: The name of the client that has connected.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Function CreateClientConnectedEvent(clientName As String) As EventData
  overload: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent*
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(System.String)
references:
- uid: EventStore.ClientAPI.EventData
  commentId: T:EventStore.ClientAPI.EventData
  parent: EventStore.ClientAPI
  isExternal: true
  name: EventData
  nameWithType: EventData
  fullName: EventStore.ClientAPI.EventData
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.EventStore
  commentId: N:Cqrs.EventStore
  isExternal: false
  name: Cqrs.EventStore
  nameWithType: Cqrs.EventStore
  fullName: Cqrs.EventStore
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent*
  commentId: Overload:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent
  isExternal: false
  name: CreateFrameworkEvent
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent*
  commentId: Overload:Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent
  isExternal: false
  name: CreateClientConnectedEvent
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
