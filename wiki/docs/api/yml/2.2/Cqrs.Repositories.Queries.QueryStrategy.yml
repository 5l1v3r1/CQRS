### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.QueryStrategy
  commentId: T:Cqrs.Repositories.Queries.QueryStrategy
  id: QueryStrategy
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.QueryStrategy.And(Cqrs.Repositories.Queries.IQueryPredicate)
  - Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``1(System.Func{``0})
  - Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``2(System.Func{``0,``1},``0)
  - Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``3(System.Func{``0,``1,``2},``0,``1)
  - Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted
  - Cqrs.Repositories.Queries.QueryStrategy.Or(Cqrs.Repositories.Queries.IQueryPredicate)
  - Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  - Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny``1(``0)
  - Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany``1(``0)
  - Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser``1(``0)
  - Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser``1(``0)
  langs:
  - csharp
  - vb
  name: QueryStrategy
  nameWithType: QueryStrategy
  fullName: Cqrs.Repositories.Queries.QueryStrategy
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryStrategy
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA specification for a query to execute.\n"
  example: []
  syntax:
    content: 'public abstract class QueryStrategy : IQueryStrategy'
    content.vb: >-
      Public MustInherit Class QueryStrategy
          Implements IQueryStrategy
  inheritance:
  - System.Object
  implements:
  - Cqrs.Repositories.Queries.IQueryStrategy
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  commentId: P:Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  id: QueryPredicate
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: QueryPredicate
  nameWithType: QueryStrategy.QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryPredicate
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe predicate that will be evaluated.\n"
  example: []
  syntax:
    content: public IQueryPredicate QueryPredicate { get; protected set; }
    parameters: []
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Property QueryPredicate As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate*
  implements:
  - Cqrs.Repositories.Queries.IQueryStrategy.QueryPredicate
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted
  id: IsNotLogicallyDeleted
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: IsNotLogicallyDeleted()
  nameWithType: QueryStrategy.IsNotLogicallyDeleted()
  fullName: Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsNotLogicallyDeleted
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 31
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nFilter to all items not logically deleted.\n"
  example: []
  syntax:
    content: public virtual IQueryPredicate IsNotLogicallyDeleted()
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Overridable Function IsNotLogicallyDeleted As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny``1(``0)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny``1(``0)
  id: WithPermissionScopeAny``1(``0)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken)
  nameWithType: QueryStrategy.WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WithPermissionScopeAny
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 39
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nFilter to all items with any permission scope.\n"
  example: []
  syntax:
    content: public virtual IQueryPredicate WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken authenticationToken)
    parameters:
    - id: authenticationToken
      type: '{TAuthenticationToken}'
    typeParameters:
    - id: TAuthenticationToken
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Overridable Function WithPermissionScopeAny(Of TAuthenticationToken)(authenticationToken As TAuthenticationToken) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny*
  nameWithType.vb: QueryStrategy.WithPermissionScopeAny(Of TAuthenticationToken)(TAuthenticationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny(Of TAuthenticationToken)(TAuthenticationToken)
  name.vb: WithPermissionScopeAny(Of TAuthenticationToken)(TAuthenticationToken)
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser``1(``0)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser``1(``0)
  id: WithPermissionScopeUser``1(``0)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken)
  nameWithType: QueryStrategy.WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WithPermissionScopeUser
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 47
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nFilter to any items the authenticated user can view.\n"
  example: []
  syntax:
    content: public virtual IQueryPredicate WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken authenticationToken)
    parameters:
    - id: authenticationToken
      type: '{TAuthenticationToken}'
    typeParameters:
    - id: TAuthenticationToken
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Overridable Function WithPermissionScopeUser(Of TAuthenticationToken)(authenticationToken As TAuthenticationToken) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser*
  nameWithType.vb: QueryStrategy.WithPermissionScopeUser(Of TAuthenticationToken)(TAuthenticationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser(Of TAuthenticationToken)(TAuthenticationToken)
  name.vb: WithPermissionScopeUser(Of TAuthenticationToken)(TAuthenticationToken)
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany``1(``0)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany``1(``0)
  id: WithPermissionScopeCompany``1(``0)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken)
  nameWithType: QueryStrategy.WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WithPermissionScopeCompany
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 55
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nFilter to any items the company the authenticated user can view.\n"
  example: []
  syntax:
    content: public virtual IQueryPredicate WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken authenticationToken)
    parameters:
    - id: authenticationToken
      type: '{TAuthenticationToken}'
    typeParameters:
    - id: TAuthenticationToken
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Overridable Function WithPermissionScopeCompany(Of TAuthenticationToken)(authenticationToken As TAuthenticationToken) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany*
  nameWithType.vb: QueryStrategy.WithPermissionScopeCompany(Of TAuthenticationToken)(TAuthenticationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany(Of TAuthenticationToken)(TAuthenticationToken)
  name.vb: WithPermissionScopeCompany(Of TAuthenticationToken)(TAuthenticationToken)
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser``1(``0)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser``1(``0)
  id: WithPermissionScopeCompanyAndUser``1(``0)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken)
  nameWithType: QueryStrategy.WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WithPermissionScopeCompanyAndUser
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 63
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nFilter to any items the company the authenticated user can view and then filter the results to any items the authenticated user can see.\n"
  example: []
  syntax:
    content: public virtual IQueryPredicate WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken authenticationToken)
    parameters:
    - id: authenticationToken
      type: '{TAuthenticationToken}'
    typeParameters:
    - id: TAuthenticationToken
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Public Overridable Function WithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(authenticationToken As TAuthenticationToken) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser*
  nameWithType.vb: QueryStrategy.WithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(TAuthenticationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(TAuthenticationToken)
  name.vb: WithPermissionScopeCompanyAndUser(Of TAuthenticationToken)(TAuthenticationToken)
- uid: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``1(System.Func{``0})
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``1(System.Func{``0})
  id: BuildQueryPredicate``1(System.Func{``0})
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: BuildQueryPredicate<TData>(Func<TData>)
  nameWithType: QueryStrategy.BuildQueryPredicate<TData>(Func<TData>)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate<TData>(System.Func<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BuildQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 71
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds a <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">func</span>.\n"
  example: []
  syntax:
    content: protected virtual IQueryPredicate BuildQueryPredicate<TData>(Func<TData> func)
    parameters:
    - id: func
      type: System.Func{{TData}}
    typeParameters:
    - id: TData
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Protected Overridable Function BuildQueryPredicate(Of TData)(func As Func(Of TData)) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate*
  nameWithType.vb: QueryStrategy.BuildQueryPredicate(Of TData)(Func(Of TData))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate(Of TData)(System.Func(Of TData))
  name.vb: BuildQueryPredicate(Of TData)(Func(Of TData))
- uid: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``2(System.Func{``0,``1},``0)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``2(System.Func{``0,``1},``0)
  id: BuildQueryPredicate``2(System.Func{``0,``1},``0)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: BuildQueryPredicate<TParameter1, TData>(Func<TParameter1, TData>, TParameter1)
  nameWithType: QueryStrategy.BuildQueryPredicate<TParameter1, TData>(Func<TParameter1, TData>, TParameter1)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate<TParameter1, TData>(System.Func<TParameter1, TData>, TParameter1)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BuildQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 86
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds a <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">func</span>\nstoring the provided <span class=\"paramref\">parameter1</span>.\n"
  example: []
  syntax:
    content: protected virtual IQueryPredicate BuildQueryPredicate<TParameter1, TData>(Func<TParameter1, TData> func, TParameter1 parameter1)
    parameters:
    - id: func
      type: System.Func{{TParameter1},{TData}}
    - id: parameter1
      type: '{TParameter1}'
    typeParameters:
    - id: TParameter1
    - id: TData
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Protected Overridable Function BuildQueryPredicate(Of TParameter1, TData)(func As Func(Of TParameter1, TData), parameter1 As TParameter1) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate*
  nameWithType.vb: QueryStrategy.BuildQueryPredicate(Of TParameter1, TData)(Func(Of TParameter1, TData), TParameter1)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate(Of TParameter1, TData)(System.Func(Of TParameter1, TData), TParameter1)
  name.vb: BuildQueryPredicate(Of TParameter1, TData)(Func(Of TParameter1, TData), TParameter1)
- uid: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``3(System.Func{``0,``1,``2},``0,``1)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate``3(System.Func{``0,``1,``2},``0,``1)
  id: BuildQueryPredicate``3(System.Func{``0,``1,``2},``0,``1)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: BuildQueryPredicate<TParameter1, TParameter2, TData>(Func<TParameter1, TParameter2, TData>, TParameter1, TParameter2)
  nameWithType: QueryStrategy.BuildQueryPredicate<TParameter1, TParameter2, TData>(Func<TParameter1, TParameter2, TData>, TParameter1, TParameter2)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate<TParameter1, TParameter2, TData>(System.Func<TParameter1, TParameter2, TData>, TParameter1, TParameter2)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BuildQueryPredicate
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 106
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds a <xref href=\"Cqrs.Repositories.Queries.IQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">func</span>\nstoring the provided <span class=\"paramref\">parameter1</span> and <span class=\"paramref\">parameter2</span>.\n"
  example: []
  syntax:
    content: protected virtual IQueryPredicate BuildQueryPredicate<TParameter1, TParameter2, TData>(Func<TParameter1, TParameter2, TData> func, TParameter1 parameter1, TParameter2 parameter2)
    parameters:
    - id: func
      type: System.Func{{TParameter1},{TParameter2},{TData}}
    - id: parameter1
      type: '{TParameter1}'
    - id: parameter2
      type: '{TParameter2}'
    typeParameters:
    - id: TParameter1
    - id: TParameter2
    - id: TData
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Protected Overridable Function BuildQueryPredicate(Of TParameter1, TParameter2, TData)(func As Func(Of TParameter1, TParameter2, TData), parameter1 As TParameter1, parameter2 As TParameter2) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate*
  nameWithType.vb: QueryStrategy.BuildQueryPredicate(Of TParameter1, TParameter2, TData)(Func(Of TParameter1, TParameter2, TData), TParameter1, TParameter2)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate(Of TParameter1, TParameter2, TData)(System.Func(Of TParameter1, TParameter2, TData), TParameter1, TParameter2)
  name.vb: BuildQueryPredicate(Of TParameter1, TParameter2, TData)(Func(Of TParameter1, TParameter2, TData), TParameter1, TParameter2)
- uid: Cqrs.Repositories.Queries.QueryStrategy.And(Cqrs.Repositories.Queries.IQueryPredicate)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.And(Cqrs.Repositories.Queries.IQueryPredicate)
  id: And(Cqrs.Repositories.Queries.IQueryPredicate)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: And(IQueryPredicate)
  nameWithType: QueryStrategy.And(IQueryPredicate)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.And(Cqrs.Repositories.Queries.IQueryPredicate)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: And
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 140
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds an <xref href=\"Cqrs.Repositories.Queries.IAndQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> between <xref href=\"Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate\" data-throw-if-not-resolved=\"false\"></xref>\nand the provided <span class=\"paramref\">queryPredicate</span>\n"
  example: []
  syntax:
    content: protected virtual IQueryPredicate And(IQueryPredicate queryPredicate)
    parameters:
    - id: queryPredicate
      type: Cqrs.Repositories.Queries.IQueryPredicate
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Protected Overridable Function And(queryPredicate As IQueryPredicate) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.And*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Repositories.Queries.QueryStrategy.Or(Cqrs.Repositories.Queries.IQueryPredicate)
  commentId: M:Cqrs.Repositories.Queries.QueryStrategy.Or(Cqrs.Repositories.Queries.IQueryPredicate)
  id: Or(Cqrs.Repositories.Queries.IQueryPredicate)
  parent: Cqrs.Repositories.Queries.QueryStrategy
  langs:
  - csharp
  - vb
  name: Or(IQueryPredicate)
  nameWithType: QueryStrategy.Or(IQueryPredicate)
  fullName: Cqrs.Repositories.Queries.QueryStrategy.Or(Cqrs.Repositories.Queries.IQueryPredicate)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Or
    path: Framework/Cqrs/Repositories/Queries/QueryStrategy.cs
    startLine: 156
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nBuilds an <xref href=\"Cqrs.Repositories.Queries.IOrQueryPredicate\" data-throw-if-not-resolved=\"false\"></xref> between <xref href=\"Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate\" data-throw-if-not-resolved=\"false\"></xref>\nand the provided <span class=\"paramref\">queryPredicate</span>\n"
  example: []
  syntax:
    content: protected virtual IQueryPredicate Or(IQueryPredicate queryPredicate)
    parameters:
    - id: queryPredicate
      type: Cqrs.Repositories.Queries.IQueryPredicate
    return:
      type: Cqrs.Repositories.Queries.IQueryPredicate
    content.vb: Protected Overridable Function Or(queryPredicate As IQueryPredicate) As IQueryPredicate
  overload: Cqrs.Repositories.Queries.QueryStrategy.Or*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  isExternal: false
  name: QueryPredicate
  nameWithType: QueryStrategy.QueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
- uid: Cqrs.Repositories.Queries.IQueryStrategy.QueryPredicate
  commentId: P:Cqrs.Repositories.Queries.IQueryStrategy.QueryPredicate
  parent: Cqrs.Repositories.Queries.IQueryStrategy
  isExternal: false
  name: QueryPredicate
  nameWithType: IQueryStrategy.QueryPredicate
  fullName: Cqrs.Repositories.Queries.IQueryStrategy.QueryPredicate
- uid: Cqrs.Repositories.Queries.IQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IQueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryPredicate
  nameWithType: IQueryPredicate
  fullName: Cqrs.Repositories.Queries.IQueryPredicate
- uid: Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted
  isExternal: false
  name: IsNotLogicallyDeleted
  nameWithType: QueryStrategy.IsNotLogicallyDeleted
  fullName: Cqrs.Repositories.Queries.QueryStrategy.IsNotLogicallyDeleted
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny
  isExternal: false
  name: WithPermissionScopeAny
  nameWithType: QueryStrategy.WithPermissionScopeAny
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeAny
- uid: '{TAuthenticationToken}'
  commentId: '!:TAuthenticationToken'
  definition: TAuthenticationToken
  name: TAuthenticationToken
  nameWithType: TAuthenticationToken
  fullName: TAuthenticationToken
- uid: TAuthenticationToken
  isExternal: false
  name: TAuthenticationToken
  nameWithType: TAuthenticationToken
  fullName: TAuthenticationToken
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser
  isExternal: false
  name: WithPermissionScopeUser
  nameWithType: QueryStrategy.WithPermissionScopeUser
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeUser
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany
  isExternal: false
  name: WithPermissionScopeCompany
  nameWithType: QueryStrategy.WithPermissionScopeCompany
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompany
- uid: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser
  isExternal: false
  name: WithPermissionScopeCompanyAndUser
  nameWithType: QueryStrategy.WithPermissionScopeCompanyAndUser
  fullName: Cqrs.Repositories.Queries.QueryStrategy.WithPermissionScopeCompanyAndUser
- uid: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate
  isExternal: false
  name: BuildQueryPredicate
  nameWithType: QueryStrategy.BuildQueryPredicate
  fullName: Cqrs.Repositories.Queries.QueryStrategy.BuildQueryPredicate
- uid: System.Func{{TData}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TData>
  nameWithType: Func<TData>
  fullName: System.Func<TData>
  nameWithType.vb: Func(Of TData)
  fullName.vb: System.Func(Of TData)
  name.vb: Func(Of TData)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParameter1},{TData}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TParameter1, TData>
  nameWithType: Func<TParameter1, TData>
  fullName: System.Func<TParameter1, TData>
  nameWithType.vb: Func(Of TParameter1, TData)
  fullName.vb: System.Func(Of TParameter1, TData)
  name.vb: Func(Of TParameter1, TData)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TParameter1}'
  commentId: '!:TParameter1'
  definition: TParameter1
  name: TParameter1
  nameWithType: TParameter1
  fullName: TParameter1
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TParameter1
  isExternal: false
  name: TParameter1
  nameWithType: TParameter1
  fullName: TParameter1
- uid: System.Func{{TParameter1},{TParameter2},{TData}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TParameter1, TParameter2, TData>
  nameWithType: Func<TParameter1, TParameter2, TData>
  fullName: System.Func<TParameter1, TParameter2, TData>
  nameWithType.vb: Func(Of TParameter1, TParameter2, TData)
  fullName.vb: System.Func(Of TParameter1, TParameter2, TData)
  name.vb: Func(Of TParameter1, TParameter2, TData)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameter1
    nameWithType: TParameter1
    fullName: TParameter1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParameter2
    nameWithType: TParameter2
    fullName: TParameter2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TParameter2}'
  commentId: '!:TParameter2'
  definition: TParameter2
  name: TParameter2
  nameWithType: TParameter2
  fullName: TParameter2
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TParameter2
  commentId: '!:TParameter2'
  isExternal: false
  name: TParameter2
  nameWithType: TParameter2
  fullName: TParameter2
- uid: Cqrs.Repositories.Queries.IAndQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IAndQueryPredicate
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IAndQueryPredicate
  nameWithType: IAndQueryPredicate
  fullName: Cqrs.Repositories.Queries.IAndQueryPredicate
- uid: Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
  commentId: P:Cqrs.Repositories.Queries.QueryStrategy.QueryPredicate
- uid: Cqrs.Repositories.Queries.QueryStrategy.And*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.And
  isExternal: false
  name: And
  nameWithType: QueryStrategy.And
  fullName: Cqrs.Repositories.Queries.QueryStrategy.And
- uid: Cqrs.Repositories.Queries.IOrQueryPredicate
  commentId: T:Cqrs.Repositories.Queries.IOrQueryPredicate
  isExternal: false
  name: IOrQueryPredicate
  nameWithType: IOrQueryPredicate
  fullName: Cqrs.Repositories.Queries.IOrQueryPredicate
- uid: Cqrs.Repositories.Queries.QueryStrategy.Or*
  commentId: Overload:Cqrs.Repositories.Queries.QueryStrategy.Or
  isExternal: false
  name: Or
  nameWithType: QueryStrategy.Or
  fullName: Cqrs.Repositories.Queries.QueryStrategy.Or
