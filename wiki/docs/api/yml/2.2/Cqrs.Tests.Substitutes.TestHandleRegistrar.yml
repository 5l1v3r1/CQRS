### YamlMime:ManagedReference
items:
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar
  commentId: T:Cqrs.Tests.Substitutes.TestHandleRegistrar
  id: TestHandleRegistrar
  parent: Cqrs.Tests.Substitutes
  children:
  - Cqrs.Tests.Substitutes.TestHandleRegistrar.HandlerList
  - Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: TestHandleRegistrar
  nameWithType: TestHandleRegistrar
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestHandleRegistrar
    path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
    startLine: 7
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public class TestHandleRegistrar : IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar'
    content.vb: >-
      Public Class TestHandleRegistrar

          Implements IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar
  inheritance:
  - System.Object
  implements:
  - Cqrs.Bus.IEventHandlerRegistrar
  - Cqrs.Bus.ICommandHandlerRegistrar
  - Cqrs.Bus.IHandlerRegistrar
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.HandlerList
  commentId: F:Cqrs.Tests.Substitutes.TestHandleRegistrar.HandlerList
  id: HandlerList
  parent: Cqrs.Tests.Substitutes.TestHandleRegistrar
  langs:
  - csharp
  - vb
  name: HandlerList
  nameWithType: TestHandleRegistrar.HandlerList
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.HandlerList
  type: Field
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: HandlerList
    path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
    startLine: 9
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public static readonly IList<TestHandlerListItem> HandlerList
    return:
      type: System.Collections.Generic.IList{Cqrs.Tests.Substitutes.TestHandlerListItem}
    content.vb: Public Shared ReadOnly HandlerList As IList(Of TestHandlerListItem)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Tests.Substitutes.TestHandleRegistrar
  langs:
  - csharp
  - vb
  name: RegisterHandler<T>(Action<T>, Type, Boolean)
  nameWithType: TestHandleRegistrar.RegisterHandler<T>(Action<T>, Type, Boolean)
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler<T>(System.Action<T>, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
    startLine: 11
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public void RegisterHandler<T>(Action<T> handler, Type targetedType, bool holdMessageLock = true)where T : IMessage'
    parameters:
    - id: handler
      type: System.Action{{T}}
    - id: targetedType
      type: System.Type
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Sub RegisterHandler(Of T As IMessage)(handler As Action(Of T), targetedType As Type, holdMessageLock As Boolean = True)
  overload: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{T}},System.Type,System.Boolean)
  nameWithType.vb: TestHandleRegistrar.RegisterHandler(Of T)(Action(Of T), Type, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler(Of T)(System.Action(Of T), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of T)(Action(Of T), Type, Boolean)
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  id: RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Tests.Substitutes.TestHandleRegistrar
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: TestHandleRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
    startLine: 20
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  summary: "\nRegister an event or command handler that will listen and respond to events or commands.\n"
  example: []
  syntax:
    content: 'public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Sub RegisterHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler*
  implements:
  - Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  nameWithType.vb: TestHandleRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  id: RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Tests.Substitutes.TestHandleRegistrar
  langs:
  - csharp
  - vb
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: TestHandleRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterGlobalEventHandler
    path: Framework/Cqrs.Tests/Substitutes/TestHandleRegistrar.cs
    startLine: 29
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  summary: "\nRegister an event handler that will listen and respond to all events.\n"
  example: []
  syntax:
    content: 'public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Public Sub RegisterGlobalEventHandler(Of TMessage As IMessage)(handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler*
  implements:
  - Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{{TMessage}},System.Boolean)
  nameWithType.vb: TestHandleRegistrar.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
references:
- uid: Cqrs.Tests.Substitutes
  commentId: N:Cqrs.Tests.Substitutes
  isExternal: false
  name: Cqrs.Tests.Substitutes
  nameWithType: Cqrs.Tests.Substitutes
  fullName: Cqrs.Tests.Substitutes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Bus.IEventHandlerRegistrar
  commentId: T:Cqrs.Bus.IEventHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IEventHandlerRegistrar
  nameWithType: IEventHandlerRegistrar
  fullName: Cqrs.Bus.IEventHandlerRegistrar
- uid: Cqrs.Bus.ICommandHandlerRegistrar
  commentId: T:Cqrs.Bus.ICommandHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: ICommandHandlerRegistrar
  nameWithType: ICommandHandlerRegistrar
  fullName: Cqrs.Bus.ICommandHandlerRegistrar
- uid: Cqrs.Bus.IHandlerRegistrar
  commentId: T:Cqrs.Bus.IHandlerRegistrar
  parent: Cqrs.Bus
  isExternal: false
  name: IHandlerRegistrar
  nameWithType: IHandlerRegistrar
  fullName: Cqrs.Bus.IHandlerRegistrar
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Bus
  commentId: N:Cqrs.Bus
  isExternal: false
  name: Cqrs.Bus
  nameWithType: Cqrs.Bus
  fullName: Cqrs.Bus
- uid: System.Collections.Generic.IList{Cqrs.Tests.Substitutes.TestHandlerListItem}
  commentId: T:System.Collections.Generic.IList{Cqrs.Tests.Substitutes.TestHandlerListItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TestHandlerListItem>
  nameWithType: IList<TestHandlerListItem>
  fullName: System.Collections.Generic.IList<Cqrs.Tests.Substitutes.TestHandlerListItem>
  nameWithType.vb: IList(Of TestHandlerListItem)
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Tests.Substitutes.TestHandlerListItem)
  name.vb: IList(Of TestHandlerListItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Tests.Substitutes.TestHandlerListItem
    name: TestHandlerListItem
    nameWithType: TestHandlerListItem
    fullName: Cqrs.Tests.Substitutes.TestHandlerListItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Tests.Substitutes.TestHandlerListItem
    name: TestHandlerListItem
    nameWithType: TestHandlerListItem
    fullName: Cqrs.Tests.Substitutes.TestHandlerListItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler*
  commentId: Overload:Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler
  isExternal: false
  name: RegisterHandler
  nameWithType: TestHandleRegistrar.RegisterHandler
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterHandler
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{T}},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  name: RegisterHandler<T>(Action<T>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<T>(Action<T>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<T>(System.Action<T>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of T)(Action(Of T), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of T)(System.Action(Of T), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of T)(Action(Of T), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<T>
    nameWithType: IHandlerRegistrar.RegisterHandler<T>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of T)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of T)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Type, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Type, Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Type,System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{{TMessage}},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.IHandlerRegistrar
  definition: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TMessage}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: System.Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: System.Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
  isExternal: true
  name: RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IHandlerRegistrar.RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler<TMessage>
    nameWithType: IHandlerRegistrar.RegisterHandler<TMessage>
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IHandlerRegistrar.RegisterHandler``1(System.Action{``0},System.Boolean)
    name: RegisterHandler(Of TMessage)
    nameWithType: IHandlerRegistrar.RegisterHandler(Of TMessage)
    fullName: Cqrs.Bus.IHandlerRegistrar.RegisterHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler*
  commentId: Overload:Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler
  isExternal: false
  name: RegisterGlobalEventHandler
  nameWithType: TestHandleRegistrar.RegisterGlobalEventHandler
  fullName: Cqrs.Tests.Substitutes.TestHandleRegistrar.RegisterGlobalEventHandler
- uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{{TMessage}},System.Boolean)
  commentId: M:Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Bus.IEventHandlerRegistrar
  definition: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler<TMessage>
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler(Of TMessage)
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
  isExternal: true
  name: RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  nameWithType.vb: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  spec.csharp:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler<TMessage>
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler``1(System.Action{``0},System.Boolean)
    name: RegisterGlobalEventHandler(Of TMessage)
    nameWithType: IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
    fullName: Cqrs.Bus.IEventHandlerRegistrar.RegisterGlobalEventHandler(Of TMessage)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
