### YamlMime:ManagedReference
items:
- uid: Cqrs.Hosts.CoreHost`1
  commentId: T:Cqrs.Hosts.CoreHost`1
  id: CoreHost`1
  parent: Cqrs.Hosts
  children:
  - Cqrs.Hosts.CoreHost`1.#ctor
  - Cqrs.Hosts.CoreHost`1.CommandBus
  - Cqrs.Hosts.CoreHost`1.ConfigurationManager
  - Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver
  - Cqrs.Hosts.CoreHost`1.ConfigureTelemetry
  - Cqrs.Hosts.CoreHost`1.CorrelationIdHelper
  - Cqrs.Hosts.CoreHost`1.EventBus
  - Cqrs.Hosts.CoreHost`1.HandlerTypes
  - Cqrs.Hosts.CoreHost`1.Logger
  - Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler``1(System.Action{``0},System.Boolean)
  - Cqrs.Hosts.CoreHost`1.Prepare
  - Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol
  - Cqrs.Hosts.CoreHost`1.Run(System.Action)
  - Cqrs.Hosts.CoreHost`1.Start
  - Cqrs.Hosts.CoreHost`1.StartBusRegistrar
  - Cqrs.Hosts.CoreHost`1.TelemetryName
  langs:
  - csharp
  - vb
  name: CoreHost<TAuthenticationToken>
  nameWithType: CoreHost<TAuthenticationToken>
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CoreHost
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nConfigure and start command and event handlers in a host\n"
  example: []
  syntax:
    content: public abstract class CoreHost<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
    content.vb: Public MustInherit Class CoreHost(Of TAuthenticationToken)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Azure.ConfigurationManager.TelemetryCoreHost`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: CoreHost(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken)
  name.vb: CoreHost(Of TAuthenticationToken)
- uid: Cqrs.Hosts.CoreHost`1.ConfigurationManager
  commentId: P:Cqrs.Hosts.CoreHost`1.ConfigurationManager
  id: ConfigurationManager
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: ConfigurationManager
  nameWithType: CoreHost<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigurationManager
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe <xref href=\"Cqrs.Configuration.IConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref> that can be use before the <xref href=\"Cqrs.Configuration.DependencyResolver.Current\" data-throw-if-not-resolved=\"false\"></xref> is set.\n"
  example: []
  syntax:
    content: protected abstract IConfigurationManager ConfigurationManager { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Protected MustOverride ReadOnly Property ConfigurationManager As IConfigurationManager
  overload: Cqrs.Hosts.CoreHost`1.ConfigurationManager*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigurationManager
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Hosts.CoreHost`1.HandlerTypes
  commentId: P:Cqrs.Hosts.CoreHost`1.HandlerTypes
  id: HandlerTypes
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: HandlerTypes
  nameWithType: CoreHost<TAuthenticationToken>.HandlerTypes
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.HandlerTypes
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: HandlerTypes
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nEach <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> will be traced back to it&apos;s assembly, and that assembly will be scanned for other handlers to auto register.\n"
  example: []
  syntax:
    content: protected Type[] HandlerTypes { get; set; }
    parameters: []
    return:
      type: System.Type[]
    content.vb: Protected Property HandlerTypes As Type()
  overload: Cqrs.Hosts.CoreHost`1.HandlerTypes*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).HandlerTypes
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).HandlerTypes
- uid: Cqrs.Hosts.CoreHost`1.EventBus
  commentId: P:Cqrs.Hosts.CoreHost`1.EventBus
  id: EventBus
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: EventBus
  nameWithType: CoreHost<TAuthenticationToken>.EventBus
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.EventBus
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventBus
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe <xref href=\"Cqrs.Events.IEventReceiver\" data-throw-if-not-resolved=\"false\"></xref> that will be configured to receive <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IEventReceiver<TAuthenticationToken> EventBus { get; }
    parameters: []
    return:
      type: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property EventBus As IEventReceiver(Of TAuthenticationToken)
  overload: Cqrs.Hosts.CoreHost`1.EventBus*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).EventBus
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).EventBus
- uid: Cqrs.Hosts.CoreHost`1.CommandBus
  commentId: P:Cqrs.Hosts.CoreHost`1.CommandBus
  id: CommandBus
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: CommandBus
  nameWithType: CoreHost<TAuthenticationToken>.CommandBus
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CommandBus
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CommandBus
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 43
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe <xref href=\"Cqrs.Commands.ICommandReceiver\" data-throw-if-not-resolved=\"false\"></xref> that will be configured to receive <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ICommandReceiver<TAuthenticationToken> CommandBus { get; }
    parameters: []
    return:
      type: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property CommandBus As ICommandReceiver(Of TAuthenticationToken)
  overload: Cqrs.Hosts.CoreHost`1.CommandBus*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CommandBus
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CommandBus
- uid: Cqrs.Hosts.CoreHost`1.TelemetryName
  commentId: P:Cqrs.Hosts.CoreHost`1.TelemetryName
  id: TelemetryName
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: TelemetryName
  nameWithType: CoreHost<TAuthenticationToken>.TelemetryName
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.TelemetryName
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TelemetryName
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 48
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe hosts telemetry name if telemetry is configured\n"
  example: []
  syntax:
    content: protected string TelemetryName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Property TelemetryName As String
  overload: Cqrs.Hosts.CoreHost`1.TelemetryName*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).TelemetryName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).TelemetryName
- uid: Cqrs.Hosts.CoreHost`1.CorrelationIdHelper
  commentId: P:Cqrs.Hosts.CoreHost`1.CorrelationIdHelper
  id: CorrelationIdHelper
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: CorrelationIdHelper
  nameWithType: CoreHost<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CorrelationIdHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CorrelationIdHelper
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 53
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe <xref href=\"cdmdotnet.Logging.ICorrelationIdHelper\" data-throw-if-not-resolved=\"false\"></xref> that will be used when starting and stopping the host.\n"
  example: []
  syntax:
    content: protected ICorrelationIdHelper CorrelationIdHelper { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Protected ReadOnly Property CorrelationIdHelper As ICorrelationIdHelper
  overload: Cqrs.Hosts.CoreHost`1.CorrelationIdHelper*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CorrelationIdHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Hosts.CoreHost`1.Logger
  commentId: P:Cqrs.Hosts.CoreHost`1.Logger
  id: Logger
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: CoreHost<TAuthenticationToken>.Logger
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Logger
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 58
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nThe <xref href=\"cdmdotnet.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> that will be used when starting and stopping the host.\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Hosts.CoreHost`1.Logger*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Logger
- uid: Cqrs.Hosts.CoreHost`1.#ctor
  commentId: M:Cqrs.Hosts.CoreHost`1.#ctor
  id: '#ctor'
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: CoreHost()
  nameWithType: CoreHost<TAuthenticationToken>.CoreHost()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CoreHost()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 64
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nInstantiate a new instance of a <xref href=\"Cqrs.Hosts.CoreHost%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected CoreHost()
    content.vb: Protected Sub New
  overload: Cqrs.Hosts.CoreHost`1.#ctor*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CoreHost()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CoreHost()
- uid: Cqrs.Hosts.CoreHost`1.ConfigureTelemetry
  commentId: M:Cqrs.Hosts.CoreHost`1.ConfigureTelemetry
  id: ConfigureTelemetry
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: ConfigureTelemetry()
  nameWithType: CoreHost<TAuthenticationToken>.ConfigureTelemetry()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureTelemetry()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigureTelemetry
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 92
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nWhen overridden, allows you to configure Telemetry\n"
  example: []
  syntax:
    content: protected virtual void ConfigureTelemetry()
    content.vb: Protected Overridable Sub ConfigureTelemetry
  overload: Cqrs.Hosts.CoreHost`1.ConfigureTelemetry*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigureTelemetry()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigureTelemetry()
- uid: Cqrs.Hosts.CoreHost`1.Run(System.Action)
  commentId: M:Cqrs.Hosts.CoreHost`1.Run(System.Action)
  id: Run(System.Action)
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: Run(Action)
  nameWithType: CoreHost<TAuthenticationToken>.Run(Action)
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Run(System.Action)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Run
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 99
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nCalls <xref href=\"Cqrs.Hosts.CoreHost%601.Prepare\" data-throw-if-not-resolved=\"false\"></xref>, <code data-dev-comment-type=\"paramref\">handlerRegistation</code> and then <xref href=\"Cqrs.Hosts.CoreHost%601.Start\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Run(Action handlerRegistation = null)
    parameters:
    - id: handlerRegistation
      type: System.Action
    content.vb: Public Overridable Sub Run(handlerRegistation As Action = Nothing)
  overload: Cqrs.Hosts.CoreHost`1.Run*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Run(Action)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Run(System.Action)
- uid: Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol
  commentId: M:Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol
  id: PrepareSecurityProtocol
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: PrepareSecurityProtocol()
  nameWithType: CoreHost<TAuthenticationToken>.PrepareSecurityProtocol()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.PrepareSecurityProtocol()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareSecurityProtocol
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 111
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nSets the <xref href=\"System.Net.ServicePointManager.SecurityProtocol\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Net.SecurityProtocolType.Tls\" data-throw-if-not-resolved=\"false\"></xref>.\nYou might want to override this to .net 4.5 and above to SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls\n"
  example: []
  syntax:
    content: protected virtual void PrepareSecurityProtocol()
    content.vb: Protected Overridable Sub PrepareSecurityProtocol
  overload: Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).PrepareSecurityProtocol()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).PrepareSecurityProtocol()
- uid: Cqrs.Hosts.CoreHost`1.Prepare
  commentId: M:Cqrs.Hosts.CoreHost`1.Prepare
  id: Prepare
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: Prepare()
  nameWithType: CoreHost<TAuthenticationToken>.Prepare()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Prepare()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Prepare
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 119
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nPrepare the host before registering handlers and starting the host.\n"
  example: []
  syntax:
    content: protected virtual void Prepare()
    content.vb: Protected Overridable Sub Prepare
  overload: Cqrs.Hosts.CoreHost`1.Prepare*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Prepare()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Prepare()
- uid: Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver
  commentId: M:Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver
  id: ConfigureDefaultDependencyResolver
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: ConfigureDefaultDependencyResolver()
  nameWithType: CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigureDefaultDependencyResolver
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 139
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nConfigure the <xref href=\"Cqrs.Configuration.DependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected abstract void ConfigureDefaultDependencyResolver()
    content.vb: Protected MustOverride Sub ConfigureDefaultDependencyResolver
  overload: Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigureDefaultDependencyResolver()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigureDefaultDependencyResolver()
- uid: Cqrs.Hosts.CoreHost`1.Start
  commentId: M:Cqrs.Hosts.CoreHost`1.Start
  id: Start
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: CoreHost<TAuthenticationToken>.Start()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Start()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Start
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 144
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nStart the host post preparing and registering handlers.\n"
  example: []
  syntax:
    content: protected virtual void Start()
    content.vb: Protected Overridable Sub Start
  overload: Cqrs.Hosts.CoreHost`1.Start*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Start()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Start()
- uid: Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler``1(System.Action{``0},System.Boolean)
  id: ManuallyRegisterEventHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ManuallyRegisterEventHandler
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 165
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nRegister an event handler that will listen and respond to events.\n"
  example: []
  syntax:
    content: 'protected virtual void ManuallyRegisterEventHandler<TMessage>(Action<TMessage> eventHandler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: eventHandler
      type: System.Action{{TMessage}}
      description: The event handler to call
    - id: holdMessageLock
      type: System.Boolean
      description: If false, this will spin off another thread. This is a bad performance impact. Strongly suggest you use lock renewing instead... which is configuration based... so even better.
    typeParameters:
    - id: TMessage
    content.vb: Protected Overridable Sub ManuallyRegisterEventHandler(Of TMessage As IMessage)(eventHandler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ManuallyRegisterEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ManuallyRegisterEventHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: ManuallyRegisterEventHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler``1(System.Action{``0},System.Boolean)
  commentId: M:Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler``1(System.Action{``0},System.Boolean)
  id: ManuallyRegisterCommandHandler``1(System.Action{``0},System.Boolean)
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean)
  nameWithType: CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean)
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(System.Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ManuallyRegisterCommandHandler
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 177
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nRegister an command handler that will listen and respond to commands.\n"
  example: []
  syntax:
    content: 'protected virtual void ManuallyRegisterCommandHandler<TMessage>(Action<TMessage> commandHandler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: commandHandler
      type: System.Action{{TMessage}}
      description: The command handler to call
    - id: holdMessageLock
      type: System.Boolean
      description: If false, this will spin off another thread. This is a bad performance impact. Strongly suggest you use lock renewing instead... which is configuration based... so even better.
    typeParameters:
    - id: TMessage
    content.vb: Protected Overridable Sub ManuallyRegisterCommandHandler(Of TMessage As IMessage)(commandHandler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ManuallyRegisterCommandHandler(Of TMessage)(Action(Of TMessage), Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ManuallyRegisterCommandHandler(Of TMessage)(System.Action(Of TMessage), System.Boolean)
  name.vb: ManuallyRegisterCommandHandler(Of TMessage)(Action(Of TMessage), Boolean)
- uid: Cqrs.Hosts.CoreHost`1.StartBusRegistrar
  commentId: M:Cqrs.Hosts.CoreHost`1.StartBusRegistrar
  id: StartBusRegistrar
  parent: Cqrs.Hosts.CoreHost`1
  langs:
  - csharp
  - vb
  name: StartBusRegistrar()
  nameWithType: CoreHost<TAuthenticationToken>.StartBusRegistrar()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.StartBusRegistrar()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Hosts/CoreHost.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: StartBusRegistrar
    path: Framework/Cqrs/Hosts/CoreHost.cs
    startLine: 187
  assemblies:
  - Cqrs
  namespace: Cqrs.Hosts
  summary: "\nStart the <xref href=\"Cqrs.Configuration.BusRegistrar\" data-throw-if-not-resolved=\"false\"></xref> by calling <xref href=\"Cqrs.Configuration.BusRegistrar.Register(System.Type%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> passing <xref href=\"Cqrs.Hosts.CoreHost%601.HandlerTypes\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected virtual void StartBusRegistrar()
    content.vb: Protected Overridable Sub StartBusRegistrar
  overload: Cqrs.Hosts.CoreHost`1.StartBusRegistrar*
  nameWithType.vb: CoreHost(Of TAuthenticationToken).StartBusRegistrar()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).StartBusRegistrar()
references:
- uid: Cqrs.Hosts
  commentId: N:Cqrs.Hosts
  isExternal: false
  name: Cqrs.Hosts
  nameWithType: Cqrs.Hosts
  fullName: Cqrs.Hosts
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.Configuration.DependencyResolver.Current
  commentId: P:Cqrs.Configuration.DependencyResolver.Current
  parent: Cqrs.Configuration.DependencyResolver
  isExternal: false
  name: Current
  nameWithType: DependencyResolver.Current
  fullName: Cqrs.Configuration.DependencyResolver.Current
- uid: Cqrs.Hosts.CoreHost`1.ConfigurationManager*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.ConfigurationManager
  isExternal: false
  name: ConfigurationManager
  nameWithType: CoreHost<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigurationManager
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigurationManager
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Configuration.DependencyResolver
  commentId: T:Cqrs.Configuration.DependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: DependencyResolver
  nameWithType: DependencyResolver
  fullName: Cqrs.Configuration.DependencyResolver
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Hosts.CoreHost`1.HandlerTypes*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.HandlerTypes
  isExternal: false
  name: HandlerTypes
  nameWithType: CoreHost<TAuthenticationToken>.HandlerTypes
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.HandlerTypes
  nameWithType.vb: CoreHost(Of TAuthenticationToken).HandlerTypes
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).HandlerTypes
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cqrs.Events.IEventReceiver
  commentId: T:Cqrs.Events.IEventReceiver
  parent: Cqrs.Events
  isExternal: false
  name: IEventReceiver
  nameWithType: IEventReceiver
  fullName: Cqrs.Events.IEventReceiver
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.EventBus*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.EventBus
  isExternal: false
  name: EventBus
  nameWithType: CoreHost<TAuthenticationToken>.EventBus
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.EventBus
  nameWithType.vb: CoreHost(Of TAuthenticationToken).EventBus
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).EventBus
- uid: Cqrs.Events.IEventReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventReceiver{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventReceiver`1
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Events.IEventReceiver`1
  commentId: T:Cqrs.Events.IEventReceiver`1
  isExternal: false
  name: IEventReceiver<TAuthenticationToken>
  nameWithType: IEventReceiver<TAuthenticationToken>
  fullName: Cqrs.Events.IEventReceiver<TAuthenticationToken>
  nameWithType.vb: IEventReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventReceiver(Of TAuthenticationToken)
  name.vb: IEventReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventReceiver`1
    name: IEventReceiver
    nameWithType: IEventReceiver
    fullName: Cqrs.Events.IEventReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.ICommandReceiver
  commentId: T:Cqrs.Commands.ICommandReceiver
  parent: Cqrs.Commands
  isExternal: false
  name: ICommandReceiver
  nameWithType: ICommandReceiver
  fullName: Cqrs.Commands.ICommandReceiver
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.CommandBus*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.CommandBus
  isExternal: false
  name: CommandBus
  nameWithType: CoreHost<TAuthenticationToken>.CommandBus
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CommandBus
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CommandBus
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CommandBus
- uid: Cqrs.Commands.ICommandReceiver{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommandReceiver{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandReceiver`1
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Commands.ICommandReceiver`1
  commentId: T:Cqrs.Commands.ICommandReceiver`1
  isExternal: false
  name: ICommandReceiver<TAuthenticationToken>
  nameWithType: ICommandReceiver<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommandReceiver<TAuthenticationToken>
  nameWithType.vb: ICommandReceiver(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommandReceiver(Of TAuthenticationToken)
  name.vb: ICommandReceiver(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandReceiver`1
    name: ICommandReceiver
    nameWithType: ICommandReceiver
    fullName: Cqrs.Commands.ICommandReceiver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.TelemetryName*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.TelemetryName
  isExternal: false
  name: TelemetryName
  nameWithType: CoreHost<TAuthenticationToken>.TelemetryName
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.TelemetryName
  nameWithType.vb: CoreHost(Of TAuthenticationToken).TelemetryName
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).TelemetryName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: Cqrs.Hosts.CoreHost`1.CorrelationIdHelper*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: CoreHost<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CorrelationIdHelper
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: Cqrs.Hosts.CoreHost`1.Logger*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.Logger
  isExternal: false
  name: Logger
  nameWithType: CoreHost<TAuthenticationToken>.Logger
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Logger
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Logger
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Logger
- uid: Cqrs.Hosts.CoreHost`1
  commentId: T:Cqrs.Hosts.CoreHost`1
  isExternal: false
  name: CoreHost<TAuthenticationToken>
  nameWithType: CoreHost<TAuthenticationToken>
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>
  nameWithType.vb: CoreHost(Of TAuthenticationToken)
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken)
  name.vb: CoreHost(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Hosts.CoreHost`1
    name: CoreHost
    nameWithType: CoreHost
    fullName: Cqrs.Hosts.CoreHost
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Hosts.CoreHost`1
    name: CoreHost
    nameWithType: CoreHost
    fullName: Cqrs.Hosts.CoreHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.#ctor*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.#ctor
  isExternal: false
  name: CoreHost
  nameWithType: CoreHost<TAuthenticationToken>.CoreHost
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.CoreHost
  nameWithType.vb: CoreHost(Of TAuthenticationToken).CoreHost
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).CoreHost
- uid: Cqrs.Hosts.CoreHost`1.ConfigureTelemetry*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.ConfigureTelemetry
  isExternal: false
  name: ConfigureTelemetry
  nameWithType: CoreHost<TAuthenticationToken>.ConfigureTelemetry
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureTelemetry
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigureTelemetry
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigureTelemetry
- uid: Cqrs.Hosts.CoreHost`1.Prepare
  commentId: M:Cqrs.Hosts.CoreHost`1.Prepare
  isExternal: false
  name: Prepare()
  nameWithType: CoreHost<TAuthenticationToken>.Prepare()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Prepare()
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Prepare()
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Prepare()
  spec.csharp:
  - uid: Cqrs.Hosts.CoreHost`1.Prepare
    name: Prepare
    nameWithType: CoreHost<TAuthenticationToken>.Prepare
    fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Prepare
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Hosts.CoreHost`1.Prepare
    name: Prepare
    nameWithType: CoreHost(Of TAuthenticationToken).Prepare
    fullName: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Prepare
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.Start
  commentId: M:Cqrs.Hosts.CoreHost`1.Start
  isExternal: false
  name: Start()
  nameWithType: CoreHost<TAuthenticationToken>.Start()
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Start()
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Start()
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Start()
  spec.csharp:
  - uid: Cqrs.Hosts.CoreHost`1.Start
    name: Start
    nameWithType: CoreHost<TAuthenticationToken>.Start
    fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Hosts.CoreHost`1.Start
    name: Start
    nameWithType: CoreHost(Of TAuthenticationToken).Start
    fullName: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.Run*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.Run
  isExternal: false
  name: Run
  nameWithType: CoreHost<TAuthenticationToken>.Run
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Run
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Run
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Run
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Net.ServicePointManager.SecurityProtocol
  commentId: P:System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType.Tls
  commentId: F:System.Net.SecurityProtocolType.Tls
- uid: Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.PrepareSecurityProtocol
  isExternal: false
  name: PrepareSecurityProtocol
  nameWithType: CoreHost<TAuthenticationToken>.PrepareSecurityProtocol
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.PrepareSecurityProtocol
  nameWithType.vb: CoreHost(Of TAuthenticationToken).PrepareSecurityProtocol
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).PrepareSecurityProtocol
- uid: Cqrs.Hosts.CoreHost`1.Prepare*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.Prepare
  isExternal: false
  name: Prepare
  nameWithType: CoreHost<TAuthenticationToken>.Prepare
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Prepare
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Prepare
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Prepare
- uid: Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.ConfigureDefaultDependencyResolver
  isExternal: false
  name: ConfigureDefaultDependencyResolver
  nameWithType: CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ConfigureDefaultDependencyResolver
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ConfigureDefaultDependencyResolver
- uid: Cqrs.Hosts.CoreHost`1.Start*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.Start
  isExternal: false
  name: Start
  nameWithType: CoreHost<TAuthenticationToken>.Start
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.Start
  nameWithType.vb: CoreHost(Of TAuthenticationToken).Start
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).Start
- uid: Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.ManuallyRegisterEventHandler
  isExternal: false
  name: ManuallyRegisterEventHandler
  nameWithType: CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ManuallyRegisterEventHandler
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ManuallyRegisterEventHandler
- uid: System.Action{{TMessage}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: System.Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: System.Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.ManuallyRegisterCommandHandler
  isExternal: false
  name: ManuallyRegisterCommandHandler
  nameWithType: CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler
  nameWithType.vb: CoreHost(Of TAuthenticationToken).ManuallyRegisterCommandHandler
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).ManuallyRegisterCommandHandler
- uid: Cqrs.Configuration.BusRegistrar
  commentId: T:Cqrs.Configuration.BusRegistrar
  parent: Cqrs.Configuration
  isExternal: false
  name: BusRegistrar
  nameWithType: BusRegistrar
  fullName: Cqrs.Configuration.BusRegistrar
- uid: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  commentId: M:Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  parent: Cqrs.Configuration.BusRegistrar
  isExternal: true
  name: Register(Type[])
  nameWithType: BusRegistrar.Register(Type[])
  fullName: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
  nameWithType.vb: BusRegistrar.Register(Type())
  fullName.vb: Cqrs.Configuration.BusRegistrar.Register(System.Type())
  name.vb: Register(Type())
  spec.csharp:
  - uid: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
    name: Register
    nameWithType: BusRegistrar.Register
    fullName: Cqrs.Configuration.BusRegistrar.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.BusRegistrar.Register(System.Type[])
    name: Register
    nameWithType: BusRegistrar.Register
    fullName: Cqrs.Configuration.BusRegistrar.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Hosts.CoreHost`1.HandlerTypes
  commentId: P:Cqrs.Hosts.CoreHost`1.HandlerTypes
  isExternal: false
  name: HandlerTypes
  nameWithType: CoreHost<TAuthenticationToken>.HandlerTypes
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.HandlerTypes
  nameWithType.vb: CoreHost(Of TAuthenticationToken).HandlerTypes
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).HandlerTypes
- uid: Cqrs.Hosts.CoreHost`1.StartBusRegistrar*
  commentId: Overload:Cqrs.Hosts.CoreHost`1.StartBusRegistrar
  isExternal: false
  name: StartBusRegistrar
  nameWithType: CoreHost<TAuthenticationToken>.StartBusRegistrar
  fullName: Cqrs.Hosts.CoreHost<TAuthenticationToken>.StartBusRegistrar
  nameWithType.vb: CoreHost(Of TAuthenticationToken).StartBusRegistrar
  fullName.vb: Cqrs.Hosts.CoreHost(Of TAuthenticationToken).StartBusRegistrar
