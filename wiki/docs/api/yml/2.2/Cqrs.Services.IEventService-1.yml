### YamlMime:ManagedReference
items:
- uid: Cqrs.Services.IEventService`1
  commentId: T:Cqrs.Services.IEventService`1
  id: IEventService`1
  parent: Cqrs.Services
  children:
  - Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  langs:
  - csharp
  - vb
  name: IEventService<TAuthenticationToken>
  nameWithType: IEventService<TAuthenticationToken>
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Services/IEventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IEventService
    path: Framework/Cqrs/Services/IEventService.cs
    startLine: 21
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nA WCF <xref href=\"System.ServiceModel.ServiceContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> that provides read-only access to <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>\nraised with the same <xref href=\"Cqrs.Messages.IMessage.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [ServiceContract(Namespace = "https://getcqrs.net/Domain/1001/")]

      public interface IEventService<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      <ServiceContract(Namespace:="https://getcqrs.net/Domain/1001/")>

      Public Interface IEventService(Of TAuthenticationToken)
  attributes:
  - type: System.ServiceModel.ServiceContractAttribute
    ctor: System.ServiceModel.ServiceContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Namespace
      type: System.String
      value: https://getcqrs.net/Domain/1001/
  nameWithType.vb: IEventService(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken)
  name.vb: IEventService(Of TAuthenticationToken)
- uid: Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  commentId: M:Cqrs.Services.IEventService`1.GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  id: GetEventData(Cqrs.Services.IServiceRequestWithData{`0,System.Guid})
  parent: Cqrs.Services.IEventService`1
  langs:
  - csharp
  - vb
  name: GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  nameWithType: IEventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData(Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/IEventService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventData
    path: Framework/Cqrs/Services/IEventService.cs
    startLine: 29
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGet all <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>\nraised with the same <xref href=\"Cqrs.Messages.IMessage.CorrelationId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [OperationContract]

      IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest)
    parameters:
    - id: serviceRequest
      type: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
      description: The <xref href="Cqrs.Messages.IMessage.CorrelationId" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to find.
    return:
      type: Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
    content.vb: >-
      <OperationContract>

      Function GetEventData(serviceRequest As IServiceRequestWithData(Of TAuthenticationToken, Guid)) As IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  overload: Cqrs.Services.IEventService`1.GetEventData*
  attributes:
  - type: System.ServiceModel.OperationContractAttribute
    ctor: System.ServiceModel.OperationContractAttribute.#ctor
    arguments: []
  nameWithType.vb: IEventService(Of TAuthenticationToken).GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData(Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid))
  name.vb: GetEventData(IServiceRequestWithData(Of TAuthenticationToken, Guid))
references:
- uid: System.ServiceModel.ServiceContractAttribute
  commentId: T:System.ServiceModel.ServiceContractAttribute
  parent: System.ServiceModel
  isExternal: true
  name: ServiceContractAttribute
  nameWithType: ServiceContractAttribute
  fullName: System.ServiceModel.ServiceContractAttribute
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessage.CorrelationId
  commentId: P:Cqrs.Messages.IMessage.CorrelationId
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: CorrelationId
  nameWithType: IMessage.CorrelationId
  fullName: Cqrs.Messages.IMessage.CorrelationId
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: System.ServiceModel
  commentId: N:System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  nameWithType: System.ServiceModel
  fullName: System.ServiceModel
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Services.IEventService`1.GetEventData*
  commentId: Overload:Cqrs.Services.IEventService`1.GetEventData
  isExternal: false
  name: GetEventData
  nameWithType: IEventService<TAuthenticationToken>.GetEventData
  fullName: Cqrs.Services.IEventService<TAuthenticationToken>.GetEventData
  nameWithType.vb: IEventService(Of TAuthenticationToken).GetEventData
  fullName.vb: Cqrs.Services.IEventService(Of TAuthenticationToken).GetEventData
- uid: Cqrs.Services.IServiceRequestWithData{{TAuthenticationToken},System.Guid}
  commentId: T:Cqrs.Services.IServiceRequestWithData{`0,System.Guid}
  parent: Cqrs.Services
  definition: Cqrs.Services.IServiceRequestWithData`2
  name: IServiceRequestWithData<TAuthenticationToken, Guid>
  nameWithType: IServiceRequestWithData<TAuthenticationToken, Guid>
  fullName: Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, System.Guid>
  nameWithType.vb: IServiceRequestWithData(Of TAuthenticationToken, Guid)
  fullName.vb: Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, System.Guid)
  name.vb: IServiceRequestWithData(Of TAuthenticationToken, Guid)
  spec.csharp:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
  commentId: T:Cqrs.Services.IServiceResponseWithResultData{System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}}
  parent: Cqrs.Services
  definition: Cqrs.Services.IServiceResponseWithResultData`1
  name: IServiceResponseWithResultData<IEnumerable<EventData>>
  nameWithType: IServiceResponseWithResultData<IEnumerable<EventData>>
  fullName: Cqrs.Services.IServiceResponseWithResultData<System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>>
  nameWithType.vb: IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData))
  name.vb: IServiceResponseWithResultData(Of IEnumerable(Of EventData))
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceRequestWithData`2
  commentId: T:Cqrs.Services.IServiceRequestWithData`2
  isExternal: false
  name: IServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType: IServiceRequestWithData<TAuthenticationToken, TData>
  fullName: Cqrs.Services.IServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType.vb: IServiceRequestWithData(Of TAuthenticationToken, TData)
  fullName.vb: Cqrs.Services.IServiceRequestWithData(Of TAuthenticationToken, TData)
  name.vb: IServiceRequestWithData(Of TAuthenticationToken, TData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceRequestWithData`2
    name: IServiceRequestWithData
    nameWithType: IServiceRequestWithData
    fullName: Cqrs.Services.IServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.IServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.IServiceResponseWithResultData`1
  isExternal: false
  name: IServiceResponseWithResultData<TResultData>
  nameWithType: IServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData)
  name.vb: IServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
