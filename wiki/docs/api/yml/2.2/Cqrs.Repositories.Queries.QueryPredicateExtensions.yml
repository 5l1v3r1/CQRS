### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions
  commentId: T:Cqrs.Repositories.Queries.QueryPredicateExtensions
  id: QueryPredicateExtensions
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.Int32)
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  - Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Int32)
  langs:
  - csharp
  - vb
  name: QueryPredicateExtensions
  nameWithType: QueryPredicateExtensions
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryPredicateExtensions
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA collection of extension methods for working with queries.\n"
  example: []
  syntax:
    content: public static class QueryPredicateExtensions
    content.vb: Public Module QueryPredicateExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: GetValue``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(KeyValuePair<String, Object>)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(KeyValuePair<String, Object>)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 25
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">keyValuePair</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nGets the <xref href=\"System.Collections.Generic.KeyValuePair%602.Value\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">keyValuePair</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this KeyValuePair<string, object> keyValuePair)
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(keyValuePair As KeyValuePair(Of String, Object)) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(KeyValuePair(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: GetValue(Of TResult)(KeyValuePair(Of String, Object))
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)
  id: GetValue``1(System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(ISet<KeyValuePair<String, Object>>, String)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(ISet<KeyValuePair<String, Object>>, String)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.ISet<System.Collections.Generic.KeyValuePair<System.String, System.Object>>, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">collection</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nFilters the provided <span class=\"paramref\">collection</span> where the <xref href=\"System.Collections.Generic.KeyValuePair%602.Key\" data-throw-if-not-resolved=\"false\"></xref> equals the provided <span class=\"paramref\">key</span>\nthen gets the <xref href=\"System.Collections.Generic.KeyValuePair%602.Value\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this ISet<KeyValuePair<string, object>> collection, string key)
    parameters:
    - id: collection
      type: System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    - id: key
      type: System.String
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(collection As ISet(Of KeyValuePair(Of String, Object)), key As String) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(ISet(Of KeyValuePair(Of String, Object)), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.ISet(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)), System.String)
  name.vb: GetValue(Of TResult)(ISet(Of KeyValuePair(Of String, Object)), String)
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Int32)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Int32)
  id: GetValue``1(System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Int32)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(SortedSet<KeyValuePair<String, Object>>, Int32)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(SortedSet<KeyValuePair<String, Object>>, Int32)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.SortedSet<System.Collections.Generic.KeyValuePair<System.String, System.Object>>, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 49
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">collection</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nGets the <xref href=\"System.Collections.Generic.KeyValuePair%602\" data-throw-if-not-resolved=\"false\"></xref> at index <span class=\"paramref\">index</span> from the provided <span class=\"paramref\">collection</span>\nthen gets the <xref href=\"System.Collections.Generic.KeyValuePair%602.Value\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this SortedSet<KeyValuePair<string, object>> collection, int index)
    parameters:
    - id: collection
      type: System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(collection As SortedSet(Of KeyValuePair(Of String, Object)), index As Integer) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(SortedSet(Of KeyValuePair(Of String, Object)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.SortedSet(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)), System.Int32)
  name.vb: GetValue(Of TResult)(SortedSet(Of KeyValuePair(Of String, Object)), Int32)
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  id: GetValue``1(Cqrs.Repositories.Queries.QueryParameter)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(QueryParameter)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(QueryParameter)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(Cqrs.Repositories.Queries.QueryParameter)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 67
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">queryParameter</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nGets the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterValue\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this QueryParameter queryParameter)
    parameters:
    - id: queryParameter
      type: Cqrs.Repositories.Queries.QueryParameter
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(queryParameter As QueryParameter) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(QueryParameter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(Cqrs.Repositories.Queries.QueryParameter)
  name.vb: GetValue(Of TResult)(QueryParameter)
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  id: GetValue``1(System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(ISet<QueryParameter>, String)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(ISet<QueryParameter>, String)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.ISet<Cqrs.Repositories.Queries.QueryParameter>, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 79
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">collection</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nFilters the provided <span class=\"paramref\">collection</span> where the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterName\" data-throw-if-not-resolved=\"false\"></xref> equals the provided <span class=\"paramref\">parameterName</span>\nthen gets the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterValue\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this ISet<QueryParameter> collection, string parameterName)
    parameters:
    - id: collection
      type: System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter}
    - id: parameterName
      type: System.String
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(collection As ISet(Of QueryParameter), parameterName As String) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(ISet(Of QueryParameter), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.ISet(Of Cqrs.Repositories.Queries.QueryParameter), System.String)
  name.vb: GetValue(Of TResult)(ISet(Of QueryParameter), String)
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.Int32)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.Int32)
  id: GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.Int32)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(SortedSet<QueryParameter>, Int32)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(SortedSet<QueryParameter>, Int32)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.SortedSet<Cqrs.Repositories.Queries.QueryParameter>, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 91
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">collection</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nGets the <xref href=\"Cqrs.Repositories.Queries.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref> at index <span class=\"paramref\">index</span> from the provided <span class=\"paramref\">collection</span>\nthen gets the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterValue\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this SortedSet<QueryParameter> collection, int index)
    parameters:
    - id: collection
      type: System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(collection As SortedSet(Of QueryParameter), index As Integer) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(SortedSet(Of QueryParameter), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.SortedSet(Of Cqrs.Repositories.Queries.QueryParameter), System.Int32)
  name.vb: GetValue(Of TResult)(SortedSet(Of QueryParameter), Int32)
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  commentId: M:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  id: GetValue``1(System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter},System.String)
  isExtensionMethod: true
  parent: Cqrs.Repositories.Queries.QueryPredicateExtensions
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(SortedSet<QueryParameter>, String)
  nameWithType: QueryPredicateExtensions.GetValue<TResult>(SortedSet<QueryParameter>, String)
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue<TResult>(System.Collections.Generic.SortedSet<Cqrs.Repositories.Queries.QueryParameter>, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetValue
    path: Framework/Cqrs/Repositories/Queries/QueryPredicateExtensions.cs
    startLine: 110
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets the value from the provided <span class=\"paramref\">collection</span> cast to <span class=\"typeparamref\">TResult</span>.\n"
  remarks: "\nFilters the provided <span class=\"paramref\">collection</span> where the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterName\" data-throw-if-not-resolved=\"false\"></xref> equals the provided <span class=\"paramref\">parameterName</span>\nthen gets the <xref href=\"Cqrs.Repositories.Queries.QueryParameter.ParameterValue\" data-throw-if-not-resolved=\"false\"></xref> cast to <span class=\"typeparamref\">TResult</span>.\n"
  example: []
  syntax:
    content: public static TResult GetValue<TResult>(this SortedSet<QueryParameter> collection, string parameterName)
    parameters:
    - id: collection
      type: System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
    - id: parameterName
      type: System.String
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TResult)(collection As SortedSet(Of QueryParameter), parameterName As String) As TResult
  overload: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  nameWithType.vb: QueryPredicateExtensions.GetValue(Of TResult)(SortedSet(Of QueryParameter), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue(Of TResult)(System.Collections.Generic.SortedSet(Of Cqrs.Repositories.Queries.QueryParameter), System.String)
  name.vb: GetValue(Of TResult)(SortedSet(Of QueryParameter), String)
references:
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.KeyValuePair`2.Value
  commentId: P:System.Collections.Generic.KeyValuePair`2.Value
- uid: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue*
  commentId: Overload:Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue
  isExternal: false
  name: GetValue
  nameWithType: QueryPredicateExtensions.GetValue
  fullName: Cqrs.Repositories.Queries.QueryPredicateExtensions.GetValue
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections.Generic.KeyValuePair`2.Key
  commentId: P:System.Collections.Generic.KeyValuePair`2.Key
- uid: System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.ISet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<KeyValuePair<String, Object>>
  nameWithType: ISet<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.ISet<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: ISet(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ISet(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: ISet(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.SortedSet{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedSet`1
  name: SortedSet<KeyValuePair<String, Object>>
  nameWithType: SortedSet<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.SortedSet<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: SortedSet(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.SortedSet(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: SortedSet(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SortedSet`1
  commentId: T:System.Collections.Generic.SortedSet`1
  isExternal: true
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  nameWithType.vb: SortedSet(Of T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  name.vb: SortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterValue
  commentId: P:Cqrs.Repositories.Queries.QueryParameter.ParameterValue
- uid: Cqrs.Repositories.Queries.QueryParameter
  commentId: T:Cqrs.Repositories.Queries.QueryParameter
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: QueryParameter
  nameWithType: QueryParameter
  fullName: Cqrs.Repositories.Queries.QueryParameter
- uid: Cqrs.Repositories.Queries.QueryParameter.ParameterName
  commentId: P:Cqrs.Repositories.Queries.QueryParameter.ParameterName
- uid: System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter}
  commentId: T:System.Collections.Generic.ISet{Cqrs.Repositories.Queries.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<QueryParameter>
  nameWithType: ISet<QueryParameter>
  fullName: System.Collections.Generic.ISet<Cqrs.Repositories.Queries.QueryParameter>
  nameWithType.vb: ISet(Of QueryParameter)
  fullName.vb: System.Collections.Generic.ISet(Of Cqrs.Repositories.Queries.QueryParameter)
  name.vb: ISet(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
  commentId: T:System.Collections.Generic.SortedSet{Cqrs.Repositories.Queries.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedSet`1
  name: SortedSet<QueryParameter>
  nameWithType: SortedSet<QueryParameter>
  fullName: System.Collections.Generic.SortedSet<Cqrs.Repositories.Queries.QueryParameter>
  nameWithType.vb: SortedSet(Of QueryParameter)
  fullName.vb: System.Collections.Generic.SortedSet(Of Cqrs.Repositories.Queries.QueryParameter)
  name.vb: SortedSet(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: System.Collections.Generic.SortedSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Repositories.Queries.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: Cqrs.Repositories.Queries.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
