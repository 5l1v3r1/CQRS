### YamlMime:ManagedReference
items:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  id: IDataStore`1
  parent: Cqrs.DataStores
  children:
  - Cqrs.DataStores.IDataStore`1.Add(`0)
  - Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  - Cqrs.DataStores.IDataStore`1.Destroy(`0)
  - Cqrs.DataStores.IDataStore`1.Remove(`0)
  - Cqrs.DataStores.IDataStore`1.RemoveAll
  - Cqrs.DataStores.IDataStore`1.Update(`0)
  langs:
  - csharp
  - vb
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IDataStore
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nA data store capable of being queried and modified.\n"
  example: []
  syntax:
    content: 'public interface IDataStore<TData> : IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable'
    typeParameters:
    - id: TData
    content.vb: >-
      Public Interface IDataStore(Of TData)
          Inherits IOrderedQueryable(Of TData), IDisposable
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  - System.Linq.IQueryable.Expression
  - System.Linq.IQueryable.ElementType
  - System.Linq.IQueryable.Provider
  - System.IDisposable.Dispose
  extensionMethods:
  - Cqrs.DataStores.IDataStore`1.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  - Cqrs.DataStores.IDataStore`1.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  - Cqrs.DataStores.IDataStore`1.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  nameWithType.vb: IDataStore(Of TData)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
- uid: Cqrs.DataStores.IDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(`0)
  id: Add(`0)
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nAdd the provided <span class=\"paramref\">data</span> to the data store and persist the change.\n"
  example: []
  syntax:
    content: void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Add(data As TData)
  overload: Cqrs.DataStores.IDataStore`1.Add*
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
- uid: Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: IDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nAdd the provided <span class=\"paramref\">data</span> to the data store and persist the change.\n"
  example: []
  syntax:
    content: void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Sub Add(data As IEnumerable(Of TData))
  overload: Cqrs.DataStores.IDataStore`1.Add*
  nameWithType.vb: IDataStore(Of TData).Add(IEnumerable(Of TData))
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Remove(`0)
  id: Remove(`0)
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Remove
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nWill mark the <span class=\"paramref\">data</span> as logically (or soft) deleted by setting <xref href=\"Cqrs.Entities.Entity.IsLogicallyDeleted\" data-throw-if-not-resolved=\"false\"></xref> to true in the data store and persist the change.\n"
  example: []
  syntax:
    content: void Remove(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Remove(data As TData)
  overload: Cqrs.DataStores.IDataStore`1.Remove*
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
- uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nRemove the provided <span class=\"paramref\">data</span> (normally by <xref href=\"Cqrs.Entities.IEntity.Rsn\" data-throw-if-not-resolved=\"false\"></xref>) from the data store and persist the change.\n"
  example: []
  syntax:
    content: void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Destroy(data As TData)
  overload: Cqrs.DataStores.IDataStore`1.Destroy*
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore`1.RemoveAll
  id: RemoveAll
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 43
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nRemove all contents (normally by use of a truncate operation) from the data store and persist the change.\n"
  example: []
  syntax:
    content: void RemoveAll()
    content.vb: Sub RemoveAll
  overload: Cqrs.DataStores.IDataStore`1.RemoveAll*
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
- uid: Cqrs.DataStores.IDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Update(`0)
  id: Update(`0)
  parent: Cqrs.DataStores.IDataStore`1
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/DataStores/IDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Cqrs/DataStores/IDataStore.cs
    startLine: 48
  assemblies:
  - Cqrs
  namespace: Cqrs.DataStores
  summary: "\nUpdate the provided <span class=\"paramref\">data</span> in the data store and persist the change.\n"
  example: []
  syntax:
    content: void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Update(data As TData)
  overload: Cqrs.DataStores.IDataStore`1.Update*
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
references:
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TData}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TData>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TData).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TData>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TData).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable.Expression
  commentId: P:System.Linq.IQueryable.Expression
  parent: System.Linq.IQueryable
  isExternal: true
  name: Expression
  nameWithType: IQueryable.Expression
  fullName: System.Linq.IQueryable.Expression
- uid: System.Linq.IQueryable.ElementType
  commentId: P:System.Linq.IQueryable.ElementType
  parent: System.Linq.IQueryable
  isExternal: true
  name: ElementType
  nameWithType: IQueryable.ElementType
  fullName: System.Linq.IQueryable.ElementType
- uid: System.Linq.IQueryable.Provider
  commentId: P:System.Linq.IQueryable.Provider
  parent: System.Linq.IQueryable
  isExternal: true
  name: Provider
  nameWithType: IQueryable.Provider
  fullName: System.Linq.IQueryable.Provider
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  definition: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: Where(Of TData, TDbEntity)(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TData, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TData, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TData, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TData, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TData, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TData, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByName<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(System.String)
  name.vb: GetByName(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  parent: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  definition: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  name: GetByFolder<TData>(String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(System.String)
  name.vb: GetByFolder(Of TData)(String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>)
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>(Cqrs.DataStores.IDataStore<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)(Cqrs.DataStores.IDataStore(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Of TEntity, TDbEntity)(IDataStore(Of TEntity), Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TEntity, TDbEntity>
    nameWithType: SqlDataStoreExtensions.Where<TEntity, TDbEntity>
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where<TEntity, TDbEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where``2(Cqrs.DataStores.IDataStore{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TEntity, TDbEntity)
    nameWithType: SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
    fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions.Where(Of TEntity, TDbEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Sql.DataStores.SqlDataStoreExtensions
  commentId: T:Cqrs.Sql.DataStores.SqlDataStoreExtensions
  parent: Cqrs.Sql.DataStores
  isExternal: false
  name: SqlDataStoreExtensions
  nameWithType: SqlDataStoreExtensions
  fullName: Cqrs.Sql.DataStores.SqlDataStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByName<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByName(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByName(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName<TData>
    nameWithType: BlobStorageStoreExtensions.GetByName<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByName(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByName(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByName(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: BlobStorageStoreExtensions
  nameWithType: BlobStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions
- uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  commentId: M:Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
  isExternal: true
  name: GetByFolder<TData>(IDataStore<TData>, String)
  nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)
  fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>(Cqrs.DataStores.IDataStore<TData>, System.String)
  nameWithType.vb: BlobStorageStoreExtensions.GetByFolder(Of TData)(IDataStore(Of TData), String)
  fullName.vb: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.String)
  name.vb: GetByFolder(Of TData)(IDataStore(Of TData), String)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder<TData>
    nameWithType: BlobStorageStoreExtensions.GetByFolder<TData>
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder<TData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder``1(Cqrs.DataStores.IDataStore{``0},System.String)
    name: GetByFolder(Of TData)
    nameWithType: BlobStorageStoreExtensions.GetByFolder(Of TData)
    fullName: Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.GetByFolder(Of TData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Sql.DataStores
  commentId: N:Cqrs.Sql.DataStores
  isExternal: false
  name: Cqrs.Sql.DataStores
  nameWithType: Cqrs.Sql.DataStores
  fullName: Cqrs.Sql.DataStores
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: Cqrs.DataStores.IDataStore`1.Add*
  commentId: Overload:Cqrs.DataStores.IDataStore`1.Add
  isExternal: false
  name: Add
  nameWithType: IDataStore<TData>.Add
  fullName: Cqrs.DataStores.IDataStore<TData>.Add
  nameWithType.vb: IDataStore(Of TData).Add
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.Entities.Entity.IsLogicallyDeleted
  commentId: P:Cqrs.Entities.Entity.IsLogicallyDeleted
  parent: Cqrs.Entities.Entity
  isExternal: false
  name: IsLogicallyDeleted
  nameWithType: Entity.IsLogicallyDeleted
  fullName: Cqrs.Entities.Entity.IsLogicallyDeleted
- uid: Cqrs.DataStores.IDataStore`1.Remove*
  commentId: Overload:Cqrs.DataStores.IDataStore`1.Remove
  isExternal: false
  name: Remove
  nameWithType: IDataStore<TData>.Remove
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  nameWithType.vb: IDataStore(Of TData).Remove
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove
- uid: Cqrs.Entities.Entity
  commentId: T:Cqrs.Entities.Entity
  parent: Cqrs.Entities
  isExternal: false
  name: Entity
  nameWithType: Entity
  fullName: Cqrs.Entities.Entity
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: Cqrs.Entities.IEntity.Rsn
  commentId: P:Cqrs.Entities.IEntity.Rsn
  parent: Cqrs.Entities.IEntity
  isExternal: false
  name: Rsn
  nameWithType: IEntity.Rsn
  fullName: Cqrs.Entities.IEntity.Rsn
- uid: Cqrs.DataStores.IDataStore`1.Destroy*
  commentId: Overload:Cqrs.DataStores.IDataStore`1.Destroy
  isExternal: false
  name: Destroy
  nameWithType: IDataStore<TData>.Destroy
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  nameWithType.vb: IDataStore(Of TData).Destroy
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll*
  commentId: Overload:Cqrs.DataStores.IDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: IDataStore<TData>.RemoveAll
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  nameWithType.vb: IDataStore(Of TData).RemoveAll
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
- uid: Cqrs.DataStores.IDataStore`1.Update*
  commentId: Overload:Cqrs.DataStores.IDataStore`1.Update
  isExternal: false
  name: Update
  nameWithType: IDataStore<TData>.Update
  fullName: Cqrs.DataStores.IDataStore<TData>.Update
  nameWithType.vb: IDataStore(Of TData).Update
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update
