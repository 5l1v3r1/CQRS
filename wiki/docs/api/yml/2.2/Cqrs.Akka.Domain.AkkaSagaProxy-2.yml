### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2
  commentId: T:Cqrs.Akka.Domain.AkkaSagaProxy`2
  id: AkkaSagaProxy`2
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.Id
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga
  - Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
  langs:
  - csharp
  - vb
  name: AkkaSagaProxy<TAuthenticationToken, TSaga>
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AkkaSagaProxy
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 22
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nA remote proxy to an <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class AkkaSagaProxy<TAuthenticationToken, TSaga> : IAkkaSagaProxy<TSaga>, ISaga<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      Public Class AkkaSagaProxy(Of TAuthenticationToken, TSaga)
          Implements IAkkaSagaProxy(Of TSaga), ISaga(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga)
  name.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga)
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference
  commentId: P:Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference
  id: ActorReference
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: ActorReference
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.ActorReference
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ActorReference
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 31
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nGets the <xref href=\"Akka.Actor.IActorRef\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IActorRef ActorReference { get; }
    parameters: []
    return:
      type: Akka.Actor.IActorRef
    content.vb: Public ReadOnly Property ActorReference As IActorRef
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference*
  implements:
  - Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}.ActorReference
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).ActorReference
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).ActorReference
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga
  commentId: P:Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga
  id: Saga
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: Saga
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Saga
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Saga
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Saga
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 36
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nGets the <code data-dev-comment-type=\"typeparamref\">TSaga</code>.\n"
  example: []
  syntax:
    content: public TSaga Saga { get; protected set; }
    parameters: []
    return:
      type: '{TSaga}'
    content.vb: Public Property Saga As TSaga
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga*
  implements:
  - Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}.Saga
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Saga
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Saga
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Id
  commentId: P:Cqrs.Akka.Domain.AkkaSagaProxy`2.Id
  id: Id
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Id
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Id
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Id
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 43
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nThe identifier of the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual Guid Id { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public Overridable ReadOnly Property Id As Guid
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.Id*
  implements:
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}.Id
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Id
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Id
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
  commentId: P:Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
  id: Version
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Version
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Version
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Version
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 51
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nThe current version of this <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual int Version { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Version As Integer
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.Version*
  implements:
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}.Version
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Version
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Version
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges
  commentId: M:Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges
  id: GetUncommittedChanges
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: GetUncommittedChanges()
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.GetUncommittedChanges()
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.GetUncommittedChanges()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetUncommittedChanges
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 59
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nGet all applied changes that haven&apos;t yet been committed.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<ISagaEvent<TAuthenticationToken>> GetUncommittedChanges()
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
    content.vb: Public Overridable Function GetUncommittedChanges As IEnumerable(Of ISagaEvent(Of TAuthenticationToken))
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges*
  implements:
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}.GetUncommittedChanges
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).GetUncommittedChanges()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).GetUncommittedChanges()
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted
  commentId: M:Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted
  id: MarkChangesAsCommitted
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: MarkChangesAsCommitted()
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.MarkChangesAsCommitted()
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.MarkChangesAsCommitted()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MarkChangesAsCommitted
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 67
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nMark all applied changes as committed, increment <xref href=\"Cqrs.Akka.Domain.AkkaSagaProxy%602.Version\" data-throw-if-not-resolved=\"false\"></xref> and flush the internal collection of changes.\n"
  example: []
  syntax:
    content: public virtual void MarkChangesAsCommitted()
    content.vb: Public Overridable Sub MarkChangesAsCommitted
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted*
  implements:
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}.MarkChangesAsCommitted
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).MarkChangesAsCommitted()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).MarkChangesAsCommitted()
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  id: LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Akka.Domain.AkkaSagaProxy`2
  langs:
  - csharp
  - vb
  name: LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LoadFromHistory
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaSagaProxy.cs
    startLine: 76
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nApply all the <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> in <code data-dev-comment-type=\"paramref\">history</code>\nusing event replay to this instance.\n"
  example: []
  syntax:
    content: public virtual void LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>> history)
    parameters:
    - id: history
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
    content.vb: Public Overridable Sub LoadFromHistory(history As IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  overload: Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory*
  implements:
  - Cqrs.Domain.ISaga{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
references:
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}
  commentId: T:Cqrs.Akka.Domain.IAkkaSagaProxy{`1}
  parent: Cqrs.Akka.Domain
  definition: Cqrs.Akka.Domain.IAkkaSagaProxy`1
  name: IAkkaSagaProxy<TSaga>
  nameWithType: IAkkaSagaProxy<TSaga>
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>
  nameWithType.vb: IAkkaSagaProxy(Of TSaga)
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga)
  name.vb: IAkkaSagaProxy(Of TSaga)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
    name: IAkkaSagaProxy
    nameWithType: IAkkaSagaProxy
    fullName: Cqrs.Akka.Domain.IAkkaSagaProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
    name: IAkkaSagaProxy
    nameWithType: IAkkaSagaProxy
    fullName: Cqrs.Akka.Domain.IAkkaSagaProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.ISaga{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.ISaga`1
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
  commentId: T:Cqrs.Akka.Domain.IAkkaSagaProxy`1
  isExternal: false
  name: IAkkaSagaProxy<TSaga>
  nameWithType: IAkkaSagaProxy<TSaga>
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>
  nameWithType.vb: IAkkaSagaProxy(Of TSaga)
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga)
  name.vb: IAkkaSagaProxy(Of TSaga)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
    name: IAkkaSagaProxy
    nameWithType: IAkkaSagaProxy
    fullName: Cqrs.Akka.Domain.IAkkaSagaProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
    name: IAkkaSagaProxy
    nameWithType: IAkkaSagaProxy
    fullName: Cqrs.Akka.Domain.IAkkaSagaProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Akka.Actor.IActorRef
  commentId: T:Akka.Actor.IActorRef
  parent: Akka.Actor
  isExternal: true
  name: IActorRef
  nameWithType: IActorRef
  fullName: Akka.Actor.IActorRef
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.ActorReference
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).ActorReference
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).ActorReference
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy{`1}.ActorReference
  parent: Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}
  definition: Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  name: ActorReference
  nameWithType: IAkkaSagaProxy<TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.ActorReference
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).ActorReference
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: IAkkaSagaProxy<TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.ActorReference
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).ActorReference
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.Saga
  isExternal: false
  name: Saga
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Saga
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Saga
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Saga
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Saga
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}.Saga
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy{`1}.Saga
  parent: Cqrs.Akka.Domain.IAkkaSagaProxy{{TSaga}}
  definition: Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  name: Saga
  nameWithType: IAkkaSagaProxy<TSaga>.Saga
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.Saga
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).Saga
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).Saga
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  isExternal: false
  name: Saga
  nameWithType: IAkkaSagaProxy<TSaga>.Saga
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.Saga
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).Saga
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).Saga
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Id*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.Id
  isExternal: false
  name: Id
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Id
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Id
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Id
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Id
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}.Id
  commentId: P:Cqrs.Domain.ISaga{`0}.Id
  parent: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISaga`1.Id
  name: Id
  nameWithType: ISaga<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.Id
  nameWithType.vb: ISaga(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Cqrs.Domain.ISaga`1.Id
  commentId: P:Cqrs.Domain.ISaga`1.Id
  isExternal: false
  name: Id
  nameWithType: ISaga<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.Id
  nameWithType.vb: ISaga(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).Id
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Version*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
  isExternal: false
  name: Version
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.Version
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.Version
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).Version
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).Version
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}.Version
  commentId: P:Cqrs.Domain.ISaga{`0}.Version
  parent: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISaga`1.Version
  name: Version
  nameWithType: ISaga<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.Version
  nameWithType.vb: ISaga(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).Version
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Domain.ISaga`1.Version
  commentId: P:Cqrs.Domain.ISaga`1.Version
  isExternal: false
  name: Version
  nameWithType: ISaga<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.Version
  nameWithType.vb: ISaga(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).Version
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.GetUncommittedChanges
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.GetUncommittedChanges
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).GetUncommittedChanges
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).GetUncommittedChanges
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}.GetUncommittedChanges
  commentId: M:Cqrs.Domain.ISaga{`0}.GetUncommittedChanges
  parent: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISaga`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: ISaga<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: ISaga(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: ISaga<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: ISaga(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISagaEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<ISagaEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.ISagaEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of ISagaEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of ISagaEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISaga`1.GetUncommittedChanges
  commentId: M:Cqrs.Domain.ISaga`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: ISaga<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: ISaga(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: ISaga<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: ISaga(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
  commentId: P:Cqrs.Akka.Domain.AkkaSagaProxy`2.Version
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.MarkChangesAsCommitted
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.MarkChangesAsCommitted
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).MarkChangesAsCommitted
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).MarkChangesAsCommitted
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.ISaga{`0}.MarkChangesAsCommitted
  parent: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: ISaga<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: ISaga(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: ISaga<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: ISaga(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: ISaga<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: ISaga(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: ISaga<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: ISaga(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory*
  commentId: Overload:Cqrs.Akka.Domain.AkkaSagaProxy`2.LoadFromHistory
  isExternal: false
  name: LoadFromHistory
  nameWithType: AkkaSagaProxy<TAuthenticationToken, TSaga>.LoadFromHistory
  fullName: Cqrs.Akka.Domain.AkkaSagaProxy<TAuthenticationToken, TSaga>.LoadFromHistory
  nameWithType.vb: AkkaSagaProxy(Of TAuthenticationToken, TSaga).LoadFromHistory
  fullName.vb: Cqrs.Akka.Domain.AkkaSagaProxy(Of TAuthenticationToken, TSaga).LoadFromHistory
- uid: Cqrs.Domain.ISaga{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.ISaga{`0}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.ISaga{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  name: LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  nameWithType: ISaga<TAuthenticationToken>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: ISaga(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
    name: LoadFromHistory
    nameWithType: ISaga<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
    name: LoadFromHistory
    nameWithType: ISaga(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  nameWithType: ISaga<TAuthenticationToken>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: ISaga(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
    name: LoadFromHistory
    nameWithType: ISaga<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.ISaga<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.ISagaEvent{`0}})
    name: LoadFromHistory
    nameWithType: ISaga(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.ISaga(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
