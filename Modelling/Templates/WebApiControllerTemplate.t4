<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
classNamespace = classNamespace.Substring(0, classNamespace.LastIndexOf("."));
string className = ClassifierName(this.Element);
if (className.EndsWith("Service"))
	className = className.Substring(0, className.Length - 7);
string areaName = classNamespace.Substring(classNamespace.LastIndexOf(".") + 1);

// using statements
WriteUsingStatements(this.Element);
#>
using System.Web.Http;

using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using Cqrs.WebApi;

using <#= classNamespace #>;
using <#= classNamespace #>.Commands;
using <#= classNamespace #>.Repositories;
using <#= classNamespace #>.Services;

namespace <#= classNamespace #>.Controllers
{
<#
	// Class and Attributes
#>
<# WriteSummaryComment(this.Element.Description) ; #>
	/// <remarks>
	/// Ensure you include the nuget package Cqrs.WebApi.
	/// For automatic help documentation generation visit 
	/// https://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/creating-api-help-pages
	/// and start at the section "Adding Help Pages to an Existing Project".
	/// Then enable XML documentation for all projects for both DEBUG and RELEASE builds.
	/// </remarks>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>Controller
	{<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodResponseTypeName = "IServiceResponseWithResultData<";
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (IsMethodTypeEntity(collectionMethod))
			{
				string methodTypeNameSuffix = string.Empty;
				while (methodTypeName.EndsWith(">"))
				{
					methodTypeNameSuffix = string.Concat(methodTypeNameSuffix, methodTypeName.Substring(methodTypeName.Length - 1));
					methodTypeName = methodTypeName.Substring(0, methodTypeName.Length - 1);
				}
				if (methodTypeName.EndsWith("Entity"))
					methodTypeName = string.Format("{0}{1}", methodTypeName, methodTypeNameSuffix);
				else
					methodTypeName = string.Format("{0}Entity{1}", methodTypeName, methodTypeNameSuffix);
			}
			if (methodTypeName == "void")
			{
				methodResponseTypeName = "IServiceResponse";
				methodTypeName = string.Empty;
			}
			else
			{
				if (!methodTypeName.Contains("<"))
					methodTypeName = "Entities." + methodTypeName;
				methodTypeName = methodTypeName + ">";
			}

			string methodParameterList = GetMethodParameterList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterList))
				methodParameterList = methodParameterList + ", ";

			string methodParameterNameList = GetMethodParameterNameList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterNameList))
				methodParameterNameList = methodParameterNameList + ", ";

			string parameterName = ClassifierName(this.Element) + collectionMethod.Name + "Parameters";
			string rawParameterName = parameterName;

			var returnParameter = collectionMethod.OwnedParameters.SingleOrDefault(p => p.Direction == ParameterDirectionKind.Return);
			var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return);
			bool hasData = parameters.Any();
			if (parameters.Any())
				parameterName = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters>", authenticationTokenType, ClassifierName(this.Element), collectionMethod.Name);
			else
				parameterName = string.Format("IServiceRequest<{0}>", authenticationTokenType);

		string relationshipName = collectionMethod.Name;
		var serviceMethod = collectionMethod.AppliedStereotypes.Single(property => property.Name == "ServiceMethod");
		string httpMethodAttributeValue = serviceMethod.PropertyInstances.Single(property => property.Name == "WebApiVerb").Value;
		string responseDataType = methodResponseTypeName + methodTypeName;
		string route = (serviceMethod.PropertyInstances.Any(property => property.Name == "IsWebApiUrlRsned" && property.Value == "true") ? "rsn:guid/" : string.Empty) + collectionMethod.Name;
		if (!serviceMethod.PropertyInstances.Any(property => property.Name == "AutoGenerateWebApiRoute" && property.Value == "true"))
			route = serviceMethod.PropertyInstances.Single(property => property.Name == "WebApiRoute").Value;
#>

		#region <#= relationshipName #>

<# WriteSummaryComment(collectionMethod.Description) ; #>
		[Route("<#= route #>")]
		[<#= httpMethodAttributeValue #>]
		public virtual System.Net.Http.HttpResponseMessage <#= relationshipName #>(<#
		if (hasData)
		{
#>[FromBody]<#= rawParameterName #> parameters<#
		}
#>)
		{
			return CompleteResponse(<#= relationshipName #>(CreateRequest<#= hasData ? "WithData" : null #><<#= authenticationTokenType #><#= hasData ? ", " + rawParameterName : null #>>(<#= hasData ? "() => parameters" : null #>)));
		}

		<#= responseDataType #> I<#= className #>Service.<#= relationshipName #>(<#= parameterName #> serviceRequest)
		{
			return <#= relationshipName #>(serviceRequest);
		}

<# WriteSummaryComment(collectionMethod.Description) ; #>
		protected virtual <#= responseDataType #> <#= relationshipName #>(<#= parameterName #> serviceRequest)
		{
			Logger.LogDebug("Entered", "<#= className #>/<#= relationshipName #>");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			<#= methodResponseTypeName #><#= methodTypeName #> results = null;
<#
		if (hasData)
		{
#>
			// <#= parameterName #> item = serviceRequest.Data;
<#
		}
#>
			On<#= collectionMethod.Name #>(serviceRequest, ref results);
			Logger.LogDebug("Exited", "<#= className #>/<#= relationshipName #>");
			CompleteResponse(results);
			return results;
		}

		partial void On<#= collectionMethod.Name #>(<#= parameterName #> serviceRequest, ref <#= methodResponseTypeName #><#= methodTypeName #> results);

		#endregion
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>