### YamlMime:ManagedReference
items:
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  commentId: T:Cqrs.Tests.Substitutes.TestSnapshotAggregate
  id: TestSnapshotAggregate
  parent: Cqrs.Tests.Substitutes
  children:
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor(System.Nullable{System.Guid})
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  langs:
  - csharp
  - vb
  name: TestSnapshotAggregate
  nameWithType: TestSnapshotAggregate
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestSnapshotAggregate
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 6
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public class TestSnapshotAggregate : SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>, IAggregateRoot<ISingleSignOnToken>'
    content.vb: >-
      Public Class TestSnapshotAggregate
          Inherits SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot)
          Implements IAggregateRoot(Of ISingleSignOnToken)
  inheritance:
  - System.Object
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  - Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  implements:
  - Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  inheritedMembers:
  - Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.GetSnapshot
  - Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.Restore(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  - Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.CreateSnapshot
  - Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Id
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Version
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.GetUncommittedChanges
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.MarkChangesAsCommitted
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  - Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.ApplyChange(Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor(System.Nullable{System.Guid})
  commentId: M:Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor(System.Nullable{System.Guid})
  id: '#ctor(System.Nullable{System.Guid})'
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: TestSnapshotAggregate(Nullable<Guid>)
  nameWithType: TestSnapshotAggregate.TestSnapshotAggregate(Nullable<Guid>)
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.TestSnapshotAggregate(System.Nullable<System.Guid>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 8
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public TestSnapshotAggregate(Guid? id = null)
    parameters:
    - id: id
      type: System.Nullable{System.Guid}
    content.vb: Public Sub New(id As Guid? = Nothing)
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor*
  nameWithType.vb: TestSnapshotAggregate.TestSnapshotAggregate(Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestSnapshotAggregate.TestSnapshotAggregate(System.Nullable(Of System.Guid))
  name.vb: TestSnapshotAggregate(Nullable(Of Guid))
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
  commentId: P:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
  id: Restored
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: Restored
  nameWithType: TestSnapshotAggregate.Restored
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Restored
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 13
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public bool Restored { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Restored As Boolean
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
  commentId: P:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
  id: Loaded
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: Loaded
  nameWithType: TestSnapshotAggregate.Loaded
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Loaded
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 14
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public bool Loaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Loaded As Boolean
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
  commentId: P:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
  id: Number
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: Number
  nameWithType: TestSnapshotAggregate.Number
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Number
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 15
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public int Number { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Number As Integer
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot
  commentId: M:Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot
  id: CreateSnapshot
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: CreateSnapshot()
  nameWithType: TestSnapshotAggregate.CreateSnapshot()
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSnapshot
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 17
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: protected override TestSnapshotAggregateSnapshot CreateSnapshot()
    return:
      type: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    content.vb: Protected Overrides Function CreateSnapshot As TestSnapshotAggregateSnapshot
  overridden: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.CreateSnapshot
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  commentId: M:Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  id: RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: RestoreFromSnapshot(TestSnapshotAggregateSnapshot)
  nameWithType: TestSnapshotAggregate.RestoreFromSnapshot(TestSnapshotAggregateSnapshot)
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RestoreFromSnapshot
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 22
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: protected override void RestoreFromSnapshot(TestSnapshotAggregateSnapshot snapshot)
    parameters:
    - id: snapshot
      type: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    content.vb: Protected Overrides Sub RestoreFromSnapshot(snapshot As TestSnapshotAggregateSnapshot)
  overridden: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething
  commentId: M:Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething
  id: DoSomething
  parent: Cqrs.Tests.Substitutes.TestSnapshotAggregate
  langs:
  - csharp
  - vb
  name: DoSomething()
  nameWithType: TestSnapshotAggregate.DoSomething()
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DoSomething
    path: Framework/Cqrs.Tests/Substitutes/TestSnapshotAggregate.cs
    startLine: 34
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public void DoSomething()
    content.vb: Public Sub DoSomething
  overload: Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Tests.Substitutes
  commentId: N:Cqrs.Tests.Substitutes
  isExternal: false
  name: Cqrs.Tests.Substitutes
  nameWithType: Cqrs.Tests.Substitutes
  fullName: Cqrs.Tests.Substitutes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  commentId: T:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.AggregateRoot`1
  name: AggregateRoot<ISingleSignOnToken>
  nameWithType: AggregateRoot<ISingleSignOnToken>
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken)
  name.vb: AggregateRoot(Of ISingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  commentId: T:Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  parent: Cqrs.Snapshots
  definition: Cqrs.Snapshots.SnapshotAggregateRoot`2
  name: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>
  nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>
  nameWithType.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  name.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  commentId: T:Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<ISingleSignOnToken>
  nameWithType: IAggregateRoot<ISingleSignOnToken>
  fullName: Cqrs.Domain.IAggregateRoot<Cqrs.Authentication.ISingleSignOnToken>
  nameWithType.vb: IAggregateRoot(Of ISingleSignOnToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken)
  name.vb: IAggregateRoot(Of ISingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.GetSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.GetSnapshot
  parent: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  definition: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  name: GetSnapshot()
  nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.GetSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.GetSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).GetSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).GetSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.Restore(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.Restore(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  parent: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  definition: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  name: Restore(TestSnapshotAggregateSnapshot)
  nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.Restore(TestSnapshotAggregateSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.Restore(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  nameWithType.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).Restore(TestSnapshotAggregateSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).Restore(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
    name: Restore
    nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.Restore
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.Restore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
    name: Restore
    nameWithType: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).Restore
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).Restore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.CreateSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.CreateSnapshot
  parent: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  definition: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  name: CreateSnapshot()
  nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.CreateSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.CreateSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).CreateSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).CreateSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  parent: Cqrs.Snapshots.SnapshotAggregateRoot{Cqrs.Authentication.ISingleSignOnToken,Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot}
  definition: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  name: RestoreFromSnapshot(TestSnapshotAggregateSnapshot)
  nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.RestoreFromSnapshot(TestSnapshotAggregateSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  nameWithType.vb: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).RestoreFromSnapshot(TestSnapshotAggregateSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot(Of ISingleSignOnToken, TestSnapshotAggregateSnapshot).RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot).RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
    name: TestSnapshotAggregateSnapshot
    nameWithType: TestSnapshotAggregateSnapshot
    fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Id
  commentId: P:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Id
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.Id
  name: Id
  nameWithType: AggregateRoot<ISingleSignOnToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.Id
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).Id
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Version
  commentId: P:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.Version
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.Version
  name: Version
  nameWithType: AggregateRoot<ISingleSignOnToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.Version
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).Version
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.GetUncommittedChanges
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<ISingleSignOnToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<ISingleSignOnToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of ISingleSignOnToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.MarkChangesAsCommitted
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<ISingleSignOnToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<ISingleSignOnToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of ISingleSignOnToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  commentId: M:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  name: LoadFromHistory(IEnumerable<IEvent<ISingleSignOnToken>>)
  nameWithType: AggregateRoot<ISingleSignOnToken>.LoadFromHistory(IEnumerable<IEvent<ISingleSignOnToken>>)
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<Cqrs.Authentication.ISingleSignOnToken>>)
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).LoadFromHistory(IEnumerable(Of IEvent(Of ISingleSignOnToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of Cqrs.Authentication.ISingleSignOnToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of ISingleSignOnToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<ISingleSignOnToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of ISingleSignOnToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.ApplyChange(Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken})
  commentId: M:Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}.ApplyChange(Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken})
  parent: Cqrs.Domain.AggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  name: ApplyChange(IEvent<ISingleSignOnToken>)
  nameWithType: AggregateRoot<ISingleSignOnToken>.ApplyChange(IEvent<ISingleSignOnToken>)
  fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.ApplyChange(Cqrs.Events.IEvent<Cqrs.Authentication.ISingleSignOnToken>)
  nameWithType.vb: AggregateRoot(Of ISingleSignOnToken).ApplyChange(IEvent(Of ISingleSignOnToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).ApplyChange(Cqrs.Events.IEvent(Of Cqrs.Authentication.ISingleSignOnToken))
  name.vb: ApplyChange(IEvent(Of ISingleSignOnToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<ISingleSignOnToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of ISingleSignOnToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.AggregateRoot`1
  commentId: T:Cqrs.Domain.AggregateRoot`1
  isExternal: false
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
  commentId: T:Cqrs.Snapshots.SnapshotAggregateRoot`2
  isExternal: false
  name: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  name.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots
  commentId: N:Cqrs.Snapshots
  isExternal: false
  name: Cqrs.Snapshots
  nameWithType: Cqrs.Snapshots
  fullName: Cqrs.Snapshots
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  isExternal: false
  name: GetSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  isExternal: false
  name: Restore(TSnapshot)
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore(TSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore(TSnapshot)
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore(TSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore(TSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
    name: Restore
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
    name: Restore
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  isExternal: false
  name: CreateSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  isExternal: false
  name: RestoreFromSnapshot(TSnapshot)
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.Id
  commentId: P:Cqrs.Domain.AggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: AggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Domain.AggregateRoot`1.Version
  commentId: P:Cqrs.Domain.AggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: AggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.#ctor
  isExternal: false
  name: TestSnapshotAggregate
  nameWithType: TestSnapshotAggregate.TestSnapshotAggregate
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.TestSnapshotAggregate
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
  isExternal: false
  name: Restored
  nameWithType: TestSnapshotAggregate.Restored
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Restored
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
  isExternal: false
  name: Loaded
  nameWithType: TestSnapshotAggregate.Loaded
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Loaded
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
  isExternal: false
  name: Number
  nameWithType: TestSnapshotAggregate.Number
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.Number
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot
  isExternal: false
  name: CreateSnapshot
  nameWithType: TestSnapshotAggregate.CreateSnapshot
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.CreateSnapshot
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  commentId: T:Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
  parent: Cqrs.Tests.Substitutes
  isExternal: false
  name: TestSnapshotAggregateSnapshot
  nameWithType: TestSnapshotAggregateSnapshot
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot
  isExternal: false
  name: RestoreFromSnapshot
  nameWithType: TestSnapshotAggregate.RestoreFromSnapshot
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.RestoreFromSnapshot
- uid: Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething*
  commentId: Overload:Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething
  isExternal: false
  name: DoSomething
  nameWithType: TestSnapshotAggregate.DoSomething
  fullName: Cqrs.Tests.Substitutes.TestSnapshotAggregate.DoSomething
