<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Import Namespace="System.Text" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Include File="DeeperIntoTheDecisionTree.t4" #>
<#@ Output Extension=".cs" #>

<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Saga");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
WriteUsingStatements(this.Element);
string aggregateTechnology = GetAggregateTechnology(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "AkkaSaga<" + authenticationTokenType + ">";
#>using Akka.Actor;
using Cqrs.Akka.Domain;
<#
		break;
	default:
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "Saga<" + authenticationTokenType + ">";
		break;
}
#>
using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Configuration;
using Cqrs.Domain;
using Cqrs.Events;
using Cqrs.Snapshots;

namespace <#= classNamespace #>
{
<#
	IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);

	// Class and Attributes
#>
<# WriteSummaryComment(this.Element.Description); #>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>
		: <#= baseClass #>
	{
<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.SourceElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
				var commandLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Command");
				// If this is a command association, don't add a property for it as it's an command definition
				if (commandLink != null)
					continue;
			}
#>
<# WriteSummaryComment(collectionProperty.Description); #>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }

<#
		}
#>
// ReSharper disable UnusedMember.Local
		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>()
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: base(null, null, null, null, null)
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>

<#
IList<IOperation> collectionMethods = GetMethodList(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
#>
			// Methods
<#
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
			Receive<<#= collectionMethod.Name #>Command>(command => Execute(<#= collectionMethod.Name #>, command));
<#
		}

#>
			// Relationships
<#
		// Relationships
		foreach(IAssociation relationship in relationships)
		{
			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
#>
			Receive<<#= ((INamedElement)relationship.SourceElement).Name #>Command>(command => Execute(<#= relationshipName #>, command));
<#
		}
		break;
	default:
		// for now do nothing
		break;
}
#>
		}

		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>(IDependencyResolver dependencyResolver, ILogger logger)
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: this()
<#
		break;
	default:
#>
			: base(dependencyResolver, logger)
<#
		break;
}
#>
		{
<#
	if (aggregateTechnology == "Akka")
	{
#>
			UnitOfWork = DependencyResolver.Resolve<IUnitOfWork<<#= authenticationTokenType #>>>();
			Repository = DependencyResolver.Resolve<IAkkaRepository<<#= authenticationTokenType #>>>();
			CorrelationIdHelper = DependencyResolver.Resolve<ICorrelationIdHelper>();
			AuthenticationTokenHelper = DependencyResolver.Resolve<IAuthenticationTokenHelper<<#= authenticationTokenType #>>>();

<#
	}
#>
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
// ReSharper restore UnusedMember.Local

		public <#= className #>(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn)
			: this(dependencyResolver, logger)
		{
			Id = rsn;
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
<#
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			bool autoGenerated = collectionMethod
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			bool isSimple = false;
			string eventName = null;
			var methodStereoTypeProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "SagaMethod");
			if (methodStereoTypeProperties != null)
			{
				isSimple = methodStereoTypeProperties.PropertyInstances.Any(property => property.Name == "SagaMethodType" && property.Value == "Simple");
				if (isSimple)
					eventName = methodStereoTypeProperties.PropertyInstances.Single(property => property.Name == "EventName").Value;
			}
#>
<#
			if (aggregateTechnology == "Akka")
			{
#>
		public virtual void <#= collectionMethod.Name #>(<#= collectionMethod.Name #>Command command)
		{
			<#= collectionMethod.Name #>(<#
				var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return).ToList();
				var methodBody = new System.Text.StringBuilder();
				int akkaIndex = 0;
				foreach (IParameter collectionProperty in parameters)
				{
					if (akkaIndex > 0)
						methodBody.Append(", ");
					akkaIndex++;
					methodBody.Append("command.");
					methodBody.Append(collectionProperty.Name);
				}
#><#= methodBody.ToString() #>);
		}
<#
			}
#>

		public virtual void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			Logger.LogDebug("Entered", "<#= className #>/<#= collectionMethod.Name #>");
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
				string applyEventParameters = GetMethodParameterNameList(collectionMethod);
				if (!string.IsNullOrWhiteSpace(applyEventParameters))
					applyEventParameters = string.Format(", {0}", applyEventParameters);
#>
			Logger.LogDebug("Applying event", "<#= className #>/<#= collectionMethod.Name #>/<#= eventName #>");
			ApplyChange(new <#= eventName #>(Rsn<#= applyEventParameters #>));
<#
			}
			else
			{
#>
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
<#
			}
#>
			Logger.LogDebug("Exited", "<#= className #>/<#= collectionMethod.Name #>");
		}
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
#>
		private void Apply(<#= eventName #> @event)
		{
			OnApply(@event);
		}
		partial void OnApply(<#= eventName #> @event);
<#
			}
			else
			{
#>
		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
			}
#>

<#
		}

		// Relationship based methods

		foreach(IAssociation relationship in relationships)
		{
			bool autoGenerated = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			string sourceElementName = GetNamespace(((INamedElement)relationship.SourceElement).Namespace) + "." + ((INamedElement)relationship.SourceElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
			bool isEvent = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "Event");
			if (isEvent && relationshipName.EndsWith("Event"))
				relationshipName = relationshipName.Substring(0, relationshipName.Length - 5);

			if (aggregateTechnology == "Akka")
			{
#>
		public virtual void <#= relationshipName #>(<#= ((INamedElement)relationship.SourceElement).Name #>Command command)
		{
			<#= relationshipName #>(<#
				var methodBody = new System.Text.StringBuilder();
				int akkaIndex = 0;
				foreach (IProperty relationshipProperty in relationshipProperties)
				{
					if (akkaIndex > 0)
						methodBody.Append(", ");
					akkaIndex++;
					methodBody.Append("command.");
					methodBody.Append(relationshipProperty.Name);
				}
#><#= methodBody.ToString() #>);
		}
<#
			}
#>

<# WriteSummaryComment(relationship.Description); #>
		public virtual void Handle(<#= sourceElementName #> @event)
		{
			Logger.LogDebug("Entered", "<#= className #>/Handle/<#= relationshipName #>");
<#
			var activity = this.Element.Package.OwnedElements
				.Where(x => x is IActivity)
				.Cast<IActivity>()
				.SingleOrDefault(x => x.Name == relationshipName);

			if (activity != null)
			{
				var initialNode = activity.Nodes.SingleOrDefault(x => x is InitialNode);
				if (initialNode != null)
				{
					var commandNode = initialNode.Outgoings
						.Where(edge => edge.Target is IAcceptEventAction)
						.Select(edge => edge.Target)
						.Cast<IAcceptEventAction>()
						.SingleOrDefault();
					if (commandNode != null)
					{
						var commandPin = commandNode.Inputs
							.Where(x => x.Type is IClass)
							.Select(x=> x.Type)
							.Cast<IClass>()
							.SingleOrDefault(x => x.Name == ((INamedElement)relationship.SourceElement).Name && x.AppliedStereotypes.SingleOrDefault(property => property.Name == "Command") != null);
						if (commandPin != null)
						{
							string onMethodSignatures = DeeperIntoTheDecisionTree(commandNode, 1, className, relationshipName, relationshipProperties);
#>

			Logger.LogDebug("Exited", "<#= className #>/Handle/<#= relationshipName #>");
		}
<#
							Write(onMethodSignatures);
							continue;
						}
					}
				}
			}
#>

			IList<ICommand<<#= authenticationTokenType #>>> commandsToPublish = new List<ICommand<<#= authenticationTokenType #>>>();
			OnHandle(@event, commandsToPublish);

			foreach(ICommand<<#= authenticationTokenType #>> commandToPublish in commandsToPublish)
			{
				ICommand<<#= authenticationTokenType #>> commandToPublishMaybe = commandToPublish;
				PrePublish<#= relationshipName #>(@event, ref commandToPublishMaybe);
				if (commandToPublishMaybe != null)
					QueueCommand(commandToPublishMaybe);
			}

			ApplyChange(@event);

			Logger.LogDebug("Exited", "<#= className #>/Handle/<#= relationshipName #>");
		}

		partial void OnHandle(<#= sourceElementName #> @event, IList<ICommand<<#= authenticationTokenType #>>> commandsToPublish);

		partial void PrePublish<#= relationshipName #>(<#= sourceElementName #> @event, ref ICommand<<#= authenticationTokenType #>> commandToPublish);
<#
		}
#>

		<#= GetGeneratedCodeAttribute() #>
		<#= GetServiceContractAttribute(this.Element) #>
		public partial class <#= className #>Snapshot : Snapshot
		{<#
		// Properties
		foreach(IProperty collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
				var commandLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Command");
				// If this is a command association, don't add a property for it as it's an command definition
				if (commandLink != null)
					continue;
			}
#>

<# WriteSummaryComment(collectionProperty.Description); #>
			<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }
<#
		}
#>
		}

		public partial class Handler
		{
			protected ILogger Logger { get; private set; }

			protected IDependencyResolver DependencyResolver { get; private set; }

			protected ISagaUnitOfWork<Guid> UnitOfWork { get; private set; }

			public Handler(ISagaUnitOfWork<Guid> unitOfWork, IDependencyResolver dependencyResolver, ILogger logger)
				: this(dependencyResolver, logger)
			{
				UnitOfWork = unitOfWork;
			}

			public Handler(IDependencyResolver dependencyResolver, ILogger logger)
			{
				DependencyResolver = dependencyResolver;
				Logger = logger;
			}
		}
<#
		// Relationship based handlers

		foreach(IAssociation relationship in relationships)
		{
			bool autoGenerated = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			string sourceElementName = GetNamespace(((INamedElement)relationship.SourceElement).Namespace) + "." + ((INamedElement)relationship.SourceElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
			bool isEvent = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "Event");
			string fullEventName = string.Format("{0}{1}", GetNamespace(((INamedElement)relationship.MemberEnds.Single(x => x.Type != this.Element)).Namespace), relationshipName);
#>

		public partial class Handler
			: IEventHandler<<#= authenticationTokenType #>, <#= fullEventName #>>
		{
			#region Implementation of IEventHandler<in <#= fullEventName #>>

			public void Handle(<#= fullEventName #> @event)
			{
				bool continueExecution = true;
				OnHandle(@event, ref continueExecution);
				if (continueExecution)
				{
					Guid rsn = @event.Rsn;
					<#= className #> item = null;
					bool createSagaIfNotFound = true;
					OnHandle(@event, ref item, ref createSagaIfNotFound);
					if (item == null)
					{
						try
						{
							item = UnitOfWork.Get<<#= className #>>(@event.Rsn);
						}
						catch (Cqrs.Domain.Exceptions.SagaNotFoundException<<#= className #>, <#= authenticationTokenType #>> exception)
						{
							if (!createSagaIfNotFound)
								throw;
							item = new <#= className #>(DependencyResolver, Logger, @event.Rsn == Guid.Empty ? Guid.NewGuid() : @event.Rsn);
							UnitOfWork.Add(item);
						}
					}
					item.Handle(@event);
					OnHandled(@event, item);
					OnAddToUnitOfWork(@event, item);
					UnitOfWork.Add(item);
					OnAddedToUnitOfWork(@event, item);
					OnCommit(@event, item);
					UnitOfWork.Commit();
					OnCommited(@event, item);
				}
			}

			#endregion

			partial void OnHandle(<#= fullEventName #> @event, ref bool continueExecution);

			partial void OnHandle(<#= fullEventName #> @event, ref <#= className #> item, ref bool createSagaIfNotFound);

			partial void OnHandled(<#= fullEventName #> @event, <#= className #> item);

			partial void OnAddToUnitOfWork(<#= fullEventName #> @event, <#= className #> item);

			partial void OnAddedToUnitOfWork(<#= fullEventName #> @event, <#= className #> item);

			partial void OnCommit(<#= fullEventName #> @event, <#= className #> item);

			partial void OnCommited(<#= fullEventName #> @event, <#= className #> item);
		}
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Saga");
	}
#>