### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  commentId: T:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  id: TestEventSuccessHandler
  parent: Cqrs.Azure.ServiceBus.Tests.Integration
  children:
  - Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}})
  - Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  - Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  langs:
  - csharp
  - vb
  name: TestEventSuccessHandler
  nameWithType: TestEventSuccessHandler
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  type: Class
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestEventSuccessHandler
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
    startLine: 18
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nA Test <xref href=\"Cqrs.Messages.IMessageHandler%601\" data-throw-if-not-resolved=\"false\"></xref> for handling <xref href=\"Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class TestEventSuccessHandler : IMessageHandler<TestEvent>, IHandler'
    content.vb: >-
      Public Class TestEventSuccessHandler

          Implements IMessageHandler(Of TestEvent), IHandler
  inheritance:
  - System.Object
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}
  - Cqrs.Messages.IHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}})
  commentId: M:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}})
  id: '#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}})'
  parent: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  langs:
  - csharp
  - vb
  name: TestEventSuccessHandler(IDictionary<Guid, Tuple<Boolean, Exception>>)
  nameWithType: TestEventSuccessHandler.TestEventSuccessHandler(IDictionary<Guid, Tuple<Boolean, Exception>>)
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestEventSuccessHandler(System.Collections.Generic.IDictionary<System.Guid, System.Tuple<System.Boolean, System.Exception>>)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
    startLine: 24
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nInstantiate and initialise a new <xref href=\"Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler\" data-throw-if-not-resolved=\"false\"></xref> specifying the test flag container.\n"
  example: []
  syntax:
    content: public TestEventSuccessHandler(IDictionary<Guid, Tuple<bool, Exception>> testResponse)
    parameters:
    - id: testResponse
      type: System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}}
      description: The test flag container.
    content.vb: Public Sub New(testResponse As IDictionary(Of Guid, Tuple(Of Boolean, Exception)))
  overload: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor*
  nameWithType.vb: TestEventSuccessHandler.TestEventSuccessHandler(IDictionary(Of Guid, Tuple(Of Boolean, Exception)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestEventSuccessHandler(System.Collections.Generic.IDictionary(Of System.Guid, System.Tuple(Of System.Boolean, System.Exception)))
  name.vb: TestEventSuccessHandler(IDictionary(Of Guid, Tuple(Of Boolean, Exception)))
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  commentId: P:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  id: TestResponse
  parent: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  langs:
  - csharp
  - vb
  name: TestResponse
  nameWithType: TestEventSuccessHandler.TestResponse
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  type: Property
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestResponse
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
    startLine: 32
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nA local reference to the test flag container.\n"
  example: []
  syntax:
    content: protected IDictionary<Guid, Tuple<bool, Exception>> TestResponse { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}}
    content.vb: Protected ReadOnly Property TestResponse As IDictionary(Of Guid, Tuple(Of Boolean, Exception))
  overload: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  commentId: M:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  id: Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  parent: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  langs:
  - csharp
  - vb
  name: Handle(TestEvent)
  nameWithType: TestEventSuccessHandler.Handle(TestEvent)
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  type: Method
  source:
    remote:
      path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Azure/Tests/Cqrs.Azure.ServiceBus.Tests.Integration/TestEventSuccessHandler.cs
    startLine: 39
  assemblies:
  - Cqrs.Azure.ServiceBus.Tests.Integration
  namespace: Cqrs.Azure.ServiceBus.Tests.Integration
  summary: "\nSets a value into <xref href=\"Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse\" data-throw-if-not-resolved=\"false\"></xref> so it can be reported back to the test class.\n"
  example: []
  syntax:
    content: public void Handle(TestEvent message)
    parameters:
    - id: message
      type: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
    content.vb: Public Sub Handle(message As TestEvent)
  overload: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Cqrs.Messages.IMessageHandler`1
  commentId: T:Cqrs.Messages.IMessageHandler`1
  isExternal: false
  name: IMessageHandler<TMessage>
  nameWithType: IMessageHandler<TMessage>
  fullName: Cqrs.Messages.IMessageHandler<TMessage>
  nameWithType.vb: IMessageHandler(Of TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage)
  name.vb: IMessageHandler(Of TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  commentId: T:Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  parent: Cqrs.Azure.ServiceBus.Tests.Unit
  isExternal: false
  name: TestEvent
  nameWithType: TestEvent
  fullName: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
- uid: Cqrs.Azure.ServiceBus.Tests.Integration
  commentId: N:Cqrs.Azure.ServiceBus.Tests.Integration
  isExternal: false
  name: Cqrs.Azure.ServiceBus.Tests.Integration
  nameWithType: Cqrs.Azure.ServiceBus.Tests.Integration
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<TestEvent>
  nameWithType: IMessageHandler<TestEvent>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent>
  nameWithType.vb: IMessageHandler(Of TestEvent)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  name.vb: IMessageHandler(Of TestEvent)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
    name: TestEvent
    nameWithType: TestEvent
    fullName: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
    name: TestEvent
    nameWithType: TestEvent
    fullName: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IHandler
  commentId: T:Cqrs.Messages.IHandler
  parent: Cqrs.Messages
  isExternal: false
  name: IHandler
  nameWithType: IHandler
  fullName: Cqrs.Messages.IHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.Tests.Unit
  commentId: N:Cqrs.Azure.ServiceBus.Tests.Unit
  isExternal: false
  name: Cqrs.Azure.ServiceBus.Tests.Unit
  nameWithType: Cqrs.Azure.ServiceBus.Tests.Unit
  fullName: Cqrs.Azure.ServiceBus.Tests.Unit
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  commentId: T:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
  isExternal: false
  name: TestEventSuccessHandler
  nameWithType: TestEventSuccessHandler
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor*
  commentId: Overload:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.#ctor
  isExternal: false
  name: TestEventSuccessHandler
  nameWithType: TestEventSuccessHandler.TestEventSuccessHandler
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestEventSuccessHandler
- uid: System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,System.Tuple{System.Boolean,System.Exception}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, Tuple<Boolean, Exception>>
  nameWithType: IDictionary<Guid, Tuple<Boolean, Exception>>
  fullName: System.Collections.Generic.IDictionary<System.Guid, System.Tuple<System.Boolean, System.Exception>>
  nameWithType.vb: IDictionary(Of Guid, Tuple(Of Boolean, Exception))
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, System.Tuple(Of System.Boolean, System.Exception))
  name.vb: IDictionary(Of Guid, Tuple(Of Boolean, Exception))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse*
  commentId: Overload:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  isExternal: false
  name: TestResponse
  nameWithType: TestEventSuccessHandler.TestResponse
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
  commentId: P:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.TestResponse
- uid: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle*
  commentId: Overload:Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle
  isExternal: false
  name: Handle
  nameWithType: TestEventSuccessHandler.Handle
  fullName: Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.Handle
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(TestEvent)
  nameWithType: IMessageHandler<TestEvent>.Handle(TestEvent)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent>.Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  nameWithType.vb: IMessageHandler(Of TestEvent).Handle(TestEvent)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent).Handle(Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TestEvent>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
    name: TestEvent
    nameWithType: TestEvent
    fullName: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TestEvent).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
    name: TestEvent
    nameWithType: TestEvent
    fullName: Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  commentId: M:Cqrs.Messages.IMessageHandler`1.Handle(`0)
  isExternal: false
  name: Handle(TMessage)
  nameWithType: IMessageHandler<TMessage>.Handle(TMessage)
  fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle(TMessage)
  nameWithType.vb: IMessageHandler(Of TMessage).Handle(TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage).Handle(TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TMessage>.Handle
    fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TMessage).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of TMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
