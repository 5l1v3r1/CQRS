<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender" kind="interface" language="C#" prot="public">
    <compoundname>Cqrs::Commands::ISendAndWaitCommandSender</compoundname>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1ICommandSender" prot="public" virt="non-virtual">Cqrs::Commands::ICommandSender&lt; TAuthenticationToken &gt;</basecompoundref>
    <derivedcompoundref refid="classCqrs_1_1Bus_1_1InProcessBus" prot="public" virt="non-virtual">Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ab64dd5144f0688b0e23ffe289d4ffa2e_1ab64dd5144f0688b0e23ffe289d4ffa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_a506d617dc7ec3838791a91e09b73b8ce_1a506d617dc7ec3838791a91e09b73b8ce">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_aceee36522f8b677f3737ff0f9f2165ad_1aceee36522f8b677f3737ff0f9f2165ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_a1b3540fe06b60cd601eaff4ea53f5465_1a1b3540fe06b60cd601eaff4ea53f5465">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ada9643fbf8206bcc72cc5817f747ada8_1ada9643fbf8206bcc72cc5817f747ada8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_a6d49efcd657ed029f97fac292e6296b0_1a6d49efcd657ed029f97fac292e6296b0">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_abc9bda930a4c8c57d8edf1044d2b8002_1abc9bda930a4c8c57d8edf1044d2b8002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_ac8c4a77edc761f15e16c638624424443_1ac8c4a77edc761f15e16c638624424443">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a230c249fa137eafc9857c3b73ae86fcd_1a230c249fa137eafc9857c3b73ae86fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_af3ed033471e85b2943a470c1a635f9c4_1af3ed033471e85b2943a470c1a635f9c4">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a8a9b1333e70cc9d8a91d6374354a851f_1a8a9b1333e70cc9d8a91d6374354a851f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplementedby refid="classCqrs_1_1Bus_1_1InProcessBus_aae598cbe7ec6f4238e5a5b966df1157c_1aae598cbe7ec6f4238e5a5b966df1157c">SendAndWait&lt; TCommand, TEvent &gt;</reimplementedby>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="74" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sends an ICommand&lt;TAuthenticationToken&gt; </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the authentication token.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1179">
        <label>Cqrs::Bus::InProcessBus&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Bus_1_1InProcessBus"/>
        <childnode refid="1176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1178">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher"/>
      </node>
      <node id="1177">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender"/>
        <childnode refid="1178" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1176">
        <label>Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender"/>
        <childnode refid="1177" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1182">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher"/>
      </node>
      <node id="1181">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender"/>
        <childnode refid="1182" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1180">
        <label>Cqrs.Commands.ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender"/>
        <childnode refid="1181" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" line="21" column="1" bodyfile="/mnt/y/cdmdotnet/CQRS.XsamX/Framework/Cqrs/Commands/ISendAndWaitCommandSender.cs" bodystart="20" bodyend="76"/>
    <listofallmembers>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_aeeb487ad5686d9c44d214b1daaf7833a_1aeeb487ad5686d9c44d214b1daaf7833a" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_af0f033c0b949e5650032e4f00b11b595_1af0f033c0b949e5650032e4f00b11b595" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandSender_a551d69f8679399fc0ce0fd99dead507a_1a551d69f8679399fc0ce0fd99dead507a" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ICommandSender_a3fb3ec40a3e862f721a7c9204e67e832_1a3fb3ec40a3e862f721a7c9204e67e832" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ab64dd5144f0688b0e23ffe289d4ffa2e_1ab64dd5144f0688b0e23ffe289d4ffa2e" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_aceee36522f8b677f3737ff0f9f2165ad_1aceee36522f8b677f3737ff0f9f2165ad" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ada9643fbf8206bcc72cc5817f747ada8_1ada9643fbf8206bcc72cc5817f747ada8" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_abc9bda930a4c8c57d8edf1044d2b8002_1abc9bda930a4c8c57d8edf1044d2b8002" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a230c249fa137eafc9857c3b73ae86fcd_1a230c249fa137eafc9857c3b73ae86fcd" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a8a9b1333e70cc9d8a91d6374354a851f_1a8a9b1333e70cc9d8a91d6374354a851f" prot="public" virt="non-virtual"><scope>Cqrs::Commands::ISendAndWaitCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
