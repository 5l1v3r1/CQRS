### YamlMime:ManagedReference
items:
- uid: Cqrs.Snapshots.SnapshotRepository`1
  commentId: T:Cqrs.Snapshots.SnapshotRepository`1
  id: SnapshotRepository`1
  parent: Cqrs.Snapshots
  children:
  - Cqrs.Snapshots.SnapshotRepository`1.#ctor(Cqrs.Snapshots.ISnapshotStore,Cqrs.Snapshots.ISnapshotStrategy{`0},Cqrs.Domain.IAggregateRepository{`0},Cqrs.Events.IEventStore{`0},Cqrs.Domain.Factories.IAggregateFactory)
  - Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory
  - Cqrs.Snapshots.SnapshotRepository`1.EventStore
  - Cqrs.Snapshots.SnapshotRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  - Cqrs.Snapshots.SnapshotRepository`1.Repository
  - Cqrs.Snapshots.SnapshotRepository`1.Save``1(``0,System.Nullable{System.Int32})
  - Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
  - Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
  - Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
  - Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
  langs:
  - csharp
  - vb
  name: SnapshotRepository<TAuthenticationToken>
  nameWithType: SnapshotRepository<TAuthenticationToken>
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SnapshotRepository
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nProvides basic repository methods for operations with instances of <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref>\nutilising <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref> for optimised rehydration.\n"
  example: []
  syntax:
    content: 'public class SnapshotRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      Public Class SnapshotRepository(Of TAuthenticationToken)
          Implements IAggregateRepository(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken)
  name.vb: SnapshotRepository(Of TAuthenticationToken)
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
  id: SnapshotStore
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: SnapshotStore
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotStore
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotStore
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SnapshotStore
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nGets or sets the <xref href=\"Cqrs.Snapshots.ISnapshotStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ISnapshotStore SnapshotStore { get; }
    parameters: []
    return:
      type: Cqrs.Snapshots.ISnapshotStore
    content.vb: Protected ReadOnly Property SnapshotStore As ISnapshotStore
  overload: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotStore
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotStore
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
  id: SnapshotStrategy
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: SnapshotStrategy
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotStrategy
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotStrategy
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SnapshotStrategy
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nGets or sets the <xref href=\"Cqrs.Snapshots.ISnapshotStrategy%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ISnapshotStrategy<TAuthenticationToken> SnapshotStrategy { get; }
    parameters: []
    return:
      type: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property SnapshotStrategy As ISnapshotStrategy(Of TAuthenticationToken)
  overload: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotStrategy
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotStrategy
- uid: Cqrs.Snapshots.SnapshotRepository`1.Repository
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.Repository
  id: Repository
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: Repository
  nameWithType: SnapshotRepository<TAuthenticationToken>.Repository
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Repository
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Repository
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nGets or sets the <xref href=\"Cqrs.Domain.IAggregateRepository%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IAggregateRepository<TAuthenticationToken> Repository { get; }
    parameters: []
    return:
      type: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property Repository As IAggregateRepository(Of TAuthenticationToken)
  overload: Cqrs.Snapshots.SnapshotRepository`1.Repository*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Repository
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Repository
- uid: Cqrs.Snapshots.SnapshotRepository`1.EventStore
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.EventStore
  id: EventStore
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: EventStore
  nameWithType: SnapshotRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.EventStore
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStore
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 43
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nGets or sets the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IEventStore<TAuthenticationToken> EventStore { get; }
    parameters: []
    return:
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property EventStore As IEventStore(Of TAuthenticationToken)
  overload: Cqrs.Snapshots.SnapshotRepository`1.EventStore*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).EventStore
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory
  id: AggregateFactory
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: AggregateFactory
  nameWithType: SnapshotRepository<TAuthenticationToken>.AggregateFactory
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.AggregateFactory
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AggregateFactory
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 48
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nGets or sets the <xref href=\"Cqrs.Domain.Factories.IAggregateFactory\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IAggregateFactory AggregateFactory { get; }
    parameters: []
    return:
      type: Cqrs.Domain.Factories.IAggregateFactory
    content.vb: Protected ReadOnly Property AggregateFactory As IAggregateFactory
  overload: Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).AggregateFactory
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).AggregateFactory
- uid: Cqrs.Snapshots.SnapshotRepository`1.#ctor(Cqrs.Snapshots.ISnapshotStore,Cqrs.Snapshots.ISnapshotStrategy{`0},Cqrs.Domain.IAggregateRepository{`0},Cqrs.Events.IEventStore{`0},Cqrs.Domain.Factories.IAggregateFactory)
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.#ctor(Cqrs.Snapshots.ISnapshotStore,Cqrs.Snapshots.ISnapshotStrategy{`0},Cqrs.Domain.IAggregateRepository{`0},Cqrs.Events.IEventStore{`0},Cqrs.Domain.Factories.IAggregateFactory)
  id: '#ctor(Cqrs.Snapshots.ISnapshotStore,Cqrs.Snapshots.ISnapshotStrategy{`0},Cqrs.Domain.IAggregateRepository{`0},Cqrs.Events.IEventStore{`0},Cqrs.Domain.Factories.IAggregateFactory)'
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: SnapshotRepository(ISnapshotStore, ISnapshotStrategy<TAuthenticationToken>, IAggregateRepository<TAuthenticationToken>, IEventStore<TAuthenticationToken>, IAggregateFactory)
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotRepository(ISnapshotStore, ISnapshotStrategy<TAuthenticationToken>, IAggregateRepository<TAuthenticationToken>, IEventStore<TAuthenticationToken>, IAggregateFactory)
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotRepository(Cqrs.Snapshots.ISnapshotStore, Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>, Cqrs.Domain.IAggregateRepository<TAuthenticationToken>, Cqrs.Events.IEventStore<TAuthenticationToken>, Cqrs.Domain.Factories.IAggregateFactory)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 53
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Snapshots.SnapshotRepository%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SnapshotRepository(ISnapshotStore snapshotStore, ISnapshotStrategy<TAuthenticationToken> snapshotStrategy, IAggregateRepository<TAuthenticationToken> repository, IEventStore<TAuthenticationToken> eventStore, IAggregateFactory aggregateFactory)
    parameters:
    - id: snapshotStore
      type: Cqrs.Snapshots.ISnapshotStore
    - id: snapshotStrategy
      type: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
    - id: repository
      type: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
    - id: eventStore
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    - id: aggregateFactory
      type: Cqrs.Domain.Factories.IAggregateFactory
    content.vb: Public Sub New(snapshotStore As ISnapshotStore, snapshotStrategy As ISnapshotStrategy(Of TAuthenticationToken), repository As IAggregateRepository(Of TAuthenticationToken), eventStore As IEventStore(Of TAuthenticationToken), aggregateFactory As IAggregateFactory)
  overload: Cqrs.Snapshots.SnapshotRepository`1.#ctor*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotRepository(ISnapshotStore, ISnapshotStrategy(Of TAuthenticationToken), IAggregateRepository(Of TAuthenticationToken), IEventStore(Of TAuthenticationToken), IAggregateFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotRepository(Cqrs.Snapshots.ISnapshotStore, Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken), Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken), Cqrs.Events.IEventStore(Of TAuthenticationToken), Cqrs.Domain.Factories.IAggregateFactory)
  name.vb: SnapshotRepository(ISnapshotStore, ISnapshotStrategy(Of TAuthenticationToken), IAggregateRepository(Of TAuthenticationToken), IEventStore(Of TAuthenticationToken), IAggregateFactory)
- uid: Cqrs.Snapshots.SnapshotRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.Save``1(``0,System.Nullable{System.Int32})
  id: Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: SnapshotRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 68
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nCalls <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot%7b%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> then <xref href=\"Cqrs.Domain.IAggregateRepository%601.Save%60%601(%60%600%2cSystem.Nullable%7bSystem.Int32%7d)\" data-throw-if-not-resolved=\"false\"></xref> on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.Repository\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken>'
    parameters:
    - id: aggregate
      type: '{TAggregateRoot}'
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to save and persist.
    - id: expectedVersion
      type: System.Nullable{System.Int32}
      description: The version number the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> is expected to be at.
    typeParameters:
    - id: TAggregateRoot
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Save(Of TAggregateRoot As IAggregateRoot(Of TAuthenticationToken))(aggregate As TAggregateRoot, expectedVersion As Integer? = Nothing)
  overload: Cqrs.Snapshots.SnapshotRepository`1.Save*
  implements:
  - Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
- uid: Cqrs.Snapshots.SnapshotRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  id: Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: SnapshotRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 86
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nRetrieves an <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> of type <span class=\"typeparamref\">TAggregateRoot</span>,\nFirst using <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.TryRestoreAggregateFromSnapshot%60%601(System.Guid%2c%60%600)\" data-throw-if-not-resolved=\"false\"></xref>, otherwise via <xref href=\"Cqrs.Domain.IAggregateRepository%601.Get%60%601(System.Guid%2cSystem.Collections.Generic.IList%7bCqrs.Events.IEvent%7b%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.Repository\" data-throw-if-not-resolved=\"false\"></xref>\nThen does rehydration.\n"
  example: []
  syntax:
    content: 'public TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken>'
    parameters:
    - id: aggregateId
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to retrieve.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    typeParameters:
    - id: TAggregateRoot
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: '{TAggregateRoot}'
    content.vb: Public Function Get(Of TAggregateRoot As IAggregateRoot(Of TAuthenticationToken))(aggregateId As Guid, events As IList(Of IEvent(Of TAuthenticationToken)) = Nothing) As TAggregateRoot
  overload: Cqrs.Snapshots.SnapshotRepository`1.Get*
  implements:
  - Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
  id: TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid, TAggregateRoot)
  nameWithType: SnapshotRepository<TAuthenticationToken>.TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid, TAggregateRoot)
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.TryRestoreAggregateFromSnapshot<TAggregateRoot>(System.Guid, TAggregateRoot)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TryRestoreAggregateFromSnapshot
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 111
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nCalls <xref href=\"Cqrs.Snapshots.ISnapshotStrategy%601.IsSnapshotable(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.SnapshotStrategy\" data-throw-if-not-resolved=\"false\"></xref>\nIf the <span class=\"typeparamref\">TAggregateRoot</span> is snapshot-able <xref href=\"Cqrs.Snapshots.ISnapshotStore.Get%60%601(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> is called on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.SnapshotStore\" data-throw-if-not-resolved=\"false\"></xref>.\nThe Restore method is then called on\n"
  remarks: There may be more events after the snapshot that still need to rehydrated into the <span class="typeparamref">TAggregateRoot</span> after restoration.
  example: []
  syntax:
    content: protected virtual int TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid id, TAggregateRoot aggregate)
    parameters:
    - id: id
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to restore, since the <span class="paramref">aggregate</span> may be completely uninitialised.
    - id: aggregate
      type: '{TAggregateRoot}'
      description: The <span class="typeparamref">TAggregateRoot</span>
    typeParameters:
    - id: TAggregateRoot
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: -1 if no restoration was made, otherwise version number the <span class="typeparamref">TAggregateRoot</span> was rehydrated to.
    content.vb: Protected Overridable Function TryRestoreAggregateFromSnapshot(Of TAggregateRoot)(id As Guid, aggregate As TAggregateRoot) As Integer
  overload: Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).TryRestoreAggregateFromSnapshot(Of TAggregateRoot)(Guid, TAggregateRoot)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).TryRestoreAggregateFromSnapshot(Of TAggregateRoot)(System.Guid, TAggregateRoot)
  name.vb: TryRestoreAggregateFromSnapshot(Of TAggregateRoot)(Guid, TAggregateRoot)
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
  id: TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
  parent: Cqrs.Snapshots.SnapshotRepository`1
  langs:
  - csharp
  - vb
  name: TryMakeSnapshot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: SnapshotRepository<TAuthenticationToken>.TryMakeSnapshot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TryMakeSnapshot
    path: Framework/Cqrs/Snapshots/SnapshotRepository.cs
    startLine: 132
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nCalls <xref href=\"Cqrs.Snapshots.ISnapshotStrategy%601.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot%7b%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.SnapshotStrategy\" data-throw-if-not-resolved=\"false\"></xref>\nIf the <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> is snapshot-able <xref href=\"Cqrs.Snapshots.SnapshotAggregateRoot%602.GetSnapshot\" data-throw-if-not-resolved=\"false\"></xref> is called\nThe <xref href=\"Cqrs.Snapshots.Snapshot.Version\" data-throw-if-not-resolved=\"false\"></xref> is calculated, finally <xref href=\"Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)\" data-throw-if-not-resolved=\"false\"></xref> is called on <xref href=\"Cqrs.Snapshots.SnapshotRepository%601.SnapshotStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void TryMakeSnapshot(IAggregateRoot<TAuthenticationToken> aggregate)
    parameters:
    - id: aggregate
      type: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to try and snapshot.
    content.vb: Protected Overridable Sub TryMakeSnapshot(aggregate As IAggregateRoot(Of TAuthenticationToken))
  overload: Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot*
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).TryMakeSnapshot(IAggregateRoot(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).TryMakeSnapshot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: TryMakeSnapshot(IAggregateRoot(Of TAuthenticationToken))
references:
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.Snapshot
  commentId: T:Cqrs.Snapshots.Snapshot
  parent: Cqrs.Snapshots
  isExternal: false
  name: Snapshot
  nameWithType: Snapshot
  fullName: Cqrs.Snapshots.Snapshot
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Snapshots
  commentId: N:Cqrs.Snapshots
  isExternal: false
  name: Cqrs.Snapshots
  nameWithType: Cqrs.Snapshots
  fullName: Cqrs.Snapshots
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRepository`1
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.IAggregateRepository`1
  commentId: T:Cqrs.Domain.IAggregateRepository`1
  isExternal: false
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Snapshots.ISnapshotStore
  commentId: T:Cqrs.Snapshots.ISnapshotStore
  parent: Cqrs.Snapshots
  isExternal: false
  name: ISnapshotStore
  nameWithType: ISnapshotStore
  fullName: Cqrs.Snapshots.ISnapshotStore
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
  isExternal: false
  name: SnapshotStore
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotStore
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotStore
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotStore
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotStore
- uid: Cqrs.Snapshots.ISnapshotStrategy`1
  commentId: T:Cqrs.Snapshots.ISnapshotStrategy`1
  isExternal: false
  name: ISnapshotStrategy<TAuthenticationToken>
  nameWithType: ISnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken)
  name.vb: ISnapshotStrategy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
  isExternal: false
  name: SnapshotStrategy
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotStrategy
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotStrategy
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotStrategy
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotStrategy
- uid: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
  commentId: T:Cqrs.Snapshots.ISnapshotStrategy{`0}
  parent: Cqrs.Snapshots
  definition: Cqrs.Snapshots.ISnapshotStrategy`1
  name: ISnapshotStrategy<TAuthenticationToken>
  nameWithType: ISnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken)
  name.vb: ISnapshotStrategy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.Repository*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.Repository
  isExternal: false
  name: Repository
  nameWithType: SnapshotRepository<TAuthenticationToken>.Repository
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Repository
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Repository
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Repository
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.EventStore*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.EventStore
  isExternal: false
  name: EventStore
  nameWithType: SnapshotRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.EventStore
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.AggregateFactory
  isExternal: false
  name: AggregateFactory
  nameWithType: SnapshotRepository<TAuthenticationToken>.AggregateFactory
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.AggregateFactory
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).AggregateFactory
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).AggregateFactory
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: Cqrs.Snapshots.SnapshotRepository`1
  commentId: T:Cqrs.Snapshots.SnapshotRepository`1
  isExternal: false
  name: SnapshotRepository<TAuthenticationToken>
  nameWithType: SnapshotRepository<TAuthenticationToken>
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken)
  name.vb: SnapshotRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotRepository`1
    name: SnapshotRepository
    nameWithType: SnapshotRepository
    fullName: Cqrs.Snapshots.SnapshotRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotRepository`1
    name: SnapshotRepository
    nameWithType: SnapshotRepository
    fullName: Cqrs.Snapshots.SnapshotRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.#ctor*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.#ctor
  isExternal: false
  name: SnapshotRepository
  nameWithType: SnapshotRepository<TAuthenticationToken>.SnapshotRepository
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.SnapshotRepository
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).SnapshotRepository
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).SnapshotRepository
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot(Cqrs.Domain.IAggregateRoot{`0})
- uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  isExternal: true
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.Repository
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.Repository
- uid: Cqrs.Snapshots.SnapshotRepository`1.Save*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.Save
  isExternal: false
  name: Save
  nameWithType: SnapshotRepository<TAuthenticationToken>.Save
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Save
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Save
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Save
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository{`0}.Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TAggregateRoot}'
  commentId: '!:TAggregateRoot'
  definition: TAggregateRoot
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TAggregateRoot
  isExternal: false
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
  commentId: M:Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot``1(System.Guid,``0)
- uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.Get*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.Get
  isExternal: false
  name: Get
  nameWithType: SnapshotRepository<TAuthenticationToken>.Get
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.Get
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).Get
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.IAggregateRepository{`0}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEvent<TAuthenticationToken>>
  nameWithType: IList<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IList(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IList(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  isExternal: true
  name: IsSnapshotable(Type)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(System.Type)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(Type)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(System.Type)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStrategy
- uid: Cqrs.Snapshots.ISnapshotStore.Get``1(System.Guid)
  commentId: M:Cqrs.Snapshots.ISnapshotStore.Get``1(System.Guid)
  parent: Cqrs.Snapshots.ISnapshotStore
  isExternal: true
  name: Get<TAggregateRoot>(Guid)
  nameWithType: ISnapshotStore.Get<TAggregateRoot>(Guid)
  fullName: Cqrs.Snapshots.ISnapshotStore.Get<TAggregateRoot>(System.Guid)
  nameWithType.vb: ISnapshotStore.Get(Of TAggregateRoot)(Guid)
  fullName.vb: Cqrs.Snapshots.ISnapshotStore.Get(Of TAggregateRoot)(System.Guid)
  name.vb: Get(Of TAggregateRoot)(Guid)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStore.Get``1(System.Guid)
    name: Get<TAggregateRoot>
    nameWithType: ISnapshotStore.Get<TAggregateRoot>
    fullName: Cqrs.Snapshots.ISnapshotStore.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStore.Get``1(System.Guid)
    name: Get(Of TAggregateRoot)
    nameWithType: ISnapshotStore.Get(Of TAggregateRoot)
    fullName: Cqrs.Snapshots.ISnapshotStore.Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
  commentId: P:Cqrs.Snapshots.SnapshotRepository`1.SnapshotStore
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.TryRestoreAggregateFromSnapshot
  isExternal: false
  name: TryRestoreAggregateFromSnapshot
  nameWithType: SnapshotRepository<TAuthenticationToken>.TryRestoreAggregateFromSnapshot
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.TryRestoreAggregateFromSnapshot
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).TryRestoreAggregateFromSnapshot
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).TryRestoreAggregateFromSnapshot
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  isExternal: false
  name: ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  isExternal: false
  name: GetSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
    name: GetSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.Snapshot.Version
  commentId: P:Cqrs.Snapshots.Snapshot.Version
  parent: Cqrs.Snapshots.Snapshot
  isExternal: false
  name: Version
  nameWithType: Snapshot.Version
  fullName: Cqrs.Snapshots.Snapshot.Version
- uid: Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)
  commentId: M:Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)
  parent: Cqrs.Snapshots.ISnapshotStore
  isExternal: false
  name: Save(Snapshot)
  nameWithType: ISnapshotStore.Save(Snapshot)
  fullName: Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)
    name: Save
    nameWithType: ISnapshotStore.Save
    fullName: Cqrs.Snapshots.ISnapshotStore.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Snapshots.Snapshot
    name: Snapshot
    nameWithType: Snapshot
    fullName: Cqrs.Snapshots.Snapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStore.Save(Cqrs.Snapshots.Snapshot)
    name: Save
    nameWithType: ISnapshotStore.Save
    fullName: Cqrs.Snapshots.ISnapshotStore.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Snapshots.Snapshot
    name: Snapshot
    nameWithType: Snapshot
    fullName: Cqrs.Snapshots.Snapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot*
  commentId: Overload:Cqrs.Snapshots.SnapshotRepository`1.TryMakeSnapshot
  isExternal: false
  name: TryMakeSnapshot
  nameWithType: SnapshotRepository<TAuthenticationToken>.TryMakeSnapshot
  fullName: Cqrs.Snapshots.SnapshotRepository<TAuthenticationToken>.TryMakeSnapshot
  nameWithType.vb: SnapshotRepository(Of TAuthenticationToken).TryMakeSnapshot
  fullName.vb: Cqrs.Snapshots.SnapshotRepository(Of TAuthenticationToken).TryMakeSnapshot
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
