### YamlMime:ManagedReference
items:
- uid: Cqrs.Events.EventBuilder`1
  commentId: T:Cqrs.Events.EventBuilder`1
  id: EventBuilder`1
  parent: Cqrs.Events
  children:
  - Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  - Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  - Cqrs.Events.EventBuilder`1.SerialiseEventData(Cqrs.Events.IEvent{`0})
  - Cqrs.Events.EventBuilder`1.SerialiseEventDataToString(Cqrs.Events.IEvent{`0})
  langs:
  - csharp
  - vb
  name: EventBuilder<TAuthenticationToken>
  nameWithType: EventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Events/EventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventBuilder
    path: Framework/Cqrs/Events/EventBuilder.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nBuilds <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref> from various input formats.\n"
  example: []
  syntax:
    content: 'public abstract class EventBuilder<TAuthenticationToken> : IEventBuilder<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public MustInherit Class EventBuilder(Of TAuthenticationToken)
          Implements IEventBuilder(Of TAuthenticationToken)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Events.DefaultEventBuilder`1
  implements:
  - Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventBuilder(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken)
  name.vb: EventBuilder(Of TAuthenticationToken)
- uid: Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs/Events/EventBuilder.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nCreate an <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <code data-dev-comment-type=\"paramref\">eventData</code>.\n"
  example: []
  syntax:
    content: public virtual EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: type
      type: System.String
      description: The name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the target object the serialised data is.
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="Cqrs.Events.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Cqrs.Events.EventData
    content.vb: Public Overridable Function CreateFrameworkEvent(type As String, eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.Events.EventBuilder`1.CreateFrameworkEvent*
  implements:
  - Cqrs.Events.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
- uid: Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventBuilder`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs/Events/EventBuilder.cs
    startLine: 40
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nCreate an <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <code data-dev-comment-type=\"paramref\">eventData</code>.\n"
  example: []
  syntax:
    content: public virtual EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="Cqrs.Events.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Cqrs.Events.EventData
    content.vb: Public Overridable Function CreateFrameworkEvent(eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.Events.EventBuilder`1.CreateFrameworkEvent*
  implements:
  - Cqrs.Events.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
- uid: Cqrs.Events.EventBuilder`1.SerialiseEventData(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventBuilder`1.SerialiseEventData(Cqrs.Events.IEvent{`0})
  id: SerialiseEventData(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventBuilder`1
  langs:
  - csharp
  - vb
  name: SerialiseEventData(IEvent<TAuthenticationToken>)
  nameWithType: EventBuilder<TAuthenticationToken>.SerialiseEventData(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.SerialiseEventData(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SerialiseEventData
    path: Framework/Cqrs/Events/EventBuilder.cs
    startLine: 51
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nSerialise the provided <code data-dev-comment-type=\"paramref\">eventData</code> into a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual byte[] SerialiseEventData(IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to serialise.
    return:
      type: System.Byte[]
    content.vb: Protected Overridable Function SerialiseEventData(eventData As IEvent(Of TAuthenticationToken)) As Byte()
  overload: Cqrs.Events.EventBuilder`1.SerialiseEventData*
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).SerialiseEventData(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).SerialiseEventData(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: SerialiseEventData(IEvent(Of TAuthenticationToken))
- uid: Cqrs.Events.EventBuilder`1.SerialiseEventDataToString(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.EventBuilder`1.SerialiseEventDataToString(Cqrs.Events.IEvent{`0})
  id: SerialiseEventDataToString(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.EventBuilder`1
  langs:
  - csharp
  - vb
  name: SerialiseEventDataToString(IEvent<TAuthenticationToken>)
  nameWithType: EventBuilder<TAuthenticationToken>.SerialiseEventDataToString(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.SerialiseEventDataToString(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventBuilder.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SerialiseEventDataToString
    path: Framework/Cqrs/Events/EventBuilder.cs
    startLine: 60
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nSerialise the provided <code data-dev-comment-type=\"paramref\">eventData</code> into a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected abstract string SerialiseEventDataToString(IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to serialise.
    return:
      type: System.String
    content.vb: Protected MustOverride Function SerialiseEventDataToString(eventData As IEvent(Of TAuthenticationToken)) As String
  overload: Cqrs.Events.EventBuilder`1.SerialiseEventDataToString*
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).SerialiseEventDataToString(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).SerialiseEventDataToString(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: SerialiseEventDataToString(IEvent(Of TAuthenticationToken))
references:
- uid: Cqrs.Events.EventData
  commentId: T:Cqrs.Events.EventData
  parent: Cqrs.Events
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Cqrs.Events.EventData
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventBuilder{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events.IEventBuilder`1
  commentId: T:Cqrs.Events.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.Events.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.EventBuilder`1.CreateFrameworkEvent*
  commentId: Overload:Cqrs.Events.EventBuilder`1.CreateFrameworkEvent
  isExternal: false
  name: CreateFrameworkEvent
  nameWithType: EventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
- uid: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.IEventBuilder{`0}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.IEventBuilder{`0}.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.Events.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Cqrs.Events.EventBuilder`1.SerialiseEventData*
  commentId: Overload:Cqrs.Events.EventBuilder`1.SerialiseEventData
  isExternal: false
  name: SerialiseEventData
  nameWithType: EventBuilder<TAuthenticationToken>.SerialiseEventData
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.SerialiseEventData
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).SerialiseEventData
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).SerialiseEventData
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cqrs.Events.EventBuilder`1.SerialiseEventDataToString*
  commentId: Overload:Cqrs.Events.EventBuilder`1.SerialiseEventDataToString
  isExternal: false
  name: SerialiseEventDataToString
  nameWithType: EventBuilder<TAuthenticationToken>.SerialiseEventDataToString
  fullName: Cqrs.Events.EventBuilder<TAuthenticationToken>.SerialiseEventDataToString
  nameWithType.vb: EventBuilder(Of TAuthenticationToken).SerialiseEventDataToString
  fullName.vb: Cqrs.Events.EventBuilder(Of TAuthenticationToken).SerialiseEventDataToString
