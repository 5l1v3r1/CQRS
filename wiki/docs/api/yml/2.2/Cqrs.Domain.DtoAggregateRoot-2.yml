### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.DtoAggregateRoot`2
  commentId: T:Cqrs.Domain.DtoAggregateRoot`2
  id: DtoAggregateRoot`2
  parent: Cqrs.Domain
  children:
  - Cqrs.Domain.DtoAggregateRoot`2.#ctor(System.Guid,`1,`1)
  langs:
  - csharp
  - vb
  name: DtoAggregateRoot<TAuthenticationToken, TDto>
  nameWithType: DtoAggregateRoot<TAuthenticationToken, TDto>
  fullName: Cqrs.Domain.DtoAggregateRoot<TAuthenticationToken, TDto>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/DtoAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DtoAggregateRoot
    path: Framework/Cqrs/Domain/DtoAggregateRoot.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nAn <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> for operating on <xref href=\"Cqrs.Domain.IDto\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: 'public class DtoAggregateRoot<TAuthenticationToken, TDto> : AggregateRoot<TAuthenticationToken>, IAggregateRoot<TAuthenticationToken> where TDto : IDto'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    - id: TDto
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.IDto" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      Public Class DtoAggregateRoot(Of TAuthenticationToken, TDto As IDto)
          Inherits AggregateRoot(Of TAuthenticationToken)
          Implements IAggregateRoot(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  inheritedMembers:
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Id
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Version
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.ApplyChange(Cqrs.Events.IEvent{{TAuthenticationToken}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Domain.DtoAggregateRoot(Of TAuthenticationToken, TDto)
  name.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto)
- uid: Cqrs.Domain.DtoAggregateRoot`2.#ctor(System.Guid,`1,`1)
  commentId: M:Cqrs.Domain.DtoAggregateRoot`2.#ctor(System.Guid,`1,`1)
  id: '#ctor(System.Guid,`1,`1)'
  parent: Cqrs.Domain.DtoAggregateRoot`2
  langs:
  - csharp
  - vb
  name: DtoAggregateRoot(Guid, TDto, TDto)
  nameWithType: DtoAggregateRoot<TAuthenticationToken, TDto>.DtoAggregateRoot(Guid, TDto, TDto)
  fullName: Cqrs.Domain.DtoAggregateRoot<TAuthenticationToken, TDto>.DtoAggregateRoot(System.Guid, TDto, TDto)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/DtoAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/DtoAggregateRoot.cs
    startLine: 28
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Domain.DtoAggregateRoot%602\" data-throw-if-not-resolved=\"false\"></xref>\nand instantly apply the change as n <xref href=\"Cqrs.Events.DtoAggregateEvent%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DtoAggregateRoot(Guid id, TDto original, TDto new)
    parameters:
    - id: id
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.IDto" data-throw-if-not-resolved="false"></xref>.
    - id: original
      type: '{TDto}'
      description: The original copy of the <xref href="Cqrs.Domain.IDto" data-throw-if-not-resolved="false"></xref>. May be null for a <xref href="Cqrs.Events.DtoAggregateEventType.Created" data-throw-if-not-resolved="false"></xref> operation.
    - id: new
      type: '{TDto}'
      description: The new copy of the <xref href="Cqrs.Domain.IDto" data-throw-if-not-resolved="false"></xref>. May be null for a <xref href="Cqrs.Events.DtoAggregateEventType.Deleted" data-throw-if-not-resolved="false"></xref> operation.
    content.vb: Public Sub New(id As Guid, original As TDto, new As TDto)
  overload: Cqrs.Domain.DtoAggregateRoot`2.#ctor*
  nameWithType.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto).DtoAggregateRoot(Guid, TDto, TDto)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.DtoAggregateRoot(Of TAuthenticationToken, TDto).DtoAggregateRoot(System.Guid, TDto, TDto)
references:
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IDto
  commentId: T:Cqrs.Domain.IDto
  isExternal: false
  name: IDto
  nameWithType: IDto
  fullName: Cqrs.Domain.IDto
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.AggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.AggregateRoot`1
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Id
  commentId: P:Cqrs.Domain.AggregateRoot{`0}.Id
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.Id
  name: Id
  nameWithType: AggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Version
  commentId: P:Cqrs.Domain.AggregateRoot{`0}.Version
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.Version
  name: Version
  nameWithType: AggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.GetUncommittedChanges
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.MarkChangesAsCommitted
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.ApplyChange(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.ApplyChange(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.AggregateRoot`1
  commentId: T:Cqrs.Domain.AggregateRoot`1
  isExternal: false
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.Id
  commentId: P:Cqrs.Domain.AggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: AggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Domain.AggregateRoot`1.Version
  commentId: P:Cqrs.Domain.AggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: AggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.DtoAggregateRoot`2
  commentId: T:Cqrs.Domain.DtoAggregateRoot`2
  isExternal: false
  name: DtoAggregateRoot<TAuthenticationToken, TDto>
  nameWithType: DtoAggregateRoot<TAuthenticationToken, TDto>
  fullName: Cqrs.Domain.DtoAggregateRoot<TAuthenticationToken, TDto>
  nameWithType.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto)
  fullName.vb: Cqrs.Domain.DtoAggregateRoot(Of TAuthenticationToken, TDto)
  name.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto)
  spec.csharp:
  - uid: Cqrs.Domain.DtoAggregateRoot`2
    name: DtoAggregateRoot
    nameWithType: DtoAggregateRoot
    fullName: Cqrs.Domain.DtoAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.DtoAggregateRoot`2
    name: DtoAggregateRoot
    nameWithType: DtoAggregateRoot
    fullName: Cqrs.Domain.DtoAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.DtoAggregateEvent`2
  commentId: T:Cqrs.Events.DtoAggregateEvent`2
  isExternal: false
  name: DtoAggregateEvent<TAuthenticationToken, TDto>
  nameWithType: DtoAggregateEvent<TAuthenticationToken, TDto>
  fullName: Cqrs.Events.DtoAggregateEvent<TAuthenticationToken, TDto>
  nameWithType.vb: DtoAggregateEvent(Of TAuthenticationToken, TDto)
  fullName.vb: Cqrs.Events.DtoAggregateEvent(Of TAuthenticationToken, TDto)
  name.vb: DtoAggregateEvent(Of TAuthenticationToken, TDto)
  spec.csharp:
  - uid: Cqrs.Events.DtoAggregateEvent`2
    name: DtoAggregateEvent
    nameWithType: DtoAggregateEvent
    fullName: Cqrs.Events.DtoAggregateEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.DtoAggregateEvent`2
    name: DtoAggregateEvent
    nameWithType: DtoAggregateEvent
    fullName: Cqrs.Events.DtoAggregateEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.DtoAggregateEventType.Created
  commentId: F:Cqrs.Events.DtoAggregateEventType.Created
- uid: Cqrs.Events.DtoAggregateEventType.Deleted
  commentId: F:Cqrs.Events.DtoAggregateEventType.Deleted
- uid: Cqrs.Domain.DtoAggregateRoot`2.#ctor*
  commentId: Overload:Cqrs.Domain.DtoAggregateRoot`2.#ctor
  isExternal: false
  name: DtoAggregateRoot
  nameWithType: DtoAggregateRoot<TAuthenticationToken, TDto>.DtoAggregateRoot
  fullName: Cqrs.Domain.DtoAggregateRoot<TAuthenticationToken, TDto>.DtoAggregateRoot
  nameWithType.vb: DtoAggregateRoot(Of TAuthenticationToken, TDto).DtoAggregateRoot
  fullName.vb: Cqrs.Domain.DtoAggregateRoot(Of TAuthenticationToken, TDto).DtoAggregateRoot
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: '{TDto}'
  commentId: '!:TDto'
  definition: TDto
  name: TDto
  nameWithType: TDto
  fullName: TDto
- uid: TDto
  isExternal: false
  name: TDto
  nameWithType: TDto
  fullName: TDto
