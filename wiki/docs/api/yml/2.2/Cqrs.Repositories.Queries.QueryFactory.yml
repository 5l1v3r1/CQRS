### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.QueryFactory
  commentId: T:Cqrs.Repositories.Queries.QueryFactory
  id: QueryFactory
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.QueryFactory.#ctor(Cqrs.Configuration.IDependencyResolver)
  - Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery``2
  - Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery``2
  - Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  langs:
  - csharp
  - vb
  name: QueryFactory
  nameWithType: QueryFactory
  fullName: Cqrs.Repositories.Queries.QueryFactory
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryFactory
    path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
    startLine: 16
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA factory to create new instances of <xref href=\"Cqrs.Repositories.Queries.ResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class QueryFactory : IQueryFactory'
    content.vb: >-
      Public Class QueryFactory

          Implements IQueryFactory
  inheritance:
  - System.Object
  implements:
  - Cqrs.Repositories.Queries.IQueryFactory
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  commentId: P:Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  id: DependencyResolver
  parent: Cqrs.Repositories.Queries.QueryFactory
  langs:
  - csharp
  - vb
  name: DependencyResolver
  nameWithType: QueryFactory.DependencyResolver
  fullName: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolver
    path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
    startLine: 21
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nGets or sets the <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IDependencyResolver DependencyResolver { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Protected ReadOnly Property DependencyResolver As IDependencyResolver
  overload: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Cqrs.Repositories.Queries.QueryFactory.#ctor(Cqrs.Configuration.IDependencyResolver)
  commentId: M:Cqrs.Repositories.Queries.QueryFactory.#ctor(Cqrs.Configuration.IDependencyResolver)
  id: '#ctor(Cqrs.Configuration.IDependencyResolver)'
  parent: Cqrs.Repositories.Queries.QueryFactory
  langs:
  - csharp
  - vb
  name: QueryFactory(IDependencyResolver)
  nameWithType: QueryFactory.QueryFactory(IDependencyResolver)
  fullName: Cqrs.Repositories.Queries.QueryFactory.QueryFactory(Cqrs.Configuration.IDependencyResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Repositories.Queries.QueryFactory\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public QueryFactory(IDependencyResolver dependencyResolver)
    parameters:
    - id: dependencyResolver
      type: Cqrs.Configuration.IDependencyResolver
    content.vb: Public Sub New(dependencyResolver As IDependencyResolver)
  overload: Cqrs.Repositories.Queries.QueryFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery``2
  id: CreateNewSingleResultQuery``2
  parent: Cqrs.Repositories.Queries.QueryFactory
  langs:
  - csharp
  - vb
  name: CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  nameWithType: QueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateNewSingleResultQuery
    path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreates a new <xref href=\"Cqrs.Repositories.Queries.ISingleResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>\nusing <xref href=\"Cqrs.Repositories.Queries.QueryFactory.DependencyResolver\" data-throw-if-not-resolved=\"false\"></xref> to create a new <span class=\"typeparamref\">TUserQueryStrategy</span>.\n"
  example: []
  syntax:
    content: 'public ISingleResultQuery<TUserQueryStrategy, TData> CreateNewSingleResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TUserQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref> it will use.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data the <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> will operate on.
    return:
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TUserQueryStrategy},{TData}}
    content.vb: Public Function CreateNewSingleResultQuery(Of TUserQueryStrategy As IQueryStrategy, TData) As ISingleResultQuery(Of TUserQueryStrategy, TData)
  overload: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery*
  implements:
  - Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  nameWithType.vb: QueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
- uid: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery``2
  id: CreateNewCollectionResultQuery``2
  parent: Cqrs.Repositories.Queries.QueryFactory
  langs:
  - csharp
  - vb
  name: CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  nameWithType: QueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateNewCollectionResultQuery
    path: Framework/Cqrs/Repositories/Queries/QueryFactory.cs
    startLine: 53
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nCreates a new <xref href=\"Cqrs.Repositories.Queries.ICollectionResultQuery%602\" data-throw-if-not-resolved=\"false\"></xref>\nusing <xref href=\"Cqrs.Repositories.Queries.QueryFactory.DependencyResolver\" data-throw-if-not-resolved=\"false\"></xref> to create a new <span class=\"typeparamref\">TUserQueryStrategy</span>.\n"
  example: []
  syntax:
    content: 'public ICollectionResultQuery<TUserQueryStrategy, TData> CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy'
    typeParameters:
    - id: TUserQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref> it will use.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data the <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> will operate on.
    return:
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TUserQueryStrategy},{TData}}
    content.vb: Public Function CreateNewCollectionResultQuery(Of TUserQueryStrategy As IQueryStrategy, TData) As ICollectionResultQuery(Of TUserQueryStrategy, TData)
  overload: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery*
  implements:
  - Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  nameWithType.vb: QueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
references:
- uid: Cqrs.Repositories.Queries.ResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ResultQuery`2
  isExternal: false
  name: ResultQuery<TQueryStrategy, TData>
  nameWithType: ResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ResultQuery(Of TQueryStrategy, TData)
  name.vb: ResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ResultQuery`2
    name: ResultQuery
    nameWithType: ResultQuery
    fullName: Cqrs.Repositories.Queries.ResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Queries.IQueryFactory
  commentId: T:Cqrs.Repositories.Queries.IQueryFactory
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryFactory
  nameWithType: IQueryFactory
  fullName: Cqrs.Repositories.Queries.IQueryFactory
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver*
  commentId: Overload:Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  isExternal: false
  name: DependencyResolver
  nameWithType: QueryFactory.DependencyResolver
  fullName: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Repositories.Queries.QueryFactory
  commentId: T:Cqrs.Repositories.Queries.QueryFactory
  isExternal: false
  name: QueryFactory
  nameWithType: QueryFactory
  fullName: Cqrs.Repositories.Queries.QueryFactory
- uid: Cqrs.Repositories.Queries.QueryFactory.#ctor*
  commentId: Overload:Cqrs.Repositories.Queries.QueryFactory.#ctor
  isExternal: false
  name: QueryFactory
  nameWithType: QueryFactory.QueryFactory
  fullName: Cqrs.Repositories.Queries.QueryFactory.QueryFactory
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
  commentId: P:Cqrs.Repositories.Queries.QueryFactory.DependencyResolver
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery*
  commentId: Overload:Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery
  isExternal: false
  name: CreateNewSingleResultQuery
  nameWithType: QueryFactory.CreateNewSingleResultQuery
  fullName: Cqrs.Repositories.Queries.QueryFactory.CreateNewSingleResultQuery
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
  parent: Cqrs.Repositories.Queries.IQueryFactory
  isExternal: false
  name: CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  nameWithType: IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()
  nameWithType.vb: IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  fullName.vb: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
    name: CreateNewSingleResultQuery<TUserQueryStrategy, TData>
    nameWithType: IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>
    fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery``2
    name: CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)
    nameWithType: IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)
    fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewSingleResultQuery(Of TUserQueryStrategy, TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TUserQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{``0,``1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TUserQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TUserQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TUserQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TUserQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TUserQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TUserQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery`2
  isExternal: false
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery*
  commentId: Overload:Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery
  isExternal: false
  name: CreateNewCollectionResultQuery
  nameWithType: QueryFactory.CreateNewCollectionResultQuery
  fullName: Cqrs.Repositories.Queries.QueryFactory.CreateNewCollectionResultQuery
- uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  commentId: M:Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
  parent: Cqrs.Repositories.Queries.IQueryFactory
  isExternal: false
  name: CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  nameWithType: IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()
  nameWithType.vb: IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  fullName.vb: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  name.vb: CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)()
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
    name: CreateNewCollectionResultQuery<TUserQueryStrategy, TData>
    nameWithType: IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>
    fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery``2
    name: CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)
    nameWithType: IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)
    fullName: Cqrs.Repositories.Queries.IQueryFactory.CreateNewCollectionResultQuery(Of TUserQueryStrategy, TData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery{{TUserQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery{``0,``1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  name: ICollectionResultQuery<TUserQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TUserQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TUserQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TUserQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TUserQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TUserQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserQueryStrategy
    nameWithType: TUserQueryStrategy
    fullName: TUserQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
