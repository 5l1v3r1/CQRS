<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender" kind="class" language="C#" prot="public">
    <compoundname>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ReceiveActor</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender" prot="public" virt="non-virtual">Cqrs::Akka::Commands::IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
      <param>
        <type>TTarget</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a6c5acb131074e98841ddac12da654969_1a6c5acb131074e98841ddac12da654969" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>IActorRef</type>
        <definition>IActorRef Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.ActorReference</definition>
        <argsstring></argsstring>
        <name>ActorReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="22" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a37bf6191b21d98e14d9070b36bb2d0fe_1a37bf6191b21d98e14d9070b36bb2d0fe" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>ICommandReceiver&lt;TAuthenticationToken&gt; Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.CommandReceiver</definition>
        <argsstring></argsstring>
        <name>CommandReceiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="24" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a203cd12567f100fb3545b029f6ed0181_1a203cd12567f100fb3545b029f6ed0181" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.ConcurrentAkkaCommandSender</definition>
        <argsstring>(IActorRef actorReference, ICommandReceiver&lt; TAuthenticationToken &gt; commandReceiver)</argsstring>
        <name>ConcurrentAkkaCommandSender</name>
        <param>
          <type>IActorRef</type>
          <declname>actorReference</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>commandReceiver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="26" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a5f65348c92377342ad8400eb6b40a2ac_1a5f65348c92377342ad8400eb6b40a2ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="34" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a46b88bf730db4a530586737d699e1f12_1a46b88bf730db4a530586737d699e1f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="42" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a6505fbb31a885de31e68b2b87e969c31_1a6505fbb31a885de31e68b2b87e969c31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="48" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a263a720c8c865bc246756307c0004aa6_1a263a720c8c865bc246756307c0004aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="57" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a655aa63a47944035c113f9668bcf1284_1a655aa63a47944035c113f9668bcf1284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="68" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a171974eb1ba3eb7be9816bd7927227ac_1a171974eb1ba3eb7be9816bd7927227ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="80" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_ad838e5f54cae4ff87d091feefc00d930_1ad838e5f54cae4ff87d091feefc00d930" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="92" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a4fa4c2475a650e903b59013e939695f2_1a4fa4c2475a650e903b59013e939695f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="107" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a17a0d4fa182f4288a5a6c48d6df1801b_1a17a0d4fa182f4288a5a6c48d6df1801b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="120" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_afda9034e20ed82cd3742f1489ebe1b3a_1afda9034e20ed82cd3742f1489ebe1b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="133" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="133" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="28">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender"/>
      </node>
      <node id="27">
        <label>ReceiveActor</label>
      </node>
      <node id="26">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="31">
        <label>IConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandSender"/>
      </node>
      <node id="30">
        <label>ReceiveActor</label>
      </node>
      <node id="29">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandSender&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="21" column="1" bodyfile="/mnt/y/cdmdotnet/cqrs/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="18" bodyend="143"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a6c5acb131074e98841ddac12da654969_1a6c5acb131074e98841ddac12da654969" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>ActorReference</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a37bf6191b21d98e14d9070b36bb2d0fe_1a37bf6191b21d98e14d9070b36bb2d0fe" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>CommandReceiver</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a203cd12567f100fb3545b029f6ed0181_1a203cd12567f100fb3545b029f6ed0181" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>ConcurrentAkkaCommandSender</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a5f65348c92377342ad8400eb6b40a2ac_1a5f65348c92377342ad8400eb6b40a2ac" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a6505fbb31a885de31e68b2b87e969c31_1a6505fbb31a885de31e68b2b87e969c31" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a46b88bf730db4a530586737d699e1f12_1a46b88bf730db4a530586737d699e1f12" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a263a720c8c865bc246756307c0004aa6_1a263a720c8c865bc246756307c0004aa6" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a655aa63a47944035c113f9668bcf1284_1a655aa63a47944035c113f9668bcf1284" prot="public" virt="virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a171974eb1ba3eb7be9816bd7927227ac_1a171974eb1ba3eb7be9816bd7927227ac" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_ad838e5f54cae4ff87d091feefc00d930_1ad838e5f54cae4ff87d091feefc00d930" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a4fa4c2475a650e903b59013e939695f2_1a4fa4c2475a650e903b59013e939695f2" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_a17a0d4fa182f4288a5a6c48d6df1801b_1a17a0d4fa182f4288a5a6c48d6df1801b" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandSender_afda9034e20ed82cd3742f1489ebe1b3a_1afda9034e20ed82cd3742f1489ebe1b3a" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandSender</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
