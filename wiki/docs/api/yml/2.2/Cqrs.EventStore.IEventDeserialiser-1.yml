### YamlMime:ManagedReference
items:
- uid: Cqrs.EventStore.IEventDeserialiser`1
  commentId: T:Cqrs.EventStore.IEventDeserialiser`1
  id: IEventDeserialiser`1
  parent: Cqrs.EventStore
  children:
  - Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  - Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  - Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  langs:
  - csharp
  - vb
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IEventDeserialiser
    path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
    startLine: 19
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nDeserialises <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> from a serialised state.\n"
  example: []
  syntax:
    content: public interface IEventDeserialiser<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: Public Interface IEventDeserialiser(Of TAuthenticationToken)
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
- uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  id: Deserialise(EventStore.ClientAPI.RecordedEvent)
  parent: Cqrs.EventStore.IEventDeserialiser`1
  langs:
  - csharp
  - vb
  name: Deserialise(RecordedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(RecordedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.RecordedEvent)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
    startLine: 25
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nDeserialise the provided <code data-dev-comment-type=\"paramref\">eventData</code> into an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IEvent<TAuthenticationToken> Deserialise(RecordedEvent eventData)
    parameters:
    - id: eventData
      type: EventStore.ClientAPI.RecordedEvent
      description: The <xref href="EventStore.ClientAPI.RecordedEvent" data-throw-if-not-resolved="false"></xref> to Deserialise.
    return:
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
    content.vb: Function Deserialise(eventData As RecordedEvent) As IEvent(Of TAuthenticationToken)
  overload: Cqrs.EventStore.IEventDeserialiser`1.Deserialise*
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(RecordedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.RecordedEvent)
- uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  id: Deserialise(EventStore.ClientAPI.ResolvedEvent)
  parent: Cqrs.EventStore.IEventDeserialiser`1
  langs:
  - csharp
  - vb
  name: Deserialise(ResolvedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(ResolvedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
    startLine: 31
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nDeserialise the provided <code data-dev-comment-type=\"paramref\">notification</code> into an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IEvent<TAuthenticationToken> Deserialise(ResolvedEvent notification)
    parameters:
    - id: notification
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to Deserialise.
    return:
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
    content.vb: Function Deserialise(notification As ResolvedEvent) As IEvent(Of TAuthenticationToken)
  overload: Cqrs.EventStore.IEventDeserialiser`1.Deserialise*
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(ResolvedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.ResolvedEvent)
- uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  id: GetSerialisationSettings
  parent: Cqrs.EventStore.IEventDeserialiser`1
  langs:
  - csharp
  - vb
  name: GetSerialisationSettings()
  nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSerialisationSettings
    path: Framework/Cqrs.EventStore/IEventDeserialiser.cs
    startLine: 36
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGets the <xref href=\"Newtonsoft.Json.JsonSerializerSettings\" data-throw-if-not-resolved=\"false\"></xref> used while Deserialising.\n"
  example: []
  syntax:
    content: JsonSerializerSettings GetSerialisationSettings()
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Function GetSerialisationSettings As JsonSerializerSettings
  overload: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings*
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
references:
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.EventStore
  commentId: N:Cqrs.EventStore
  isExternal: false
  name: Cqrs.EventStore
  nameWithType: Cqrs.EventStore
  fullName: Cqrs.EventStore
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.RecordedEvent
  commentId: T:EventStore.ClientAPI.RecordedEvent
  parent: EventStore.ClientAPI
  isExternal: true
  name: RecordedEvent
  nameWithType: RecordedEvent
  fullName: EventStore.ClientAPI.RecordedEvent
- uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise*
  commentId: Overload:Cqrs.EventStore.IEventDeserialiser`1.Deserialise
  isExternal: false
  name: Deserialise
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  isExternal: true
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings*
  commentId: Overload:Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  isExternal: false
  name: GetSerialisationSettings
  nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
