### YamlMime:ManagedReference
items:
- uid: Cqrs.Events.EventDataResolver`1
  commentId: T:Cqrs.Events.EventDataResolver`1
  id: EventDataResolver`1
  parent: Cqrs.Events
  children:
  - Cqrs.Events.EventDataResolver`1.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  - Cqrs.Events.EventDataResolver`1.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  langs:
  - csharp
  - vb
  name: EventDataResolver<TAuthenticationToken>
  nameWithType: EventDataResolver<TAuthenticationToken>
  fullName: Cqrs.Events.EventDataResolver<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Events/EventDataResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventDataResolver
    path: Framework/Cqrs/Events/EventDataResolver.cs
    startLine: 19
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nResolves <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceRequestWithData%602\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Services.ServiceResponseWithResultData%601\" data-throw-if-not-resolved=\"false\"></xref> parameter types when serialising with WCF.\n"
  example: []
  syntax:
    content: 'public class EventDataResolver<TAuthenticationToken> : IEventDataResolver, IServiceParameterResolver'
    typeParameters:
    - id: TAuthenticationToken
    content.vb: >-
      Public Class EventDataResolver(Of TAuthenticationToken)
          Implements IEventDataResolver, IServiceParameterResolver
  inheritance:
  - System.Object
  implements:
  - Cqrs.Services.IEventDataResolver
  - Cqrs.Services.IServiceParameterResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventDataResolver(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Events.EventDataResolver(Of TAuthenticationToken)
  name.vb: EventDataResolver(Of TAuthenticationToken)
- uid: Cqrs.Events.EventDataResolver`1.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Events.EventDataResolver`1.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  id: TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: Cqrs.Events.EventDataResolver`1
  langs:
  - csharp
  - vb
  name: TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)
  nameWithType: EventDataResolver<TAuthenticationToken>.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)
  fullName: Cqrs.Events.EventDataResolver<TAuthenticationToken>.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, out System.Xml.XmlDictionaryString, out System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventDataResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TryResolveType
    path: Framework/Cqrs/Events/EventDataResolver.cs
    startLine: 27
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nIndicates if the provided <code data-dev-comment-type=\"paramref\">dataContractType</code> is of type <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceRequestWithData%602\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceResponseWithResultData%601\" data-throw-if-not-resolved=\"false\"></xref>0\nOR if it is other resolvable.\n"
  example: []
  syntax:
    content: public virtual bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
    parameters:
    - id: dataContractType
      type: System.Type
    - id: declaredType
      type: System.Type
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
    - id: typeName
      type: System.Xml.XmlDictionaryString
    - id: typeNamespace
      type: System.Xml.XmlDictionaryString
    return:
      type: System.Boolean
    content.vb: Public Overridable Function TryResolveType(dataContractType As Type, declaredType As Type, knownTypeResolver As DataContractResolver, ByRef typeName As XmlDictionaryString, ByRef typeNamespace As XmlDictionaryString) As Boolean
  overload: Cqrs.Events.EventDataResolver`1.TryResolveType*
  implements:
  - Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  nameWithType.vb: EventDataResolver(Of TAuthenticationToken).TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Events.EventDataResolver(Of TAuthenticationToken).TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ByRef System.Xml.XmlDictionaryString, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
- uid: Cqrs.Events.EventDataResolver`1.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Events.EventDataResolver`1.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  id: ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: Cqrs.Events.EventDataResolver`1
  langs:
  - csharp
  - vb
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: EventDataResolver<TAuthenticationToken>.ResolveName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Events.EventDataResolver<TAuthenticationToken>.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Events/EventDataResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolveName
    path: Framework/Cqrs/Events/EventDataResolver.cs
    startLine: 62
  assemblies:
  - Cqrs
  namespace: Cqrs.Events
  summary: "\nReturns the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> if the <code data-dev-comment-type=\"paramref\">typeName</code> is resolvable or if it is \nof type <code data-dev-comment-type=\"paramref\">typeName</code> is of type <xref href=\"Cqrs.Events.EventData\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceRequestWithData%602\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceResponseWithResultData%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
    parameters:
    - id: typeName
      type: System.String
    - id: typeNamespace
      type: System.String
    - id: declaredType
      type: System.Type
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
    return:
      type: System.Type
    content.vb: Public Overridable Function ResolveName(typeName As String, typeNamespace As String, declaredType As Type, knownTypeResolver As DataContractResolver) As Type
  overload: Cqrs.Events.EventDataResolver`1.ResolveName*
  implements:
  - Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  nameWithType.vb: EventDataResolver(Of TAuthenticationToken).ResolveName(String, String, Type, DataContractResolver)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Events.EventDataResolver(Of TAuthenticationToken).ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
references:
- uid: Cqrs.Events.EventData
  commentId: T:Cqrs.Events.EventData
  parent: Cqrs.Events
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Cqrs.Events.EventData
- uid: Cqrs.Services.ServiceRequestWithData`2
  commentId: T:Cqrs.Services.ServiceRequestWithData`2
  isExternal: false
  name: ServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType: ServiceRequestWithData<TAuthenticationToken, TData>
  fullName: Cqrs.Services.ServiceRequestWithData<TAuthenticationToken, TData>
  nameWithType.vb: ServiceRequestWithData(Of TAuthenticationToken, TData)
  fullName.vb: Cqrs.Services.ServiceRequestWithData(Of TAuthenticationToken, TData)
  name.vb: ServiceRequestWithData(Of TAuthenticationToken, TData)
  spec.csharp:
  - uid: Cqrs.Services.ServiceRequestWithData`2
    name: ServiceRequestWithData
    nameWithType: ServiceRequestWithData
    fullName: Cqrs.Services.ServiceRequestWithData
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.ServiceRequestWithData`2
    name: ServiceRequestWithData
    nameWithType: ServiceRequestWithData
    fullName: Cqrs.Services.ServiceRequestWithData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.ServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.ServiceResponseWithResultData`1
  isExternal: false
  name: ServiceResponseWithResultData<TResultData>
  nameWithType: ServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData)
  name.vb: ServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.ServiceResponseWithResultData`1
    name: ServiceResponseWithResultData
    nameWithType: ServiceResponseWithResultData
    fullName: Cqrs.Services.ServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.ServiceResponseWithResultData`1
    name: ServiceResponseWithResultData
    nameWithType: ServiceResponseWithResultData
    fullName: Cqrs.Services.ServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Services.IEventDataResolver
  commentId: T:Cqrs.Services.IEventDataResolver
  parent: Cqrs.Services
  isExternal: false
  name: IEventDataResolver
  nameWithType: IEventDataResolver
  fullName: Cqrs.Services.IEventDataResolver
- uid: Cqrs.Services.IServiceParameterResolver
  commentId: T:Cqrs.Services.IServiceParameterResolver
  parent: Cqrs.Services
  isExternal: false
  name: IServiceParameterResolver
  nameWithType: IServiceParameterResolver
  fullName: Cqrs.Services.IServiceParameterResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: Cqrs.Events.EventDataResolver`1.TryResolveType*
  commentId: Overload:Cqrs.Events.EventDataResolver`1.TryResolveType
  isExternal: false
  name: TryResolveType
  nameWithType: EventDataResolver<TAuthenticationToken>.TryResolveType
  fullName: Cqrs.Events.EventDataResolver<TAuthenticationToken>.TryResolveType
  nameWithType.vb: EventDataResolver(Of TAuthenticationToken).TryResolveType
  fullName.vb: Cqrs.Events.EventDataResolver(Of TAuthenticationToken).TryResolveType
- uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: Cqrs.Services.IServiceParameterResolver
  isExternal: true
  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  nameWithType: IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: IServiceParameterResolver.TryResolveType
    fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: IServiceParameterResolver.TryResolveType
    fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.DataContractResolver
  commentId: T:System.Runtime.Serialization.DataContractResolver
  parent: System.Runtime.Serialization
  isExternal: true
  name: DataContractResolver
  nameWithType: DataContractResolver
  fullName: System.Runtime.Serialization.DataContractResolver
- uid: System.Xml.XmlDictionaryString
  commentId: T:System.Xml.XmlDictionaryString
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryString
  nameWithType: XmlDictionaryString
  fullName: System.Xml.XmlDictionaryString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Cqrs.Events.EventDataResolver`1.ResolveName*
  commentId: Overload:Cqrs.Events.EventDataResolver`1.ResolveName
  isExternal: false
  name: ResolveName
  nameWithType: EventDataResolver<TAuthenticationToken>.ResolveName
  fullName: Cqrs.Events.EventDataResolver<TAuthenticationToken>.ResolveName
  nameWithType.vb: EventDataResolver(Of TAuthenticationToken).ResolveName
  fullName.vb: Cqrs.Events.EventDataResolver(Of TAuthenticationToken).ResolveName
- uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: Cqrs.Services.IServiceParameterResolver
  isExternal: true
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  spec.csharp:
  - uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: IServiceParameterResolver.ResolveName
    fullName: Cqrs.Services.IServiceParameterResolver.ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: IServiceParameterResolver.ResolveName
    fullName: Cqrs.Services.IServiceParameterResolver.ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
