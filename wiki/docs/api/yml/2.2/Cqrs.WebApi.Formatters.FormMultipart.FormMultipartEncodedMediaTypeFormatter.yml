### YamlMime:ManagedReference
items:
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  commentId: T:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  id: FormMultipartEncodedMediaTypeFormatter
  parent: Cqrs.WebApi.Formatters.FormMultipart
  children:
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor(Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings)
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType(System.Type)
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType(System.Type)
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  - Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  langs:
  - csharp
  - vb
  name: FormMultipartEncodedMediaTypeFormatter
  nameWithType: FormMultipartEncodedMediaTypeFormatter
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  type: Class
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: FormMultipartEncodedMediaTypeFormatter
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 26
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nRepresents the <xref href=\"System.Net.Http.Formatting.MediaTypeFormatter\" data-throw-if-not-resolved=\"false\"></xref> class to handle multi-part form-data.\n"
  example: []
  syntax:
    content: 'public class FormMultipartEncodedMediaTypeFormatter : MediaTypeFormatter'
    content.vb: >-
      Public Class FormMultipartEncodedMediaTypeFormatter
          Inherits MediaTypeFormatter
  inheritance:
  - System.Object
  - System.Net.Http.Formatting.MediaTypeFormatter
  inheritedMembers:
  - System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)
  - System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)
  - System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
  - System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)
  - System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
  - System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys
  - System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes
  - System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings
  - System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings
  - System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor(Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor(Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings)
  id: '#ctor(Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings)'
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: FormMultipartEncodedMediaTypeFormatter(MultipartFormatterSettings)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.FormMultipartEncodedMediaTypeFormatter(MultipartFormatterSettings)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.FormMultipartEncodedMediaTypeFormatter(Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 36
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nInstantiate and initialise a new instance of <xref href=\"Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public FormMultipartEncodedMediaTypeFormatter(MultipartFormatterSettings settings = null)
    parameters:
    - id: settings
      type: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings
      description: The <xref href="Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings" data-throw-if-not-resolved="false"></xref> to use.
    content.vb: Public Sub New(settings As MultipartFormatterSettings = Nothing)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType(System.Type)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType(System.Type)
  id: CanReadType(System.Type)
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: CanReadType(Type)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.CanReadType(Type)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CanReadType
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 47
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nQueries whether this <xref href=\"System.Net.Http.Formatting.MediaTypeFormatter\" data-throw-if-not-resolved=\"false\"></xref> can deserialise an object of the specified type.\n"
  example: []
  syntax:
    content: public override bool CanReadType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to deserialise.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Net.Http.Formatting.MediaTypeFormatter" data-throw-if-not-resolved="false"></xref> can deserialise the <span class="paramref">type</span>; otherwise, false.
    content.vb: Public Overrides Function CanReadType(type As Type) As Boolean
  overridden: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType(System.Type)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType(System.Type)
  id: CanWriteType(System.Type)
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: CanWriteType(Type)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.CanWriteType(Type)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CanWriteType
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 57
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nQueries whether this <xref href=\"System.Net.Http.Formatting.MediaTypeFormatter\" data-throw-if-not-resolved=\"false\"></xref> can serialise an object of the specified type.\n"
  example: []
  syntax:
    content: public override bool CanWriteType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to serialise.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Net.Http.Formatting.MediaTypeFormatter" data-throw-if-not-resolved="false"></xref> can serialise the <span class="paramref">type</span>; otherwise, false.
    content.vb: Public Overrides Function CanWriteType(type As Type) As Boolean
  overridden: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  id: SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders(System.Type, System.Net.Http.Headers.HttpContentHeaders, System.Net.Http.Headers.MediaTypeHeaderValue)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SetDefaultContentHeaders
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 72
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nSets the default headers for content that will be formatted using this formatter.\nThis method is called from the <xref href=\"System.Net.Http.ObjectContent\" data-throw-if-not-resolved=\"false\"></xref> constructor..\nThis implementation sets the Content-Type header to the value of <span class=\"paramref\">mediaType</span> if it is not null.\nIf it is null it sets the Content-Type to the default media type of this formatter.\nIf the Content-Type does not specify a charset it will set it using this formatters configured <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object being serialized. See <xref href="System.Net.Http.ObjectContent" data-throw-if-not-resolved="false"></xref>.
    - id: headers
      type: System.Net.Http.Headers.HttpContentHeaders
      description: The content headers that should be configured.
    - id: mediaType
      type: System.Net.Http.Headers.MediaTypeHeaderValue
      description: The authoritative media type. Can be null.
    content.vb: Public Overrides Sub SetDefaultContentHeaders(type As Type, headers As HttpContentHeaders, mediaType As MediaTypeHeaderValue)
  overridden: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  id: ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type, System.IO.Stream, System.Net.Http.HttpContent, System.Net.Http.Formatting.IFormatterLogger)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReadFromStreamAsync
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 100
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nAsynchronously deserialises an object of the specified type.\n"
  example: []
  syntax:
    content: public override Task<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to deserialise.
    - id: readStream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> to read.
    - id: content
      type: System.Net.Http.HttpContent
      description: The <xref href="System.Net.Http.HttpContent" data-throw-if-not-resolved="false"></xref>, if available. It may be null.
    - id: formatterLogger
      type: System.Net.Http.Formatting.IFormatterLogger
      description: The <xref href="System.Net.Http.Formatting.IFormatterLogger" data-throw-if-not-resolved="false"></xref> to log events to.
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> whose result will be an object of the given type.
    content.vb: Public Overrides Function ReadFromStreamAsync(type As Type, readStream As Stream, content As HttpContent, formatterLogger As IFormatterLogger) As Task(Of Object)
  overridden: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  commentId: M:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  id: WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  parent: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  langs:
  - csharp
  - vb
  name: WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext)
  nameWithType: FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext)
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync(System.Type, System.Object, System.IO.Stream, System.Net.Http.HttpContent, System.Net.TransportContext)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WriteToStreamAsync
    path: Framework/Cqrs.WebApi/Formatters/FormMultipart/FormMultipartEncodedMediaTypeFormatter.cs
    startLine: 128
  assemblies:
  - Cqrs.WebApi
  namespace: Cqrs.WebApi.Formatters.FormMultipart
  summary: "\nAsynchronously writes an object of the specified type.\n"
  example: []
  syntax:
    content: public override Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to write.
    - id: value
      type: System.Object
      description: The object value to write. It may be null.
    - id: writeStream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> to write to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The <xref href="System.Net.Http.HttpContent" data-throw-if-not-resolved="false"></xref>, if available. It may be null.
    - id: transportContext
      type: System.Net.TransportContext
      description: The <xref href="System.Net.TransportContext" data-throw-if-not-resolved="false"></xref> if available. It may be null.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will perform the write.
    content.vb: Public Overrides Function WriteToStreamAsync(type As Type, value As Object, writeStream As Stream, content As HttpContent, transportContext As TransportContext) As Task
  overridden: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  overload: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net.Http.Formatting.MediaTypeFormatter
  commentId: T:System.Net.Http.Formatting.MediaTypeFormatter
  parent: System.Net.Http.Formatting
  isExternal: true
  name: MediaTypeFormatter
  nameWithType: MediaTypeFormatter
  fullName: System.Net.Http.Formatting.MediaTypeFormatter
- uid: Cqrs.WebApi.Formatters.FormMultipart
  commentId: N:Cqrs.WebApi.Formatters.FormMultipart
  isExternal: false
  name: Cqrs.WebApi.Formatters.FormMultipart
  nameWithType: Cqrs.WebApi.Formatters.FormMultipart
  fullName: Cqrs.WebApi.Formatters.FormMultipart
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken)
  nameWithType: MediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type, System.IO.Stream, System.Net.Http.HttpContent, System.Net.Http.Formatting.IFormatterLogger, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)
    name: ReadFromStreamAsync
    nameWithType: MediaTypeFormatter.ReadFromStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Formatting.IFormatterLogger
    name: IFormatterLogger
    nameWithType: IFormatterLogger
    fullName: System.Net.Http.Formatting.IFormatterLogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)
    name: ReadFromStreamAsync
    nameWithType: MediaTypeFormatter.ReadFromStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Formatting.IFormatterLogger
    name: IFormatterLogger
    nameWithType: IFormatterLogger
    fullName: System.Net.Http.Formatting.IFormatterLogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext, CancellationToken)
  nameWithType: MediaTypeFormatter.WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext, CancellationToken)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type, System.Object, System.IO.Stream, System.Net.Http.HttpContent, System.Net.TransportContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)
    name: WriteToStreamAsync
    nameWithType: MediaTypeFormatter.WriteToStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.TransportContext
    name: TransportContext
    nameWithType: TransportContext
    fullName: System.Net.TransportContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)
    name: WriteToStreamAsync
    nameWithType: MediaTypeFormatter.WriteToStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.TransportContext
    name: TransportContext
    nameWithType: TransportContext
    fullName: System.Net.TransportContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: SelectCharacterEncoding(HttpContentHeaders)
  nameWithType: MediaTypeFormatter.SelectCharacterEncoding(HttpContentHeaders)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
    name: SelectCharacterEncoding
    nameWithType: MediaTypeFormatter.SelectCharacterEncoding
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.Headers.HttpContentHeaders
    name: HttpContentHeaders
    nameWithType: HttpContentHeaders
    fullName: System.Net.Http.Headers.HttpContentHeaders
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)
    name: SelectCharacterEncoding
    nameWithType: MediaTypeFormatter.SelectCharacterEncoding
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.Headers.HttpContentHeaders
    name: HttpContentHeaders
    nameWithType: HttpContentHeaders
    fullName: System.Net.Http.Headers.HttpContentHeaders
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue)
  nameWithType: MediaTypeFormatter.GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type, System.Net.Http.HttpRequestMessage, System.Net.Http.Headers.MediaTypeHeaderValue)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)
    name: GetPerRequestFormatterInstance
    nameWithType: MediaTypeFormatter.GetPerRequestFormatterInstance
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.MediaTypeHeaderValue
    name: MediaTypeHeaderValue
    nameWithType: MediaTypeHeaderValue
    fullName: System.Net.Http.Headers.MediaTypeHeaderValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)
    name: GetPerRequestFormatterInstance
    nameWithType: MediaTypeFormatter.GetPerRequestFormatterInstance
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.MediaTypeHeaderValue
    name: MediaTypeHeaderValue
    nameWithType: MediaTypeHeaderValue
    fullName: System.Net.Http.Headers.MediaTypeHeaderValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: GetDefaultValueForType(Type)
  nameWithType: MediaTypeFormatter.GetDefaultValueForType(Type)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
    name: GetDefaultValueForType
    nameWithType: MediaTypeFormatter.GetDefaultValueForType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)
    name: GetDefaultValueForType
    nameWithType: MediaTypeFormatter.GetDefaultValueForType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys
  commentId: P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: MaxHttpCollectionKeys
  nameWithType: MediaTypeFormatter.MaxHttpCollectionKeys
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys
- uid: System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes
  commentId: P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: SupportedMediaTypes
  nameWithType: MediaTypeFormatter.SupportedMediaTypes
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes
- uid: System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings
  commentId: P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: SupportedEncodings
  nameWithType: MediaTypeFormatter.SupportedEncodings
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings
- uid: System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings
  commentId: P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: MediaTypeMappings
  nameWithType: MediaTypeFormatter.MediaTypeMappings
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings
- uid: System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector
  commentId: P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: RequiredMemberSelector
  nameWithType: MediaTypeFormatter.RequiredMemberSelector
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.Formatting
  commentId: N:System.Net.Http.Formatting
  isExternal: false
  name: System.Net.Http.Formatting
  nameWithType: System.Net.Http.Formatting
  fullName: System.Net.Http.Formatting
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  commentId: T:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
  isExternal: false
  name: FormMultipartEncodedMediaTypeFormatter
  nameWithType: FormMultipartEncodedMediaTypeFormatter
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter
- uid: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings
  commentId: T:Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings
  parent: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
  isExternal: false
  name: MultipartFormatterSettings
  nameWithType: MultipartFormatterSettings
  fullName: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.#ctor
  isExternal: false
  name: FormMultipartEncodedMediaTypeFormatter
  nameWithType: FormMultipartEncodedMediaTypeFormatter.FormMultipartEncodedMediaTypeFormatter
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.FormMultipartEncodedMediaTypeFormatter
- uid: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
  commentId: N:Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
  isExternal: false
  name: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
  nameWithType: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
  fullName: Cqrs.WebApi.Formatters.FormMultipart.Infrastructure
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: CanReadType(Type)
  nameWithType: MediaTypeFormatter.CanReadType(Type)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
    name: CanReadType
    nameWithType: MediaTypeFormatter.CanReadType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)
    name: CanReadType
    nameWithType: MediaTypeFormatter.CanReadType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanReadType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType
  isExternal: false
  name: CanReadType
  nameWithType: FormMultipartEncodedMediaTypeFormatter.CanReadType
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanReadType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: CanWriteType(Type)
  nameWithType: MediaTypeFormatter.CanWriteType(Type)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
    name: CanWriteType
    nameWithType: MediaTypeFormatter.CanWriteType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)
    name: CanWriteType
    nameWithType: MediaTypeFormatter.CanWriteType
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType
  isExternal: false
  name: CanWriteType
  nameWithType: FormMultipartEncodedMediaTypeFormatter.CanWriteType
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.CanWriteType
- uid: System.Net.Http.ObjectContent
  commentId: T:System.Net.Http.ObjectContent
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
- uid: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue)
  nameWithType: MediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type, System.Net.Http.Headers.HttpContentHeaders, System.Net.Http.Headers.MediaTypeHeaderValue)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
    name: SetDefaultContentHeaders
    nameWithType: MediaTypeFormatter.SetDefaultContentHeaders
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.HttpContentHeaders
    name: HttpContentHeaders
    nameWithType: HttpContentHeaders
    fullName: System.Net.Http.Headers.HttpContentHeaders
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.MediaTypeHeaderValue
    name: MediaTypeHeaderValue
    nameWithType: MediaTypeHeaderValue
    fullName: System.Net.Http.Headers.MediaTypeHeaderValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)
    name: SetDefaultContentHeaders
    nameWithType: MediaTypeFormatter.SetDefaultContentHeaders
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.HttpContentHeaders
    name: HttpContentHeaders
    nameWithType: HttpContentHeaders
    fullName: System.Net.Http.Headers.HttpContentHeaders
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Headers.MediaTypeHeaderValue
    name: MediaTypeHeaderValue
    nameWithType: MediaTypeHeaderValue
    fullName: System.Net.Http.Headers.MediaTypeHeaderValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders
  isExternal: false
  name: SetDefaultContentHeaders
  nameWithType: FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.SetDefaultContentHeaders
- uid: System.Net.Http.Headers.HttpContentHeaders
  commentId: T:System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: true
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.Headers.MediaTypeHeaderValue
  commentId: T:System.Net.Http.Headers.MediaTypeHeaderValue
  parent: System.Net.Http.Headers
  isExternal: true
  name: MediaTypeHeaderValue
  nameWithType: MediaTypeHeaderValue
  fullName: System.Net.Http.Headers.MediaTypeHeaderValue
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent
  commentId: T:System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: true
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.Formatting.IFormatterLogger
  commentId: T:System.Net.Http.Formatting.IFormatterLogger
  parent: System.Net.Http.Formatting
  isExternal: true
  name: IFormatterLogger
  nameWithType: IFormatterLogger
  fullName: System.Net.Http.Formatting.IFormatterLogger
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger)
  nameWithType: MediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type, System.IO.Stream, System.Net.Http.HttpContent, System.Net.Http.Formatting.IFormatterLogger)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
    name: ReadFromStreamAsync
    nameWithType: MediaTypeFormatter.ReadFromStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Formatting.IFormatterLogger
    name: IFormatterLogger
    nameWithType: IFormatterLogger
    fullName: System.Net.Http.Formatting.IFormatterLogger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)
    name: ReadFromStreamAsync
    nameWithType: MediaTypeFormatter.ReadFromStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.Formatting.IFormatterLogger
    name: IFormatterLogger
    nameWithType: IFormatterLogger
    fullName: System.Net.Http.Formatting.IFormatterLogger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync
  isExternal: false
  name: ReadFromStreamAsync
  nameWithType: FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.ReadFromStreamAsync
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: false
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.TransportContext
  commentId: T:System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  commentId: M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
  parent: System.Net.Http.Formatting.MediaTypeFormatter
  isExternal: true
  name: WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext)
  nameWithType: MediaTypeFormatter.WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext)
  fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type, System.Object, System.IO.Stream, System.Net.Http.HttpContent, System.Net.TransportContext)
  spec.csharp:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
    name: WriteToStreamAsync
    nameWithType: MediaTypeFormatter.WriteToStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.TransportContext
    name: TransportContext
    nameWithType: TransportContext
    fullName: System.Net.TransportContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)
    name: WriteToStreamAsync
    nameWithType: MediaTypeFormatter.WriteToStreamAsync
    fullName: System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpContent
    name: HttpContent
    nameWithType: HttpContent
    fullName: System.Net.Http.HttpContent
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.TransportContext
    name: TransportContext
    nameWithType: TransportContext
    fullName: System.Net.TransportContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync*
  commentId: Overload:Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync
  isExternal: false
  name: WriteToStreamAsync
  nameWithType: FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync
  fullName: Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.WriteToStreamAsync
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
