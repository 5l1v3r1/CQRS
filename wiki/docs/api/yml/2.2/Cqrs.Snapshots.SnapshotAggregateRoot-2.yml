### YamlMime:ManagedReference
items:
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
  commentId: T:Cqrs.Snapshots.SnapshotAggregateRoot`2
  id: SnapshotAggregateRoot`2
  parent: Cqrs.Snapshots
  children:
  - Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  - Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  - Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  - Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  langs:
  - csharp
  - vb
  name: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SnapshotAggregateRoot
    path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nAn <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> that supports <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref> for optimised rehydration.\n"
  example: []
  syntax:
    content: 'public abstract class SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> : AggregateRoot<TAuthenticationToken>, IAggregateRoot<TAuthenticationToken> where TSnapshot : Snapshot'
    typeParameters:
    - id: TAuthenticationToken
      description: ''
    - id: TSnapshot
      description: ''
    content.vb: >-
      Public MustInherit Class SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot As Snapshot)
          Inherits AggregateRoot(Of TAuthenticationToken)
          Implements IAggregateRoot(Of TAuthenticationToken)
  inheritance:
  - System.Object
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  derivedClasses:
  - Cqrs.Tests.Substitutes.TestSnapshotAggregate
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  inheritedMembers:
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Id
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Version
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  - Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.ApplyChange(Cqrs.Events.IEvent{{TAuthenticationToken}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  name.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  id: GetSnapshot
  parent: Cqrs.Snapshots.SnapshotAggregateRoot`2
  langs:
  - csharp
  - vb
  name: GetSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSnapshot
    path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
    startLine: 23
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nCalls <xref href=\"Cqrs.Snapshots.SnapshotAggregateRoot%602.CreateSnapshot\" data-throw-if-not-resolved=\"false\"></xref> and applies the <xref href=\"Cqrs.Domain.IAggregateRoot%601.Id\" data-throw-if-not-resolved=\"false\"></xref> of this instance to the <span class=\"typeparamref\">TSnapshot</span> result.\n"
  example: []
  syntax:
    content: public virtual TSnapshot GetSnapshot()
    return:
      type: '{TSnapshot}'
    content.vb: Public Overridable Function GetSnapshot As TSnapshot
  overload: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot*
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot()
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore(`1)
  id: Restore(`1)
  parent: Cqrs.Snapshots.SnapshotAggregateRoot`2
  langs:
  - csharp
  - vb
  name: Restore(TSnapshot)
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore(TSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore(TSnapshot)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Restore
    path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
    startLine: 36
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nSets the <xref href=\"Cqrs.Domain.IAggregateRoot%601.Id\" data-throw-if-not-resolved=\"false\"></xref> of this instance from <xref href=\"Cqrs.Snapshots.Snapshot.Id\" data-throw-if-not-resolved=\"false\"></xref> the provided <span class=\"paramref\">snapshot</span>,\nsets the <xref href=\"Cqrs.Domain.IAggregateRoot%601.Version\" data-throw-if-not-resolved=\"false\"></xref> of this instance from  <xref href=\"Cqrs.Snapshots.Snapshot.Version\" data-throw-if-not-resolved=\"false\"></xref> the provided <span class=\"paramref\">snapshot</span>,\nthen calls <xref href=\"Cqrs.Snapshots.SnapshotAggregateRoot%602.RestoreFromSnapshot(%601)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Restore(TSnapshot snapshot)
    parameters:
    - id: snapshot
      type: '{TSnapshot}'
      description: The <span class="typeparamref">TSnapshot</span> to rehydrate this instance from.
    content.vb: Public Overridable Sub Restore(snapshot As TSnapshot)
  overload: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore*
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore(TSnapshot)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore(TSnapshot)
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  id: CreateSnapshot
  parent: Cqrs.Snapshots.SnapshotAggregateRoot`2
  langs:
  - csharp
  - vb
  name: CreateSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSnapshot
    path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
    startLine: 46
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nCreate a <span class=\"typeparamref\">TSnapshot</span> of the current state of this instance.\n"
  example: []
  syntax:
    content: protected abstract TSnapshot CreateSnapshot()
    return:
      type: '{TSnapshot}'
    content.vb: Protected MustOverride Function CreateSnapshot As TSnapshot
  overload: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot*
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  id: RestoreFromSnapshot(`1)
  parent: Cqrs.Snapshots.SnapshotAggregateRoot`2
  langs:
  - csharp
  - vb
  name: RestoreFromSnapshot(TSnapshot)
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RestoreFromSnapshot
    path: Framework/Cqrs/Snapshots/SnapshotAggregateRoot.cs
    startLine: 52
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nRehydrate this instance from the provided <span class=\"paramref\">snapshot</span>.\n"
  example: []
  syntax:
    content: protected abstract void RestoreFromSnapshot(TSnapshot snapshot)
    parameters:
    - id: snapshot
      type: '{TSnapshot}'
      description: The <span class="typeparamref">TSnapshot</span> to rehydrate this instance from.
    content.vb: Protected MustOverride Sub RestoreFromSnapshot(snapshot As TSnapshot)
  overload: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot*
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
references:
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.Snapshot
  commentId: T:Cqrs.Snapshots.Snapshot
  parent: Cqrs.Snapshots
  isExternal: false
  name: Snapshot
  nameWithType: Snapshot
  fullName: Cqrs.Snapshots.Snapshot
- uid: Cqrs.Snapshots
  commentId: N:Cqrs.Snapshots
  isExternal: false
  name: Cqrs.Snapshots
  nameWithType: Cqrs.Snapshots
  fullName: Cqrs.Snapshots
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.AggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.AggregateRoot`1
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Id
  commentId: P:Cqrs.Domain.AggregateRoot{`0}.Id
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.Id
  name: Id
  nameWithType: AggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.Version
  commentId: P:Cqrs.Domain.AggregateRoot{`0}.Version
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.Version
  name: Version
  nameWithType: AggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.GetUncommittedChanges
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.MarkChangesAsCommitted
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}.ApplyChange(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Domain.AggregateRoot{`0}.ApplyChange(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Domain.AggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.AggregateRoot`1
  commentId: T:Cqrs.Domain.AggregateRoot`1
  isExternal: false
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Domain.AggregateRoot`1.Id
  commentId: P:Cqrs.Domain.AggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: AggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Domain.AggregateRoot`1.Version
  commentId: P:Cqrs.Domain.AggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: AggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  commentId: M:Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: AggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: ApplyChange(IEvent<TAuthenticationToken>)
  nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken).ApplyChange(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: ApplyChange(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot<TAuthenticationToken>.ApplyChange
    fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>.ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1.ApplyChange(Cqrs.Events.IEvent{`0})
    name: ApplyChange
    nameWithType: AggregateRoot(Of TAuthenticationToken).ApplyChange
    fullName: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken).ApplyChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  isExternal: false
  name: CreateSnapshot()
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot()
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot()
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
    name: CreateSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.Id
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot*
  commentId: Overload:Cqrs.Snapshots.SnapshotAggregateRoot`2.GetSnapshot
  isExternal: false
  name: GetSnapshot
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.GetSnapshot
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).GetSnapshot
- uid: '{TSnapshot}'
  commentId: '!:TSnapshot'
  definition: TSnapshot
  name: TSnapshot
  nameWithType: TSnapshot
  fullName: TSnapshot
- uid: TSnapshot
  isExternal: false
  name: TSnapshot
  nameWithType: TSnapshot
  fullName: TSnapshot
- uid: Cqrs.Snapshots.Snapshot.Id
  commentId: P:Cqrs.Snapshots.Snapshot.Id
  parent: Cqrs.Snapshots.Snapshot
  isExternal: false
  name: Id
  nameWithType: Snapshot.Id
  fullName: Cqrs.Snapshots.Snapshot.Id
- uid: Cqrs.Domain.IAggregateRoot`1.Version
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: IAggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Snapshots.Snapshot.Version
  commentId: P:Cqrs.Snapshots.Snapshot.Version
  parent: Cqrs.Snapshots.Snapshot
  isExternal: false
  name: Version
  nameWithType: Snapshot.Version
  fullName: Cqrs.Snapshots.Snapshot.Version
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  commentId: M:Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
  isExternal: false
  name: RestoreFromSnapshot(TSnapshot)
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot(TSnapshot)
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot(TSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot(`1)
    name: RestoreFromSnapshot
    nameWithType: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore*
  commentId: Overload:Cqrs.Snapshots.SnapshotAggregateRoot`2.Restore
  isExternal: false
  name: Restore
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.Restore
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).Restore
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot*
  commentId: Overload:Cqrs.Snapshots.SnapshotAggregateRoot`2.CreateSnapshot
  isExternal: false
  name: CreateSnapshot
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.CreateSnapshot
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).CreateSnapshot
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot*
  commentId: Overload:Cqrs.Snapshots.SnapshotAggregateRoot`2.RestoreFromSnapshot
  isExternal: false
  name: RestoreFromSnapshot
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>.RestoreFromSnapshot
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot).RestoreFromSnapshot
