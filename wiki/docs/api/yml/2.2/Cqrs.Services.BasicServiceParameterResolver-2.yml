### YamlMime:ManagedReference
items:
- uid: Cqrs.Services.BasicServiceParameterResolver`2
  commentId: T:Cqrs.Services.BasicServiceParameterResolver`2
  id: BasicServiceParameterResolver`2
  parent: Cqrs.Services
  children:
  - Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.IEventDataResolver)
  - Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.ISingleSignOnTokenResolver,Cqrs.Services.IEventDataResolver)
  - Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  - Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  - Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  - Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  - Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  - Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  - Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  langs:
  - csharp
  - vb
  name: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BasicServiceParameterResolver
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nA <xref href=\"System.Runtime.Serialization.DataContractResolver\" data-throw-if-not-resolved=\"false\"></xref> for use via WCF that ensures basic support for \n<xref href=\"Cqrs.Services.ServiceResponse\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Cqrs.Services.ServiceRequest%601\" data-throw-if-not-resolved=\"false\"></xref>\nand anything <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602.TokenResolver\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602.EventDataResolver\" data-throw-if-not-resolved=\"false\"></xref> support.\n"
  example: []
  syntax:
    content: 'public abstract class BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> : DataContractResolver, IServiceParameterResolver'
    typeParameters:
    - id: TServiceParameter
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the service to include in the <xref href="Cqrs.Services.BasicServiceParameterResolver%602.ServiceNamespace" data-throw-if-not-resolved="false"></xref>.
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      Public MustInherit Class BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
          Inherits DataContractResolver
          Implements IServiceParameterResolver
  inheritance:
  - System.Object
  - System.Runtime.Serialization.DataContractResolver
  derivedClasses:
  - Cqrs.Services.ServiceParameterResolver`2
  implements:
  - Cqrs.Services.IServiceParameterResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
  name.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.ISingleSignOnTokenResolver,Cqrs.Services.IEventDataResolver)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.ISingleSignOnTokenResolver,Cqrs.Services.IEventDataResolver)
  id: '#ctor(Cqrs.Services.ISingleSignOnTokenResolver,Cqrs.Services.IEventDataResolver)'
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: BasicServiceParameterResolver(ISingleSignOnTokenResolver, IEventDataResolver)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver(ISingleSignOnTokenResolver, IEventDataResolver)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver(Cqrs.Services.ISingleSignOnTokenResolver, Cqrs.Services.IEventDataResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 27
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected BasicServiceParameterResolver(ISingleSignOnTokenResolver tokenResolver, IEventDataResolver eventDataResolver)
    parameters:
    - id: tokenResolver
      type: Cqrs.Services.ISingleSignOnTokenResolver
    - id: eventDataResolver
      type: Cqrs.Services.IEventDataResolver
    content.vb: Protected Sub New(tokenResolver As ISingleSignOnTokenResolver, eventDataResolver As IEventDataResolver)
  overload: Cqrs.Services.BasicServiceParameterResolver`2.#ctor*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver(ISingleSignOnTokenResolver, IEventDataResolver)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver(Cqrs.Services.ISingleSignOnTokenResolver, Cqrs.Services.IEventDataResolver)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.IEventDataResolver)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.#ctor(Cqrs.Services.IEventDataResolver)
  id: '#ctor(Cqrs.Services.IEventDataResolver)'
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: BasicServiceParameterResolver(IEventDataResolver)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver(IEventDataResolver)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver(Cqrs.Services.IEventDataResolver)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602\" data-throw-if-not-resolved=\"false\"></xref>\ndefaulting <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602.TokenResolver\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Cqrs.Authentication.BasicTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected BasicServiceParameterResolver(IEventDataResolver eventDataResolver)
    parameters:
    - id: eventDataResolver
      type: Cqrs.Services.IEventDataResolver
    content.vb: Protected Sub New(eventDataResolver As IEventDataResolver)
  overload: Cqrs.Services.BasicServiceParameterResolver`2.#ctor*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver(IEventDataResolver)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver(Cqrs.Services.IEventDataResolver)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  id: TokenResolver
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: TokenResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TokenResolver
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 48
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nThe <xref href=\"Cqrs.Services.IServiceParameterResolver\" data-throw-if-not-resolved=\"false\"></xref> that has information about resolving authentication tokens such as <code data-dev-comment-type=\"typeparamref\">TAuthenticationToken</code>.\n"
  example: []
  syntax:
    content: protected IServiceParameterResolver TokenResolver { get; }
    parameters: []
    return:
      type: Cqrs.Services.IServiceParameterResolver
    content.vb: Protected ReadOnly Property TokenResolver As IServiceParameterResolver
  overload: Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  id: EventDataResolver
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: EventDataResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventDataResolver
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 53
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or sets the <xref href=\"Cqrs.Services.IEventDataResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IEventDataResolver EventDataResolver { get; }
    parameters: []
    return:
      type: Cqrs.Services.IEventDataResolver
    content.vb: Protected ReadOnly Property EventDataResolver As IEventDataResolver
  overload: Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  id: ServiceNamespace
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: ServiceNamespace
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ServiceNamespace
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 58
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nThe Service Name included in all <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> resolution information.\n"
  example: []
  syntax:
    content: protected string ServiceNamespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected ReadOnly Property ServiceNamespace As String
  overload: Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  id: TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, out System.Xml.XmlDictionaryString, out System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TryResolveType
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 69
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nMaps a data contract type to an xsi:type name and namespace during serialization.\n"
  example: []
  syntax:
    content: public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
    parameters:
    - id: dataContractType
      type: System.Type
      description: The type to map.
    - id: declaredType
      type: System.Type
      description: The type declared in the data contract.
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
      description: The known type resolver.
    - id: typeName
      type: System.Xml.XmlDictionaryString
      description: The xsi:type name.
    - id: typeNamespace
      type: System.Xml.XmlDictionaryString
      description: The xsi:type namespace.
    return:
      type: System.Boolean
      description: true if mapping succeeded; otherwise, false.
    content.vb: Public Overrides Function TryResolveType(dataContractType As Type, declaredType As Type, knownTypeResolver As DataContractResolver, ByRef typeName As XmlDictionaryString, ByRef typeNamespace As XmlDictionaryString) As Boolean
  overridden: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  overload: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType*
  implements:
  - Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ByRef System.Xml.XmlDictionaryString, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  id: TryResolveUnResolvedType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: TryResolveUnResolvedType(Type, Type, DataContractResolver, ref XmlDictionaryString, ref XmlDictionaryString)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveUnResolvedType(Type, Type, DataContractResolver, ref XmlDictionaryString, ref XmlDictionaryString)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveUnResolvedType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ref System.Xml.XmlDictionaryString, ref System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TryResolveUnResolvedType
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 112
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nTry to resolve an types <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602.TryResolveType(System.Type%2cSystem.Type%2cSystem.Runtime.Serialization.DataContractResolver%2cSystem.Xml.XmlDictionaryString%40%2cSystem.Xml.XmlDictionaryString%40)\" data-throw-if-not-resolved=\"false\"></xref> fails to.\n"
  example: []
  syntax:
    content: protected abstract bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
    parameters:
    - id: dataContractType
      type: System.Type
      description: The type to map.
    - id: declaredType
      type: System.Type
      description: The type declared in the data contract.
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
      description: The known type resolver.
    - id: typeName
      type: System.Xml.XmlDictionaryString
      description: The xsi:type name.
    - id: typeNamespace
      type: System.Xml.XmlDictionaryString
      description: The xsi:type namespace.
    return:
      type: System.Boolean
      description: true if mapping succeeded; otherwise, false.
    content.vb: Protected MustOverride Function TryResolveUnResolvedType(dataContractType As Type, declaredType As Type, knownTypeResolver As DataContractResolver, ByRef typeName As XmlDictionaryString, ByRef typeNamespace As XmlDictionaryString) As Boolean
  overload: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveUnResolvedType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveUnResolvedType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ByRef System.Xml.XmlDictionaryString, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryResolveUnResolvedType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  id: ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolveName
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 124
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nMaps the specified xsi:type name and namespace to a data contract type during deserialization.\n"
  example: []
  syntax:
    content: public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
    parameters:
    - id: typeName
      type: System.String
      description: The xsi:type name to map.
    - id: typeNamespace
      type: System.String
      description: The xsi:type namespace to map.
    - id: declaredType
      type: System.Type
      description: The type declared in the data contract.
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
      description: The known type resolver.
    return:
      type: System.Type
      description: "\nThe type the xsi:type name and namespace is mapped to. \n"
    content.vb: Public Overrides Function ResolveName(typeName As String, typeNamespace As String, declaredType As Type, knownTypeResolver As DataContractResolver) As Type
  overridden: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  overload: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName*
  implements:
  - Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName(String, String, Type, DataContractResolver)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  id: ResolveUnResolvedName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: Cqrs.Services.BasicServiceParameterResolver`2
  langs:
  - csharp
  - vb
  name: ResolveUnResolvedName(String, String, Type, DataContractResolver)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveUnResolvedName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveUnResolvedName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResolveUnResolvedName
    path: Framework/Cqrs/Services/BasicServiceParameterResolver.cs
    startLine: 165
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nTry to resolve an types <xref href=\"Cqrs.Services.BasicServiceParameterResolver%602.ResolveName(System.String%2cSystem.String%2cSystem.Type%2cSystem.Runtime.Serialization.DataContractResolver)\" data-throw-if-not-resolved=\"false\"></xref> fails to.\n"
  example: []
  syntax:
    content: protected abstract Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
    parameters:
    - id: typeName
      type: System.String
      description: The xsi:type name to map.
    - id: typeNamespace
      type: System.String
      description: The xsi:type namespace to map.
    - id: declaredType
      type: System.Type
      description: The type declared in the data contract.
    - id: knownTypeResolver
      type: System.Runtime.Serialization.DataContractResolver
      description: The known type resolver.
    return:
      type: System.Type
      description: "\nThe type the xsi:type name and namespace is mapped to. \n"
    content.vb: Protected MustOverride Function ResolveUnResolvedName(typeName As String, typeNamespace As String, declaredType As Type, knownTypeResolver As DataContractResolver) As Type
  overload: Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName*
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveUnResolvedName(String, String, Type, DataContractResolver)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveUnResolvedName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
references:
- uid: System.Runtime.Serialization.DataContractResolver
  commentId: T:System.Runtime.Serialization.DataContractResolver
  parent: System.Runtime.Serialization
  isExternal: true
  name: DataContractResolver
  nameWithType: DataContractResolver
  fullName: System.Runtime.Serialization.DataContractResolver
- uid: Cqrs.Services.ServiceResponse
  commentId: T:Cqrs.Services.ServiceResponse
  parent: Cqrs.Services
  isExternal: false
  name: ServiceResponse
  nameWithType: ServiceResponse
  fullName: Cqrs.Services.ServiceResponse
- uid: Cqrs.Services.ServiceRequest`1
  commentId: T:Cqrs.Services.ServiceRequest`1
  isExternal: false
  name: ServiceRequest<TAuthenticationToken>
  nameWithType: ServiceRequest<TAuthenticationToken>
  fullName: Cqrs.Services.ServiceRequest<TAuthenticationToken>
  nameWithType.vb: ServiceRequest(Of TAuthenticationToken)
  fullName.vb: Cqrs.Services.ServiceRequest(Of TAuthenticationToken)
  name.vb: ServiceRequest(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.ServiceRequest`1
    name: ServiceRequest
    nameWithType: ServiceRequest
    fullName: Cqrs.Services.ServiceRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.ServiceRequest`1
    name: ServiceRequest
    nameWithType: ServiceRequest
    fullName: Cqrs.Services.ServiceRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  isExternal: false
  name: TokenResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  isExternal: false
  name: EventDataResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  commentId: P:Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  isExternal: false
  name: ServiceNamespace
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Services.IServiceParameterResolver
  commentId: T:Cqrs.Services.IServiceParameterResolver
  parent: Cqrs.Services
  isExternal: false
  name: IServiceParameterResolver
  nameWithType: IServiceParameterResolver
  fullName: Cqrs.Services.IServiceParameterResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Services.BasicServiceParameterResolver`2
  commentId: T:Cqrs.Services.BasicServiceParameterResolver`2
  isExternal: false
  name: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
  name.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2
    name: BasicServiceParameterResolver
    nameWithType: BasicServiceParameterResolver
    fullName: Cqrs.Services.BasicServiceParameterResolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TServiceParameter
    nameWithType: TServiceParameter
    fullName: TServiceParameter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2
    name: BasicServiceParameterResolver
    nameWithType: BasicServiceParameterResolver
    fullName: Cqrs.Services.BasicServiceParameterResolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TServiceParameter
    nameWithType: TServiceParameter
    fullName: TServiceParameter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.#ctor*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.#ctor
  isExternal: false
  name: BasicServiceParameterResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.BasicServiceParameterResolver
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).BasicServiceParameterResolver
- uid: Cqrs.Services.ISingleSignOnTokenResolver
  commentId: T:Cqrs.Services.ISingleSignOnTokenResolver
  parent: Cqrs.Services
  isExternal: false
  name: ISingleSignOnTokenResolver
  nameWithType: ISingleSignOnTokenResolver
  fullName: Cqrs.Services.ISingleSignOnTokenResolver
- uid: Cqrs.Services.IEventDataResolver
  commentId: T:Cqrs.Services.IEventDataResolver
  parent: Cqrs.Services
  isExternal: false
  name: IEventDataResolver
  nameWithType: IEventDataResolver
  fullName: Cqrs.Services.IEventDataResolver
- uid: Cqrs.Authentication.BasicTokenResolver
  commentId: T:Cqrs.Authentication.BasicTokenResolver
  isExternal: false
  name: BasicTokenResolver
  nameWithType: BasicTokenResolver
  fullName: Cqrs.Authentication.BasicTokenResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.TokenResolver
  isExternal: false
  name: TokenResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TokenResolver
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TokenResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.EventDataResolver
  isExternal: false
  name: EventDataResolver
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.EventDataResolver
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).EventDataResolver
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.ServiceNamespace
  isExternal: false
  name: ServiceNamespace
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ServiceNamespace
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ServiceNamespace
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: System.Runtime.Serialization.DataContractResolver
  isExternal: true
  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  nameWithType: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  fullName: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: DataContractResolver.TryResolveType
    fullName: System.Runtime.Serialization.DataContractResolver.TryResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: DataContractResolver.TryResolveType
    fullName: System.Runtime.Serialization.DataContractResolver.TryResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType
  isExternal: false
  name: TryResolveType
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType
- uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  parent: Cqrs.Services.IServiceParameterResolver
  isExternal: true
  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  nameWithType: IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: IServiceParameterResolver.TryResolveType
    fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IServiceParameterResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: IServiceParameterResolver.TryResolveType
    fullName: Cqrs.Services.IServiceParameterResolver.TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlDictionaryString
  commentId: T:System.Xml.XmlDictionaryString
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryString
  nameWithType: XmlDictionaryString
  fullName: System.Xml.XmlDictionaryString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
  isExternal: true
  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType
    fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    name: TryResolveType
    nameWithType: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType
    fullName: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    nameWithType: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.TryResolveUnResolvedType
  isExternal: false
  name: TryResolveUnResolvedType
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveUnResolvedType
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.TryResolveUnResolvedType
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveUnResolvedType
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).TryResolveUnResolvedType
- uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: System.Runtime.Serialization.DataContractResolver
  isExternal: true
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)
  fullName: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  spec.csharp:
  - uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: DataContractResolver.ResolveName
    fullName: System.Runtime.Serialization.DataContractResolver.ResolveName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: DataContractResolver.ResolveName
    fullName: System.Runtime.Serialization.DataContractResolver.ResolveName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.ResolveName
  isExternal: false
  name: ResolveName
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName
- uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  parent: Cqrs.Services.IServiceParameterResolver
  isExternal: true
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  spec.csharp:
  - uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: IServiceParameterResolver.ResolveName
    fullName: Cqrs.Services.IServiceParameterResolver.ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IServiceParameterResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: IServiceParameterResolver.ResolveName
    fullName: Cqrs.Services.IServiceParameterResolver.ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  commentId: M:Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
  isExternal: true
  name: ResolveName(String, String, Type, DataContractResolver)
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName(String, String, Type, DataContractResolver)
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName(String, String, Type, DataContractResolver)
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
  spec.csharp:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName
    fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    name: ResolveName
    nameWithType: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName
    fullName: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataContractResolver
    name: DataContractResolver
    nameWithType: DataContractResolver
    fullName: System.Runtime.Serialization.DataContractResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName*
  commentId: Overload:Cqrs.Services.BasicServiceParameterResolver`2.ResolveUnResolvedName
  isExternal: false
  name: ResolveUnResolvedName
  nameWithType: BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveUnResolvedName
  fullName: Cqrs.Services.BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken>.ResolveUnResolvedName
  nameWithType.vb: BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveUnResolvedName
  fullName.vb: Cqrs.Services.BasicServiceParameterResolver(Of TServiceParameter, TAuthenticationToken).ResolveUnResolvedName
