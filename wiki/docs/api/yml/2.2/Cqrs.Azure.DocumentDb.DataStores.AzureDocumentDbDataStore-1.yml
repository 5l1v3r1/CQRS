### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  commentId: T:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  id: AzureDocumentDbDataStore`1
  parent: Cqrs.Azure.DocumentDb.DataStores
  children:
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor(ILogger,DocumentClient,Database,DocumentCollection,IOrderedQueryable{`0},Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(`0)
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(IEnumerable{`0})
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy(`0)
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove(`0)
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll
  - Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update(`0)
  langs:
  - csharp
  - vb
  name: AzureDocumentDbDataStore<TData>
  nameWithType: AzureDocumentDbDataStore<TData>
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbDataStore
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 27
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nA <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> that uses Azure DocumentDB (CosmosDB) for storage.\n"
  example: []
  syntax:
    content: 'public class AzureDocumentDbDataStore<TData> : object, IDataStore<TData>, IOrderedQueryable<TData>, IDisposable where TData : AzureDocumentDbEntity'
    typeParameters:
    - id: TData
      description: The <see cref="!:Type"></see> of <xref href="Cqrs.Entities.IEntity" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.DataStores.IDataStore%601" data-throw-if-not-resolved="false"></xref> will contain.
    content.vb: >-
      Public Class AzureDocumentDbDataStore(Of TData As AzureDocumentDbEntity)
          Inherits Object
          Implements IDataStore(Of TData), IOrderedQueryable(Of TData), IDisposable
  inheritance:
  - System.Object
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}
  - System.Linq.IOrderedQueryable{{TData}}
  - System.IDisposable
  nameWithType.vb: AzureDocumentDbDataStore(Of TData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData)
  name.vb: AzureDocumentDbDataStore(Of TData)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient
  id: AzureDocumentDbClient
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbClient
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbClient
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbClient
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbClient
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 33
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <see cref=\"!:DocumentClient\"></see>\n"
  example: []
  syntax:
    content: protected DocumentClient AzureDocumentDbClient { get; }
    parameters: []
    return:
      type: DocumentClient
    content.vb: Protected ReadOnly Property AzureDocumentDbClient As DocumentClient
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbClient
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbClient
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase
  id: AzureDocumentDbDatabase
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbDatabase
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbDatabase
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbDatabase
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbDatabase
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 38
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <see cref=\"!:Database\"></see>\n"
  example: []
  syntax:
    content: protected Database AzureDocumentDbDatabase { get; }
    parameters: []
    return:
      type: Database
    content.vb: Protected ReadOnly Property AzureDocumentDbDatabase As Database
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbDatabase
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbDatabase
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection
  id: AzureDocumentDbCollection
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbCollection
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbCollection
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbCollection
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbCollection
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 43
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <see cref=\"!:DocumentCollection\"></see>\n"
  example: []
  syntax:
    content: protected DocumentCollection AzureDocumentDbCollection { get; }
    parameters: []
    return:
      type: DocumentCollection
    content.vb: Protected ReadOnly Property AzureDocumentDbCollection As DocumentCollection
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbCollection
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbCollection
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery
  id: AzureDocumentDbQuery
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbQuery
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbQuery
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbQuery
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbQuery
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 48
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <see cref=\"!:IOrderedQueryable&lt;T>\"></see>\n"
  example: []
  syntax:
    content: protected IOrderedQueryable<TData> AzureDocumentDbQuery { get; }
    parameters: []
    return:
      type: IOrderedQueryable{{TData}}
    content.vb: Protected ReadOnly Property AzureDocumentDbQuery As IOrderedQueryable(Of TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbQuery
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbQuery
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper
  id: AzureDocumentDbHelper
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbHelper
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbHelper
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureDocumentDbHelper
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 53
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <xref href=\"Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected IAzureDocumentDbHelper AzureDocumentDbHelper { get; }
    parameters: []
    return:
      type: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
    content.vb: Protected ReadOnly Property AzureDocumentDbHelper As IAzureDocumentDbHelper
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger
  id: Logger
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: AzureDocumentDbDataStore<TData>.Logger
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Logger
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 58
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets or sets the <see cref=\"!:ILogger\"></see>\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Logger
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor(ILogger,DocumentClient,Database,DocumentCollection,IOrderedQueryable{`0},Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor(ILogger,DocumentClient,Database,DocumentCollection,IOrderedQueryable{`0},Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)
  id: '#ctor(ILogger,DocumentClient,Database,DocumentCollection,IOrderedQueryable{`0},Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)'
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable<TData>, IAzureDocumentDbHelper)
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable<TData>, IAzureDocumentDbHelper)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable<TData>, Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 63
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nInstantiates and Initialises a new instance of the <xref href=\"Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AzureDocumentDbDataStore(ILogger logger, DocumentClient azureDocumentDbClient, Database azureDocumentDbDatabase, DocumentCollection azureDocumentDbCollection, IOrderedQueryable<TData> azureDocumentDbQuery, IAzureDocumentDbHelper azureDocumentDbHelper)
    parameters:
    - id: logger
      type: ILogger
    - id: azureDocumentDbClient
      type: DocumentClient
    - id: azureDocumentDbDatabase
      type: Database
    - id: azureDocumentDbCollection
      type: DocumentCollection
    - id: azureDocumentDbQuery
      type: IOrderedQueryable{{TData}}
    - id: azureDocumentDbHelper
      type: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
    content.vb: Public Sub New(logger As ILogger, azureDocumentDbClient As DocumentClient, azureDocumentDbDatabase As Database, azureDocumentDbCollection As DocumentCollection, azureDocumentDbQuery As IOrderedQueryable(Of TData), azureDocumentDbHelper As IAzureDocumentDbHelper)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable(Of TData), IAzureDocumentDbHelper)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable(Of TData), Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper)
  name.vb: AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable(Of TData), IAzureDocumentDbHelper)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator
  id: GetEnumerator
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: AzureDocumentDbDataStore<TData>.GetEnumerator()
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEnumerator
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 82
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<TData> GetEnumerator()
    return:
      type: IEnumerator{{TData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).GetEnumerator()
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression
  id: Expression
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: AzureDocumentDbDataStore<TData>.Expression
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Expression
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Expression
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 121
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets the expression tree that is associated with the instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Expression Expression { get; }
    parameters: []
    return:
      type: Expression
      description: "\nThe <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public ReadOnly Property Expression As Expression
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Expression
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Expression
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType
  id: ElementType
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: AzureDocumentDbDataStore<TData>.ElementType
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.ElementType
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ElementType
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 132
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets the type of the element(s) that are returned when the expression tree associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public Type ElementType { get; }
    parameters: []
    return:
      type: Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.\n"
    content.vb: Public ReadOnly Property ElementType As Type
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).ElementType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).ElementType
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider
  commentId: P:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider
  id: Provider
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: AzureDocumentDbDataStore<TData>.Provider
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Provider
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Provider
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 143
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nGets the singleResultQuery provider that is associated with this data source.\n"
  example: []
  syntax:
    content: public IQueryProvider Provider { get; }
    parameters: []
    return:
      type: IQueryProvider
      description: "\nThe <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this data source.\n"
    content.vb: Public ReadOnly Property Provider As IQueryProvider
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Provider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Provider
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(`0)
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(`0)
  id: Add(`0)
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: AzureDocumentDbDataStore<TData>.Add(TData)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 155
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Add(data As TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Add(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Add(TData)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(IEnumerable{`0})
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add(IEnumerable{`0})
  id: Add(IEnumerable{`0})
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: AzureDocumentDbDataStore<TData>.Add(IEnumerable<TData>)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Add(IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 174
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nAdd the provided <code data-dev-comment-type=\"paramref\">data</code> to the data store and persist the change.\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: IEnumerable{{TData}}
    content.vb: Public Sub Add(data As IEnumerable(Of TData))
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Add(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Add(IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove(`0)
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove(`0)
  id: Remove(`0)
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Remove(TData)
  nameWithType: AzureDocumentDbDataStore<TData>.Remove(TData)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Remove(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Remove
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 193
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nWill mark the <code data-dev-comment-type=\"paramref\">data</code> as logically (or soft) by setting <xref href=\"Cqrs.Entities.Entity.IsLogicallyDeleted\" data-throw-if-not-resolved=\"false\"></xref> to true\n"
  example: []
  syntax:
    content: public void Remove(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Remove(data As TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Remove(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Remove(TData)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy(`0)
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: AzureDocumentDbDataStore<TData>.Destroy(TData)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 210
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nRemove the provided <code data-dev-comment-type=\"paramref\">data</code> (normally by <xref href=\"Cqrs.Entities.IEntity.Rsn\" data-throw-if-not-resolved=\"false\"></xref>) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Destroy(data As TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Destroy(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Destroy(TData)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll
  id: RemoveAll
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: AzureDocumentDbDataStore<TData>.RemoveAll()
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 237
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nRemove all contents (normally by use of a truncate operation) from the data store and persist the change.\n"
  example: []
  syntax:
    content: public void RemoveAll()
    content.vb: Public Sub RemoveAll
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).RemoveAll()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).RemoveAll()
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update(`0)
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update(`0)
  id: Update(`0)
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: AzureDocumentDbDataStore<TData>.Update(TData)
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 253
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nUpdate the provided <code data-dev-comment-type=\"paramref\">data</code> in the data store and persist the change.\n"
  example: []
  syntax:
    content: public void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Update(data As TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update*
  implements:
  - Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Update(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Update(TData)
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose
  id: Dispose
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AzureDocumentDbDataStore<TData>.Dispose()
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Dispose()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Dispose
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 284
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Dispose()
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable
  commentId: M:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable
  id: AsEnumerable
  parent: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  langs:
  - csharp
  - vb
  name: AsEnumerable()
  nameWithType: AzureDocumentDbDataStore<TData>.AsEnumerable()
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AsEnumerable()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AsEnumerable
    path: Framework/Azure/Cqrs.Azure.DocumentDb/DataStores/AzureDocumentDbDataStore.cs
    startLine: 295
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.DataStores
  summary: "\nReturns the instance as an <see cref=\"!:IEnumerable&lt;T>\"></see>.\n"
  example: []
  syntax:
    content: public IEnumerable<TData> AsEnumerable()
    return:
      type: IEnumerable{{TData}}
      description: ''
    content.vb: Public Function AsEnumerable As IEnumerable(Of TData)
  overload: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable*
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AsEnumerable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AsEnumerable()
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.Azure.DocumentDb.DataStores
  commentId: N:Cqrs.Azure.DocumentDb.DataStores
  isExternal: false
  name: Cqrs.Azure.DocumentDb.DataStores
  nameWithType: Cqrs.Azure.DocumentDb.DataStores
  fullName: Cqrs.Azure.DocumentDb.DataStores
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.DataStores.IDataStore{{TData}}
  commentId: T:Cqrs.DataStores.IDataStore{`0}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TData}}
  commentId: T:System.Linq.IOrderedQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TData>
  nameWithType: IOrderedQueryable<TData>
  fullName: System.Linq.IOrderedQueryable<TData>
  nameWithType.vb: IOrderedQueryable(Of TData)
  fullName.vb: System.Linq.IOrderedQueryable(Of TData)
  name.vb: IOrderedQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbClient
  isExternal: false
  name: AzureDocumentDbClient
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbClient
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbClient
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbClient
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbClient
- uid: DocumentClient
  isExternal: true
  name: DocumentClient
  nameWithType: DocumentClient
  fullName: DocumentClient
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbDatabase
  isExternal: false
  name: AzureDocumentDbDatabase
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbDatabase
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbDatabase
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbDatabase
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbDatabase
- uid: Database
  isExternal: true
  name: Database
  nameWithType: Database
  fullName: Database
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbCollection
  isExternal: false
  name: AzureDocumentDbCollection
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbCollection
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbCollection
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbCollection
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbCollection
- uid: DocumentCollection
  isExternal: true
  name: DocumentCollection
  nameWithType: DocumentCollection
  fullName: DocumentCollection
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbQuery
  isExternal: false
  name: AzureDocumentDbQuery
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbQuery
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbQuery
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbQuery
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbQuery
- uid: IOrderedQueryable{{TData}}
  commentId: '!:IOrderedQueryable{`0}'
  definition: IOrderedQueryable`1
  name: IOrderedQueryable<TData>
  nameWithType: IOrderedQueryable<TData>
  fullName: IOrderedQueryable<TData>
  nameWithType.vb: IOrderedQueryable(Of TData)
  fullName.vb: IOrderedQueryable(Of TData)
  name.vb: IOrderedQueryable(Of TData)
  spec.csharp:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<>
  nameWithType: IOrderedQueryable<>
  fullName: IOrderedQueryable<>
  nameWithType.vb: IOrderedQueryable(Of )
  fullName.vb: IOrderedQueryable(Of )
  name.vb: IOrderedQueryable(Of )
  spec.csharp:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  commentId: T:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  parent: Cqrs.Azure.DocumentDb
  isExternal: false
  name: IAzureDocumentDbHelper
  nameWithType: IAzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AzureDocumentDbHelper
  isExternal: false
  name: AzureDocumentDbHelper
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbHelper
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbHelper
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbHelper
- uid: Cqrs.Azure.DocumentDb
  commentId: N:Cqrs.Azure.DocumentDb
  isExternal: false
  name: Cqrs.Azure.DocumentDb
  nameWithType: Cqrs.Azure.DocumentDb
  fullName: Cqrs.Azure.DocumentDb
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Logger
  isExternal: false
  name: Logger
  nameWithType: AzureDocumentDbDataStore<TData>.Logger
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Logger
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Logger
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Logger
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  commentId: T:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
  isExternal: false
  name: AzureDocumentDbDataStore<TData>
  nameWithType: AzureDocumentDbDataStore<TData>
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>
  nameWithType.vb: AzureDocumentDbDataStore(Of TData)
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData)
  name.vb: AzureDocumentDbDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
    name: AzureDocumentDbDataStore
    nameWithType: AzureDocumentDbDataStore
    fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1
    name: AzureDocumentDbDataStore
    nameWithType: AzureDocumentDbDataStore
    fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.#ctor
  isExternal: false
  name: AzureDocumentDbDataStore
  nameWithType: AzureDocumentDbDataStore<TData>.AzureDocumentDbDataStore
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AzureDocumentDbDataStore
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AzureDocumentDbDataStore
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AzureDocumentDbDataStore
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: AzureDocumentDbDataStore<TData>.GetEnumerator
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.GetEnumerator
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).GetEnumerator
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).GetEnumerator
- uid: IEnumerator{{TData}}
  commentId: '!:IEnumerator{`0}'
  definition: IEnumerator`1
  name: IEnumerator<TData>
  nameWithType: IEnumerator<TData>
  fullName: IEnumerator<TData>
  nameWithType.vb: IEnumerator(Of TData)
  fullName.vb: IEnumerator(Of TData)
  name.vb: IEnumerator(Of TData)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  commentId: '!:IEnumerator`1'
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Expression
  isExternal: false
  name: Expression
  nameWithType: AzureDocumentDbDataStore<TData>.Expression
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Expression
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Expression
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Expression
- uid: Expression
  commentId: '!:Expression'
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.ElementType
  isExternal: false
  name: ElementType
  nameWithType: AzureDocumentDbDataStore<TData>.ElementType
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.ElementType
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).ElementType
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).ElementType
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Provider
  isExternal: false
  name: Provider
  nameWithType: AzureDocumentDbDataStore<TData>.Provider
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Provider
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Provider
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Provider
- uid: IQueryProvider
  commentId: '!:IQueryProvider'
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: IQueryProvider
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Add
  isExternal: false
  name: Add
  nameWithType: AzureDocumentDbDataStore<TData>.Add
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Add
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Add
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Add
- uid: Cqrs.DataStores.IDataStore{{TData}}.Add({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Add(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Add(`0)
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.DataStores.IDataStore`1.Add(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Add(`0)
  isExternal: false
  name: Add(TData)
  nameWithType: IDataStore<TData>.Add(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Add(TData)
  nameWithType.vb: IDataStore(Of TData).Add(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Add(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore<TData>.Add
    fullName: Cqrs.DataStores.IDataStore<TData>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Add(`0)
    name: Add
    nameWithType: IDataStore(Of TData).Add
    fullName: Cqrs.DataStores.IDataStore(Of TData).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: IEnumerable{{TData}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.Entity.IsLogicallyDeleted
  commentId: P:Cqrs.Entities.Entity.IsLogicallyDeleted
  parent: Cqrs.Entities.Entity
  isExternal: false
  name: IsLogicallyDeleted
  nameWithType: Entity.IsLogicallyDeleted
  fullName: Cqrs.Entities.Entity.IsLogicallyDeleted
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Remove
  isExternal: false
  name: Remove
  nameWithType: AzureDocumentDbDataStore<TData>.Remove
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Remove
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Remove
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Remove
- uid: Cqrs.DataStores.IDataStore{{TData}}.Remove({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Remove(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Remove(`0)
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.Entity
  commentId: T:Cqrs.Entities.Entity
  parent: Cqrs.Entities
  isExternal: false
  name: Entity
  nameWithType: Entity
  fullName: Cqrs.Entities.Entity
- uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Remove(`0)
  isExternal: false
  name: Remove(TData)
  nameWithType: IDataStore<TData>.Remove(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Remove(TData)
  nameWithType.vb: IDataStore(Of TData).Remove(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Remove(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore<TData>.Remove
    fullName: Cqrs.DataStores.IDataStore<TData>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Remove(`0)
    name: Remove
    nameWithType: IDataStore(Of TData).Remove
    fullName: Cqrs.DataStores.IDataStore(Of TData).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.IEntity.Rsn
  commentId: P:Cqrs.Entities.IEntity.Rsn
  parent: Cqrs.Entities.IEntity
  isExternal: false
  name: Rsn
  nameWithType: IEntity.Rsn
  fullName: Cqrs.Entities.IEntity.Rsn
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Destroy
  isExternal: false
  name: Destroy
  nameWithType: AzureDocumentDbDataStore<TData>.Destroy
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Destroy
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Destroy
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Destroy
- uid: Cqrs.DataStores.IDataStore{{TData}}.Destroy({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Destroy(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Destroy(`0)
  isExternal: false
  name: Destroy(TData)
  nameWithType: IDataStore<TData>.Destroy(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Destroy(TData)
  nameWithType.vb: IDataStore(Of TData).Destroy(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore<TData>.Destroy
    fullName: Cqrs.DataStores.IDataStore<TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Destroy(`0)
    name: Destroy
    nameWithType: IDataStore(Of TData).Destroy
    fullName: Cqrs.DataStores.IDataStore(Of TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: AzureDocumentDbDataStore<TData>.RemoveAll
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.RemoveAll
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).RemoveAll
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).RemoveAll
- uid: Cqrs.DataStores.IDataStore{{TData}}.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore{`0}.RemoveAll
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.RemoveAll
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.RemoveAll
  commentId: M:Cqrs.DataStores.IDataStore`1.RemoveAll
  isExternal: false
  name: RemoveAll()
  nameWithType: IDataStore<TData>.RemoveAll()
  fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll()
  nameWithType.vb: IDataStore(Of TData).RemoveAll()
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).RemoveAll()
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore<TData>.RemoveAll
    fullName: Cqrs.DataStores.IDataStore<TData>.RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.RemoveAll
    name: RemoveAll
    nameWithType: IDataStore(Of TData).RemoveAll
    fullName: Cqrs.DataStores.IDataStore(Of TData).RemoveAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Update
  isExternal: false
  name: Update
  nameWithType: AzureDocumentDbDataStore<TData>.Update
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Update
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Update
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Update
- uid: Cqrs.DataStores.IDataStore{{TData}}.Update({TData})
  commentId: M:Cqrs.DataStores.IDataStore{`0}.Update(`0)
  parent: Cqrs.DataStores.IDataStore{{TData}}
  definition: Cqrs.DataStores.IDataStore`1.Update(`0)
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores.IDataStore`1.Update(`0)
  commentId: M:Cqrs.DataStores.IDataStore`1.Update(`0)
  isExternal: false
  name: Update(TData)
  nameWithType: IDataStore<TData>.Update(TData)
  fullName: Cqrs.DataStores.IDataStore<TData>.Update(TData)
  nameWithType.vb: IDataStore(Of TData).Update(TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore<TData>.Update
    fullName: Cqrs.DataStores.IDataStore<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1.Update(`0)
    name: Update
    nameWithType: IDataStore(Of TData).Update
    fullName: Cqrs.DataStores.IDataStore(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: AzureDocumentDbDataStore<TData>.Dispose
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.Dispose
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).Dispose
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).Dispose
- uid: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable*
  commentId: Overload:Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore`1.AsEnumerable
  isExternal: false
  name: AsEnumerable
  nameWithType: AzureDocumentDbDataStore<TData>.AsEnumerable
  fullName: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore<TData>.AsEnumerable
  nameWithType.vb: AzureDocumentDbDataStore(Of TData).AsEnumerable
  fullName.vb: Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore(Of TData).AsEnumerable
