### YamlMime:ManagedReference
items:
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  commentId: T:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  id: MongoIndex`1
  parent: Cqrs.Mongo.DataStores.Indexes
  children:
  - Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor
  - Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending
  - Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique
  - Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name
  - Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors
  langs:
  - csharp
  - vb
  name: MongoIndex<TEntity>
  nameWithType: MongoIndex<TEntity>
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MongoIndex
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 18
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nAn index for MongoDB.\n"
  example: []
  syntax:
    content: public abstract class MongoIndex<TEntity>
    typeParameters:
    - id: TEntity
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Entities.IEntity" data-throw-if-not-resolved="false"></xref> this index is for.
    content.vb: Public MustInherit Class MongoIndex(Of TEntity)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Mongo.DataStores.Indexes.ByIsLogicallyDeletedAndRsnMongoIndex`1
  - Cqrs.Mongo.DataStores.Indexes.ByRsnMongoIndex`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: MongoIndex(Of TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity)
  name.vb: MongoIndex(Of TEntity)
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique
  commentId: P:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique
  id: IsUnique
  parent: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  langs:
  - csharp
  - vb
  name: IsUnique
  nameWithType: MongoIndex<TEntity>.IsUnique
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.IsUnique
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsUnique
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 23
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nIndicates if the index enforces unique values. Defaults to false.\n"
  example: []
  syntax:
    content: public bool IsUnique { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsUnique As Boolean
  overload: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique*
  nameWithType.vb: MongoIndex(Of TEntity).IsUnique
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).IsUnique
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending
  commentId: P:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending
  id: IsAcending
  parent: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  langs:
  - csharp
  - vb
  name: IsAcending
  nameWithType: MongoIndex<TEntity>.IsAcending
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.IsAcending
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsAcending
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 28
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nIndicates if the index is in ascending order or descending. Defaults to true meaning ascending order.\n"
  example: []
  syntax:
    content: public bool IsAcending { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAcending As Boolean
  overload: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending*
  nameWithType.vb: MongoIndex(Of TEntity).IsAcending
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).IsAcending
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name
  commentId: P:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name
  id: Name
  parent: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MongoIndex<TEntity>.Name
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.Name
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Name
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 33
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nThe name of the index. Default to the class name removing any instances of &quot;Index&quot; and &quot;MongoIndex&quot; from the name.\n"
  example: []
  syntax:
    content: public string Name { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name*
  nameWithType.vb: MongoIndex(Of TEntity).Name
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).Name
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors
  commentId: P:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors
  id: Selectors
  parent: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  langs:
  - csharp
  - vb
  name: Selectors
  nameWithType: MongoIndex<TEntity>.Selectors
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.Selectors
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Selectors
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 38
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nThe selectors that the index is comprised of.\n"
  example: []
  syntax:
    content: public IEnumerable<Expression<Func<TEntity, object>>> Selectors { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}}
    content.vb: Public Property Selectors As IEnumerable(Of Expression(Of Func(Of TEntity, Object)))
  overload: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors*
  nameWithType.vb: MongoIndex(Of TEntity).Selectors
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).Selectors
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor
  commentId: M:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor
  id: '#ctor'
  parent: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  langs:
  - csharp
  - vb
  name: MongoIndex()
  nameWithType: MongoIndex<TEntity>.MongoIndex()
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.MongoIndex()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.Mongo/DataStores/Indexes/MongoIndex.cs
    startLine: 43
  assemblies:
  - Cqrs.Mongo
  namespace: Cqrs.Mongo.DataStores.Indexes
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Mongo.DataStores.Indexes.MongoIndex%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected MongoIndex()
    content.vb: Protected Sub New
  overload: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor*
  nameWithType.vb: MongoIndex(Of TEntity).MongoIndex()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).MongoIndex()
references:
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Entities.IEntity
  commentId: T:Cqrs.Entities.IEntity
  parent: Cqrs.Entities
  isExternal: false
  name: IEntity
  nameWithType: IEntity
  fullName: Cqrs.Entities.IEntity
- uid: Cqrs.Mongo.DataStores.Indexes
  commentId: N:Cqrs.Mongo.DataStores.Indexes
  isExternal: false
  name: Cqrs.Mongo.DataStores.Indexes
  nameWithType: Cqrs.Mongo.DataStores.Indexes
  fullName: Cqrs.Mongo.DataStores.Indexes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique*
  commentId: Overload:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsUnique
  isExternal: false
  name: IsUnique
  nameWithType: MongoIndex<TEntity>.IsUnique
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.IsUnique
  nameWithType.vb: MongoIndex(Of TEntity).IsUnique
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).IsUnique
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending*
  commentId: Overload:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.IsAcending
  isExternal: false
  name: IsAcending
  nameWithType: MongoIndex<TEntity>.IsAcending
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.IsAcending
  nameWithType.vb: MongoIndex(Of TEntity).IsAcending
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).IsAcending
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name*
  commentId: Overload:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Name
  isExternal: false
  name: Name
  nameWithType: MongoIndex<TEntity>.Name
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.Name
  nameWithType.vb: MongoIndex(Of TEntity).Name
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors*
  commentId: Overload:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.Selectors
  isExternal: false
  name: Selectors
  nameWithType: MongoIndex<TEntity>.Selectors
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.Selectors
  nameWithType.vb: MongoIndex(Of TEntity).Selectors
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).Selectors
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression<Func<TEntity, Object>>>
  nameWithType: IEnumerable<Expression<Func<TEntity, Object>>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>>
  nameWithType.vb: IEnumerable(Of Expression(Of Func(Of TEntity, Object)))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object)))
  name.vb: IEnumerable(Of Expression(Of Func(Of TEntity, Object)))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  commentId: T:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
  isExternal: false
  name: MongoIndex<TEntity>
  nameWithType: MongoIndex<TEntity>
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>
  nameWithType.vb: MongoIndex(Of TEntity)
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity)
  name.vb: MongoIndex(Of TEntity)
  spec.csharp:
  - uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
    name: MongoIndex
    nameWithType: MongoIndex
    fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1
    name: MongoIndex
    nameWithType: MongoIndex
    fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor*
  commentId: Overload:Cqrs.Mongo.DataStores.Indexes.MongoIndex`1.#ctor
  isExternal: false
  name: MongoIndex
  nameWithType: MongoIndex<TEntity>.MongoIndex
  fullName: Cqrs.Mongo.DataStores.Indexes.MongoIndex<TEntity>.MongoIndex
  nameWithType.vb: MongoIndex(Of TEntity).MongoIndex
  fullName.vb: Cqrs.Mongo.DataStores.Indexes.MongoIndex(Of TEntity).MongoIndex
