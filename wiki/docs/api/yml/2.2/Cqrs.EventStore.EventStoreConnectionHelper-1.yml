### YamlMime:ManagedReference
items:
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1
  commentId: T:Cqrs.EventStore.EventStoreConnectionHelper`1
  id: EventStoreConnectionHelper`1
  parent: Cqrs.EventStore
  children:
  - Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.Configuration.IConfigurationManager)
  - Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
  - Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder
  - Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName
  - Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection
  - Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName
  - Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint
  langs:
  - csharp
  - vb
  name: EventStoreConnectionHelper<TAuthenticationToken>
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStoreConnectionHelper
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 22
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreates instances of <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class EventStoreConnectionHelper<TAuthenticationToken> : IEventStoreConnectionHelper'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class EventStoreConnectionHelper(Of TAuthenticationToken)

          Implements IEventStoreConnectionHelper
  inheritance:
  - System.Object
  implements:
  - Cqrs.EventStore.IEventStoreConnectionHelper
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken)
  name.vb: EventStoreConnectionHelper(Of TAuthenticationToken)
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder
  commentId: P:Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder
  id: EventBuilder
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: EventBuilder
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.EventBuilder
  type: Property
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventBuilder
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 27
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe <xref href=\"Cqrs.EventStore.IEventBuilder%601\" data-throw-if-not-resolved=\"false\"></xref> that is used.\n"
  example: []
  syntax:
    content: protected IEventBuilder<TAuthenticationToken> EventBuilder { get; }
    parameters: []
    return:
      type: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property EventBuilder As IEventBuilder(Of TAuthenticationToken)
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).EventBuilder
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
  commentId: P:Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
  id: ConfigurationManager
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: ConfigurationManager
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.ConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConfigurationManager
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 32
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe <xref href=\"Cqrs.Configuration.IConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref> that is used.\n"
  example: []
  syntax:
    content: protected IConfigurationManager ConfigurationManager { get; }
    parameters: []
    return:
      type: Cqrs.Configuration.IConfigurationManager
    content.vb: Protected ReadOnly Property ConfigurationManager As IConfigurationManager
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).ConfigurationManager
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.Configuration.IConfigurationManager)
  commentId: M:Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.Configuration.IConfigurationManager)
  id: '#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.Configuration.IConfigurationManager)'
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: EventStoreConnectionHelper(IEventBuilder<TAuthenticationToken>, IConfigurationManager)
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.EventStoreConnectionHelper(IEventBuilder<TAuthenticationToken>, IConfigurationManager)
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.EventStoreConnectionHelper(Cqrs.EventStore.IEventBuilder<TAuthenticationToken>, Cqrs.Configuration.IConfigurationManager)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 39
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.EventStore.EventStoreConnectionHelper%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public EventStoreConnectionHelper(IEventBuilder<TAuthenticationToken> eventBuilder, IConfigurationManager configurationManager)
    parameters:
    - id: eventBuilder
      type: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
      description: The <xref href="Cqrs.EventStore.IEventBuilder%601" data-throw-if-not-resolved="false"></xref> that is used.
    - id: configurationManager
      type: Cqrs.Configuration.IConfigurationManager
      description: The <xref href="Cqrs.Configuration.IConfigurationManager" data-throw-if-not-resolved="false"></xref> that is used.
    content.vb: Public Sub New(eventBuilder As IEventBuilder(Of TAuthenticationToken), configurationManager As IConfigurationManager)
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).EventStoreConnectionHelper(IEventBuilder(Of TAuthenticationToken), IConfigurationManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).EventStoreConnectionHelper(Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken), Cqrs.Configuration.IConfigurationManager)
  name.vb: EventStoreConnectionHelper(IEventBuilder(Of TAuthenticationToken), IConfigurationManager)
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection
  commentId: M:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection
  id: GetEventStoreConnection
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: GetEventStoreConnection()
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnection()
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnection()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventStoreConnection
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 48
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGets a <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual IEventStoreConnection GetEventStoreConnection()
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
    content.vb: Public Overridable Function GetEventStoreConnection As IEventStoreConnection
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection*
  implements:
  - Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnection()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnection()
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName
  commentId: M:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName
  id: GetEventStoreClientName
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: GetEventStoreClientName()
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreClientName()
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreClientName()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventStoreClientName
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 66
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGet the client name from the <xref href=\"Cqrs.EventStore.EventStoreConnectionHelper%601.ConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref> that describes the client that will connect to the server.\n"
  example: []
  syntax:
    content: protected virtual string GetEventStoreClientName()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetEventStoreClientName As String
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreClientName()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreClientName()
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName
  commentId: M:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName
  id: GetEventStoreConnectionLogStreamName
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: GetEventStoreConnectionLogStreamName()
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnectionLogStreamName()
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnectionLogStreamName()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventStoreConnectionLogStreamName
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 74
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGet the connection stream name from the <xref href=\"Cqrs.EventStore.EventStoreConnectionHelper%601.ConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual string GetEventStoreConnectionLogStreamName()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetEventStoreConnectionLogStreamName As String
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnectionLogStreamName()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnectionLogStreamName()
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint
  commentId: M:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint
  id: GetEventStoreIpEndPoint
  parent: Cqrs.EventStore.EventStoreConnectionHelper`1
  langs:
  - csharp
  - vb
  name: GetEventStoreIpEndPoint()
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreIpEndPoint()
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreIpEndPoint()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEventStoreIpEndPoint
    path: Framework/Cqrs.EventStore/EventStoreConnectionHelper.cs
    startLine: 82
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGet the IP address of the server from the <xref href=\"Cqrs.EventStore.EventStoreConnectionHelper%601.ConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual IPEndPoint GetEventStoreIpEndPoint()
    return:
      type: System.Net.IPEndPoint
    content.vb: Protected Overridable Function GetEventStoreIpEndPoint As IPEndPoint
  overload: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint*
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreIpEndPoint()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreIpEndPoint()
references:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  isExternal: true
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.EventStore
  commentId: N:Cqrs.EventStore
  isExternal: false
  name: Cqrs.EventStore
  nameWithType: Cqrs.EventStore
  fullName: Cqrs.EventStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.EventStore.IEventStoreConnectionHelper
  commentId: T:Cqrs.EventStore.IEventStoreConnectionHelper
  parent: Cqrs.EventStore
  isExternal: false
  name: IEventStoreConnectionHelper
  nameWithType: IEventStoreConnectionHelper
  fullName: Cqrs.EventStore.IEventStoreConnectionHelper
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.EventStore.IEventBuilder`1
  commentId: T:Cqrs.EventStore.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.EventBuilder
  isExternal: false
  name: EventBuilder
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.EventStore.IEventBuilder{`0}
  parent: Cqrs.EventStore
  definition: Cqrs.EventStore.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
  isExternal: false
  name: ConfigurationManager
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.ConfigurationManager
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.ConfigurationManager
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).ConfigurationManager
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).ConfigurationManager
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1
  commentId: T:Cqrs.EventStore.EventStoreConnectionHelper`1
  isExternal: false
  name: EventStoreConnectionHelper<TAuthenticationToken>
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken)
  name.vb: EventStoreConnectionHelper(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.EventStoreConnectionHelper`1
    name: EventStoreConnectionHelper
    nameWithType: EventStoreConnectionHelper
    fullName: Cqrs.EventStore.EventStoreConnectionHelper
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.EventStoreConnectionHelper`1
    name: EventStoreConnectionHelper
    nameWithType: EventStoreConnectionHelper
    fullName: Cqrs.EventStore.EventStoreConnectionHelper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.#ctor
  isExternal: false
  name: EventStoreConnectionHelper
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.EventStoreConnectionHelper
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.EventStoreConnectionHelper
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).EventStoreConnectionHelper
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).EventStoreConnectionHelper
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnection
  isExternal: false
  name: GetEventStoreConnection
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnection
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnection
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnection
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnection
- uid: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
  commentId: M:Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
  parent: Cqrs.EventStore.IEventStoreConnectionHelper
  isExternal: false
  name: GetEventStoreConnection()
  nameWithType: IEventStoreConnectionHelper.GetEventStoreConnection()
  fullName: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection()
  spec.csharp:
  - uid: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
    name: GetEventStoreConnection
    nameWithType: IEventStoreConnectionHelper.GetEventStoreConnection
    fullName: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
    name: GetEventStoreConnection
    nameWithType: IEventStoreConnectionHelper.GetEventStoreConnection
    fullName: Cqrs.EventStore.IEventStoreConnectionHelper.GetEventStoreConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
  commentId: P:Cqrs.EventStore.EventStoreConnectionHelper`1.ConfigurationManager
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreClientName
  isExternal: false
  name: GetEventStoreClientName
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreClientName
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreClientName
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreClientName
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreClientName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreConnectionLogStreamName
  isExternal: false
  name: GetEventStoreConnectionLogStreamName
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnectionLogStreamName
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreConnectionLogStreamName
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnectionLogStreamName
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreConnectionLogStreamName
- uid: Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint*
  commentId: Overload:Cqrs.EventStore.EventStoreConnectionHelper`1.GetEventStoreIpEndPoint
  isExternal: false
  name: GetEventStoreIpEndPoint
  nameWithType: EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreIpEndPoint
  fullName: Cqrs.EventStore.EventStoreConnectionHelper<TAuthenticationToken>.GetEventStoreIpEndPoint
  nameWithType.vb: EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreIpEndPoint
  fullName.vb: Cqrs.EventStore.EventStoreConnectionHelper(Of TAuthenticationToken).GetEventStoreIpEndPoint
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
