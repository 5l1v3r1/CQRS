### YamlMime:ManagedReference
items:
- uid: Cqrs.Commands.DtoCommandHandler`2
  commentId: T:Cqrs.Commands.DtoCommandHandler`2
  id: DtoCommandHandler`2
  parent: Cqrs.Commands
  children:
  - Cqrs.Commands.DtoCommandHandler`2.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  - Cqrs.Commands.DtoCommandHandler`2.Handle(Cqrs.Commands.DtoCommand{`0,`1})
  langs:
  - csharp
  - vb
  name: DtoCommandHandler<TAuthenticationToken, TDto>
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Commands/DtoCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DtoCommandHandler
    path: Framework/Cqrs/Commands/DtoCommandHandler.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nA <xref href=\"Cqrs.Commands.ICommandHandle\" data-throw-if-not-resolved=\"false\"></xref> for working with <xref href=\"Cqrs.Commands.DtoCommand%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class DtoCommandHandler<TAuthenticationToken, TDto> : ICommandHandler<TAuthenticationToken, DtoCommand<TAuthenticationToken, TDto>>, IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>, ICommandHandle, IHandler where TDto : IDto'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    - id: TDto
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.IDto" data-throw-if-not-resolved="false"></xref> this command targets.
    content.vb: >-
      Public Class DtoCommandHandler(Of TAuthenticationToken, TDto As IDto)
          Implements ICommandHandler(Of TAuthenticationToken, DtoCommand(Of TAuthenticationToken, TDto)), IMessageHandler(Of DtoCommand(Of TAuthenticationToken, TDto)), ICommandHandle, IHandler
  inheritance:
  - System.Object
  implements:
  - Cqrs.Commands.ICommandHandler{{TAuthenticationToken},Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}
  - Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}
  - Cqrs.Commands.ICommandHandle
  - Cqrs.Messages.IHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto)
  name.vb: DtoCommandHandler(Of TAuthenticationToken, TDto)
- uid: Cqrs.Commands.DtoCommandHandler`2.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  commentId: M:Cqrs.Commands.DtoCommandHandler`2.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  id: '#ctor(Cqrs.Domain.IUnitOfWork{`0})'
  parent: Cqrs.Commands.DtoCommandHandler`2
  langs:
  - csharp
  - vb
  name: DtoCommandHandler(IUnitOfWork<TAuthenticationToken>)
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>.DtoCommandHandler(IUnitOfWork<TAuthenticationToken>)
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>.DtoCommandHandler(Cqrs.Domain.IUnitOfWork<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Commands/DtoCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Commands/DtoCommandHandler.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Commands.DtoCommandHandler%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DtoCommandHandler(IUnitOfWork<TAuthenticationToken> unitOfWork)
    parameters:
    - id: unitOfWork
      type: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
    content.vb: Public Sub New(unitOfWork As IUnitOfWork(Of TAuthenticationToken))
  overload: Cqrs.Commands.DtoCommandHandler`2.#ctor*
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto).DtoCommandHandler(IUnitOfWork(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto).DtoCommandHandler(Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken))
  name.vb: DtoCommandHandler(IUnitOfWork(Of TAuthenticationToken))
- uid: Cqrs.Commands.DtoCommandHandler`2.Handle(Cqrs.Commands.DtoCommand{`0,`1})
  commentId: M:Cqrs.Commands.DtoCommandHandler`2.Handle(Cqrs.Commands.DtoCommand{`0,`1})
  id: Handle(Cqrs.Commands.DtoCommand{`0,`1})
  parent: Cqrs.Commands.DtoCommandHandler`2
  langs:
  - csharp
  - vb
  name: Handle(DtoCommand<TAuthenticationToken, TDto>)
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>.Handle(DtoCommand<TAuthenticationToken, TDto>)
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>.Handle(Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/DtoCommandHandler.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Handle
    path: Framework/Cqrs/Commands/DtoCommandHandler.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nResponds to the provided <code data-dev-comment-type=\"paramref\">message</code>.\n"
  example: []
  syntax:
    content: public void Handle(DtoCommand<TAuthenticationToken, TDto> message)
    parameters:
    - id: message
      type: Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}
      description: The <xref href="Cqrs.Commands.DtoCommand%602" data-throw-if-not-resolved="false"></xref> to respond to or &quot;handle&quot;
    content.vb: Public Sub Handle(message As DtoCommand(Of TAuthenticationToken, TDto))
  overload: Cqrs.Commands.DtoCommandHandler`2.Handle*
  implements:
  - Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}.Handle(Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}})
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto).Handle(DtoCommand(Of TAuthenticationToken, TDto))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto).Handle(Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto))
  name.vb: Handle(DtoCommand(Of TAuthenticationToken, TDto))
references:
- uid: Cqrs.Commands.ICommandHandle
  commentId: T:Cqrs.Commands.ICommandHandle
  parent: Cqrs.Commands
  isExternal: false
  name: ICommandHandle
  nameWithType: ICommandHandle
  fullName: Cqrs.Commands.ICommandHandle
- uid: Cqrs.Commands.DtoCommand`2
  commentId: T:Cqrs.Commands.DtoCommand`2
  isExternal: false
  name: DtoCommand<TAuthenticationToken, TDto>
  nameWithType: DtoCommand<TAuthenticationToken, TDto>
  fullName: Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>
  nameWithType.vb: DtoCommand(Of TAuthenticationToken, TDto)
  fullName.vb: Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto)
  name.vb: DtoCommand(Of TAuthenticationToken, TDto)
  spec.csharp:
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain.IDto
  commentId: T:Cqrs.Domain.IDto
  isExternal: false
  name: IDto
  nameWithType: IDto
  fullName: Cqrs.Domain.IDto
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Commands.ICommandHandler{{TAuthenticationToken},Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}
  commentId: T:Cqrs.Commands.ICommandHandler{`0,Cqrs.Commands.DtoCommand{`0,`1}}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommandHandler`2
  name: ICommandHandler<TAuthenticationToken, DtoCommand<TAuthenticationToken, TDto>>
  nameWithType: ICommandHandler<TAuthenticationToken, DtoCommand<TAuthenticationToken, TDto>>
  fullName: Cqrs.Commands.ICommandHandler<TAuthenticationToken, Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>>
  nameWithType.vb: ICommandHandler(Of TAuthenticationToken, DtoCommand(Of TAuthenticationToken, TDto))
  fullName.vb: Cqrs.Commands.ICommandHandler(Of TAuthenticationToken, Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto))
  name.vb: ICommandHandler(Of TAuthenticationToken, DtoCommand(Of TAuthenticationToken, TDto))
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}
  commentId: T:Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{`0,`1}}
  parent: Cqrs.Messages
  definition: Cqrs.Messages.IMessageHandler`1
  name: IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>
  nameWithType: IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>>
  nameWithType.vb: IMessageHandler(Of DtoCommand(Of TAuthenticationToken, TDto))
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto))
  name.vb: IMessageHandler(Of DtoCommand(Of TAuthenticationToken, TDto))
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IHandler
  commentId: T:Cqrs.Messages.IHandler
  parent: Cqrs.Messages
  isExternal: false
  name: IHandler
  nameWithType: IHandler
  fullName: Cqrs.Messages.IHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Commands.ICommandHandler`2
  commentId: T:Cqrs.Commands.ICommandHandler`2
  isExternal: false
  name: ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType: ICommandHandler<TAuthenticationToken, TCommand>
  fullName: Cqrs.Commands.ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  fullName.vb: Cqrs.Commands.ICommandHandler(Of TAuthenticationToken, TCommand)
  name.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler`1
  commentId: T:Cqrs.Messages.IMessageHandler`1
  isExternal: false
  name: IMessageHandler<TMessage>
  nameWithType: IMessageHandler<TMessage>
  fullName: Cqrs.Messages.IMessageHandler<TMessage>
  nameWithType.vb: IMessageHandler(Of TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage)
  name.vb: IMessageHandler(Of TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1
    name: IMessageHandler
    nameWithType: IMessageHandler
    fullName: Cqrs.Messages.IMessageHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.Commands.DtoCommandHandler`2
  commentId: T:Cqrs.Commands.DtoCommandHandler`2
  isExternal: false
  name: DtoCommandHandler<TAuthenticationToken, TDto>
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto)
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto)
  name.vb: DtoCommandHandler(Of TAuthenticationToken, TDto)
  spec.csharp:
  - uid: Cqrs.Commands.DtoCommandHandler`2
    name: DtoCommandHandler
    nameWithType: DtoCommandHandler
    fullName: Cqrs.Commands.DtoCommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.DtoCommandHandler`2
    name: DtoCommandHandler
    nameWithType: DtoCommandHandler
    fullName: Cqrs.Commands.DtoCommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.DtoCommandHandler`2.#ctor*
  commentId: Overload:Cqrs.Commands.DtoCommandHandler`2.#ctor
  isExternal: false
  name: DtoCommandHandler
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>.DtoCommandHandler
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>.DtoCommandHandler
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto).DtoCommandHandler
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto).DtoCommandHandler
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IUnitOfWork{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IUnitOfWork`1
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IUnitOfWork`1
  commentId: T:Cqrs.Domain.IUnitOfWork`1
  isExternal: false
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Commands.DtoCommandHandler`2.Handle*
  commentId: Overload:Cqrs.Commands.DtoCommandHandler`2.Handle
  isExternal: false
  name: Handle
  nameWithType: DtoCommandHandler<TAuthenticationToken, TDto>.Handle
  fullName: Cqrs.Commands.DtoCommandHandler<TAuthenticationToken, TDto>.Handle
  nameWithType.vb: DtoCommandHandler(Of TAuthenticationToken, TDto).Handle
  fullName.vb: Cqrs.Commands.DtoCommandHandler(Of TAuthenticationToken, TDto).Handle
- uid: Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}.Handle(Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}})
  commentId: M:Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{`0,`1}}.Handle(Cqrs.Commands.DtoCommand{`0,`1})
  parent: Cqrs.Messages.IMessageHandler{Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}}
  definition: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  name: Handle(DtoCommand<TAuthenticationToken, TDto>)
  nameWithType: IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>.Handle(DtoCommand<TAuthenticationToken, TDto>)
  fullName: Cqrs.Messages.IMessageHandler<Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>>.Handle(Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>)
  nameWithType.vb: IMessageHandler(Of DtoCommand(Of TAuthenticationToken, TDto)).Handle(DtoCommand(Of TAuthenticationToken, TDto))
  fullName.vb: Cqrs.Messages.IMessageHandler(Of Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto)).Handle(Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto))
  name.vb: Handle(DtoCommand(Of TAuthenticationToken, TDto))
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>.Handle
    fullName: Cqrs.Messages.IMessageHandler<Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of DtoCommand(Of TAuthenticationToken, TDto)).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto)).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands.DtoCommand{{TAuthenticationToken},{TDto}}
  commentId: T:Cqrs.Commands.DtoCommand{`0,`1}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.DtoCommand`2
  name: DtoCommand<TAuthenticationToken, TDto>
  nameWithType: DtoCommand<TAuthenticationToken, TDto>
  fullName: Cqrs.Commands.DtoCommand<TAuthenticationToken, TDto>
  nameWithType.vb: DtoCommand(Of TAuthenticationToken, TDto)
  fullName.vb: Cqrs.Commands.DtoCommand(Of TAuthenticationToken, TDto)
  name.vb: DtoCommand(Of TAuthenticationToken, TDto)
  spec.csharp:
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.DtoCommand`2
    name: DtoCommand
    nameWithType: DtoCommand
    fullName: Cqrs.Commands.DtoCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
  commentId: M:Cqrs.Messages.IMessageHandler`1.Handle(`0)
  isExternal: false
  name: Handle(TMessage)
  nameWithType: IMessageHandler<TMessage>.Handle(TMessage)
  fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle(TMessage)
  nameWithType.vb: IMessageHandler(Of TMessage).Handle(TMessage)
  fullName.vb: Cqrs.Messages.IMessageHandler(Of TMessage).Handle(TMessage)
  spec.csharp:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler<TMessage>.Handle
    fullName: Cqrs.Messages.IMessageHandler<TMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Messages.IMessageHandler`1.Handle(`0)
    name: Handle
    nameWithType: IMessageHandler(Of TMessage).Handle
    fullName: Cqrs.Messages.IMessageHandler(Of TMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
