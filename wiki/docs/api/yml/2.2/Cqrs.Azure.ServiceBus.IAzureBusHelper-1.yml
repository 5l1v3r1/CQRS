### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  commentId: T:Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  id: IAzureBusHelper`1
  parent: Cqrs.Azure.ServiceBus
  children:
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand(Cqrs.Commands.ICommand{`0},Cqrs.Bus.RouteManager,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent(Cqrs.Events.IEvent{`0},Cqrs.Bus.RouteManager,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand``1(``0,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent``1(``0,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand``1(``0,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent``1(``0,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand(System.String,Func{Cqrs.Commands.ICommand{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent(System.String,Func{Cqrs.Events.IEvent{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock(CancellationTokenSource,BrokeredMessage,System.String)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},System.Boolean)
  - Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: IAzureBusHelper<TAuthenticationToken>
  nameWithType: IAzureBusHelper<TAuthenticationToken>
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IAzureBusHelper
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 23
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nA helper for Azure Service Bus and Event Hub.\n"
  example: []
  syntax:
    content: public interface IAzureBusHelper<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <see cref="!:Type"></see> of the authentication token.
    content.vb: Public Interface IAzureBusHelper(Of TAuthenticationToken)
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken)
  name.vb: IAzureBusHelper(Of TAuthenticationToken)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand``1(``0,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand``1(``0,System.String)
  id: PrepareCommand``1(``0,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: PrepareCommand<TCommand>(TCommand, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareCommand<TCommand>(TCommand, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareCommand<TCommand>(TCommand, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareCommand
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 31
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nPrepares a <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> to be sent specifying the framework it is sent via.\n"
  example: []
  syntax:
    content: 'void PrepareCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> to send.
    - id: framework
      type: System.String
      description: The framework the <span class="paramref">command</span> is being sent from.
    typeParameters:
    - id: TCommand
      description: The <see cref="!:Type"></see> of<xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> being sent.
    content.vb: Sub PrepareCommand(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand, framework As String)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareCommand(Of TCommand)(TCommand, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareCommand(Of TCommand)(TCommand, System.String)
  name.vb: PrepareCommand(Of TCommand)(TCommand, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand``1(``0,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand``1(``0,System.String)
  id: PrepareAndValidateCommand``1(``0,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: PrepareAndValidateCommand<TCommand>(TCommand, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateCommand<TCommand>(TCommand, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateCommand<TCommand>(TCommand, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareAndValidateCommand
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 40
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nPrepares and validates a <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> to be sent specifying the framework it is sent via.\n"
  example: []
  syntax:
    content: 'bool PrepareAndValidateCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken>'
    parameters:
    - id: command
      type: '{TCommand}'
      description: The <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> to send.
    - id: framework
      type: System.String
      description: The framework the <span class="paramref">command</span> is being sent from.
    typeParameters:
    - id: TCommand
      description: The <see cref="!:Type"></see> of<xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> being sent.
    return:
      type: System.Boolean
    content.vb: Function PrepareAndValidateCommand(Of TCommand As ICommand(Of TAuthenticationToken))(command As TCommand, framework As String) As Boolean
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateCommand(Of TCommand)(TCommand, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateCommand(Of TCommand)(TCommand, System.String)
  name.vb: PrepareAndValidateCommand(Of TCommand)(TCommand, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand(System.String,Func{Cqrs.Commands.ICommand{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand(System.String,Func{Cqrs.Commands.ICommand{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  id: ReceiveCommand(System.String,Func{Cqrs.Commands.ICommand{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: ReceiveCommand(String, Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.ReceiveCommand(String, Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.ReceiveCommand(System.String, Func<Cqrs.Commands.ICommand<TAuthenticationToken>, System.Nullable<System.Boolean>>, System.String, Action, Action)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReceiveCommand
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 52
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nDeserialises and processes the <span class=\"paramref\">messageBody</span> received from the network through the provided <span class=\"paramref\">receiveCommandHandler</span>.\n"
  example: []
  syntax:
    content: ICommand<TAuthenticationToken> ReceiveCommand(string messageBody, Func<ICommand<TAuthenticationToken>, bool ? > receiveCommandHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null)
    parameters:
    - id: messageBody
      type: System.String
      description: A serialised <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref>.
    - id: receiveCommandHandler
      type: Func{Cqrs.Commands.ICommand{{TAuthenticationToken}},System.Nullable{System.Boolean}}
      description: The handler method that will process the <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref>.
    - id: messageId
      type: System.String
      description: The network id of the <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref>.
    - id: skippedAction
      type: Action
      description: The <see cref="!:Action"></see> to call when the <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> is being skipped.
    - id: lockRefreshAction
      type: Action
      description: The <see cref="!:Action"></see> to call to refresh the network lock.
    return:
      type: Cqrs.Commands.ICommand{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> that was processed.
    content.vb: Function ReceiveCommand(messageBody As String, receiveCommandHandler As Func(Of ICommand(Of TAuthenticationToken), Boolean?), messageId As String, skippedAction As Action = Nothing, lockRefreshAction As Action = Nothing) As ICommand(Of TAuthenticationToken)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).ReceiveCommand(String, Func(Of ICommand(Of TAuthenticationToken), Nullable(Of Boolean)), String, Action, Action)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).ReceiveCommand(System.String, Func(Of Cqrs.Commands.ICommand(Of TAuthenticationToken), System.Nullable(Of System.Boolean)), System.String, Action, Action)
  name.vb: ReceiveCommand(String, Func(Of ICommand(Of TAuthenticationToken), Nullable(Of Boolean)), String, Action, Action)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand(Cqrs.Commands.ICommand{`0},Cqrs.Bus.RouteManager,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand(Cqrs.Commands.ICommand{`0},Cqrs.Bus.RouteManager,System.String)
  id: DefaultReceiveCommand(Cqrs.Commands.ICommand{`0},Cqrs.Bus.RouteManager,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: DefaultReceiveCommand(ICommand<TAuthenticationToken>, RouteManager, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.DefaultReceiveCommand(ICommand<TAuthenticationToken>, RouteManager, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.DefaultReceiveCommand(Cqrs.Commands.ICommand<TAuthenticationToken>, Cqrs.Bus.RouteManager, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultReceiveCommand
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 68
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nThe default command handler that\ncheck if the <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> has already been processed by this framework,\nchecks if the <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> is required,\nfinds the handler from the provided <span class=\"paramref\">routeManager</span>.\n"
  example: []
  syntax:
    content: bool ? DefaultReceiveCommand(ICommand<TAuthenticationToken> command, RouteManager routeManager, string framework)
    parameters:
    - id: command
      type: Cqrs.Commands.ICommand{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Commands.ICommand%601" data-throw-if-not-resolved="false"></xref> to process.
    - id: routeManager
      type: Cqrs.Bus.RouteManager
      description: The <xref href="Cqrs.Bus.RouteManager" data-throw-if-not-resolved="false"></xref> to get the <xref href="Cqrs.Commands.ICommandHandler%602" data-throw-if-not-resolved="false"></xref> from.
    - id: framework
      type: System.String
      description: The current framework.
    return:
      type: System.Nullable{System.Boolean}
      description: "\nTrue indicates the <span class=\"paramref\">command</span> was successfully handled by a handler.\nFalse indicates the <span class=\"paramref\">command</span> wasn&apos;t handled, but didn&apos;t throw an error, so by convention, that means it was skipped.\nNull indicates the command<span class=\"paramref\">command</span> wasn&apos;t handled as it was already handled.\n"
    content.vb: Function DefaultReceiveCommand(command As ICommand(Of TAuthenticationToken), routeManager As RouteManager, framework As String) As Boolean?
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveCommand(ICommand(Of TAuthenticationToken), RouteManager, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveCommand(Cqrs.Commands.ICommand(Of TAuthenticationToken), Cqrs.Bus.RouteManager, System.String)
  name.vb: DefaultReceiveCommand(ICommand(Of TAuthenticationToken), RouteManager, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent``1(``0,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent``1(``0,System.String)
  id: PrepareEvent``1(``0,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: PrepareEvent<TEvent>(TEvent, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareEvent<TEvent>(TEvent, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareEvent<TEvent>(TEvent, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareEvent
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 76
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nPrepares an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to be sent specifying the framework it is sent via.\n"
  example: []
  syntax:
    content: 'void PrepareEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken>'
    parameters:
    - id: event
      type: '{TEvent}'
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to send.
    - id: framework
      type: System.String
      description: The framework the <span class="paramref">event</span> is being sent from.
    typeParameters:
    - id: TEvent
      description: The <see cref="!:Type"></see> of<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> being sent.
    content.vb: Sub PrepareEvent(Of TEvent As IEvent(Of TAuthenticationToken))(event As TEvent, framework As String)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareEvent(Of TEvent)(TEvent, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareEvent(Of TEvent)(TEvent, System.String)
  name.vb: PrepareEvent(Of TEvent)(TEvent, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent``1(``0,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent``1(``0,System.String)
  id: PrepareAndValidateEvent``1(``0,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: PrepareAndValidateEvent<TEvent>(TEvent, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateEvent<TEvent>(TEvent, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateEvent<TEvent>(TEvent, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareAndValidateEvent
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 85
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nPrepares and validates an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to be sent specifying the framework it is sent via.\n"
  example: []
  syntax:
    content: 'bool PrepareAndValidateEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken>'
    parameters:
    - id: event
      type: '{TEvent}'
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to send.
    - id: framework
      type: System.String
      description: The framework the <span class="paramref">event</span> is being sent from.
    typeParameters:
    - id: TEvent
      description: The <see cref="!:Type"></see> of<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> being sent.
    return:
      type: System.Boolean
    content.vb: Function PrepareAndValidateEvent(Of TEvent As IEvent(Of TAuthenticationToken))(event As TEvent, framework As String) As Boolean
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateEvent(Of TEvent)(TEvent, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateEvent(Of TEvent)(TEvent, System.String)
  name.vb: PrepareAndValidateEvent(Of TEvent)(TEvent, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent(System.String,Func{Cqrs.Events.IEvent{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent(System.String,Func{Cqrs.Events.IEvent{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  id: ReceiveEvent(System.String,Func{Cqrs.Events.IEvent{`0},System.Nullable{System.Boolean}},System.String,Action,Action)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: ReceiveEvent(String, Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.ReceiveEvent(String, Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.ReceiveEvent(System.String, Func<Cqrs.Events.IEvent<TAuthenticationToken>, System.Nullable<System.Boolean>>, System.String, Action, Action)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReceiveEvent
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 97
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nDeserialises and processes the <span class=\"paramref\">messageBody</span> received from the network through the provided <span class=\"paramref\">receiveEventHandler</span>.\n"
  example: []
  syntax:
    content: IEvent<TAuthenticationToken> ReceiveEvent(string messageBody, Func<IEvent<TAuthenticationToken>, bool ? > receiveEventHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null)
    parameters:
    - id: messageBody
      type: System.String
      description: A serialised <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref>.
    - id: receiveEventHandler
      type: Func{Cqrs.Events.IEvent{{TAuthenticationToken}},System.Nullable{System.Boolean}}
      description: The handler method that will process the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: messageId
      type: System.String
      description: The network id of the <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref>.
    - id: skippedAction
      type: Action
      description: The <see cref="!:Action"></see> to call when the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> is being skipped.
    - id: lockRefreshAction
      type: Action
      description: The <see cref="!:Action"></see> to call to refresh the network lock.
    return:
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> that was processed.
    content.vb: Function ReceiveEvent(messageBody As String, receiveEventHandler As Func(Of IEvent(Of TAuthenticationToken), Boolean?), messageId As String, skippedAction As Action = Nothing, lockRefreshAction As Action = Nothing) As IEvent(Of TAuthenticationToken)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).ReceiveEvent(String, Func(Of IEvent(Of TAuthenticationToken), Nullable(Of Boolean)), String, Action, Action)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).ReceiveEvent(System.String, Func(Of Cqrs.Events.IEvent(Of TAuthenticationToken), System.Nullable(Of System.Boolean)), System.String, Action, Action)
  name.vb: ReceiveEvent(String, Func(Of IEvent(Of TAuthenticationToken), Nullable(Of Boolean)), String, Action, Action)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock(CancellationTokenSource,BrokeredMessage,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock(CancellationTokenSource,BrokeredMessage,System.String)
  id: RefreshLock(CancellationTokenSource,BrokeredMessage,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: RefreshLock(CancellationTokenSource, BrokeredMessage, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RefreshLock(CancellationTokenSource, BrokeredMessage, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RefreshLock(CancellationTokenSource, BrokeredMessage, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RefreshLock
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 102
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nRefreshes the network lock.\n"
  example: []
  syntax:
    content: void RefreshLock(CancellationTokenSource brokeredMessageRenewCancellationTokenSource, BrokeredMessage message, string type = "message")
    parameters:
    - id: brokeredMessageRenewCancellationTokenSource
      type: CancellationTokenSource
    - id: message
      type: BrokeredMessage
    - id: type
      type: System.String
    content.vb: Sub RefreshLock(brokeredMessageRenewCancellationTokenSource As CancellationTokenSource, message As BrokeredMessage, type As String = "message")
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RefreshLock(CancellationTokenSource, BrokeredMessage, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RefreshLock(CancellationTokenSource, BrokeredMessage, System.String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent(Cqrs.Events.IEvent{`0},Cqrs.Bus.RouteManager,System.String)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent(Cqrs.Events.IEvent{`0},Cqrs.Bus.RouteManager,System.String)
  id: DefaultReceiveEvent(Cqrs.Events.IEvent{`0},Cqrs.Bus.RouteManager,System.String)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: DefaultReceiveEvent(IEvent<TAuthenticationToken>, RouteManager, String)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.DefaultReceiveEvent(IEvent<TAuthenticationToken>, RouteManager, String)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.DefaultReceiveEvent(Cqrs.Events.IEvent<TAuthenticationToken>, Cqrs.Bus.RouteManager, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultReceiveEvent
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 118
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nThe default event handler that\ncheck if the <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> has already been processed by this framework,\nchecks if the <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> is required,\nfinds the handler from the provided <span class=\"paramref\">routeManager</span>.\n"
  example: []
  syntax:
    content: bool ? DefaultReceiveEvent(IEvent<TAuthenticationToken> event, RouteManager routeManager, string framework)
    parameters:
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to process.
    - id: routeManager
      type: Cqrs.Bus.RouteManager
      description: The <xref href="Cqrs.Bus.RouteManager" data-throw-if-not-resolved="false"></xref> to get the <xref href="Cqrs.Events.IEventHandler%602" data-throw-if-not-resolved="false"></xref> from.
    - id: framework
      type: System.String
      description: The current framework.
    return:
      type: System.Nullable{System.Boolean}
      description: "\nTrue indicates the <span class=\"paramref\">event</span> was successfully handled by a handler.\nFalse indicates the <span class=\"paramref\">event</span> wasn&apos;t handled, but didn&apos;t throw an error, so by convention, that means it was skipped.\nNull indicates the <span class=\"paramref\">event</span> wasn&apos;t handled as it was already handled.\n"
    content.vb: Function DefaultReceiveEvent(event As IEvent(Of TAuthenticationToken), routeManager As RouteManager, framework As String) As Boolean?
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveEvent(IEvent(Of TAuthenticationToken), RouteManager, String)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveEvent(Cqrs.Events.IEvent(Of TAuthenticationToken), Cqrs.Bus.RouteManager, System.String)
  name.vb: DefaultReceiveEvent(IEvent(Of TAuthenticationToken), RouteManager, String)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},Type,System.Boolean)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},Type,System.Boolean)
  id: RegisterHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},Type,System.Boolean)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: RegisterHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Type, Boolean)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RegisterHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Type, Boolean)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RegisterHandler<TMessage>(ITelemetryHelper, Cqrs.Bus.RouteManager, Action<TMessage>, Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterHandler
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 125
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nManually registers the provided <span class=\"paramref\">handler</span> \non the provided <span class=\"paramref\">routeManger</span>\n"
  example: []
  syntax:
    content: 'void RegisterHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: telemetryHelper
      type: ITelemetryHelper
    - id: routeManger
      type: Cqrs.Bus.RouteManager
    - id: handler
      type: Action{{TMessage}}
    - id: targetedType
      type: Type
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
      description: The <see cref="!:Type"></see> of <xref href="Cqrs.Messages.IMessage" data-throw-if-not-resolved="false"></xref> the <span class="paramref">handler</span> can handle.
    content.vb: Sub RegisterHandler(Of TMessage As IMessage)(telemetryHelper As ITelemetryHelper, routeManger As RouteManager, handler As Action(Of TMessage), targetedType As Type, holdMessageLock As Boolean = True)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RegisterHandler(Of TMessage)(ITelemetryHelper, RouteManager, Action(Of TMessage), Type, Boolean)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RegisterHandler(Of TMessage)(ITelemetryHelper, Cqrs.Bus.RouteManager, Action(Of TMessage), Type, System.Boolean)
  name.vb: RegisterHandler(Of TMessage)(ITelemetryHelper, RouteManager, Action(Of TMessage), Type, Boolean)
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},System.Boolean)
  commentId: M:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},System.Boolean)
  id: RegisterGlobalEventHandler``1(ITelemetryHelper,Cqrs.Bus.RouteManager,Action{``0},System.Boolean)
  parent: Cqrs.Azure.ServiceBus.IAzureBusHelper`1
  langs:
  - csharp
  - vb
  name: RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Boolean)
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Boolean)
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, Cqrs.Bus.RouteManager, Action<TMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterGlobalEventHandler
    path: Framework/Azure/Cqrs.Azure.ServiceBus/IAzureBusHelper.cs
    startLine: 131
  assemblies:
  - Cqrs.Azure.ServiceBus
  namespace: Cqrs.Azure.ServiceBus
  summary: "\nRegister an event handler that will listen and respond to all events.\n"
  example: []
  syntax:
    content: 'void RegisterGlobalEventHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage'
    parameters:
    - id: telemetryHelper
      type: ITelemetryHelper
    - id: routeManger
      type: Cqrs.Bus.RouteManager
    - id: handler
      type: Action{{TMessage}}
    - id: holdMessageLock
      type: System.Boolean
    typeParameters:
    - id: TMessage
    content.vb: Sub RegisterGlobalEventHandler(Of TMessage As IMessage)(telemetryHelper As ITelemetryHelper, routeManger As RouteManager, handler As Action(Of TMessage), holdMessageLock As Boolean = True)
  overload: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler*
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RegisterGlobalEventHandler(Of TMessage)(ITelemetryHelper, RouteManager, Action(Of TMessage), Boolean)
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RegisterGlobalEventHandler(Of TMessage)(ITelemetryHelper, Cqrs.Bus.RouteManager, Action(Of TMessage), System.Boolean)
  name.vb: RegisterGlobalEventHandler(Of TMessage)(ITelemetryHelper, RouteManager, Action(Of TMessage), Boolean)
references:
- uid: Cqrs.Azure.ServiceBus
  commentId: N:Cqrs.Azure.ServiceBus
  isExternal: false
  name: Cqrs.Azure.ServiceBus
  nameWithType: Cqrs.Azure.ServiceBus
  fullName: Cqrs.Azure.ServiceBus
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareCommand
  isExternal: false
  name: PrepareCommand
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareCommand
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareCommand
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareCommand
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareCommand
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TCommand
  isExternal: false
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateCommand
  isExternal: false
  name: PrepareAndValidateCommand
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateCommand
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateCommand
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateCommand
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateCommand
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveCommand
  isExternal: false
  name: ReceiveCommand
  nameWithType: IAzureBusHelper<TAuthenticationToken>.ReceiveCommand
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.ReceiveCommand
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).ReceiveCommand
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).ReceiveCommand
- uid: Func{Cqrs.Commands.ICommand{{TAuthenticationToken}},System.Nullable{System.Boolean}}
  commentId: '!:Func{Cqrs.Commands.ICommand{`0},System.Nullable{System.Boolean}}'
  definition: Func`2
  name: Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>
  nameWithType: Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>
  fullName: Func<Cqrs.Commands.ICommand<TAuthenticationToken>, System.Nullable<System.Boolean>>
  nameWithType.vb: Func(Of ICommand(Of TAuthenticationToken), Nullable(Of Boolean))
  fullName.vb: Func(Of Cqrs.Commands.ICommand(Of TAuthenticationToken), System.Nullable(Of System.Boolean))
  name.vb: Func(Of ICommand(Of TAuthenticationToken), Nullable(Of Boolean))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: Cqrs.Commands.ICommand{{TAuthenticationToken}}
  commentId: T:Cqrs.Commands.ICommand{`0}
  parent: Cqrs.Commands
  definition: Cqrs.Commands.ICommand`1
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Bus.RouteManager
  commentId: T:Cqrs.Bus.RouteManager
  parent: Cqrs.Bus
  isExternal: false
  name: RouteManager
  nameWithType: RouteManager
  fullName: Cqrs.Bus.RouteManager
- uid: Cqrs.Commands.ICommandHandler`2
  commentId: T:Cqrs.Commands.ICommandHandler`2
  isExternal: false
  name: ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType: ICommandHandler<TAuthenticationToken, TCommand>
  fullName: Cqrs.Commands.ICommandHandler<TAuthenticationToken, TCommand>
  nameWithType.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  fullName.vb: Cqrs.Commands.ICommandHandler(Of TAuthenticationToken, TCommand)
  name.vb: ICommandHandler(Of TAuthenticationToken, TCommand)
  spec.csharp:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: Cqrs.Commands.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveCommand
  isExternal: false
  name: DefaultReceiveCommand
  nameWithType: IAzureBusHelper<TAuthenticationToken>.DefaultReceiveCommand
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.DefaultReceiveCommand
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveCommand
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveCommand
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Bus
  commentId: N:Cqrs.Bus
  isExternal: false
  name: Cqrs.Bus
  nameWithType: Cqrs.Bus
  fullName: Cqrs.Bus
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareEvent
  isExternal: false
  name: PrepareEvent
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareEvent
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareEvent
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareEvent
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareEvent
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.PrepareAndValidateEvent
  isExternal: false
  name: PrepareAndValidateEvent
  nameWithType: IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateEvent
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateEvent
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateEvent
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).PrepareAndValidateEvent
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.ReceiveEvent
  isExternal: false
  name: ReceiveEvent
  nameWithType: IAzureBusHelper<TAuthenticationToken>.ReceiveEvent
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.ReceiveEvent
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).ReceiveEvent
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).ReceiveEvent
- uid: Func{Cqrs.Events.IEvent{{TAuthenticationToken}},System.Nullable{System.Boolean}}
  commentId: '!:Func{Cqrs.Events.IEvent{`0},System.Nullable{System.Boolean}}'
  definition: Func`2
  name: Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>
  nameWithType: Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>
  fullName: Func<Cqrs.Events.IEvent<TAuthenticationToken>, System.Nullable<System.Boolean>>
  nameWithType.vb: Func(Of IEvent(Of TAuthenticationToken), Nullable(Of Boolean))
  fullName.vb: Func(Of Cqrs.Events.IEvent(Of TAuthenticationToken), System.Nullable(Of System.Boolean))
  name.vb: Func(Of IEvent(Of TAuthenticationToken), Nullable(Of Boolean))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RefreshLock
  isExternal: false
  name: RefreshLock
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RefreshLock
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RefreshLock
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RefreshLock
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RefreshLock
- uid: CancellationTokenSource
  isExternal: true
  name: CancellationTokenSource
  nameWithType: CancellationTokenSource
  fullName: CancellationTokenSource
- uid: BrokeredMessage
  isExternal: true
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: BrokeredMessage
- uid: Cqrs.Events.IEventHandler`2
  commentId: T:Cqrs.Events.IEventHandler`2
  isExternal: false
  name: IEventHandler<TAuthenticationToken, TEvent>
  nameWithType: IEventHandler<TAuthenticationToken, TEvent>
  fullName: Cqrs.Events.IEventHandler<TAuthenticationToken, TEvent>
  nameWithType.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  fullName.vb: Cqrs.Events.IEventHandler(Of TAuthenticationToken, TEvent)
  name.vb: IEventHandler(Of TAuthenticationToken, TEvent)
  spec.csharp:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventHandler`2
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Cqrs.Events.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.DefaultReceiveEvent
  isExternal: false
  name: DefaultReceiveEvent
  nameWithType: IAzureBusHelper<TAuthenticationToken>.DefaultReceiveEvent
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.DefaultReceiveEvent
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveEvent
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).DefaultReceiveEvent
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterHandler
  isExternal: false
  name: RegisterHandler
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RegisterHandler
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RegisterHandler
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RegisterHandler
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RegisterHandler
- uid: ITelemetryHelper
  isExternal: true
  name: ITelemetryHelper
  nameWithType: ITelemetryHelper
  fullName: ITelemetryHelper
- uid: Action{{TMessage}}
  commentId: '!:Action{``0}'
  definition: Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler*
  commentId: Overload:Cqrs.Azure.ServiceBus.IAzureBusHelper`1.RegisterGlobalEventHandler
  isExternal: false
  name: RegisterGlobalEventHandler
  nameWithType: IAzureBusHelper<TAuthenticationToken>.RegisterGlobalEventHandler
  fullName: Cqrs.Azure.ServiceBus.IAzureBusHelper<TAuthenticationToken>.RegisterGlobalEventHandler
  nameWithType.vb: IAzureBusHelper(Of TAuthenticationToken).RegisterGlobalEventHandler
  fullName.vb: Cqrs.Azure.ServiceBus.IAzureBusHelper(Of TAuthenticationToken).RegisterGlobalEventHandler
