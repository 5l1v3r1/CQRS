### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.UnitOfWork`1
  commentId: T:Cqrs.Domain.UnitOfWork`1
  id: UnitOfWork`1
  parent: Cqrs.Domain
  children:
  - Cqrs.Domain.UnitOfWork`1.#ctor(Cqrs.Domain.IAggregateRepository{`0})
  - Cqrs.Domain.UnitOfWork`1.Add``1(``0)
  - Cqrs.Domain.UnitOfWork`1.Commit
  - Cqrs.Domain.UnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  langs:
  - csharp
  - vb
  name: UnitOfWork<TAuthenticationToken>
  nameWithType: UnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/UnitOfWork.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: UnitOfWork
    path: Framework/Cqrs/Domain/UnitOfWork.cs
    startLine: 21
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nProvides a basic container to control when <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> are store in an <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> and then published on an <xref href=\"Cqrs.Events.IEventPublisher%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis shouldn&apos;t normally be used as a singleton.\n"
  example: []
  syntax:
    content: 'public class UnitOfWork<TAuthenticationToken> : IUnitOfWork<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
    content.vb: >-
      Public Class UnitOfWork(Of TAuthenticationToken)

          Implements IUnitOfWork(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken)
  name.vb: UnitOfWork(Of TAuthenticationToken)
- uid: Cqrs.Domain.UnitOfWork`1.#ctor(Cqrs.Domain.IAggregateRepository{`0})
  commentId: M:Cqrs.Domain.UnitOfWork`1.#ctor(Cqrs.Domain.IAggregateRepository{`0})
  id: '#ctor(Cqrs.Domain.IAggregateRepository{`0})'
  parent: Cqrs.Domain.UnitOfWork`1
  langs:
  - csharp
  - vb
  name: UnitOfWork(IAggregateRepository<TAuthenticationToken>)
  nameWithType: UnitOfWork<TAuthenticationToken>.UnitOfWork(IAggregateRepository<TAuthenticationToken>)
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.UnitOfWork(Cqrs.Domain.IAggregateRepository<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/UnitOfWork.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/UnitOfWork.cs
    startLine: 30
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Domain.UnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public UnitOfWork(IAggregateRepository<TAuthenticationToken> repository)
    parameters:
    - id: repository
      type: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
    content.vb: Public Sub New(repository As IAggregateRepository(Of TAuthenticationToken))
  overload: Cqrs.Domain.UnitOfWork`1.#ctor*
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).UnitOfWork(IAggregateRepository(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).UnitOfWork(Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken))
  name.vb: UnitOfWork(IAggregateRepository(Of TAuthenticationToken))
- uid: Cqrs.Domain.UnitOfWork`1.Add``1(``0)
  commentId: M:Cqrs.Domain.UnitOfWork`1.Add``1(``0)
  id: Add``1(``0)
  parent: Cqrs.Domain.UnitOfWork`1
  langs:
  - csharp
  - vb
  name: Add<TAggregateRoot>(TAggregateRoot)
  nameWithType: UnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/UnitOfWork.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Cqrs/Domain/UnitOfWork.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nAdd an item into the <xref href=\"Cqrs.Domain.IUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref> ready to be committed.\n"
  example: []
  syntax:
    content: 'public void Add<TAggregateRoot>(TAggregateRoot aggregate)where TAggregateRoot : IAggregateRoot<TAuthenticationToken>'
    parameters:
    - id: aggregate
      type: '{TAggregateRoot}'
    typeParameters:
    - id: TAggregateRoot
    content.vb: Public Sub Add(Of TAggregateRoot As IAggregateRoot(Of TAuthenticationToken))(aggregate As TAggregateRoot)
  overload: Cqrs.Domain.UnitOfWork`1.Add*
  implements:
  - Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Add``1({TAggregateRoot})
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  name.vb: Add(Of TAggregateRoot)(TAggregateRoot)
- uid: Cqrs.Domain.UnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.UnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  id: Get``1(System.Guid,System.Nullable{System.Int32})
  parent: Cqrs.Domain.UnitOfWork`1
  langs:
  - csharp
  - vb
  name: Get<TAggregateRoot>(Guid, Nullable<Int32>)
  nameWithType: UnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(Guid, Nullable<Int32>)
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/UnitOfWork.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Domain/UnitOfWork.cs
    startLine: 61
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGet an item from the <xref href=\"Cqrs.Domain.IUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref> if it has already been loaded or get it from the <xref href=\"Cqrs.Domain.IAggregateRepository%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public TAggregateRoot Get<TAggregateRoot>(Guid id, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken>'
    parameters:
    - id: id
      type: System.Guid
    - id: expectedVersion
      type: System.Nullable{System.Int32}
    typeParameters:
    - id: TAggregateRoot
    return:
      type: '{TAggregateRoot}'
    content.vb: Public Function Get(Of TAggregateRoot As IAggregateRoot(Of TAuthenticationToken))(id As Guid, expectedVersion As Integer? = Nothing) As TAggregateRoot
  overload: Cqrs.Domain.UnitOfWork`1.Get*
  implements:
  - Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Get``1(System.Guid,System.Nullable{System.Int32})
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Nullable(Of System.Int32))
  name.vb: Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
- uid: Cqrs.Domain.UnitOfWork`1.Commit
  commentId: M:Cqrs.Domain.UnitOfWork`1.Commit
  id: Commit
  parent: Cqrs.Domain.UnitOfWork`1
  langs:
  - csharp
  - vb
  name: Commit()
  nameWithType: UnitOfWork<TAuthenticationToken>.Commit()
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Commit()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/UnitOfWork.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Commit
    path: Framework/Cqrs/Domain/UnitOfWork.cs
    startLine: 89
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nCommit any changed <xref href=\"Cqrs.Domain.AggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> added to this <xref href=\"Cqrs.Domain.IUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref> via <xref href=\"Cqrs.Domain.UnitOfWork%601.Add%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref>\ninto the <xref href=\"Cqrs.Domain.IAggregateRepository%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Commit()
    content.vb: Public Sub Commit
  overload: Cqrs.Domain.UnitOfWork`1.Commit*
  implements:
  - Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Commit
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Commit()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Commit()
references:
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher`1
  commentId: T:Cqrs.Events.IEventPublisher`1
  isExternal: false
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IUnitOfWork{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IUnitOfWork`1
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.IUnitOfWork`1
  commentId: T:Cqrs.Domain.IUnitOfWork`1
  isExternal: false
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.UnitOfWork`1
  commentId: T:Cqrs.Domain.UnitOfWork`1
  isExternal: false
  name: UnitOfWork<TAuthenticationToken>
  nameWithType: UnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken)
  name.vb: UnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.UnitOfWork`1
    name: UnitOfWork
    nameWithType: UnitOfWork
    fullName: Cqrs.Domain.UnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.UnitOfWork`1
    name: UnitOfWork
    nameWithType: UnitOfWork
    fullName: Cqrs.Domain.UnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.UnitOfWork`1.#ctor*
  commentId: Overload:Cqrs.Domain.UnitOfWork`1.#ctor
  isExternal: false
  name: UnitOfWork
  nameWithType: UnitOfWork<TAuthenticationToken>.UnitOfWork
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.UnitOfWork
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).UnitOfWork
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).UnitOfWork
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRepository`1
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository`1
  commentId: T:Cqrs.Domain.IAggregateRepository`1
  isExternal: false
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.UnitOfWork`1.Add*
  commentId: Overload:Cqrs.Domain.UnitOfWork`1.Add
  isExternal: false
  name: Add
  nameWithType: UnitOfWork<TAuthenticationToken>.Add
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Add
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Add
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Add
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Add``1({TAggregateRoot})
  commentId: M:Cqrs.Domain.IUnitOfWork{`0}.Add``1(``0)
  parent: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  definition: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
  name: Add<TAggregateRoot>(TAggregateRoot)
  nameWithType: IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  name.vb: Add(Of TAggregateRoot)(TAggregateRoot)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
    name: Add<TAggregateRoot>
    nameWithType: IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
    name: Add(Of TAggregateRoot)
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TAggregateRoot}'
  commentId: '!:TAggregateRoot'
  definition: TAggregateRoot
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
  commentId: M:Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
  isExternal: false
  name: Add<TAggregateRoot>(TAggregateRoot)
  nameWithType: IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot)
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)(TAggregateRoot)
  name.vb: Add(Of TAggregateRoot)(TAggregateRoot)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
    name: Add<TAggregateRoot>
    nameWithType: IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Add``1(``0)
    name: Add(Of TAggregateRoot)
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Add(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: )
    nameWithType: )
    fullName: )
- uid: TAggregateRoot
  isExternal: false
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: Cqrs.Domain.UnitOfWork`1.Get*
  commentId: Overload:Cqrs.Domain.UnitOfWork`1.Get
  isExternal: false
  name: Get
  nameWithType: UnitOfWork<TAuthenticationToken>.Get
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Get
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Get
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Get``1(System.Guid,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IUnitOfWork{`0}.Get``1(System.Guid,System.Nullable{System.Int32})
  parent: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  definition: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  name: Get<TAggregateRoot>(Guid, Nullable<Int32>)
  nameWithType: IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(Guid, Nullable<Int32>)
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Nullable<System.Int32>)
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Nullable(Of System.Int32))
  name.vb: Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
    name: Get<TAggregateRoot>
    nameWithType: IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
    name: Get(Of TAggregateRoot)
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
  isExternal: true
  name: Get<TAggregateRoot>(Guid, Nullable<Int32>)
  nameWithType: IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(Guid, Nullable<Int32>)
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Nullable<System.Int32>)
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Nullable(Of System.Int32))
  name.vb: Get(Of TAggregateRoot)(Guid, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
    name: Get<TAggregateRoot>
    nameWithType: IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Get``1(System.Guid,System.Nullable{System.Int32})
    name: Get(Of TAggregateRoot)
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.AggregateRoot`1
  commentId: T:Cqrs.Domain.AggregateRoot`1
  isExternal: false
  name: AggregateRoot<TAuthenticationToken>
  nameWithType: AggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRoot<TAuthenticationToken>
  nameWithType.vb: AggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRoot(Of TAuthenticationToken)
  name.vb: AggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRoot`1
    name: AggregateRoot
    nameWithType: AggregateRoot
    fullName: Cqrs.Domain.AggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.UnitOfWork`1.Add``1(``0)
  commentId: M:Cqrs.Domain.UnitOfWork`1.Add``1(``0)
- uid: Cqrs.Domain.UnitOfWork`1.Commit*
  commentId: Overload:Cqrs.Domain.UnitOfWork`1.Commit
  isExternal: false
  name: Commit
  nameWithType: UnitOfWork<TAuthenticationToken>.Commit
  fullName: Cqrs.Domain.UnitOfWork<TAuthenticationToken>.Commit
  nameWithType.vb: UnitOfWork(Of TAuthenticationToken).Commit
  fullName.vb: Cqrs.Domain.UnitOfWork(Of TAuthenticationToken).Commit
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}.Commit
  commentId: M:Cqrs.Domain.IUnitOfWork{`0}.Commit
  parent: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  definition: Cqrs.Domain.IUnitOfWork`1.Commit
  name: Commit()
  nameWithType: IUnitOfWork<TAuthenticationToken>.Commit()
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Commit()
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Commit()
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Commit()
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Commit
    name: Commit
    nameWithType: IUnitOfWork<TAuthenticationToken>.Commit
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Commit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Commit
    name: Commit
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Commit
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Commit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IUnitOfWork`1.Commit
  commentId: M:Cqrs.Domain.IUnitOfWork`1.Commit
  isExternal: false
  name: Commit()
  nameWithType: IUnitOfWork<TAuthenticationToken>.Commit()
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Commit()
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken).Commit()
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Commit()
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1.Commit
    name: Commit
    nameWithType: IUnitOfWork<TAuthenticationToken>.Commit
    fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>.Commit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1.Commit
    name: Commit
    nameWithType: IUnitOfWork(Of TAuthenticationToken).Commit
    fullName: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken).Commit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
