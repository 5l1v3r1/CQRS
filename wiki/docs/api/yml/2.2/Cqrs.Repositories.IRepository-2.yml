### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.IRepository`2
  commentId: T:Cqrs.Repositories.IRepository`2
  id: IRepository`2
  parent: Cqrs.Repositories
  children:
  - Cqrs.Repositories.IRepository`2.Create(`1)
  - Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  - Cqrs.Repositories.IRepository`2.Delete(`1)
  - Cqrs.Repositories.IRepository`2.DeleteAll
  - Cqrs.Repositories.IRepository`2.Destroy(`1)
  - Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  - Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  - Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  - Cqrs.Repositories.IRepository`2.Update(`1)
  langs:
  - csharp
  - vb
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IRepository
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nProvides basic repository methods for operations with an <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public interface IRepository<TQueryStrategy, TData>
          where TQueryStrategy : IQueryStrategy
    typeParameters:
    - id: TQueryStrategy
    - id: TData
    content.vb: Public Interface IRepository(Of TQueryStrategy As IQueryStrategy, TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
- uid: Cqrs.Repositories.IRepository`2.Create(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Create(`1)
  id: Create(`1)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Create(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nCreate the newly provided <code data-dev-comment-type=\"paramref\">data</code> to storage.\n"
  example: []
  syntax:
    content: void Create(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Create(data As TData)
  overload: Cqrs.Repositories.IRepository`2.Create*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(TData)
- uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  id: Create(System.Collections.Generic.IEnumerable{`1})
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 29
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nCreate the newly provided <code data-dev-comment-type=\"paramref\">data</code> to storage.\n"
  example: []
  syntax:
    content: void Create(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Sub Create(data As IEnumerable(Of TData))
  overload: Cqrs.Repositories.IRepository`2.Create*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
- uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  id: Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Retrieve
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 36
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nBuilds and executes the provided <code data-dev-comment-type=\"paramref\">singleResultQuery</code>.\n"
  example: []
  syntax:
    content: ISingleResultQuery<TQueryStrategy, TData> Retrieve(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery, bool throwExceptionWhenNoQueryResults = true)
    parameters:
    - id: singleResultQuery
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
      description: The <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> to build and execute.
    - id: throwExceptionWhenNoQueryResults
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no data is found in storage.
    return:
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
    content.vb: Function Retrieve(singleResultQuery As ISingleResultQuery(Of TQueryStrategy, TData), throwExceptionWhenNoQueryResults As Boolean = True) As ISingleResultQuery(Of TQueryStrategy, TData)
  overload: Cqrs.Repositories.IRepository`2.Retrieve*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
- uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  id: Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Retrieve
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nBuilds and executes the provided <code data-dev-comment-type=\"paramref\">resultQuery</code>.\n"
  example: []
  syntax:
    content: ICollectionResultQuery<TQueryStrategy, TData> Retrieve(ICollectionResultQuery<TQueryStrategy, TData> resultQuery)
    parameters:
    - id: resultQuery
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
      description: The <xref href="Cqrs.Repositories.Queries.ICollectionResultQuery%602" data-throw-if-not-resolved="false"></xref> to build and execute.
    return:
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
    content.vb: Function Retrieve(resultQuery As ICollectionResultQuery(Of TQueryStrategy, TData)) As ICollectionResultQuery(Of TQueryStrategy, TData)
  overload: Cqrs.Repositories.IRepository`2.Retrieve*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
- uid: Cqrs.Repositories.IRepository`2.Update(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Update(`1)
  id: Update(`1)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Update(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 47
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nUpdate the provided <code data-dev-comment-type=\"paramref\">data</code> in storage.\n"
  example: []
  syntax:
    content: void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Update(data As TData)
  overload: Cqrs.Repositories.IRepository`2.Update*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update(TData)
- uid: Cqrs.Repositories.IRepository`2.Delete(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Delete(`1)
  id: Delete(`1)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Delete(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Delete(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Delete
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 52
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nWill mark the <code data-dev-comment-type=\"paramref\">data</code> as logically (or soft).\n"
  example: []
  syntax:
    content: void Delete(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Delete(data As TData)
  overload: Cqrs.Repositories.IRepository`2.Delete*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete(TData)
- uid: Cqrs.Repositories.IRepository`2.DeleteAll
  commentId: M:Cqrs.Repositories.IRepository`2.DeleteAll
  id: DeleteAll
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: DeleteAll()
  nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll()
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DeleteAll
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nDelete all contents (normally by use of a truncate operation) in storage.\n"
  example: []
  syntax:
    content: void DeleteAll()
    content.vb: Sub DeleteAll
  overload: Cqrs.Repositories.IRepository`2.DeleteAll*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll()
- uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Destroy(`1)
  id: Destroy(`1)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 62
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nRemove the provided <code data-dev-comment-type=\"paramref\">data</code> from storage.\n"
  example: []
  syntax:
    content: void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Sub Destroy(data As TData)
  overload: Cqrs.Repositories.IRepository`2.Destroy*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy(TData)
- uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  id: Load(System.Guid,System.Boolean)
  parent: Cqrs.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: Load(Guid, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load(System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/IRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Cqrs/Repositories/IRepository.cs
    startLine: 69
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nLoad the <code data-dev-comment-type=\"typeparamref\">TData</code> from storage identified by the provided <code data-dev-comment-type=\"paramref\">rsn</code>.\n"
  example: []
  syntax:
    content: TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true)
    parameters:
    - id: rsn
      type: System.Guid
      description: The identifier if the <code data-dev-comment-type="typeparamref">TData</code> to load.
    - id: throwExceptionOnMissingEntity
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no data is found in storage.
    return:
      type: '{TData}'
    content.vb: Function Load(rsn As Guid, throwExceptionOnMissingEntity As Boolean = True) As TData
  overload: Cqrs.Repositories.IRepository`2.Load*
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load(System.Guid, System.Boolean)
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories
  commentId: N:Cqrs.Repositories
  isExternal: false
  name: Cqrs.Repositories
  nameWithType: Cqrs.Repositories
  fullName: Cqrs.Repositories
- uid: Cqrs.Repositories.IRepository`2.Create*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Create
  isExternal: false
  name: Create
  nameWithType: IRepository<TQueryStrategy, TData>.Create
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Cqrs.Repositories.IRepository`2.Retrieve*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Retrieve
  isExternal: false
  name: Retrieve
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery`2
  isExternal: false
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Update*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Update
  isExternal: false
  name: Update
  nameWithType: IRepository<TQueryStrategy, TData>.Update
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Update
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update
- uid: Cqrs.Repositories.IRepository`2.Delete*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Delete
  isExternal: false
  name: Delete
  nameWithType: IRepository<TQueryStrategy, TData>.Delete
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Delete
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete
- uid: Cqrs.Repositories.IRepository`2.DeleteAll*
  commentId: Overload:Cqrs.Repositories.IRepository`2.DeleteAll
  isExternal: false
  name: DeleteAll
  nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).DeleteAll
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll
- uid: Cqrs.Repositories.IRepository`2.Destroy*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Destroy
  isExternal: false
  name: Destroy
  nameWithType: IRepository<TQueryStrategy, TData>.Destroy
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Destroy
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy
- uid: Cqrs.Repositories.IRepository`2.Load*
  commentId: Overload:Cqrs.Repositories.IRepository`2.Load
  isExternal: false
  name: Load
  nameWithType: IRepository<TQueryStrategy, TData>.Load
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Load
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
