### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.ISagaRepository`1
  commentId: T:Cqrs.Domain.ISagaRepository`1
  id: ISagaRepository`1
  parent: Cqrs.Domain
  children:
  - Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  - Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  langs:
  - csharp
  - vb
  name: ISagaRepository<TAuthenticationToken>
  nameWithType: ISagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Domain/ISagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ISagaRepository
    path: Framework/Cqrs/Domain/ISagaRepository.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nProvides basic repository methods for operations with instances of <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface ISagaRepository<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: Public Interface ISagaRepository(Of TAuthenticationToken)
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken)
  name.vb: ISagaRepository(Of TAuthenticationToken)
- uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  id: Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.ISagaRepository`1
  langs:
  - csharp
  - vb
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/ISagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs/Domain/ISagaRepository.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nSave and persist the provided <code data-dev-comment-type=\"paramref\">saga</code>, optionally providing the version number the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> is expected to be at.\n"
  example: []
  syntax:
    content: 'void Save<TSaga>(TSaga saga, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: saga
      type: '{TSaga}'
      description: The <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> to save and persist.
    - id: expectedVersion
      type: System.Nullable{System.Int32}
      description: The version number the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> is expected to be at.
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Sub Save(Of TSaga As ISaga(Of TAuthenticationToken))(saga As TSaga, expectedVersion As Integer? = Nothing)
  overload: Cqrs.Domain.ISagaRepository`1.Save*
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
- uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  id: Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.ISagaRepository`1
  langs:
  - csharp
  - vb
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/ISagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Domain/ISagaRepository.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nRetrieves an <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> of type <code data-dev-comment-type=\"typeparamref\">TSaga</code>.\n"
  example: []
  syntax:
    content: 'TSaga Get<TSaga>(Guid sagaId, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: sagaId
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> to retrieve.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: '{TSaga}'
    content.vb: Function Get(Of TSaga As ISaga(Of TAuthenticationToken))(sagaId As Guid, events As IList(Of ISagaEvent(Of TAuthenticationToken)) = Nothing) As TSaga
  overload: Cqrs.Domain.ISagaRepository`1.Get*
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
references:
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.ISagaRepository`1.Save*
  commentId: Overload:Cqrs.Domain.ISagaRepository`1.Save
  isExternal: false
  name: Save
  nameWithType: ISagaRepository<TAuthenticationToken>.Save
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Save
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISagaRepository`1.Get*
  commentId: Overload:Cqrs.Domain.ISagaRepository`1.Get
  isExternal: false
  name: Get
  nameWithType: ISagaRepository<TAuthenticationToken>.Get
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ISagaEvent<TAuthenticationToken>>
  nameWithType: IList<ISagaEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>
  nameWithType.vb: IList(Of ISagaEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: IList(Of ISagaEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
