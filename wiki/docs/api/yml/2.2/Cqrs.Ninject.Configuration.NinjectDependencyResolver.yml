### YamlMime:ManagedReference
items:
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  commentId: T:Cqrs.Ninject.Configuration.NinjectDependencyResolver
  id: NinjectDependencyResolver
  parent: Cqrs.Ninject.Configuration
  children:
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor(IKernel)
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve(Type)
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve``1
  - Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
  langs:
  - csharp
  - vb
  name: NinjectDependencyResolver
  nameWithType: NinjectDependencyResolver
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  type: Class
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: NinjectDependencyResolver
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 22
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nProvides an ability to resolve instances of objects using Ninject\n"
  example: []
  syntax:
    content: 'public class NinjectDependencyResolver : DependencyResolver, IDependencyResolver'
    content.vb: >-
      Public Class NinjectDependencyResolver

          Inherits DependencyResolver

          Implements IDependencyResolver
  inheritance:
  - System.Object
  - Cqrs.Configuration.DependencyResolver
  derivedClasses:
  - Cqrs.Ninject.Akka.AkkaNinjectDependencyResolver
  implements:
  - Cqrs.Configuration.IDependencyResolver
  inheritedMembers:
  - Cqrs.Configuration.DependencyResolver.Current
  - Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
  commentId: P:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
  id: Kernel
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: Kernel
  nameWithType: NinjectDependencyResolver.Kernel
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
  type: Property
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Kernel
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 27
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nThe inner Ninject <see cref=\"!:IKernel\"></see> used by this instance.\n"
  example: []
  syntax:
    content: public IKernel Kernel { get; }
    parameters: []
    return:
      type: IKernel
    content.vb: Public ReadOnly Property Kernel As IKernel
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  commentId: F:Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  id: ModulesToLoad
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: ModulesToLoad
  nameWithType: NinjectDependencyResolver.ModulesToLoad
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  type: Field
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ModulesToLoad
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 32
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nA collection of <see cref=\"!:INinjectModule\"></see> instances to load when we call <xref href=\"Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IList<INinjectModule> ModulesToLoad
    return:
      type: IList{INinjectModule}
    content.vb: Public Shared ModulesToLoad As IList(Of INinjectModule)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
  commentId: P:Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
  id: DependencyResolverCreator
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: DependencyResolverCreator
  nameWithType: NinjectDependencyResolver.DependencyResolverCreator
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
  type: Property
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DependencyResolverCreator
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 37
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nA user supplied <see cref=\"!:Func&lt;TResult>\"></see> that will be called during <xref href=\"Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to create and populate <xref href=\"Cqrs.Configuration.DependencyResolver.Current\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Func<IKernel, NinjectDependencyResolver> DependencyResolverCreator { get; set; }
    parameters: []
    return:
      type: Func{IKernel,Cqrs.Ninject.Configuration.NinjectDependencyResolver}
    content.vb: Public Shared Property DependencyResolverCreator As Func(Of IKernel, NinjectDependencyResolver)
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor(IKernel)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor(IKernel)
  id: '#ctor(IKernel)'
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: NinjectDependencyResolver(IKernel)
  nameWithType: NinjectDependencyResolver.NinjectDependencyResolver(IKernel)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.NinjectDependencyResolver(IKernel)
  type: Constructor
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 42
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Ninject.Configuration.NinjectDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public NinjectDependencyResolver(IKernel kernel)
    parameters:
    - id: kernel
      type: IKernel
    content.vb: Public Sub New(kernel As IKernel)
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver
  id: BindDependencyResolver
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: BindDependencyResolver()
  nameWithType: NinjectDependencyResolver.BindDependencyResolver()
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: BindDependencyResolver
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 51
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nChecks if <xref href=\"Cqrs.Configuration.IDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref> has already been registered and if not, registers this instance to it.\n"
  example: []
  syntax:
    content: protected virtual void BindDependencyResolver()
    content.vb: Protected Overridable Sub BindDependencyResolver
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
  id: Start(IKernel,System.Boolean)
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: Start(IKernel, Boolean)
  nameWithType: NinjectDependencyResolver.Start(IKernel, Boolean)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Start
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 68
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nStarts the <xref href=\"Cqrs.Ninject.Configuration.NinjectDependencyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  remarks: "\nthis exists to the static constructor can be triggered.\n"
  example: []
  syntax:
    content: public static void Start(IKernel kernel = null, bool prepareProvidedKernel = false)
    parameters:
    - id: kernel
      type: IKernel
    - id: prepareProvidedKernel
      type: System.Boolean
    content.vb: Public Shared Sub Start(kernel As IKernel = Nothing, prepareProvidedKernel As Boolean = False)
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  id: PrepareKernel(IKernel)
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: PrepareKernel(IKernel)
  nameWithType: NinjectDependencyResolver.PrepareKernel(IKernel)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PrepareKernel
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 89
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nCalls <see cref=\"!:IKernel.Load(IEnumerable&lt;INinjectModule>)\"></see> passing in <xref href=\"Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static void PrepareKernel(IKernel kernel)
    parameters:
    - id: kernel
      type: IKernel
      description: The <see cref="!:IKernel"></see> the <xref href="Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad" data-throw-if-not-resolved="false"></xref> will be loaded into.
    content.vb: Public Shared Sub PrepareKernel(kernel As IKernel)
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve``1
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve``1
  id: Resolve``1
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: Resolve<T>()
  nameWithType: NinjectDependencyResolver.Resolve<T>()
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve<T>()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 101
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nResolves a single instance for the specified <span class=\"typeparamref\">T</span>.\nby calling <see cref=\"!:IResolutionRoot.Resolve\"></see>\n"
  example: []
  syntax:
    content: public override T Resolve<T>()
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overrides Function Resolve(Of T) As T
  overridden: Cqrs.Configuration.DependencyResolver.Resolve``1
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve*
  nameWithType.vb: NinjectDependencyResolver.Resolve(Of T)()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve(Of T)()
  name.vb: Resolve(Of T)()
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve(Type)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve(Type)
  id: Resolve(Type)
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: NinjectDependencyResolver.Resolve(Type)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve(Type)
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Resolve
    path: Framework/Ninject/Cqrs.Ninject/Configuration/NinjectDependencyResolver.cs
    startLine: 110
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nResolves a single instance for the specified <span class=\"paramref\">type</span>.\nby calling <see cref=\"!:IResolutionRoot.Resolve\"></see>\n"
  example: []
  syntax:
    content: public override object Resolve(Type type)
    parameters:
    - id: type
      type: Type
    return:
      type: System.Object
    content.vb: Public Overrides Function Resolve(type As Type) As Object
  overload: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Cqrs.Ninject.Configuration
  commentId: N:Cqrs.Ninject.Configuration
  isExternal: false
  name: Cqrs.Ninject.Configuration
  nameWithType: Cqrs.Ninject.Configuration
  fullName: Cqrs.Ninject.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Configuration.DependencyResolver
  commentId: T:Cqrs.Configuration.DependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: DependencyResolver
  nameWithType: DependencyResolver
  fullName: Cqrs.Configuration.DependencyResolver
- uid: Cqrs.Configuration.IDependencyResolver
  commentId: T:Cqrs.Configuration.IDependencyResolver
  parent: Cqrs.Configuration
  isExternal: false
  name: IDependencyResolver
  nameWithType: IDependencyResolver
  fullName: Cqrs.Configuration.IDependencyResolver
- uid: Cqrs.Configuration.DependencyResolver.Current
  commentId: P:Cqrs.Configuration.DependencyResolver.Current
  parent: Cqrs.Configuration.DependencyResolver
  isExternal: false
  name: Current
  nameWithType: DependencyResolver.Current
  fullName: Cqrs.Configuration.DependencyResolver.Current
- uid: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  commentId: M:Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  parent: Cqrs.Configuration.DependencyResolver
  isExternal: true
  name: Resolve(Type)
  nameWithType: DependencyResolver.Resolve(Type)
  fullName: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
  spec.csharp:
  - uid: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
    name: Resolve
    nameWithType: DependencyResolver.Resolve
    fullName: Cqrs.Configuration.DependencyResolver.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.DependencyResolver.Resolve(System.Type)
    name: Resolve
    nameWithType: DependencyResolver.Resolve
    fullName: Cqrs.Configuration.DependencyResolver.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
  isExternal: false
  name: Kernel
  nameWithType: NinjectDependencyResolver.Kernel
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Kernel
- uid: IKernel
  isExternal: true
  name: IKernel
  nameWithType: IKernel
  fullName: IKernel
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  isExternal: true
  name: PrepareKernel(IKernel)
  nameWithType: NinjectDependencyResolver.PrepareKernel(IKernel)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
    name: PrepareKernel
    nameWithType: NinjectDependencyResolver.PrepareKernel
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel
  - name: (
    nameWithType: (
    fullName: (
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel(IKernel)
    name: PrepareKernel
    nameWithType: NinjectDependencyResolver.PrepareKernel
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel
  - name: (
    nameWithType: (
    fullName: (
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IList{INinjectModule}
  commentId: '!:IList{INinjectModule}'
  definition: IList`1
  name: IList<INinjectModule>
  nameWithType: IList<INinjectModule>
  fullName: IList<INinjectModule>
  nameWithType.vb: IList(Of INinjectModule)
  fullName.vb: IList(Of INinjectModule)
  name.vb: IList(Of INinjectModule)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: INinjectModule
    name: INinjectModule
    nameWithType: INinjectModule
    fullName: INinjectModule
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: INinjectModule
    name: INinjectModule
    nameWithType: INinjectModule
    fullName: INinjectModule
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  commentId: T:Cqrs.Ninject.Configuration.NinjectDependencyResolver
  parent: Cqrs.Ninject.Configuration
  isExternal: false
  name: NinjectDependencyResolver
  nameWithType: NinjectDependencyResolver
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver
- uid: IList`1
  commentId: '!:IList`1'
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
  commentId: M:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  isExternal: true
  name: Start(IKernel, Boolean)
  nameWithType: NinjectDependencyResolver.Start(IKernel, Boolean)
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
    name: Start
    nameWithType: NinjectDependencyResolver.Start
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start(IKernel,System.Boolean)
    name: Start
    nameWithType: NinjectDependencyResolver.Start
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
  isExternal: false
  name: DependencyResolverCreator
  nameWithType: NinjectDependencyResolver.DependencyResolverCreator
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.DependencyResolverCreator
- uid: Func{IKernel,Cqrs.Ninject.Configuration.NinjectDependencyResolver}
  commentId: '!:Func{IKernel,Cqrs.Ninject.Configuration.NinjectDependencyResolver}'
  definition: Func`2
  name: Func<IKernel, NinjectDependencyResolver>
  nameWithType: Func<IKernel, NinjectDependencyResolver>
  fullName: Func<IKernel, Cqrs.Ninject.Configuration.NinjectDependencyResolver>
  nameWithType.vb: Func(Of IKernel, NinjectDependencyResolver)
  fullName.vb: Func(Of IKernel, Cqrs.Ninject.Configuration.NinjectDependencyResolver)
  name.vb: Func(Of IKernel, NinjectDependencyResolver)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver
    name: NinjectDependencyResolver
    nameWithType: NinjectDependencyResolver
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: IKernel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver
    name: NinjectDependencyResolver
    nameWithType: NinjectDependencyResolver
    fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.#ctor
  isExternal: false
  name: NinjectDependencyResolver
  nameWithType: NinjectDependencyResolver.NinjectDependencyResolver
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.NinjectDependencyResolver
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver
  isExternal: false
  name: BindDependencyResolver
  nameWithType: NinjectDependencyResolver.BindDependencyResolver
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.BindDependencyResolver
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start
  isExternal: false
  name: Start
  nameWithType: NinjectDependencyResolver.Start
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Start
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  commentId: F:Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
  parent: Cqrs.Ninject.Configuration.NinjectDependencyResolver
  isExternal: false
  name: ModulesToLoad
  nameWithType: NinjectDependencyResolver.ModulesToLoad
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.ModulesToLoad
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel
  isExternal: false
  name: PrepareKernel
  nameWithType: NinjectDependencyResolver.PrepareKernel
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.PrepareKernel
- uid: Cqrs.Configuration.DependencyResolver.Resolve``1
  commentId: M:Cqrs.Configuration.DependencyResolver.Resolve``1
  parent: Cqrs.Configuration.DependencyResolver
  isExternal: false
  name: Resolve<T>()
  nameWithType: DependencyResolver.Resolve<T>()
  fullName: Cqrs.Configuration.DependencyResolver.Resolve<T>()
  nameWithType.vb: DependencyResolver.Resolve(Of T)()
  fullName.vb: Cqrs.Configuration.DependencyResolver.Resolve(Of T)()
  name.vb: Resolve(Of T)()
  spec.csharp:
  - uid: Cqrs.Configuration.DependencyResolver.Resolve``1
    name: Resolve<T>
    nameWithType: DependencyResolver.Resolve<T>
    fullName: Cqrs.Configuration.DependencyResolver.Resolve<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Configuration.DependencyResolver.Resolve``1
    name: Resolve(Of T)
    nameWithType: DependencyResolver.Resolve(Of T)
    fullName: Cqrs.Configuration.DependencyResolver.Resolve(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve*
  commentId: Overload:Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve
  isExternal: false
  name: Resolve
  nameWithType: NinjectDependencyResolver.Resolve
  fullName: Cqrs.Ninject.Configuration.NinjectDependencyResolver.Resolve
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
