### YamlMime:ManagedReference
items:
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository
  commentId: T:Cqrs.Tests.Substitutes.TestAggregateRepository
  id: TestAggregateRepository
  parent: Cqrs.Tests.Substitutes
  children:
  - Cqrs.Tests.Substitutes.TestAggregateRepository.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  - Cqrs.Tests.Substitutes.TestAggregateRepository.Save``1(``0,System.Nullable{System.Int32})
  - Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
  langs:
  - csharp
  - vb
  name: TestAggregateRepository
  nameWithType: TestAggregateRepository
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository
  type: Class
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TestAggregateRepository
    path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
    startLine: 9
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public class TestAggregateRepository : IAggregateRepository<ISingleSignOnToken>'
    content.vb: >-
      Public Class TestAggregateRepository

          Implements IAggregateRepository(Of ISingleSignOnToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Tests.Substitutes.TestAggregateRepository.Save``1(``0,System.Nullable{System.Int32})
  id: Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Tests.Substitutes.TestAggregateRepository
  langs:
  - csharp
  - vb
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: TestAggregateRepository.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
    startLine: 11
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<ISingleSignOnToken>'
    parameters:
    - id: aggregate
      type: '{TAggregateRoot}'
    - id: expectedVersion
      type: System.Nullable{System.Int32}
    typeParameters:
    - id: TAggregateRoot
    content.vb: Public Sub Save(Of TAggregateRoot As IAggregateRoot(Of ISingleSignOnToken))(aggregate As TAggregateRoot, expectedVersion As Integer? = Nothing)
  overload: Cqrs.Tests.Substitutes.TestAggregateRepository.Save*
  implements:
  - Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  nameWithType.vb: TestAggregateRepository.Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestAggregateRepository.Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
  commentId: P:Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
  id: Saved
  parent: Cqrs.Tests.Substitutes.TestAggregateRepository
  langs:
  - csharp
  - vb
  name: Saved
  nameWithType: TestAggregateRepository.Saved
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
  type: Property
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Saved
    path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
    startLine: 21
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: public IAggregateRoot<ISingleSignOnToken> Saved { get; }
    parameters: []
    return:
      type: Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
    content.vb: Public ReadOnly Property Saved As IAggregateRoot(Of ISingleSignOnToken)
  overload: Cqrs.Tests.Substitutes.TestAggregateRepository.Saved*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  commentId: M:Cqrs.Tests.Substitutes.TestAggregateRepository.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  id: Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  parent: Cqrs.Tests.Substitutes.TestAggregateRepository
  langs:
  - csharp
  - vb
  name: Get<TAggregateRoot>(Guid, IList<IEvent<ISingleSignOnToken>>)
  nameWithType: TestAggregateRepository.Get<TAggregateRoot>(Guid, IList<IEvent<ISingleSignOnToken>>)
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<Cqrs.Authentication.ISingleSignOnToken>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.Tests/Substitutes/TestAggregateRepository.cs
    startLine: 23
  assemblies:
  - Cqrs.Tests
  namespace: Cqrs.Tests.Substitutes
  syntax:
    content: 'public TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<ISingleSignOnToken>> events = null)where TAggregateRoot : IAggregateRoot<ISingleSignOnToken>'
    parameters:
    - id: aggregateId
      type: System.Guid
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}}
    typeParameters:
    - id: TAggregateRoot
    return:
      type: '{TAggregateRoot}'
    content.vb: Public Function Get(Of TAggregateRoot As IAggregateRoot(Of ISingleSignOnToken))(aggregateId As Guid, events As IList(Of IEvent(Of ISingleSignOnToken)) = Nothing) As TAggregateRoot
  overload: Cqrs.Tests.Substitutes.TestAggregateRepository.Get*
  implements:
  - Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  nameWithType.vb: TestAggregateRepository.Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of ISingleSignOnToken)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Tests.Substitutes.TestAggregateRepository.Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of Cqrs.Authentication.ISingleSignOnToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of ISingleSignOnToken)))
references:
- uid: Cqrs.Tests.Substitutes
  commentId: N:Cqrs.Tests.Substitutes
  isExternal: false
  name: Cqrs.Tests.Substitutes
  nameWithType: Cqrs.Tests.Substitutes
  fullName: Cqrs.Tests.Substitutes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}
  commentId: T:Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRepository`1
  name: IAggregateRepository<ISingleSignOnToken>
  nameWithType: IAggregateRepository<ISingleSignOnToken>
  fullName: Cqrs.Domain.IAggregateRepository<Cqrs.Authentication.ISingleSignOnToken>
  nameWithType.vb: IAggregateRepository(Of ISingleSignOnToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of Cqrs.Authentication.ISingleSignOnToken)
  name.vb: IAggregateRepository(Of ISingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.IAggregateRepository`1
  commentId: T:Cqrs.Domain.IAggregateRepository`1
  isExternal: false
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Save*
  commentId: Overload:Cqrs.Tests.Substitutes.TestAggregateRepository.Save
  isExternal: false
  name: Save
  nameWithType: TestAggregateRepository.Save
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Save
- uid: Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<ISingleSignOnToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<Cqrs.Authentication.ISingleSignOnToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of ISingleSignOnToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of Cqrs.Authentication.ISingleSignOnToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<ISingleSignOnToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<Cqrs.Authentication.ISingleSignOnToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of ISingleSignOnToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of Cqrs.Authentication.ISingleSignOnToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TAggregateRoot}'
  commentId: '!:TAggregateRoot'
  definition: TAggregateRoot
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  isExternal: true
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TAggregateRoot
  isExternal: false
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Saved*
  commentId: Overload:Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
  isExternal: false
  name: Saved
  nameWithType: TestAggregateRepository.Saved
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Saved
- uid: Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  commentId: T:Cqrs.Domain.IAggregateRoot{Cqrs.Authentication.ISingleSignOnToken}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<ISingleSignOnToken>
  nameWithType: IAggregateRoot<ISingleSignOnToken>
  fullName: Cqrs.Domain.IAggregateRoot<Cqrs.Authentication.ISingleSignOnToken>
  nameWithType.vb: IAggregateRoot(Of ISingleSignOnToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of Cqrs.Authentication.ISingleSignOnToken)
  name.vb: IAggregateRoot(Of ISingleSignOnToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Tests.Substitutes.TestAggregateRepository.Get*
  commentId: Overload:Cqrs.Tests.Substitutes.TestAggregateRepository.Get
  isExternal: false
  name: Get
  nameWithType: TestAggregateRepository.Get
  fullName: Cqrs.Tests.Substitutes.TestAggregateRepository.Get
- uid: Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  commentId: M:Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}})
  parent: Cqrs.Domain.IAggregateRepository{Cqrs.Authentication.ISingleSignOnToken}
  definition: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  name: Get<TAggregateRoot>(Guid, IList<IEvent<ISingleSignOnToken>>)
  nameWithType: IAggregateRepository<ISingleSignOnToken>.Get<TAggregateRoot>(Guid, IList<IEvent<ISingleSignOnToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<Cqrs.Authentication.ISingleSignOnToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<Cqrs.Authentication.ISingleSignOnToken>>)
  nameWithType.vb: IAggregateRepository(Of ISingleSignOnToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of ISingleSignOnToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of Cqrs.Authentication.ISingleSignOnToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of Cqrs.Authentication.ISingleSignOnToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of ISingleSignOnToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<ISingleSignOnToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<Cqrs.Authentication.ISingleSignOnToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of ISingleSignOnToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of Cqrs.Authentication.ISingleSignOnToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}}
  commentId: T:System.Collections.Generic.IList{Cqrs.Events.IEvent{Cqrs.Authentication.ISingleSignOnToken}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEvent<ISingleSignOnToken>>
  nameWithType: IList<IEvent<ISingleSignOnToken>>
  fullName: System.Collections.Generic.IList<Cqrs.Events.IEvent<Cqrs.Authentication.ISingleSignOnToken>>
  nameWithType.vb: IList(Of IEvent(Of ISingleSignOnToken))
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of Cqrs.Authentication.ISingleSignOnToken))
  name.vb: IList(Of IEvent(Of ISingleSignOnToken))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Authentication.ISingleSignOnToken
    name: ISingleSignOnToken
    nameWithType: ISingleSignOnToken
    fullName: Cqrs.Authentication.ISingleSignOnToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
