### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1
  commentId: T:Cqrs.Repositories.Queries.IQueryWithResults`1
  id: IQueryWithResults`1
  parent: Cqrs.Repositories.Queries
  children:
  - Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  langs:
  - csharp
  - vb
  name: IQueryWithResults<TResult>
  nameWithType: IQueryWithResults<TResult>
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryWithResults.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IQueryWithResults
    path: Framework/Cqrs/Repositories/Queries/IQueryWithResults.cs
    startLine: 16
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nA query that will produce a result\n"
  example: []
  syntax:
    content: public interface IQueryWithResults<out TResult>
    typeParameters:
    - id: TResult
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data in the result collection.
    content.vb: Public Interface IQueryWithResults(Of Out TResult)
  nameWithType.vb: IQueryWithResults(Of TResult)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult)
  name.vb: IQueryWithResults(Of TResult)
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  commentId: P:Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  id: Result
  parent: Cqrs.Repositories.Queries.IQueryWithResults`1
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: IQueryWithResults<TResult>.Result
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>.Result
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Queries/IQueryWithResults.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Result
    path: Framework/Cqrs/Repositories/Queries/IQueryWithResults.cs
    startLine: 21
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories.Queries
  summary: "\nThe resulting of executing the <xref href=\"Cqrs.Repositories.Queries.QueryStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: TResult Result { get; }
    parameters: []
    return:
      type: '{TResult}'
    content.vb: ReadOnly Property Result As TResult
  overload: Cqrs.Repositories.Queries.IQueryWithResults`1.Result*
  nameWithType.vb: IQueryWithResults(Of TResult).Result
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult).Result
references:
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries.QueryStrategy
  commentId: T:Cqrs.Repositories.Queries.QueryStrategy
  isExternal: false
  name: QueryStrategy
  nameWithType: QueryStrategy
  fullName: Cqrs.Repositories.Queries.QueryStrategy
- uid: Cqrs.Repositories.Queries.IQueryWithResults`1.Result*
  commentId: Overload:Cqrs.Repositories.Queries.IQueryWithResults`1.Result
  isExternal: false
  name: Result
  nameWithType: IQueryWithResults<TResult>.Result
  fullName: Cqrs.Repositories.Queries.IQueryWithResults<TResult>.Result
  nameWithType.vb: IQueryWithResults(Of TResult).Result
  fullName.vb: Cqrs.Repositories.Queries.IQueryWithResults(Of TResult).Result
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
