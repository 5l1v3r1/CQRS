### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  commentId: T:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  id: TableStorageStoreExtensions
  parent: Cqrs.Azure.BlobStorage
  children:
  - Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  - Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  langs:
  - csharp
  - vb
  name: TableStorageStoreExtensions
  nameWithType: TableStorageStoreExtensions
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TableStorageStoreExtensions
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
    startLine: 20
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nExtension methods for Azure Table storage.\n"
  example: []
  syntax:
    content: public static class TableStorageStoreExtensions
    content.vb: Public Module TableStorageStoreExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  id: GetByKeyAndRow``1(Cqrs.DataStores.IDataStore{``0},System.Guid)
  isExtensionMethod: true
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  langs:
  - csharp
  - vb
  name: GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow<TData>(Cqrs.DataStores.IDataStore<TData>, System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetByKeyAndRow
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
    startLine: 25
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRetrieves the data from Azure Storage by it&apos;s <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static TData GetByKeyAndRow<TData>(this IDataStore<TData> datastore, Guid rsn)where TData : IEntity'
    parameters:
    - id: datastore
      type: Cqrs.DataStores.IDataStore{{TData}}
    - id: rsn
      type: System.Guid
    typeParameters:
    - id: TData
    return:
      type: '{TData}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetByKeyAndRow(Of TData As IEntity)(datastore As IDataStore(Of TData), rsn As Guid) As TData
  overload: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow*
  nameWithType.vb: TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow(Of TData)(Cqrs.DataStores.IDataStore(Of TData), System.Guid)
  name.vb: GetByKeyAndRow(Of TData)(IDataStore(Of TData), Guid)
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  commentId: M:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  id: GetByKey``1(Cqrs.DataStores.IDataStore{``0})
  isExtensionMethod: true
  parent: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions
  langs:
  - csharp
  - vb
  name: GetByKey<TData>(IDataStore<TData>)
  nameWithType: TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>)
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey<TData>(Cqrs.DataStores.IDataStore<TData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetByKey
    path: Framework/Azure/Cqrs.Azure.BlobStorage/TableStorageStoreExtensions.cs
    startLine: 35
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nRetrieves the data from Azure Storage by it&apos;s <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IEnumerable<TData> GetByKey<TData>(this IDataStore<TData> datastore)where TData : IEntity'
    parameters:
    - id: datastore
      type: Cqrs.DataStores.IDataStore{{TData}}
    typeParameters:
    - id: TData
    return:
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetByKey(Of TData As IEntity)(datastore As IDataStore(Of TData)) As IEnumerable(Of TData)
  overload: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey*
  nameWithType.vb: TableStorageStoreExtensions.GetByKey(Of TData)(IDataStore(Of TData))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey(Of TData)(Cqrs.DataStores.IDataStore(Of TData))
  name.vb: GetByKey(Of TData)(IDataStore(Of TData))
references:
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey
  parent: Microsoft.WindowsAzure.Storage.Table.TableEntity
  isExternal: true
  name: PartitionKey
  nameWithType: TableEntity.PartitionKey
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey
- uid: Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey
  parent: Microsoft.WindowsAzure.Storage.Table.TableEntity
  isExternal: true
  name: RowKey
  nameWithType: TableEntity.RowKey
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow
  isExternal: false
  name: GetByKeyAndRow
  nameWithType: TableStorageStoreExtensions.GetByKeyAndRow
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKeyAndRow
- uid: Cqrs.DataStores.IDataStore{{TData}}
  commentId: T:Cqrs.DataStores.IDataStore{`0}
  parent: Cqrs.DataStores
  definition: Cqrs.DataStores.IDataStore`1
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Microsoft.WindowsAzure.Storage.Table.TableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: TableEntity
  nameWithType: TableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEntity
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.DataStores
  commentId: N:Cqrs.DataStores
  isExternal: false
  name: Cqrs.DataStores
  nameWithType: Cqrs.DataStores
  fullName: Cqrs.DataStores
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey*
  commentId: Overload:Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey
  isExternal: false
  name: GetByKey
  nameWithType: TableStorageStoreExtensions.GetByKey
  fullName: Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.GetByKey
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
