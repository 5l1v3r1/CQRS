### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.IAkkaAggregateRepository`1
  commentId: T:Cqrs.Akka.Domain.IAkkaAggregateRepository`1
  id: IAkkaAggregateRepository`1
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}},System.Boolean)
  langs:
  - csharp
  - vb
  name: IAkkaAggregateRepository<TAuthenticationToken>
  nameWithType: IAkkaAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRepository<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IAkkaAggregateRepository
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRepository.cs
    startLine: 20
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nA <xref href=\"Cqrs.Domain.AggregateRepository%601\" data-throw-if-not-resolved=\"false\"></xref> that is safe to use within Akka.NET\n"
  example: []
  syntax:
    content: 'public interface IAkkaAggregateRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      Public Interface IAkkaAggregateRepository(Of TAuthenticationToken)
          Inherits IAggregateRepository(Of TAuthenticationToken)
  inheritedMembers:
  - Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  - Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  nameWithType.vb: IAkkaAggregateRepository(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRepository(Of TAuthenticationToken)
  name.vb: IAkkaAggregateRepository(Of TAuthenticationToken)
- uid: Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}},System.Boolean)
  commentId: M:Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}},System.Boolean)
  id: LoadAggregateHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}},System.Boolean)
  parent: Cqrs.Akka.Domain.IAkkaAggregateRepository`1
  langs:
  - csharp
  - vb
  name: LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean)
  nameWithType: IAkkaAggregateRepository<TAuthenticationToken>.LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean)
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRepository<TAuthenticationToken>.LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LoadAggregateHistory
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaAggregateRepository.cs
    startLine: 33
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nIf <code data-dev-comment-type=\"paramref\">events</code> is null, loads the events from <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref>, checks for duplicates and then\nrehydrates the <code data-dev-comment-type=\"paramref\">aggregate</code> with the events.\n"
  example: []
  syntax:
    content: 'void LoadAggregateHistory<TAggregateRoot>(TAggregateRoot aggregate, IList<IEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TAggregateRoot : IAggregateRoot<TAuthenticationToken>'
    parameters:
    - id: aggregate
      type: '{TAggregateRoot}'
      description: The <code data-dev-comment-type="typeparamref">TAggregateRoot</code> to rehydrate.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    - id: throwExceptionOnNoEvents
      type: System.Boolean
      description: If true will throw an instance of <xref href="Cqrs.Domain.Exceptions.AggregateNotFoundException%602" data-throw-if-not-resolved="false"></xref> if no aggregate events or provided or found in the <xref href="Cqrs.Events.IEventStore%601" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TAggregateRoot
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Sub LoadAggregateHistory(Of TAggregateRoot As IAggregateRoot(Of TAuthenticationToken))(aggregate As TAggregateRoot, events As IList(Of IEvent(Of TAuthenticationToken)) = Nothing, throwExceptionOnNoEvents As Boolean = True)
  overload: Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory*
  nameWithType.vb: IAkkaAggregateRepository(Of TAuthenticationToken).LoadAggregateHistory(Of TAggregateRoot)(TAggregateRoot, IList(Of IEvent(Of TAuthenticationToken)), Boolean)
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRepository(Of TAuthenticationToken).LoadAggregateHistory(Of TAggregateRoot)(TAggregateRoot, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)), System.Boolean)
  name.vb: LoadAggregateHistory(Of TAggregateRoot)(TAggregateRoot, IList(Of IEvent(Of TAuthenticationToken)), Boolean)
references:
- uid: Cqrs.Domain.AggregateRepository`1
  commentId: T:Cqrs.Domain.AggregateRepository`1
  isExternal: false
  name: AggregateRepository<TAuthenticationToken>
  nameWithType: AggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.AggregateRepository<TAuthenticationToken>
  nameWithType.vb: AggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.AggregateRepository(Of TAuthenticationToken)
  name.vb: AggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.AggregateRepository`1
    name: AggregateRepository
    nameWithType: AggregateRepository
    fullName: Cqrs.Domain.AggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.AggregateRepository`1
    name: AggregateRepository
    nameWithType: AggregateRepository
    fullName: Cqrs.Domain.AggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Save``1({TAggregateRoot},System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository{`0}.Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.IAggregateRepository{`0}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
  isExternal: true
  name: Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, System.Nullable<System.Int32>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)(TAggregateRoot, System.Nullable(Of System.Int32))
  name.vb: Save(Of TAggregateRoot)(TAggregateRoot, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Save(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRepository`1
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TAggregateRoot)(Guid, IList(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get<TAggregateRoot>
    nameWithType: IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
    fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}})
    name: Get(Of TAggregateRoot)
    nameWithType: IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
    fullName: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken).Get(Of TAggregateRoot)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRepository`1
  commentId: T:Cqrs.Domain.IAggregateRepository`1
  isExternal: false
  name: IAggregateRepository<TAuthenticationToken>
  nameWithType: IAggregateRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRepository<TAuthenticationToken>
  nameWithType.vb: IAggregateRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRepository(Of TAuthenticationToken)
  name.vb: IAggregateRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRepository`1
    name: IAggregateRepository
    nameWithType: IAggregateRepository
    fullName: Cqrs.Domain.IAggregateRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  commentId: T:Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  isExternal: false
  name: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  name.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory*
  commentId: Overload:Cqrs.Akka.Domain.IAkkaAggregateRepository`1.LoadAggregateHistory
  isExternal: false
  name: LoadAggregateHistory
  nameWithType: IAkkaAggregateRepository<TAuthenticationToken>.LoadAggregateHistory
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRepository<TAuthenticationToken>.LoadAggregateHistory
  nameWithType.vb: IAkkaAggregateRepository(Of TAuthenticationToken).LoadAggregateHistory
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRepository(Of TAuthenticationToken).LoadAggregateHistory
- uid: '{TAggregateRoot}'
  commentId: '!:TAggregateRoot'
  definition: TAggregateRoot
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Collections.Generic.IList{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IList{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEvent<TAuthenticationToken>>
  nameWithType: IList<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IList<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IList(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IList(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TAggregateRoot
  isExternal: false
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
