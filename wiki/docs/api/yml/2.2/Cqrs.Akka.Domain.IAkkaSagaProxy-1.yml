### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1
  commentId: T:Cqrs.Akka.Domain.IAkkaSagaProxy`1
  id: IAkkaSagaProxy`1
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  - Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  langs:
  - csharp
  - vb
  name: IAkkaSagaProxy<TSaga>
  nameWithType: IAkkaSagaProxy<TSaga>
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>
  type: Interface
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IAkkaSagaProxy
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
    startLine: 18
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nA remote proxy to an <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface IAkkaSagaProxy<out TSaga>
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Interface IAkkaSagaProxy(Of Out TSaga)
  nameWithType.vb: IAkkaSagaProxy(Of TSaga)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga)
  name.vb: IAkkaSagaProxy(Of TSaga)
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  id: ActorReference
  parent: Cqrs.Akka.Domain.IAkkaSagaProxy`1
  langs:
  - csharp
  - vb
  name: ActorReference
  nameWithType: IAkkaSagaProxy<TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.ActorReference
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ActorReference
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
    startLine: 23
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nGets the <xref href=\"Akka.Actor.IActorRef\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IActorRef ActorReference { get; }
    parameters: []
    return:
      type: Akka.Actor.IActorRef
    content.vb: ReadOnly Property ActorReference As IActorRef
  overload: Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference*
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).ActorReference
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).ActorReference
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  commentId: P:Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  id: Saga
  parent: Cqrs.Akka.Domain.IAkkaSagaProxy`1
  langs:
  - csharp
  - vb
  name: Saga
  nameWithType: IAkkaSagaProxy<TSaga>.Saga
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.Saga
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Saga
    path: Framework/Akka.Net/Cqrs.Akka/Domain/IAkkaSagaProxy.cs
    startLine: 28
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  summary: "\nGets the <code data-dev-comment-type=\"typeparamref\">TSaga</code>.\n"
  example: []
  syntax:
    content: TSaga Saga { get; }
    parameters: []
    return:
      type: '{TSaga}'
    content.vb: ReadOnly Property Saga As TSaga
  overload: Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga*
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).Saga
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).Saga
references:
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Akka.Actor.IActorRef
  commentId: T:Akka.Actor.IActorRef
  parent: Akka.Actor
  isExternal: true
  name: IActorRef
  nameWithType: IActorRef
  fullName: Akka.Actor.IActorRef
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference*
  commentId: Overload:Cqrs.Akka.Domain.IAkkaSagaProxy`1.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: IAkkaSagaProxy<TSaga>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.ActorReference
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).ActorReference
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga*
  commentId: Overload:Cqrs.Akka.Domain.IAkkaSagaProxy`1.Saga
  isExternal: false
  name: Saga
  nameWithType: IAkkaSagaProxy<TSaga>.Saga
  fullName: Cqrs.Akka.Domain.IAkkaSagaProxy<TSaga>.Saga
  nameWithType.vb: IAkkaSagaProxy(Of TSaga).Saga
  fullName.vb: Cqrs.Akka.Domain.IAkkaSagaProxy(Of TSaga).Saga
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
