<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher" kind="class" language="C#" prot="public">
    <compoundname>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ReceiveActor</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher" prot="public" virt="non-virtual">Cqrs::Akka::Commands::IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
      <param>
        <type>TTarget</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a3ad0660fe46ca4b238a7e2a8cecad19c_1a3ad0660fe46ca4b238a7e2a8cecad19c" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>IActorRef</type>
        <definition>IActorRef Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.ActorReference</definition>
        <argsstring></argsstring>
        <name>ActorReference</name>
        <briefdescription>
<para>Gets the IActorRef. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="30" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>ICommandReceiver&lt;TAuthenticationToken&gt; Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.CommandReceiver</definition>
        <argsstring></argsstring>
        <name>CommandReceiver</name>
        <briefdescription>
<para>Gets the <ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver&lt;TAuthenticationToken&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="35" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a289c81c8877d2cf83b26f6be7e56f26b_1a289c81c8877d2cf83b26f6be7e56f26b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.ConcurrentAkkaCommandPublisher</definition>
        <argsstring>(IActorRef actorReference, ICommandReceiver&lt; TAuthenticationToken &gt; commandReceiver)</argsstring>
        <name>ConcurrentAkkaCommandPublisher</name>
        <param>
          <type>IActorRef</type>
          <declname>actorReference</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>commandReceiver</declname>
        </param>
        <briefdescription>
<para>Instantiates a new instance of <ref refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a289c81c8877d2cf83b26f6be7e56f26b_1a289c81c8877d2cf83b26f6be7e56f26b" kindref="member">ConcurrentAkkaCommandPublisher&lt;TAuthenticationToken,TTarget&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="40" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a1644fd35a9946df2e99be1044324c4cf_1a1644fd35a9946df2e99be1044324c4cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  on the <ref refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" kindref="member">CommandReceiver</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This is for when a command originated outside <ref refid="namespaceCqrs_1_1Akka" kindref="compound">Akka</ref> and now needs to be pushed into <ref refid="namespaceCqrs_1_1Akka" kindref="compound">Akka</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="54" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_af8c681932cd7586a70cb65db8cbb5bfe_1af8c681932cd7586a70cb65db8cbb5bfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>commands</emphasis>  on the <ref refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" kindref="member">CommandReceiver</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This is for when a command originated outside <ref refid="namespaceCqrs_1_1Akka" kindref="compound">Akka</ref> and now needs to be pushed into <ref refid="namespaceCqrs_1_1Akka" kindref="compound">Akka</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="68" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_ad88c8edbc1e145807a400a246cb6531b_1ad88c8edbc1e145807a400a246cb6531b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="82" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a4a7273686d0f2af664673b74b71de019_1a4a7273686d0f2af664673b74b71de019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="94" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a53bb54045aabca54124659e56f8fcede_1a53bb54045aabca54124659e56f8fcede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="106" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a396d965b3c74f546923840a680539164_1a396d965b3c74f546923840a680539164" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="121" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a158c0f61847635a7e2b6be760f5927ee_1a158c0f61847635a7e2b6be760f5927ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="134" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a80ae82e4812d7e52eafae1dcbcd4404a_1a80ae82e4812d7e52eafae1dcbcd4404a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="147" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="147" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A IAkkaCommandPublisher&lt;TAuthenticationToken&gt; that ensure concurrency regardless of what it passes the command onto as it is a ReceiveActor </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the authentication token.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the object that is targeted that needs concurrency.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="22">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher"/>
      </node>
      <node id="23">
        <label>ReceiveActor</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="25">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher"/>
      </node>
      <node id="26">
        <label>ReceiveActor</label>
      </node>
    </collaborationgraph>
    <location file="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="26" column="1" bodyfile="/opt/buildAgent/work/565751ca98ebc594/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="23" bodyend="157"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a3ad0660fe46ca4b238a7e2a8cecad19c_1a3ad0660fe46ca4b238a7e2a8cecad19c" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>ActorReference</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>CommandReceiver</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a289c81c8877d2cf83b26f6be7e56f26b_1a289c81c8877d2cf83b26f6be7e56f26b" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>ConcurrentAkkaCommandPublisher</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a1644fd35a9946df2e99be1044324c4cf_1a1644fd35a9946df2e99be1044324c4cf" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_af8c681932cd7586a70cb65db8cbb5bfe_1af8c681932cd7586a70cb65db8cbb5bfe" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_ad88c8edbc1e145807a400a246cb6531b_1ad88c8edbc1e145807a400a246cb6531b" prot="public" virt="virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a4a7273686d0f2af664673b74b71de019_1a4a7273686d0f2af664673b74b71de019" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a53bb54045aabca54124659e56f8fcede_1a53bb54045aabca54124659e56f8fcede" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a396d965b3c74f546923840a680539164_1a396d965b3c74f546923840a680539164" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a158c0f61847635a7e2b6be760f5927ee_1a158c0f61847635a7e2b6be760f5927ee" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_a80ae82e4812d7e52eafae1dcbcd4404a_1a80ae82e4812d7e52eafae1dcbcd4404a" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
