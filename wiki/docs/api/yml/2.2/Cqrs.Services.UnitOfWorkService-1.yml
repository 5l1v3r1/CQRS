### YamlMime:ManagedReference
items:
- uid: Cqrs.Services.UnitOfWorkService`1
  commentId: T:Cqrs.Services.UnitOfWorkService`1
  id: UnitOfWorkService`1
  parent: Cqrs.Services
  children:
  - Cqrs.Services.UnitOfWorkService`1.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  - Cqrs.Services.UnitOfWorkService`1.Commit(System.Object)
  - Cqrs.Services.UnitOfWorkService`1.Committer
  - Cqrs.Services.UnitOfWorkService`1.SetCommitter(System.Object)
  - Cqrs.Services.UnitOfWorkService`1.UnitOfWork
  langs:
  - csharp
  - vb
  name: UnitOfWorkService<TAuthenticationToken>
  nameWithType: UnitOfWorkService<TAuthenticationToken>
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: UnitOfWorkService
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nProvides a basic container to control how the <xref href=\"Cqrs.Domain.IUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref> is accessed.\n"
  example: []
  syntax:
    content: 'public class UnitOfWorkService<TAuthenticationToken> : IUnitOfWorkService'
    typeParameters:
    - id: TAuthenticationToken
    content.vb: >-
      Public Class UnitOfWorkService(Of TAuthenticationToken)

          Implements IUnitOfWorkService
  inheritance:
  - System.Object
  implements:
  - Cqrs.Services.IUnitOfWorkService
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken)
  name.vb: UnitOfWorkService(Of TAuthenticationToken)
- uid: Cqrs.Services.UnitOfWorkService`1.UnitOfWork
  commentId: P:Cqrs.Services.UnitOfWorkService`1.UnitOfWork
  id: UnitOfWork
  parent: Cqrs.Services.UnitOfWorkService`1
  langs:
  - csharp
  - vb
  name: UnitOfWork
  nameWithType: UnitOfWorkService<TAuthenticationToken>.UnitOfWork
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.UnitOfWork
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: UnitOfWork
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 20
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or set the <xref href=\"Cqrs.Domain.IUnitOfWork%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IUnitOfWork<TAuthenticationToken> UnitOfWork { get; }
    parameters: []
    return:
      type: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property UnitOfWork As IUnitOfWork(Of TAuthenticationToken)
  overload: Cqrs.Services.UnitOfWorkService`1.UnitOfWork*
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).UnitOfWork
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).UnitOfWork
- uid: Cqrs.Services.UnitOfWorkService`1.Committer
  commentId: P:Cqrs.Services.UnitOfWorkService`1.Committer
  id: Committer
  parent: Cqrs.Services.UnitOfWorkService`1
  langs:
  - csharp
  - vb
  name: Committer
  nameWithType: UnitOfWorkService<TAuthenticationToken>.Committer
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.Committer
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Committer
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 25
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nGets or set the object that wants to control the <xref href=\"Cqrs.Services.UnitOfWorkService%601.UnitOfWork\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected object Committer { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Protected ReadOnly Property Committer As Object
  overload: Cqrs.Services.UnitOfWorkService`1.Committer*
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).Committer
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).Committer
- uid: Cqrs.Services.UnitOfWorkService`1.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  commentId: M:Cqrs.Services.UnitOfWorkService`1.#ctor(Cqrs.Domain.IUnitOfWork{`0})
  id: '#ctor(Cqrs.Domain.IUnitOfWork{`0})'
  parent: Cqrs.Services.UnitOfWorkService`1
  langs:
  - csharp
  - vb
  name: UnitOfWorkService(IUnitOfWork<TAuthenticationToken>)
  nameWithType: UnitOfWorkService<TAuthenticationToken>.UnitOfWorkService(IUnitOfWork<TAuthenticationToken>)
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.UnitOfWorkService(Cqrs.Domain.IUnitOfWork<TAuthenticationToken>)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 31
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Services.UnitOfWorkService%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UnitOfWorkService(IUnitOfWork<TAuthenticationToken> unitOfWork)
    parameters:
    - id: unitOfWork
      type: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
      description: ''
    content.vb: Public Sub New(unitOfWork As IUnitOfWork(Of TAuthenticationToken))
  overload: Cqrs.Services.UnitOfWorkService`1.#ctor*
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).UnitOfWorkService(IUnitOfWork(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).UnitOfWorkService(Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken))
  name.vb: UnitOfWorkService(IUnitOfWork(Of TAuthenticationToken))
- uid: Cqrs.Services.UnitOfWorkService`1.SetCommitter(System.Object)
  commentId: M:Cqrs.Services.UnitOfWorkService`1.SetCommitter(System.Object)
  id: SetCommitter(System.Object)
  parent: Cqrs.Services.UnitOfWorkService`1
  langs:
  - csharp
  - vb
  name: SetCommitter(Object)
  nameWithType: UnitOfWorkService<TAuthenticationToken>.SetCommitter(Object)
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.SetCommitter(System.Object)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SetCommitter
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInforms the service of the object that will be committing the <xref href=\"Cqrs.Services.UnitOfWorkService%601.UnitOfWork\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool SetCommitter(object commiter)
    parameters:
    - id: commiter
      type: System.Object
    return:
      type: System.Boolean
      description: "\ntrue if the provided <span class=\"paramref\">commiter</span> is accepted as the committer, false otherwise.\n"
    content.vb: Public Function SetCommitter(commiter As Object) As Boolean
  overload: Cqrs.Services.UnitOfWorkService`1.SetCommitter*
  implements:
  - Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).SetCommitter(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).SetCommitter(System.Object)
- uid: Cqrs.Services.UnitOfWorkService`1.Commit(System.Object)
  commentId: M:Cqrs.Services.UnitOfWorkService`1.Commit(System.Object)
  id: Commit(System.Object)
  parent: Cqrs.Services.UnitOfWorkService`1
  langs:
  - csharp
  - vb
  name: Commit(Object)
  nameWithType: UnitOfWorkService<TAuthenticationToken>.Commit(Object)
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.Commit(System.Object)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Services/UnitOfWorkService.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Commit
    path: Framework/Cqrs/Services/UnitOfWorkService.cs
    startLine: 57
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nCommits the <xref href=\"Cqrs.Services.UnitOfWorkService%601.UnitOfWork\" data-throw-if-not-resolved=\"false\"></xref> if the provided <span class=\"paramref\">commiter</span> is the <xref href=\"Cqrs.Services.UnitOfWorkService%601.Committer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Commit(object commiter)
    parameters:
    - id: commiter
      type: System.Object
    return:
      type: System.Boolean
      description: "\ntrue if the provided <span class=\"paramref\">commiter</span> is the <xref href=\"Cqrs.Services.UnitOfWorkService%601.Committer\" data-throw-if-not-resolved=\"false\"></xref>, false otherwise.\n"
    content.vb: Public Function Commit(commiter As Object) As Boolean
  overload: Cqrs.Services.UnitOfWorkService`1.Commit*
  implements:
  - Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).Commit(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).Commit(System.Object)
references:
- uid: Cqrs.Domain.IUnitOfWork`1
  commentId: T:Cqrs.Domain.IUnitOfWork`1
  isExternal: false
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Services.IUnitOfWorkService
  commentId: T:Cqrs.Services.IUnitOfWorkService
  parent: Cqrs.Services
  isExternal: false
  name: IUnitOfWorkService
  nameWithType: IUnitOfWorkService
  fullName: Cqrs.Services.IUnitOfWorkService
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Services.UnitOfWorkService`1.UnitOfWork*
  commentId: Overload:Cqrs.Services.UnitOfWorkService`1.UnitOfWork
  isExternal: false
  name: UnitOfWork
  nameWithType: UnitOfWorkService<TAuthenticationToken>.UnitOfWork
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.UnitOfWork
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).UnitOfWork
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).UnitOfWork
- uid: Cqrs.Domain.IUnitOfWork{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IUnitOfWork{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IUnitOfWork`1
  name: IUnitOfWork<TAuthenticationToken>
  nameWithType: IUnitOfWork<TAuthenticationToken>
  fullName: Cqrs.Domain.IUnitOfWork<TAuthenticationToken>
  nameWithType.vb: IUnitOfWork(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IUnitOfWork(Of TAuthenticationToken)
  name.vb: IUnitOfWork(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IUnitOfWork`1
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Cqrs.Domain.IUnitOfWork
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Services.UnitOfWorkService`1.UnitOfWork
  commentId: P:Cqrs.Services.UnitOfWorkService`1.UnitOfWork
- uid: Cqrs.Services.UnitOfWorkService`1.Committer*
  commentId: Overload:Cqrs.Services.UnitOfWorkService`1.Committer
  isExternal: false
  name: Committer
  nameWithType: UnitOfWorkService<TAuthenticationToken>.Committer
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.Committer
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).Committer
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).Committer
- uid: Cqrs.Services.UnitOfWorkService`1
  commentId: T:Cqrs.Services.UnitOfWorkService`1
  isExternal: false
  name: UnitOfWorkService<TAuthenticationToken>
  nameWithType: UnitOfWorkService<TAuthenticationToken>
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken)
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken)
  name.vb: UnitOfWorkService(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Services.UnitOfWorkService`1
    name: UnitOfWorkService
    nameWithType: UnitOfWorkService
    fullName: Cqrs.Services.UnitOfWorkService
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.UnitOfWorkService`1
    name: UnitOfWorkService
    nameWithType: UnitOfWorkService
    fullName: Cqrs.Services.UnitOfWorkService
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.UnitOfWorkService`1.#ctor*
  commentId: Overload:Cqrs.Services.UnitOfWorkService`1.#ctor
  isExternal: false
  name: UnitOfWorkService
  nameWithType: UnitOfWorkService<TAuthenticationToken>.UnitOfWorkService
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.UnitOfWorkService
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).UnitOfWorkService
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).UnitOfWorkService
- uid: Cqrs.Services.UnitOfWorkService`1.SetCommitter*
  commentId: Overload:Cqrs.Services.UnitOfWorkService`1.SetCommitter
  isExternal: false
  name: SetCommitter
  nameWithType: UnitOfWorkService<TAuthenticationToken>.SetCommitter
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.SetCommitter
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).SetCommitter
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).SetCommitter
- uid: Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
  commentId: M:Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
  parent: Cqrs.Services.IUnitOfWorkService
  isExternal: true
  name: SetCommitter(Object)
  nameWithType: IUnitOfWorkService.SetCommitter(Object)
  fullName: Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
  spec.csharp:
  - uid: Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
    name: SetCommitter
    nameWithType: IUnitOfWorkService.SetCommitter
    fullName: Cqrs.Services.IUnitOfWorkService.SetCommitter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IUnitOfWorkService.SetCommitter(System.Object)
    name: SetCommitter
    nameWithType: IUnitOfWorkService.SetCommitter
    fullName: Cqrs.Services.IUnitOfWorkService.SetCommitter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Services.UnitOfWorkService`1.Committer
  commentId: P:Cqrs.Services.UnitOfWorkService`1.Committer
- uid: Cqrs.Services.UnitOfWorkService`1.Commit*
  commentId: Overload:Cqrs.Services.UnitOfWorkService`1.Commit
  isExternal: false
  name: Commit
  nameWithType: UnitOfWorkService<TAuthenticationToken>.Commit
  fullName: Cqrs.Services.UnitOfWorkService<TAuthenticationToken>.Commit
  nameWithType.vb: UnitOfWorkService(Of TAuthenticationToken).Commit
  fullName.vb: Cqrs.Services.UnitOfWorkService(Of TAuthenticationToken).Commit
- uid: Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
  commentId: M:Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
  parent: Cqrs.Services.IUnitOfWorkService
  isExternal: true
  name: Commit(Object)
  nameWithType: IUnitOfWorkService.Commit(Object)
  fullName: Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
  spec.csharp:
  - uid: Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
    name: Commit
    nameWithType: IUnitOfWorkService.Commit
    fullName: Cqrs.Services.IUnitOfWorkService.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Services.IUnitOfWorkService.Commit(System.Object)
    name: Commit
    nameWithType: IUnitOfWorkService.Commit
    fullName: Cqrs.Services.IUnitOfWorkService.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
