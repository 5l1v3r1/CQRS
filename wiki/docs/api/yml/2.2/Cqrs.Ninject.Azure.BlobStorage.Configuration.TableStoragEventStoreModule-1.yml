### YamlMime:ManagedReference
items:
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  commentId: T:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  id: TableStoragEventStoreModule`1
  parent: Cqrs.Ninject.Azure.BlobStorage.Configuration
  children:
  - Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load
  - Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration
  - Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore
  - Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories
  langs:
  - csharp
  - vb
  name: TableStoragEventStoreModule<TAuthenticationToken>
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TableStoragEventStoreModule
    path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
    startLine: 20
  assemblies:
  - Cqrs.Ninject.Azure.BlobStorage
  namespace: Cqrs.Ninject.Azure.BlobStorage.Configuration
  summary: "\nA <xref href=\"Ninject.Modules.INinjectModule\" data-throw-if-not-resolved=\"false\"></xref> that wires up the prerequisites of <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> with table storage.\n"
  example: []
  syntax:
    content: 'public class TableStoragEventStoreModule<TAuthenticationToken> : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class TableStoragEventStoreModule(Of TAuthenticationToken)
          Inherits NinjectModule
          Implements IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel
  inheritance:
  - System.Object
  - Ninject.Infrastructure.Disposal.DisposableObject
  - Ninject.Syntax.BindingRoot
  - Ninject.Modules.NinjectModule
  implements:
  - Ninject.Infrastructure.Disposal.IDisposableObject
  - System.IDisposable
  - Ninject.Syntax.IBindingRoot
  - Ninject.Modules.INinjectModule
  - Ninject.Infrastructure.IHaveKernel
  inheritedMembers:
  - Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
  - Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
  - Ninject.Modules.NinjectModule.OnVerifyRequiredModules
  - Ninject.Modules.NinjectModule.Unload
  - Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
  - Ninject.Modules.NinjectModule.Unbind(System.Type)
  - Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
  - Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
  - Ninject.Modules.NinjectModule.Kernel
  - Ninject.Modules.NinjectModule.Name
  - Ninject.Modules.NinjectModule.Bindings
  - Ninject.Modules.NinjectModule.KernelInstance
  - Ninject.Syntax.BindingRoot.Bind``1
  - Ninject.Syntax.BindingRoot.Bind``2
  - Ninject.Syntax.BindingRoot.Bind``3
  - Ninject.Syntax.BindingRoot.Bind``4
  - Ninject.Syntax.BindingRoot.Bind(System.Type[])
  - Ninject.Syntax.BindingRoot.Unbind``1
  - Ninject.Syntax.BindingRoot.Rebind``1
  - Ninject.Syntax.BindingRoot.Rebind``2
  - Ninject.Syntax.BindingRoot.Rebind``3
  - Ninject.Syntax.BindingRoot.Rebind``4
  - Ninject.Syntax.BindingRoot.Rebind(System.Type[])
  - Ninject.Infrastructure.Disposal.DisposableObject.Dispose
  - Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
  - Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken)
  name.vb: TableStoragEventStoreModule(Of TAuthenticationToken)
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load
  commentId: M:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load
  id: Load
  parent: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.Load()
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.Load()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
    startLine: 27
  assemblies:
  - Cqrs.Ninject.Azure.BlobStorage
  namespace: Cqrs.Ninject.Azure.BlobStorage.Configuration
  summary: "\nLoads the module into the kernel.\n"
  example: []
  syntax:
    content: public override void Load()
    content.vb: Public Overrides Sub Load
  overridden: Ninject.Modules.NinjectModule.Load
  overload: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load*
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).Load()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).Load()
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories
  commentId: M:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories
  id: RegisterFactories
  parent: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  langs:
  - csharp
  - vb
  name: RegisterFactories()
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterFactories()
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterFactories()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterFactories
    path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
    startLine: 39
  assemblies:
  - Cqrs.Ninject.Azure.BlobStorage
  namespace: Cqrs.Ninject.Azure.BlobStorage.Configuration
  summary: "\nRegister the all factories\n"
  example: []
  syntax:
    content: public virtual void RegisterFactories()
    content.vb: Public Overridable Sub RegisterFactories
  overload: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories*
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterFactories()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterFactories()
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration
  commentId: M:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration
  id: RegisterEventSerialisationConfiguration
  parent: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  langs:
  - csharp
  - vb
  name: RegisterEventSerialisationConfiguration()
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration()
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterEventSerialisationConfiguration
    path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
    startLine: 49
  assemblies:
  - Cqrs.Ninject.Azure.BlobStorage
  namespace: Cqrs.Ninject.Azure.BlobStorage.Configuration
  summary: "\nRegister the all event serialisation configurations\n"
  example: []
  syntax:
    content: public virtual void RegisterEventSerialisationConfiguration()
    content.vb: Public Overridable Sub RegisterEventSerialisationConfiguration
  overload: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration*
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration()
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore
  commentId: M:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore
  id: RegisterEventStore
  parent: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1
  langs:
  - csharp
  - vb
  name: RegisterEventStore()
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventStore()
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventStore()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterEventStore
    path: Framework/Ninject/Azure/Cqrs.Ninject.Azure.BlobStorage/Configuration/TableStoragEventStoreModule.cs
    startLine: 62
  assemblies:
  - Cqrs.Ninject.Azure.BlobStorage
  namespace: Cqrs.Ninject.Azure.BlobStorage.Configuration
  summary: "\nRegister the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void RegisterEventStore()
    content.vb: Public Overridable Sub RegisterEventStore
  overload: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore*
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventStore()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventStore()
references:
- uid: Ninject.Modules.INinjectModule
  commentId: T:Ninject.Modules.INinjectModule
  parent: Ninject.Modules
  isExternal: true
  name: INinjectModule
  nameWithType: INinjectModule
  fullName: Ninject.Modules.INinjectModule
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration
  commentId: N:Cqrs.Ninject.Azure.BlobStorage.Configuration
  isExternal: false
  name: Cqrs.Ninject.Azure.BlobStorage.Configuration
  nameWithType: Cqrs.Ninject.Azure.BlobStorage.Configuration
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Ninject.Infrastructure.Disposal.DisposableObject
  commentId: T:Ninject.Infrastructure.Disposal.DisposableObject
  parent: Ninject.Infrastructure.Disposal
  isExternal: true
  name: DisposableObject
  nameWithType: DisposableObject
  fullName: Ninject.Infrastructure.Disposal.DisposableObject
- uid: Ninject.Syntax.BindingRoot
  commentId: T:Ninject.Syntax.BindingRoot
  parent: Ninject.Syntax
  isExternal: true
  name: BindingRoot
  nameWithType: BindingRoot
  fullName: Ninject.Syntax.BindingRoot
- uid: Ninject.Modules.NinjectModule
  commentId: T:Ninject.Modules.NinjectModule
  parent: Ninject.Modules
  isExternal: true
  name: NinjectModule
  nameWithType: NinjectModule
  fullName: Ninject.Modules.NinjectModule
- uid: Ninject.Infrastructure.Disposal.IDisposableObject
  commentId: T:Ninject.Infrastructure.Disposal.IDisposableObject
  parent: Ninject.Infrastructure.Disposal
  isExternal: true
  name: IDisposableObject
  nameWithType: IDisposableObject
  fullName: Ninject.Infrastructure.Disposal.IDisposableObject
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Ninject.Syntax.IBindingRoot
  commentId: T:Ninject.Syntax.IBindingRoot
  parent: Ninject.Syntax
  isExternal: true
  name: IBindingRoot
  nameWithType: IBindingRoot
  fullName: Ninject.Syntax.IBindingRoot
- uid: Ninject.Infrastructure.IHaveKernel
  commentId: T:Ninject.Infrastructure.IHaveKernel
  parent: Ninject.Infrastructure
  isExternal: true
  name: IHaveKernel
  nameWithType: IHaveKernel
  fullName: Ninject.Infrastructure.IHaveKernel
- uid: Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
  commentId: M:Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: OnLoad(IKernel)
  nameWithType: NinjectModule.OnLoad(IKernel)
  fullName: Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
    name: OnLoad
    nameWithType: NinjectModule.OnLoad
    fullName: Ninject.Modules.NinjectModule.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: Ninject.IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel)
    name: OnLoad
    nameWithType: NinjectModule.OnLoad
    fullName: Ninject.Modules.NinjectModule.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: Ninject.IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
  commentId: M:Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: OnUnload(IKernel)
  nameWithType: NinjectModule.OnUnload(IKernel)
  fullName: Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
    name: OnUnload
    nameWithType: NinjectModule.OnUnload
    fullName: Ninject.Modules.NinjectModule.OnUnload
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: Ninject.IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel)
    name: OnUnload
    nameWithType: NinjectModule.OnUnload
    fullName: Ninject.Modules.NinjectModule.OnUnload
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.IKernel
    name: IKernel
    nameWithType: IKernel
    fullName: Ninject.IKernel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.OnVerifyRequiredModules
  commentId: M:Ninject.Modules.NinjectModule.OnVerifyRequiredModules
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: OnVerifyRequiredModules()
  nameWithType: NinjectModule.OnVerifyRequiredModules()
  fullName: Ninject.Modules.NinjectModule.OnVerifyRequiredModules()
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.OnVerifyRequiredModules
    name: OnVerifyRequiredModules
    nameWithType: NinjectModule.OnVerifyRequiredModules
    fullName: Ninject.Modules.NinjectModule.OnVerifyRequiredModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.OnVerifyRequiredModules
    name: OnVerifyRequiredModules
    nameWithType: NinjectModule.OnVerifyRequiredModules
    fullName: Ninject.Modules.NinjectModule.OnVerifyRequiredModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.Unload
  commentId: M:Ninject.Modules.NinjectModule.Unload
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Unload()
  nameWithType: NinjectModule.Unload()
  fullName: Ninject.Modules.NinjectModule.Unload()
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.Unload
    name: Unload
    nameWithType: NinjectModule.Unload
    fullName: Ninject.Modules.NinjectModule.Unload
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.Unload
    name: Unload
    nameWithType: NinjectModule.Unload
    fullName: Ninject.Modules.NinjectModule.Unload
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
  commentId: M:Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: VerifyRequiredModulesAreLoaded()
  nameWithType: NinjectModule.VerifyRequiredModulesAreLoaded()
  fullName: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded()
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
    name: VerifyRequiredModulesAreLoaded
    nameWithType: NinjectModule.VerifyRequiredModulesAreLoaded
    fullName: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
    name: VerifyRequiredModulesAreLoaded
    nameWithType: NinjectModule.VerifyRequiredModulesAreLoaded
    fullName: Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.Unbind(System.Type)
  commentId: M:Ninject.Modules.NinjectModule.Unbind(System.Type)
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Unbind(Type)
  nameWithType: NinjectModule.Unbind(Type)
  fullName: Ninject.Modules.NinjectModule.Unbind(System.Type)
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.Unbind(System.Type)
    name: Unbind
    nameWithType: NinjectModule.Unbind
    fullName: Ninject.Modules.NinjectModule.Unbind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.Unbind(System.Type)
    name: Unbind
    nameWithType: NinjectModule.Unbind
    fullName: Ninject.Modules.NinjectModule.Unbind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
  commentId: M:Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: AddBinding(IBinding)
  nameWithType: NinjectModule.AddBinding(IBinding)
  fullName: Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
    name: AddBinding
    nameWithType: NinjectModule.AddBinding
    fullName: Ninject.Modules.NinjectModule.AddBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.Planning.Bindings.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Ninject.Planning.Bindings.IBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)
    name: AddBinding
    nameWithType: NinjectModule.AddBinding
    fullName: Ninject.Modules.NinjectModule.AddBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.Planning.Bindings.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Ninject.Planning.Bindings.IBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
  commentId: M:Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: RemoveBinding(IBinding)
  nameWithType: NinjectModule.RemoveBinding(IBinding)
  fullName: Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
    name: RemoveBinding
    nameWithType: NinjectModule.RemoveBinding
    fullName: Ninject.Modules.NinjectModule.RemoveBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.Planning.Bindings.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Ninject.Planning.Bindings.IBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)
    name: RemoveBinding
    nameWithType: NinjectModule.RemoveBinding
    fullName: Ninject.Modules.NinjectModule.RemoveBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Ninject.Planning.Bindings.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Ninject.Planning.Bindings.IBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules.NinjectModule.Kernel
  commentId: P:Ninject.Modules.NinjectModule.Kernel
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Kernel
  nameWithType: NinjectModule.Kernel
  fullName: Ninject.Modules.NinjectModule.Kernel
- uid: Ninject.Modules.NinjectModule.Name
  commentId: P:Ninject.Modules.NinjectModule.Name
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Name
  nameWithType: NinjectModule.Name
  fullName: Ninject.Modules.NinjectModule.Name
- uid: Ninject.Modules.NinjectModule.Bindings
  commentId: P:Ninject.Modules.NinjectModule.Bindings
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Bindings
  nameWithType: NinjectModule.Bindings
  fullName: Ninject.Modules.NinjectModule.Bindings
- uid: Ninject.Modules.NinjectModule.KernelInstance
  commentId: P:Ninject.Modules.NinjectModule.KernelInstance
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: KernelInstance
  nameWithType: NinjectModule.KernelInstance
  fullName: Ninject.Modules.NinjectModule.KernelInstance
- uid: Ninject.Syntax.BindingRoot.Bind``1
  commentId: M:Ninject.Syntax.BindingRoot.Bind``1
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Bind<T>()
  nameWithType: BindingRoot.Bind<T>()
  fullName: Ninject.Syntax.BindingRoot.Bind<T>()
  nameWithType.vb: BindingRoot.Bind(Of T)()
  fullName.vb: Ninject.Syntax.BindingRoot.Bind(Of T)()
  name.vb: Bind(Of T)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Bind``1
    name: Bind<T>
    nameWithType: BindingRoot.Bind<T>
    fullName: Ninject.Syntax.BindingRoot.Bind<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Bind``1
    name: Bind(Of T)
    nameWithType: BindingRoot.Bind(Of T)
    fullName: Ninject.Syntax.BindingRoot.Bind(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Bind``2
  commentId: M:Ninject.Syntax.BindingRoot.Bind``2
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Bind<T1, T2>()
  nameWithType: BindingRoot.Bind<T1, T2>()
  fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2>()
  nameWithType.vb: BindingRoot.Bind(Of T1, T2)()
  fullName.vb: Ninject.Syntax.BindingRoot.Bind(Of T1, T2)()
  name.vb: Bind(Of T1, T2)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Bind``2
    name: Bind<T1, T2>
    nameWithType: BindingRoot.Bind<T1, T2>
    fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Bind``2
    name: Bind(Of T1, T2)
    nameWithType: BindingRoot.Bind(Of T1, T2)
    fullName: Ninject.Syntax.BindingRoot.Bind(Of T1, T2)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Bind``3
  commentId: M:Ninject.Syntax.BindingRoot.Bind``3
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Bind<T1, T2, T3>()
  nameWithType: BindingRoot.Bind<T1, T2, T3>()
  fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>()
  nameWithType.vb: BindingRoot.Bind(Of T1, T2, T3)()
  fullName.vb: Ninject.Syntax.BindingRoot.Bind(Of T1, T2, T3)()
  name.vb: Bind(Of T1, T2, T3)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Bind``3
    name: Bind<T1, T2, T3>
    nameWithType: BindingRoot.Bind<T1, T2, T3>
    fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Bind``3
    name: Bind(Of T1, T2, T3)
    nameWithType: BindingRoot.Bind(Of T1, T2, T3)
    fullName: Ninject.Syntax.BindingRoot.Bind(Of T1, T2, T3)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Bind``4
  commentId: M:Ninject.Syntax.BindingRoot.Bind``4
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Bind<T1, T2, T3, T4>()
  nameWithType: BindingRoot.Bind<T1, T2, T3, T4>()
  fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>()
  nameWithType.vb: BindingRoot.Bind(Of T1, T2, T3, T4)()
  fullName.vb: Ninject.Syntax.BindingRoot.Bind(Of T1, T2, T3, T4)()
  name.vb: Bind(Of T1, T2, T3, T4)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Bind``4
    name: Bind<T1, T2, T3, T4>
    nameWithType: BindingRoot.Bind<T1, T2, T3, T4>
    fullName: Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Bind``4
    name: Bind(Of T1, T2, T3, T4)
    nameWithType: BindingRoot.Bind(Of T1, T2, T3, T4)
    fullName: Ninject.Syntax.BindingRoot.Bind(Of T1, T2, T3, T4)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Bind(System.Type[])
  commentId: M:Ninject.Syntax.BindingRoot.Bind(System.Type[])
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Bind(Type[])
  nameWithType: BindingRoot.Bind(Type[])
  fullName: Ninject.Syntax.BindingRoot.Bind(System.Type[])
  nameWithType.vb: BindingRoot.Bind(Type())
  fullName.vb: Ninject.Syntax.BindingRoot.Bind(System.Type())
  name.vb: Bind(Type())
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Bind(System.Type[])
    name: Bind
    nameWithType: BindingRoot.Bind
    fullName: Ninject.Syntax.BindingRoot.Bind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Bind(System.Type[])
    name: Bind
    nameWithType: BindingRoot.Bind
    fullName: Ninject.Syntax.BindingRoot.Bind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Unbind``1
  commentId: M:Ninject.Syntax.BindingRoot.Unbind``1
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Unbind<T>()
  nameWithType: BindingRoot.Unbind<T>()
  fullName: Ninject.Syntax.BindingRoot.Unbind<T>()
  nameWithType.vb: BindingRoot.Unbind(Of T)()
  fullName.vb: Ninject.Syntax.BindingRoot.Unbind(Of T)()
  name.vb: Unbind(Of T)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Unbind``1
    name: Unbind<T>
    nameWithType: BindingRoot.Unbind<T>
    fullName: Ninject.Syntax.BindingRoot.Unbind<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Unbind``1
    name: Unbind(Of T)
    nameWithType: BindingRoot.Unbind(Of T)
    fullName: Ninject.Syntax.BindingRoot.Unbind(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Rebind``1
  commentId: M:Ninject.Syntax.BindingRoot.Rebind``1
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Rebind<T1>()
  nameWithType: BindingRoot.Rebind<T1>()
  fullName: Ninject.Syntax.BindingRoot.Rebind<T1>()
  nameWithType.vb: BindingRoot.Rebind(Of T1)()
  fullName.vb: Ninject.Syntax.BindingRoot.Rebind(Of T1)()
  name.vb: Rebind(Of T1)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Rebind``1
    name: Rebind<T1>
    nameWithType: BindingRoot.Rebind<T1>
    fullName: Ninject.Syntax.BindingRoot.Rebind<T1>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Rebind``1
    name: Rebind(Of T1)
    nameWithType: BindingRoot.Rebind(Of T1)
    fullName: Ninject.Syntax.BindingRoot.Rebind(Of T1)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Rebind``2
  commentId: M:Ninject.Syntax.BindingRoot.Rebind``2
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Rebind<T1, T2>()
  nameWithType: BindingRoot.Rebind<T1, T2>()
  fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2>()
  nameWithType.vb: BindingRoot.Rebind(Of T1, T2)()
  fullName.vb: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2)()
  name.vb: Rebind(Of T1, T2)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Rebind``2
    name: Rebind<T1, T2>
    nameWithType: BindingRoot.Rebind<T1, T2>
    fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Rebind``2
    name: Rebind(Of T1, T2)
    nameWithType: BindingRoot.Rebind(Of T1, T2)
    fullName: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Rebind``3
  commentId: M:Ninject.Syntax.BindingRoot.Rebind``3
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Rebind<T1, T2, T3>()
  nameWithType: BindingRoot.Rebind<T1, T2, T3>()
  fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>()
  nameWithType.vb: BindingRoot.Rebind(Of T1, T2, T3)()
  fullName.vb: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2, T3)()
  name.vb: Rebind(Of T1, T2, T3)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Rebind``3
    name: Rebind<T1, T2, T3>
    nameWithType: BindingRoot.Rebind<T1, T2, T3>
    fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Rebind``3
    name: Rebind(Of T1, T2, T3)
    nameWithType: BindingRoot.Rebind(Of T1, T2, T3)
    fullName: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2, T3)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Rebind``4
  commentId: M:Ninject.Syntax.BindingRoot.Rebind``4
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Rebind<T1, T2, T3, T4>()
  nameWithType: BindingRoot.Rebind<T1, T2, T3, T4>()
  fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>()
  nameWithType.vb: BindingRoot.Rebind(Of T1, T2, T3, T4)()
  fullName.vb: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2, T3, T4)()
  name.vb: Rebind(Of T1, T2, T3, T4)()
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Rebind``4
    name: Rebind<T1, T2, T3, T4>
    nameWithType: BindingRoot.Rebind<T1, T2, T3, T4>
    fullName: Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Rebind``4
    name: Rebind(Of T1, T2, T3, T4)
    nameWithType: BindingRoot.Rebind(Of T1, T2, T3, T4)
    fullName: Ninject.Syntax.BindingRoot.Rebind(Of T1, T2, T3, T4)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Syntax.BindingRoot.Rebind(System.Type[])
  commentId: M:Ninject.Syntax.BindingRoot.Rebind(System.Type[])
  parent: Ninject.Syntax.BindingRoot
  isExternal: true
  name: Rebind(Type[])
  nameWithType: BindingRoot.Rebind(Type[])
  fullName: Ninject.Syntax.BindingRoot.Rebind(System.Type[])
  nameWithType.vb: BindingRoot.Rebind(Type())
  fullName.vb: Ninject.Syntax.BindingRoot.Rebind(System.Type())
  name.vb: Rebind(Type())
  spec.csharp:
  - uid: Ninject.Syntax.BindingRoot.Rebind(System.Type[])
    name: Rebind
    nameWithType: BindingRoot.Rebind
    fullName: Ninject.Syntax.BindingRoot.Rebind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Syntax.BindingRoot.Rebind(System.Type[])
    name: Rebind
    nameWithType: BindingRoot.Rebind
    fullName: Ninject.Syntax.BindingRoot.Rebind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
  commentId: M:Ninject.Infrastructure.Disposal.DisposableObject.Dispose
  parent: Ninject.Infrastructure.Disposal.DisposableObject
  isExternal: true
  name: Dispose()
  nameWithType: DisposableObject.Dispose()
  fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose()
  spec.csharp:
  - uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    name: Dispose
    nameWithType: DisposableObject.Dispose
    fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    name: Dispose
    nameWithType: DisposableObject.Dispose
    fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
  commentId: M:Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
  parent: Ninject.Infrastructure.Disposal.DisposableObject
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DisposableObject.Dispose(Boolean)
  fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
  spec.csharp:
  - uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DisposableObject.Dispose
    fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DisposableObject.Dispose
    fullName: Ninject.Infrastructure.Disposal.DisposableObject.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed
  commentId: P:Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed
  parent: Ninject.Infrastructure.Disposal.DisposableObject
  isExternal: true
  name: IsDisposed
  nameWithType: DisposableObject.IsDisposed
  fullName: Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Ninject.Modules
  commentId: N:Ninject.Modules
  isExternal: false
  name: Ninject.Modules
  nameWithType: Ninject.Modules
  fullName: Ninject.Modules
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Ninject.Infrastructure.Disposal
  commentId: N:Ninject.Infrastructure.Disposal
  isExternal: false
  name: Ninject.Infrastructure.Disposal
  nameWithType: Ninject.Infrastructure.Disposal
  fullName: Ninject.Infrastructure.Disposal
- uid: Ninject.Syntax
  commentId: N:Ninject.Syntax
  isExternal: false
  name: Ninject.Syntax
  nameWithType: Ninject.Syntax
  fullName: Ninject.Syntax
- uid: Ninject.Infrastructure
  commentId: N:Ninject.Infrastructure
  isExternal: false
  name: Ninject.Infrastructure
  nameWithType: Ninject.Infrastructure
  fullName: Ninject.Infrastructure
- uid: Ninject.Modules.NinjectModule.Load
  commentId: M:Ninject.Modules.NinjectModule.Load
  parent: Ninject.Modules.NinjectModule
  isExternal: true
  name: Load()
  nameWithType: NinjectModule.Load()
  fullName: Ninject.Modules.NinjectModule.Load()
  spec.csharp:
  - uid: Ninject.Modules.NinjectModule.Load
    name: Load
    nameWithType: NinjectModule.Load
    fullName: Ninject.Modules.NinjectModule.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ninject.Modules.NinjectModule.Load
    name: Load
    nameWithType: NinjectModule.Load
    fullName: Ninject.Modules.NinjectModule.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load*
  commentId: Overload:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.Load
  isExternal: false
  name: Load
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.Load
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.Load
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).Load
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).Load
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories*
  commentId: Overload:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterFactories
  isExternal: false
  name: RegisterFactories
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterFactories
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterFactories
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterFactories
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterFactories
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration*
  commentId: Overload:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventSerialisationConfiguration
  isExternal: false
  name: RegisterEventSerialisationConfiguration
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventSerialisationConfiguration
- uid: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore*
  commentId: Overload:Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule`1.RegisterEventStore
  isExternal: false
  name: RegisterEventStore
  nameWithType: TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventStore
  fullName: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule<TAuthenticationToken>.RegisterEventStore
  nameWithType.vb: TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventStore
  fullName.vb: Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule(Of TAuthenticationToken).RegisterEventStore
