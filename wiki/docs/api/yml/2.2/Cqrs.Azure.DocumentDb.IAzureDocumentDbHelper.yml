### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  commentId: T:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  id: IAzureDocumentDbHelper
  parent: Cqrs.Azure.DocumentDb
  children:
  - Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient,Database,System.String,System.String[])
  - Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient,System.String)
  - Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action)
  - Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction``1(Func{``0})
  langs:
  - csharp
  - vb
  name: IAzureDocumentDbHelper
  nameWithType: IAzureDocumentDbHelper
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  type: Interface
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IAzureDocumentDbHelper
    path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
    startLine: 18
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb
  summary: "\nA helper for Azure Document DB.\n"
  example: []
  syntax:
    content: public interface IAzureDocumentDbHelper
    content.vb: Public Interface IAzureDocumentDbHelper
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient,System.String)
  commentId: M:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient,System.String)
  id: CreateOrReadDatabase(DocumentClient,System.String)
  parent: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  langs:
  - csharp
  - vb
  name: CreateOrReadDatabase(DocumentClient, String)
  nameWithType: IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient, String)
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient, System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateOrReadDatabase
    path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
    startLine: 25
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb
  summary: "\nGets a <see cref=\"!:Database\"></see> creating one if it doesn&apos;t already exist.\n"
  example: []
  syntax:
    content: Task<Database> CreateOrReadDatabase(DocumentClient client, string databaseName)
    parameters:
    - id: client
      type: DocumentClient
      description: The <see cref="!:DocumentClient"></see> to use.
    - id: databaseName
      type: System.String
      description: The name of the database to get.
    return:
      type: Task{Database}
    content.vb: Function CreateOrReadDatabase(client As DocumentClient, databaseName As String) As Task(Of Database)
  overload: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase*
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient,Database,System.String,System.String[])
  commentId: M:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient,Database,System.String,System.String[])
  id: CreateOrReadCollection(DocumentClient,Database,System.String,System.String[])
  parent: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  langs:
  - csharp
  - vb
  name: CreateOrReadCollection(DocumentClient, Database, String, String[])
  nameWithType: IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient, Database, String, String[])
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient, Database, System.String, System.String[])
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateOrReadCollection
    path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
    startLine: 34
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb
  summary: "\nGets a <see cref=\"!:DocumentCollection\"></see> creating one if it doesn&apos;t already exist.\n"
  example: []
  syntax:
    content: Task<DocumentCollection> CreateOrReadCollection(DocumentClient client, Database database, string collectionName, string[] uniqiueIndexPropertyNames = null)
    parameters:
    - id: client
      type: DocumentClient
      description: The <see cref="!:DocumentClient"></see> to use.
    - id: database
      type: Database
      description: The <see cref="!:Database"></see> to look in.
    - id: collectionName
      type: System.String
      description: The name of the collection to get.
    - id: uniqiueIndexPropertyNames
      type: System.String[]
      description: Any unique properties the collection should enforce.
    return:
      type: Task{DocumentCollection}
    content.vb: Function CreateOrReadCollection(client As DocumentClient, database As Database, collectionName As String, uniqiueIndexPropertyNames As String() = Nothing) As Task(Of DocumentCollection)
  overload: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection*
  nameWithType.vb: IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient, Database, String, String())
  fullName.vb: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient, Database, System.String, System.String())
  name.vb: CreateOrReadCollection(DocumentClient, Database, String, String())
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction``1(Func{``0})
  commentId: M:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction``1(Func{``0})
  id: ExecuteFaultTollerantFunction``1(Func{``0})
  parent: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  langs:
  - csharp
  - vb
  name: ExecuteFaultTollerantFunction<T>(Func<T>)
  nameWithType: IAzureDocumentDbHelper.ExecuteFaultTollerantFunction<T>(Func<T>)
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction<T>(Func<T>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ExecuteFaultTollerantFunction
    path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
    startLine: 40
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb
  summary: "\nExecute the provided <code data-dev-comment-type=\"paramref\">func</code> in a fault tolerant way.\n"
  example: []
  syntax:
    content: T ExecuteFaultTollerantFunction<T>(Func<T> func)
    parameters:
    - id: func
      type: Func{{T}}
      description: The <see cref="!:Func&lt;T>"></see> to execute.
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ExecuteFaultTollerantFunction(Of T)(func As Func(Of T)) As T
  overload: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction*
  nameWithType.vb: IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Of T)(Func(Of T))
  fullName.vb: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Of T)(Func(Of T))
  name.vb: ExecuteFaultTollerantFunction(Of T)(Func(Of T))
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action)
  commentId: M:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action)
  id: ExecuteFaultTollerantFunction(Action)
  parent: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper
  langs:
  - csharp
  - vb
  name: ExecuteFaultTollerantFunction(Action)
  nameWithType: IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action)
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ExecuteFaultTollerantFunction
    path: Framework/Azure/Cqrs.Azure.DocumentDb/IAzureDocumentDbHelper.cs
    startLine: 46
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb
  summary: "\nExecute the provided <code data-dev-comment-type=\"paramref\">func</code> in a fault tolerant way.\n"
  example: []
  syntax:
    content: void ExecuteFaultTollerantFunction(Action func)
    parameters:
    - id: func
      type: Action
      description: The <see cref="!:Action"></see> to execute.
    content.vb: Sub ExecuteFaultTollerantFunction(func As Action)
  overload: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction*
references:
- uid: Cqrs.Azure.DocumentDb
  commentId: N:Cqrs.Azure.DocumentDb
  isExternal: false
  name: Cqrs.Azure.DocumentDb
  nameWithType: Cqrs.Azure.DocumentDb
  fullName: Cqrs.Azure.DocumentDb
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase*
  commentId: Overload:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase
  isExternal: false
  name: CreateOrReadDatabase
  nameWithType: IAzureDocumentDbHelper.CreateOrReadDatabase
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadDatabase
- uid: DocumentClient
  isExternal: true
  name: DocumentClient
  nameWithType: DocumentClient
  fullName: DocumentClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{Database}
  commentId: '!:Task{Database}'
  definition: Task`1
  name: Task<Database>
  nameWithType: Task<Database>
  fullName: Task<Database>
  nameWithType.vb: Task(Of Database)
  fullName.vb: Task(Of Database)
  name.vb: Task(Of Database)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Database
    name: Database
    nameWithType: Database
    fullName: Database
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Database
    name: Database
    nameWithType: Database
    fullName: Database
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection*
  commentId: Overload:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection
  isExternal: false
  name: CreateOrReadCollection
  nameWithType: IAzureDocumentDbHelper.CreateOrReadCollection
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.CreateOrReadCollection
- uid: Database
  isExternal: true
  name: Database
  nameWithType: Database
  fullName: Database
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Task{DocumentCollection}
  commentId: '!:Task{DocumentCollection}'
  definition: Task`1
  name: Task<DocumentCollection>
  nameWithType: Task<DocumentCollection>
  fullName: Task<DocumentCollection>
  nameWithType.vb: Task(Of DocumentCollection)
  fullName.vb: Task(Of DocumentCollection)
  name.vb: Task(Of DocumentCollection)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DocumentCollection
    name: DocumentCollection
    nameWithType: DocumentCollection
    fullName: DocumentCollection
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DocumentCollection
    name: DocumentCollection
    nameWithType: DocumentCollection
    fullName: DocumentCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction*
  commentId: Overload:Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction
  isExternal: false
  name: ExecuteFaultTollerantFunction
  nameWithType: IAzureDocumentDbHelper.ExecuteFaultTollerantFunction
  fullName: Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.ExecuteFaultTollerantFunction
- uid: Func{{T}}
  commentId: '!:Func{``0}'
  definition: Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
