<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Domain");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = this.Element.Name;

// using statements
#>
using System.CodeDom.Compiler;
using Cqrs.DataStores;

namespace <#= classNamespace #>.<#= className #>.Factories
{
<#
	// Class and Attributes
#>
	/// <summary>
	/// A factory for obtaining <see cref="IDataStore{TData}"/> instances
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	public partial interface I<#= className #>DataStoreFactory
	{
<#
		IList<INamedElement> allDataStores = new List<INamedElement>();
		foreach (INamedElement element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildDataStore" && property.Value == "true");
			if (shouldBuild)
			{
				shouldBuild = element.AppliedStereotypes.Any(property => property.Name == "Entity");
				if (shouldBuild)
					allDataStores.Add(element);
			}
		}
		foreach (INamedElement element in AllElements(this.Element, "Entity").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			bool isAggregateTo = element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
			if (isAggregateTo)
				continue;
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "Entity");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildDataStore" && property.Value == "true");
			if (shouldBuild)
				allDataStores.Add(element);
		}
		foreach (INamedElement element in allDataStores)
		{
			string elementName = element.Name;
			bool isAggregateTo = element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
#>
		IDataStore<<#= moduleName #>.Entities.<#= elementName #><#= isAggregateTo ? "Entity" : string.Empty #>> Get<#= elementName #>DataStore();

<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Domain");
	}
#>