### YamlMime:ManagedReference
items:
- uid: Cqrs.EventStore.EventStore`1
  commentId: T:Cqrs.EventStore.EventStore`1
  id: EventStore`1
  parent: Cqrs.EventStore
  children:
  - Cqrs.EventStore.EventStore`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.EventStore.IEventDeserialiser{`0},Cqrs.EventStore.IEventStoreConnectionHelper)
  - Cqrs.EventStore.EventStore`1.CqrsEventStoreStreamNamePattern
  - Cqrs.EventStore.EventStore`1.EventBuilder
  - Cqrs.EventStore.EventStore`1.EventDeserialiser
  - Cqrs.EventStore.EventStore`1.EventStoreConnection
  - Cqrs.EventStore.EventStore`1.Get(System.Guid)
  - Cqrs.EventStore.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  - Cqrs.EventStore.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  - Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
  - Cqrs.EventStore.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  - Cqrs.EventStore.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  langs:
  - csharp
  - vb
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStore
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 23
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nA Greg Young Event Store based <xref href=\"Cqrs.EventStore.EventStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class EventStore<TAuthenticationToken> : IEventStore<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class EventStore(Of TAuthenticationToken)
          Implements IEventStore(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
- uid: Cqrs.EventStore.EventStore`1.CqrsEventStoreStreamNamePattern
  commentId: F:Cqrs.EventStore.EventStore`1.CqrsEventStoreStreamNamePattern
  id: CqrsEventStoreStreamNamePattern
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: CqrsEventStoreStreamNamePattern
  nameWithType: EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern
  type: Field
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CqrsEventStoreStreamNamePattern
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 28
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe pattern used to create stream names.\n"
  example: []
  syntax:
    content: protected const string CqrsEventStoreStreamNamePattern = "{0}/{1}"
    return:
      type: System.String
    content.vb: Protected Const CqrsEventStoreStreamNamePattern As String = "{0}/{1}"
  nameWithType.vb: EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).CqrsEventStoreStreamNamePattern
- uid: Cqrs.EventStore.EventStore`1.EventBuilder
  commentId: P:Cqrs.EventStore.EventStore`1.EventBuilder
  id: EventBuilder
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventBuilder
  type: Property
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventBuilder
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 33
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe <xref href=\"Cqrs.EventStore.IEventBuilder%601\" data-throw-if-not-resolved=\"false\"></xref> used to build events.\n"
  example: []
  syntax:
    content: protected IEventBuilder<TAuthenticationToken> EventBuilder { get; set; }
    parameters: []
    return:
      type: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
    content.vb: Protected Property EventBuilder As IEventBuilder(Of TAuthenticationToken)
  overload: Cqrs.EventStore.EventStore`1.EventBuilder*
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.EventStore.EventStore`1.EventDeserialiser
  commentId: P:Cqrs.EventStore.EventStore`1.EventDeserialiser
  id: EventDeserialiser
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventDeserialiser
  type: Property
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventDeserialiser
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 38
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe <xref href=\"Cqrs.EventStore.IEventDeserialiser%601\" data-throw-if-not-resolved=\"false\"></xref> used to deserialise events.\n"
  example: []
  syntax:
    content: protected IEventDeserialiser<TAuthenticationToken> EventDeserialiser { get; set; }
    parameters: []
    return:
      type: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
    content.vb: Protected Property EventDeserialiser As IEventDeserialiser(Of TAuthenticationToken)
  overload: Cqrs.EventStore.EventStore`1.EventDeserialiser*
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.EventStore.EventStore`1.EventStoreConnection
  commentId: P:Cqrs.EventStore.EventStore`1.EventStoreConnection
  id: EventStoreConnection
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: EventStoreConnection
  nameWithType: EventStore<TAuthenticationToken>.EventStoreConnection
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventStoreConnection
  type: Property
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStoreConnection
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 43
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nThe <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> used to read and write streams in the Greg Young Event Store.\n"
  example: []
  syntax:
    content: protected IEventStoreConnection EventStoreConnection { get; set; }
    parameters: []
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
    content.vb: Protected Property EventStoreConnection As IEventStoreConnection
  overload: Cqrs.EventStore.EventStore`1.EventStoreConnection*
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventStoreConnection
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventStoreConnection
- uid: Cqrs.EventStore.EventStore`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.EventStore.IEventDeserialiser{`0},Cqrs.EventStore.IEventStoreConnectionHelper)
  commentId: M:Cqrs.EventStore.EventStore`1.#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.EventStore.IEventDeserialiser{`0},Cqrs.EventStore.IEventStoreConnectionHelper)
  id: '#ctor(Cqrs.EventStore.IEventBuilder{`0},Cqrs.EventStore.IEventDeserialiser{`0},Cqrs.EventStore.IEventStoreConnectionHelper)'
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: EventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, IEventStoreConnectionHelper)
  nameWithType: EventStore<TAuthenticationToken>.EventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, IEventStoreConnectionHelper)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventStore(Cqrs.EventStore.IEventBuilder<TAuthenticationToken>, Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>, Cqrs.EventStore.IEventStoreConnectionHelper)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 48
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.EventStore.EventStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, IEventStoreConnectionHelper eventStoreConnectionHelper)
    parameters:
    - id: eventBuilder
      type: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
    - id: eventDeserialiser
      type: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
    - id: eventStoreConnectionHelper
      type: Cqrs.EventStore.IEventStoreConnectionHelper
    content.vb: Public Sub New(eventBuilder As IEventBuilder(Of TAuthenticationToken), eventDeserialiser As IEventDeserialiser(Of TAuthenticationToken), eventStoreConnectionHelper As IEventStoreConnectionHelper)
  overload: Cqrs.EventStore.EventStore`1.#ctor*
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), IEventStoreConnectionHelper)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventStore(Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken), Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken), Cqrs.EventStore.IEventStoreConnectionHelper)
  name.vb: EventStore(IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken), IEventStoreConnectionHelper)
- uid: Cqrs.EventStore.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.EventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  id: Save``1(Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 62
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nSaves the provided <span class=\"paramref\">event</span>.\n"
  example: []
  syntax:
    content: public void Save<T>(IEvent<TAuthenticationToken> event)
    parameters:
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to be saved.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    content.vb: Public Sub Save(Of T)(event As IEvent(Of TAuthenticationToken))
  overload: Cqrs.EventStore.EventStore`1.Save*
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.EventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  id: Save(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 72
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nSaves the provided <span class=\"paramref\">event</span>.\n"
  example: []
  syntax:
    content: public void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event)
    parameters:
    - id: aggregateRootType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    - id: event
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to be saved.
    content.vb: Public Sub Save(aggregateRootType As Type, event As IEvent(Of TAuthenticationToken))
  overload: Cqrs.EventStore.EventStore`1.Save*
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.EventStore.EventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  id: Get``1(System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 94
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGets a collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for the <span class=\"typeparamref\">T</span> with the ID matching the provided <span class=\"paramref\">aggregateId</span>.\n"
  remarks: "\nThe value of <span class=\"paramref\">fromVersion</span> is zero based but the internals indexing of the EventStore is offset by <xref href=\"EventStore.ClientAPI.StreamPosition.Start\" data-throw-if-not-resolved=\"false\"></xref>.\nAdjust the value of <span class=\"paramref\">fromVersion</span> by <xref href=\"EventStore.ClientAPI.StreamPosition.Start\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1)
    parameters:
    - id: aggregateId
      type: System.Guid
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601.Id" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    - id: useLastEventOnly
      type: System.Boolean
      description: Loads only the last event<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: fromVersion
      type: System.Int32
      description: Load events starting from this version
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Function Get(Of T)(aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = -1) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.EventStore.EventStore`1.Get*
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
- uid: Cqrs.EventStore.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.EventStore.EventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  id: Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 110
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGets a collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"Cqrs.Domain.IAggregateRoot%601\" data-throw-if-not-resolved=\"false\"></xref> of type <span class=\"paramref\">aggregateRootType</span> with the ID matching the provided <span class=\"paramref\">aggregateId</span>.\n"
  remarks: "\nThe value of <span class=\"paramref\">fromVersion</span> is zero based but the internals indexing of the EventStore is offset by <xref href=\"EventStore.ClientAPI.StreamPosition.Start\" data-throw-if-not-resolved=\"false\"></xref>.\nAdjust the value of <span class=\"paramref\">fromVersion</span> by <xref href=\"EventStore.ClientAPI.StreamPosition.Start\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1)
    parameters:
    - id: aggregateRootType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> was raised in.
    - id: aggregateId
      type: System.Guid
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601.Id" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref>.
    - id: useLastEventOnly
      type: System.Boolean
      description: Loads only the last event<xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: fromVersion
      type: System.Int32
      description: Load events starting from this version
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Function Get(aggregateRootType As Type, aggregateId As Guid, useLastEventOnly As Boolean = False, fromVersion As Integer = -1) As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.EventStore.EventStore`1.Get*
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
- uid: Cqrs.EventStore.EventStore`1.Get(System.Guid)
  commentId: M:Cqrs.EventStore.EventStore`1.Get(System.Guid)
  id: Get(System.Guid)
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: Get(Guid)
  nameWithType: EventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Get(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 128
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGet all <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> instances for the given <span class=\"paramref\">correlationId</span>.\n"
  example: []
  syntax:
    content: public IEnumerable<EventData> Get(Guid correlationId)
    parameters:
    - id: correlationId
      type: System.Guid
      description: The <xref href="Cqrs.Messages.IMessage.CorrelationId" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> instances to retrieve.
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
    content.vb: Public Function Get(correlationId As Guid) As IEnumerable(Of EventData)
  overload: Cqrs.EventStore.EventStore`1.Get*
  implements:
  - Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get(System.Guid)
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Get(System.Guid)
- uid: Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
  commentId: M:Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
  id: ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
  parent: Cqrs.EventStore.EventStore`1
  langs:
  - csharp
  - vb
  name: ListenForNotificationsOnConnection(IEventStoreConnection)
  nameWithType: EventStore<TAuthenticationToken>.ListenForNotificationsOnConnection(IEventStoreConnection)
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ListenForNotificationsOnConnection
    path: Framework/Cqrs.EventStore/EventStore.cs
    startLine: 139
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nRequests the <span class=\"paramref\">connection</span> responds to OnConnect client notifications.\n"
  example: []
  syntax:
    content: protected virtual void ListenForNotificationsOnConnection(IEventStoreConnection connection)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref> that will be monitored.
    content.vb: Protected Overridable Sub ListenForNotificationsOnConnection(connection As IEventStoreConnection)
  overload: Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection*
  nameWithType.vb: EventStore(Of TAuthenticationToken).ListenForNotificationsOnConnection(IEventStoreConnection)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).ListenForNotificationsOnConnection(EventStore.ClientAPI.IEventStoreConnection)
references:
- uid: Cqrs.EventStore.EventStore`1
  commentId: T:Cqrs.EventStore.EventStore`1
  isExternal: false
  name: EventStore<TAuthenticationToken>
  nameWithType: EventStore<TAuthenticationToken>
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>
  nameWithType.vb: EventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken)
  name.vb: EventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.EventStore.EventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.EventStore`1
    name: EventStore
    nameWithType: EventStore
    fullName: Cqrs.EventStore.EventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.EventStore
  commentId: N:Cqrs.EventStore
  isExternal: false
  name: Cqrs.EventStore
  nameWithType: Cqrs.EventStore
  fullName: Cqrs.EventStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.EventStore.IEventBuilder`1
  commentId: T:Cqrs.EventStore.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStore`1.EventBuilder*
  commentId: Overload:Cqrs.EventStore.EventStore`1.EventBuilder
  isExternal: false
  name: EventBuilder
  nameWithType: EventStore<TAuthenticationToken>.EventBuilder
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventBuilder
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventBuilder
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventBuilder
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.EventStore.IEventBuilder{`0}
  parent: Cqrs.EventStore
  definition: Cqrs.EventStore.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventDeserialiser`1
  commentId: T:Cqrs.EventStore.IEventDeserialiser`1
  isExternal: false
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStore`1.EventDeserialiser*
  commentId: Overload:Cqrs.EventStore.EventStore`1.EventDeserialiser
  isExternal: false
  name: EventDeserialiser
  nameWithType: EventStore<TAuthenticationToken>.EventDeserialiser
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventDeserialiser
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventDeserialiser
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventDeserialiser
- uid: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  commentId: T:Cqrs.EventStore.IEventDeserialiser{`0}
  parent: Cqrs.EventStore
  definition: Cqrs.EventStore.IEventDeserialiser`1
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  isExternal: true
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: Cqrs.EventStore.EventStore`1.EventStoreConnection*
  commentId: Overload:Cqrs.EventStore.EventStore`1.EventStoreConnection
  isExternal: false
  name: EventStoreConnection
  nameWithType: EventStore<TAuthenticationToken>.EventStoreConnection
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventStoreConnection
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventStoreConnection
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventStoreConnection
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: Cqrs.EventStore.EventStore`1.#ctor*
  commentId: Overload:Cqrs.EventStore.EventStore`1.#ctor
  isExternal: false
  name: EventStore
  nameWithType: EventStore<TAuthenticationToken>.EventStore
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.EventStore
  nameWithType.vb: EventStore(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).EventStore
- uid: Cqrs.EventStore.IEventStoreConnectionHelper
  commentId: T:Cqrs.EventStore.IEventStoreConnectionHelper
  parent: Cqrs.EventStore
  isExternal: false
  name: IEventStoreConnectionHelper
  nameWithType: IEventStoreConnectionHelper
  fullName: Cqrs.EventStore.IEventStoreConnectionHelper
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventStore`1.Save*
  commentId: Overload:Cqrs.EventStore.EventStore`1.Save
  isExternal: false
  name: Save
  nameWithType: EventStore<TAuthenticationToken>.Save
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Save
  nameWithType.vb: EventStore(Of TAuthenticationToken).Save
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Save
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}.Save``1(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.IEventStore{`0}.Save``1(Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: IEventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: IEventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: Save<T>(IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save<T>(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Of T)(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(Of T)(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Of T)(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save<T>
    nameWithType: IEventStore<TAuthenticationToken>.Save<T>
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Save``1(Cqrs.Events.IEvent{`0})
    name: Save(Of T)
    nameWithType: IEventStore(Of TAuthenticationToken).Save(Of T)
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}.Save(System.Type,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.Events.IEventStore{`0}.Save(System.Type,Cqrs.Events.IEvent{`0})
  parent: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: IEventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: IEventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: Save(Type, IEvent<TAuthenticationToken>)
  nameWithType: IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save(System.Type, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Save(Type, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save(System.Type, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: Save(Type, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: IEventStore<TAuthenticationToken>.Save
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Save(System.Type,Cqrs.Events.IEvent{`0})
    name: Save
    nameWithType: IEventStore(Of TAuthenticationToken).Save
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.Id
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: EventStore.ClientAPI.StreamPosition.Start
  commentId: F:EventStore.ClientAPI.StreamPosition.Start
- uid: Cqrs.EventStore.EventStore`1.Get*
  commentId: Overload:Cqrs.EventStore.EventStore`1.Get
  isExternal: false
  name: Get
  nameWithType: EventStore<TAuthenticationToken>.Get
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.Get
  nameWithType.vb: EventStore(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).Get
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore{`0}.Get``1(System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: IEventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: IEventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get<T>(Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get<T>(System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Of T)(Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(Of T)(System.Guid, System.Boolean, System.Int32)
  name.vb: Get(Of T)(Guid, Boolean, Int32)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get<T>
    nameWithType: IEventStore<TAuthenticationToken>.Get<T>
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get``1(System.Guid,System.Boolean,System.Int32)
    name: Get(Of T)
    nameWithType: IEventStore(Of TAuthenticationToken).Get(Of T)
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore{`0}.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  parent: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  commentId: M:Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
  isExternal: true
  name: Get(Type, Guid, Boolean, Int32)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Type, Guid, Boolean, Int32)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Type, System.Guid, System.Boolean, System.Int32)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Type,System.Guid,System.Boolean,System.Int32)
    name: Get
    nameWithType: IEventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessage.CorrelationId
  commentId: P:Cqrs.Messages.IMessage.CorrelationId
  parent: Cqrs.Messages.IMessage
  isExternal: false
  name: CorrelationId
  nameWithType: IMessage.CorrelationId
  fullName: Cqrs.Messages.IMessage.CorrelationId
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}.Get(System.Guid)
  commentId: M:Cqrs.Events.IEventStore{`0}.Get(System.Guid)
  parent: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  definition: Cqrs.Events.IEventStore`1.Get(System.Guid)
  name: Get(Guid)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
    name: Get
    nameWithType: IEventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
    name: Get
    nameWithType: IEventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.EventData
    name: EventData
    nameWithType: EventData
    fullName: Cqrs.Events.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages.IMessage
  commentId: T:Cqrs.Messages.IMessage
  parent: Cqrs.Messages
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: Cqrs.Messages.IMessage
- uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
  commentId: M:Cqrs.Events.IEventStore`1.Get(System.Guid)
  isExternal: true
  name: Get(Guid)
  nameWithType: IEventStore<TAuthenticationToken>.Get(Guid)
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get(System.Guid)
  nameWithType.vb: IEventStore(Of TAuthenticationToken).Get(Guid)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get(System.Guid)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
    name: Get
    nameWithType: IEventStore<TAuthenticationToken>.Get
    fullName: Cqrs.Events.IEventStore<TAuthenticationToken>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1.Get(System.Guid)
    name: Get
    nameWithType: IEventStore(Of TAuthenticationToken).Get
    fullName: Cqrs.Events.IEventStore(Of TAuthenticationToken).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Messages
  commentId: N:Cqrs.Messages
  isExternal: false
  name: Cqrs.Messages
  nameWithType: Cqrs.Messages
  fullName: Cqrs.Messages
- uid: Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection*
  commentId: Overload:Cqrs.EventStore.EventStore`1.ListenForNotificationsOnConnection
  isExternal: false
  name: ListenForNotificationsOnConnection
  nameWithType: EventStore<TAuthenticationToken>.ListenForNotificationsOnConnection
  fullName: Cqrs.EventStore.EventStore<TAuthenticationToken>.ListenForNotificationsOnConnection
  nameWithType.vb: EventStore(Of TAuthenticationToken).ListenForNotificationsOnConnection
  fullName.vb: Cqrs.EventStore.EventStore(Of TAuthenticationToken).ListenForNotificationsOnConnection
