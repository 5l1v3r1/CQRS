### YamlMime:ManagedReference
items:
- uid: Cqrs.EventStore.EventFactory`1
  commentId: T:Cqrs.EventStore.EventFactory`1
  id: EventFactory`1
  parent: Cqrs.EventStore
  children:
  - Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent(System.String)
  - Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  - Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String)
  - Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  - Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,System.String)
  - Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  - Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  - Cqrs.EventStore.EventFactory`1.GetSerialisationSettings
  langs:
  - csharp
  - vb
  name: EventFactory<TAuthenticationToken>
  nameWithType: EventFactory<TAuthenticationToken>
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventFactory
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 23
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nA factory implementing <xref href=\"Cqrs.EventStore.IEventDeserialiser%601\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Cqrs.EventStore.IEventBuilder%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class EventFactory<TAuthenticationToken> : IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class EventFactory(Of TAuthenticationToken)
          Implements IEventBuilder(Of TAuthenticationToken), IEventDeserialiser(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  - Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EventFactory(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken)
  name.vb: EventFactory(Of TAuthenticationToken)
- uid: Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  commentId: M:Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  id: Deserialise(EventStore.ClientAPI.RecordedEvent)
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: Deserialise(RecordedEvent)
  nameWithType: EventFactory<TAuthenticationToken>.Deserialise(RecordedEvent)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.RecordedEvent)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 31
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nDeserialise the provided <span class=\"paramref\">eventData</span> into an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEvent<TAuthenticationToken> Deserialise(RecordedEvent eventData)
    parameters:
    - id: eventData
      type: EventStore.ClientAPI.RecordedEvent
      description: The <xref href="EventStore.ClientAPI.RecordedEvent" data-throw-if-not-resolved="false"></xref> to Deserialise.
    return:
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
    content.vb: Public Function Deserialise(eventData As RecordedEvent) As IEvent(Of TAuthenticationToken)
  overload: Cqrs.EventStore.EventFactory`1.Deserialise*
  implements:
  - Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.Deserialise(EventStore.ClientAPI.RecordedEvent)
  nameWithType.vb: EventFactory(Of TAuthenticationToken).Deserialise(RecordedEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.RecordedEvent)
- uid: Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:Cqrs.EventStore.EventFactory`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  id: Deserialise(EventStore.ClientAPI.ResolvedEvent)
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: Deserialise(ResolvedEvent)
  nameWithType: EventFactory<TAuthenticationToken>.Deserialise(ResolvedEvent)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 48
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nDeserialise the provided <span class=\"paramref\">notification</span> into an <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEvent<TAuthenticationToken> Deserialise(ResolvedEvent notification)
    parameters:
    - id: notification
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to Deserialise.
    return:
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
    content.vb: Public Function Deserialise(notification As ResolvedEvent) As IEvent(Of TAuthenticationToken)
  overload: Cqrs.EventStore.EventFactory`1.Deserialise*
  implements:
  - Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  nameWithType.vb: EventFactory(Of TAuthenticationToken).Deserialise(ResolvedEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.ResolvedEvent)
- uid: Cqrs.EventStore.EventFactory`1.GetSerialisationSettings
  commentId: M:Cqrs.EventStore.EventFactory`1.GetSerialisationSettings
  id: GetSerialisationSettings
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: GetSerialisationSettings()
  nameWithType: EventFactory<TAuthenticationToken>.GetSerialisationSettings()
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.GetSerialisationSettings()
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSerialisationSettings
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 56
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nGets the <xref href=\"Newtonsoft.Json.JsonSerializerSettings\" data-throw-if-not-resolved=\"false\"></xref> used while Deserialising.\n"
  example: []
  syntax:
    content: public JsonSerializerSettings GetSerialisationSettings()
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Public Function GetSerialisationSettings As JsonSerializerSettings
  overload: Cqrs.EventStore.EventFactory`1.GetSerialisationSettings*
  implements:
  - Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.GetSerialisationSettings
  nameWithType.vb: EventFactory(Of TAuthenticationToken).GetSerialisationSettings()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).GetSerialisationSettings()
- uid: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: EventFactory<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 77
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <span class=\"paramref\">eventData</span>.\n"
  example: []
  syntax:
    content: public EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: type
      type: System.String
      description: The name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the target object the serialised data is.
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="EventStore.ClientAPI.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Public Function CreateFrameworkEvent(type As String, eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent*
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  id: CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: EventFactory<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 95
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the provided <span class=\"paramref\">eventData</span>.\n"
  example: []
  syntax:
    content: public EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData)
    parameters:
    - id: eventData
      type: Cqrs.Events.IEvent{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref> to add to the <xref href="EventStore.ClientAPI.EventData" data-throw-if-not-resolved="false"></xref>.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Public Function CreateFrameworkEvent(eventData As IEvent(Of TAuthenticationToken)) As EventData
  overload: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent*
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
- uid: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String)
  commentId: M:Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String)
  id: CreateFrameworkEvent(System.String)
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String)
  nameWithType: EventFactory<TAuthenticationToken>.CreateFrameworkEvent(String)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateFrameworkEvent(System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 113
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">eventDataBody</span>.\n"
  example: []
  syntax:
    content: public EventData CreateFrameworkEvent(string eventDataBody)
    parameters:
    - id: eventDataBody
      type: System.String
      description: A JSON string of serialised data.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Public Function CreateFrameworkEvent(eventDataBody As String) As EventData
  overload: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent*
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String)
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(System.String)
- uid: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,System.String)
  commentId: M:Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent(System.String,System.String)
  id: CreateFrameworkEvent(System.String,System.String)
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: CreateFrameworkEvent(String, String)
  nameWithType: EventFactory<TAuthenticationToken>.CreateFrameworkEvent(String, String)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateFrameworkEvent(System.String, System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateFrameworkEvent
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 126
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> from the provided <span class=\"paramref\">eventDataBody</span>.\n"
  example: []
  syntax:
    content: public EventData CreateFrameworkEvent(string type, string eventDataBody)
    parameters:
    - id: type
      type: System.String
      description: The name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the target object the serialised data is.
    - id: eventDataBody
      type: System.String
      description: A JSON string of serialised data.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Public Function CreateFrameworkEvent(type As String, eventDataBody As String) As EventData
  overload: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent*
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,System.String)
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateFrameworkEvent(System.String, System.String)
- uid: Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent(System.String)
  commentId: M:Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent(System.String)
  id: CreateClientConnectedEvent(System.String)
  parent: Cqrs.EventStore.EventFactory`1
  langs:
  - csharp
  - vb
  name: CreateClientConnectedEvent(String)
  nameWithType: EventFactory<TAuthenticationToken>.CreateClientConnectedEvent(String)
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateClientConnectedEvent(System.String)
  type: Method
  source:
    remote:
      path: Framework/Cqrs.EventStore/EventFactory.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateClientConnectedEvent
    path: Framework/Cqrs.EventStore/EventFactory.cs
    startLine: 139
  assemblies:
  - Cqrs.EventStore
  namespace: Cqrs.EventStore
  summary: "\nCreate an <xref href=\"EventStore.ClientAPI.EventData\" data-throw-if-not-resolved=\"false\"></xref> that notifies people a client has connected.\n"
  example: []
  syntax:
    content: public EventData CreateClientConnectedEvent(string clientName)
    parameters:
    - id: clientName
      type: System.String
      description: The name of the client that has connected.
    return:
      type: EventStore.ClientAPI.EventData
    content.vb: Public Function CreateClientConnectedEvent(clientName As String) As EventData
  overload: Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent*
  implements:
  - Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateClientConnectedEvent(System.String)
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateClientConnectedEvent(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateClientConnectedEvent(System.String)
references:
- uid: Cqrs.EventStore.IEventDeserialiser`1
  commentId: T:Cqrs.EventStore.IEventDeserialiser`1
  isExternal: false
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder`1
  commentId: T:Cqrs.EventStore.IEventBuilder`1
  isExternal: false
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.EventStore
  commentId: N:Cqrs.EventStore
  isExternal: false
  name: Cqrs.EventStore
  nameWithType: Cqrs.EventStore
  fullName: Cqrs.EventStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  commentId: T:Cqrs.EventStore.IEventBuilder{`0}
  parent: Cqrs.EventStore
  definition: Cqrs.EventStore.IEventBuilder`1
  name: IEventBuilder<TAuthenticationToken>
  nameWithType: IEventBuilder<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken)
  name.vb: IEventBuilder(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1
    name: IEventBuilder
    nameWithType: IEventBuilder
    fullName: Cqrs.EventStore.IEventBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  commentId: T:Cqrs.EventStore.IEventDeserialiser{`0}
  parent: Cqrs.EventStore
  definition: Cqrs.EventStore.IEventDeserialiser`1
  name: IEventDeserialiser<TAuthenticationToken>
  nameWithType: IEventDeserialiser<TAuthenticationToken>
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken)
  name.vb: IEventDeserialiser(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1
    name: IEventDeserialiser
    nameWithType: IEventDeserialiser
    fullName: Cqrs.EventStore.IEventDeserialiser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.RecordedEvent
  commentId: T:EventStore.ClientAPI.RecordedEvent
  parent: EventStore.ClientAPI
  isExternal: true
  name: RecordedEvent
  nameWithType: RecordedEvent
  fullName: EventStore.ClientAPI.RecordedEvent
- uid: Cqrs.EventStore.EventFactory`1.Deserialise*
  commentId: Overload:Cqrs.EventStore.EventFactory`1.Deserialise
  isExternal: false
  name: Deserialise
  nameWithType: EventFactory<TAuthenticationToken>.Deserialise
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.Deserialise
  nameWithType.vb: EventFactory(Of TAuthenticationToken).Deserialise
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).Deserialise
- uid: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.Deserialise(EventStore.ClientAPI.RecordedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser{`0}.Deserialise(EventStore.ClientAPI.RecordedEvent)
  parent: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  name: Deserialise(RecordedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(RecordedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.RecordedEvent)
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(RecordedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.RecordedEvent)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.RecordedEvent
    name: RecordedEvent
    nameWithType: RecordedEvent
    fullName: EventStore.ClientAPI.RecordedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.RecordedEvent
    name: RecordedEvent
    nameWithType: RecordedEvent
    fullName: EventStore.ClientAPI.RecordedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEvent`1
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
  isExternal: true
  name: Deserialise(RecordedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(RecordedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.RecordedEvent)
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(RecordedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.RecordedEvent)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.RecordedEvent
    name: RecordedEvent
    nameWithType: RecordedEvent
    fullName: EventStore.ClientAPI.RecordedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.RecordedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.RecordedEvent
    name: RecordedEvent
    nameWithType: RecordedEvent
    fullName: EventStore.ClientAPI.RecordedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  isExternal: true
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser{`0}.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  parent: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  name: Deserialise(ResolvedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(ResolvedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(ResolvedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  isExternal: true
  name: Deserialise(ResolvedEvent)
  nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise(ResolvedEvent)
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise(EventStore.ClientAPI.ResolvedEvent)
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).Deserialise(ResolvedEvent)
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise(EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser<TAuthenticationToken>.Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.Deserialise(EventStore.ClientAPI.ResolvedEvent)
    name: Deserialise
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).Deserialise
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).Deserialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Cqrs.EventStore.EventFactory`1.GetSerialisationSettings*
  commentId: Overload:Cqrs.EventStore.EventFactory`1.GetSerialisationSettings
  isExternal: false
  name: GetSerialisationSettings
  nameWithType: EventFactory<TAuthenticationToken>.GetSerialisationSettings
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.GetSerialisationSettings
  nameWithType.vb: EventFactory(Of TAuthenticationToken).GetSerialisationSettings
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).GetSerialisationSettings
- uid: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}.GetSerialisationSettings
  commentId: M:Cqrs.EventStore.IEventDeserialiser{`0}.GetSerialisationSettings
  parent: Cqrs.EventStore.IEventDeserialiser{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  name: GetSerialisationSettings()
  nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  commentId: M:Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
  isExternal: false
  name: GetSerialisationSettings()
  nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()
  nameWithType.vb: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
  fullName.vb: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings()
  spec.csharp:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
    fullName: Cqrs.EventStore.IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventDeserialiser`1.GetSerialisationSettings
    name: GetSerialisationSettings
    nameWithType: IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
    fullName: Cqrs.EventStore.IEventDeserialiser(Of TAuthenticationToken).GetSerialisationSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventData
  commentId: T:EventStore.ClientAPI.EventData
  parent: EventStore.ClientAPI
  isExternal: true
  name: EventData
  nameWithType: EventData
  fullName: EventStore.ClientAPI.EventData
- uid: Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent*
  commentId: Overload:Cqrs.EventStore.EventFactory`1.CreateFrameworkEvent
  isExternal: false
  name: CreateFrameworkEvent
  nameWithType: EventFactory<TAuthenticationToken>.CreateFrameworkEvent
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateFrameworkEvent
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateFrameworkEvent
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateFrameworkEvent
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.EventStore.IEventBuilder{`0}.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
  isExternal: true
  name: CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(String, IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(Cqrs.Events.IEvent{{TAuthenticationToken}})
  commentId: M:Cqrs.EventStore.IEventBuilder{`0}.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  parent: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
  isExternal: false
  name: CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(Cqrs.Events.IEvent<TAuthenticationToken>)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: CreateFrameworkEvent(IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(Cqrs.Events.IEvent{`0})
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder{`0}.CreateFrameworkEvent(System.String)
  parent: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  name: CreateFrameworkEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
  isExternal: true
  name: CreateFrameworkEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateFrameworkEvent(System.String,System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder{`0}.CreateFrameworkEvent(System.String,System.String)
  parent: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  name: CreateFrameworkEvent(String, String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
  isExternal: true
  name: CreateFrameworkEvent(String, String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(String, String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent(System.String, System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateFrameworkEvent(System.String,System.String)
    name: CreateFrameworkEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateFrameworkEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent*
  commentId: Overload:Cqrs.EventStore.EventFactory`1.CreateClientConnectedEvent
  isExternal: false
  name: CreateClientConnectedEvent
  nameWithType: EventFactory<TAuthenticationToken>.CreateClientConnectedEvent
  fullName: Cqrs.EventStore.EventFactory<TAuthenticationToken>.CreateClientConnectedEvent
  nameWithType.vb: EventFactory(Of TAuthenticationToken).CreateClientConnectedEvent
  fullName.vb: Cqrs.EventStore.EventFactory(Of TAuthenticationToken).CreateClientConnectedEvent
- uid: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}.CreateClientConnectedEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder{`0}.CreateClientConnectedEvent(System.String)
  parent: Cqrs.EventStore.IEventBuilder{{TAuthenticationToken}}
  definition: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  name: CreateClientConnectedEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
    name: CreateClientConnectedEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
    name: CreateClientConnectedEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  commentId: M:Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
  isExternal: true
  name: CreateClientConnectedEvent(String)
  nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(String)
  fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(System.String)
  nameWithType.vb: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(String)
  fullName.vb: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent(System.String)
  spec.csharp:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
    name: CreateClientConnectedEvent
    nameWithType: IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
    fullName: Cqrs.EventStore.IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.EventStore.IEventBuilder`1.CreateClientConnectedEvent(System.String)
    name: CreateClientConnectedEvent
    nameWithType: IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
    fullName: Cqrs.EventStore.IEventBuilder(Of TAuthenticationToken).CreateClientConnectedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
