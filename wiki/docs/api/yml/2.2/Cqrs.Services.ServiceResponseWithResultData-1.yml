### YamlMime:ManagedReference
items:
- uid: Cqrs.Services.ServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.ServiceResponseWithResultData`1
  id: ServiceResponseWithResultData`1
  parent: Cqrs.Services
  children:
  - Cqrs.Services.ServiceResponseWithResultData`1.#ctor
  - Cqrs.Services.ServiceResponseWithResultData`1.#ctor(`0)
  - Cqrs.Services.ServiceResponseWithResultData`1.ResultData
  langs:
  - csharp
  - vb
  name: ServiceResponseWithResultData<TResultData>
  nameWithType: ServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ServiceResponseWithResultData
    path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nA <xref href=\"Cqrs.Services.IServiceResponse\" data-throw-if-not-resolved=\"false\"></xref> that holds request state, correlation information as well as the response data returned from making a public API request.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      [DataContract]

      public class ServiceResponseWithResultData<TResultData> : ServiceResponse, IVersionedServiceResponse, IServiceResponseWithResultData<TResultData>, IServiceResponse
    typeParameters:
    - id: TResultData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data returned from making a public API request.
    content.vb: >-
      <Serializable>

      <DataContract>

      Public Class ServiceResponseWithResultData(Of TResultData)
          Inherits ServiceResponse
          Implements IVersionedServiceResponse, IServiceResponseWithResultData(Of TResultData), IServiceResponse
  inheritance:
  - System.Object
  - Cqrs.Services.ServiceResponse
  implements:
  - Cqrs.Services.IVersionedServiceResponse
  - Cqrs.Services.IServiceResponseWithResultData{{TResultData}}
  - Cqrs.Services.IServiceResponse
  inheritedMembers:
  - Cqrs.Services.ServiceResponse.State
  - Cqrs.Services.ServiceResponse.CorrelationId
  - Cqrs.Services.ServiceResponse.Version
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData)
  name.vb: ServiceResponseWithResultData(Of TResultData)
- uid: Cqrs.Services.ServiceResponseWithResultData`1.ResultData
  commentId: P:Cqrs.Services.ServiceResponseWithResultData`1.ResultData
  id: ResultData
  parent: Cqrs.Services.ServiceResponseWithResultData`1
  langs:
  - csharp
  - vb
  name: ResultData
  nameWithType: ServiceResponseWithResultData<TResultData>.ResultData
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>.ResultData
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ResultData
    path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nThe data returned from making a public API request.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TResultData ResultData { get; set; }
    parameters: []
    return:
      type: '{TResultData}'
    content.vb: >-
      <DataMember>

      Public Property ResultData As TResultData
  overload: Cqrs.Services.ServiceResponseWithResultData`1.ResultData*
  implements:
  - Cqrs.Services.IServiceResponseWithResultData{{TResultData}}.ResultData
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData).ResultData
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData).ResultData
- uid: Cqrs.Services.ServiceResponseWithResultData`1.#ctor
  commentId: M:Cqrs.Services.ServiceResponseWithResultData`1.#ctor
  id: '#ctor'
  parent: Cqrs.Services.ServiceResponseWithResultData`1
  langs:
  - csharp
  - vb
  name: ServiceResponseWithResultData()
  nameWithType: ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData()
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData()
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
    startLine: 30
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiate a new instance of the <xref href=\"Cqrs.Services.ServiceResponseWithResultData%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ServiceResponseWithResultData()
    content.vb: Public Sub New
  overload: Cqrs.Services.ServiceResponseWithResultData`1.#ctor*
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData()
- uid: Cqrs.Services.ServiceResponseWithResultData`1.#ctor(`0)
  commentId: M:Cqrs.Services.ServiceResponseWithResultData`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Cqrs.Services.ServiceResponseWithResultData`1
  langs:
  - csharp
  - vb
  name: ServiceResponseWithResultData(TResultData)
  nameWithType: ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData(TResultData)
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData(TResultData)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Services/ServiceResponseWithResultData.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Services
  summary: "\nInstantiate a new instance of the <xref href=\"Cqrs.Services.ServiceResponseWithResultData%601\" data-throw-if-not-resolved=\"false\"></xref> class providing <code data-dev-comment-type=\"paramref\">resultData</code>.\n"
  example: []
  syntax:
    content: public ServiceResponseWithResultData(TResultData resultData)
    parameters:
    - id: resultData
      type: '{TResultData}'
    content.vb: Public Sub New(resultData As TResultData)
  overload: Cqrs.Services.ServiceResponseWithResultData`1.#ctor*
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData(TResultData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData(TResultData)
references:
- uid: Cqrs.Services.IServiceResponse
  commentId: T:Cqrs.Services.IServiceResponse
  parent: Cqrs.Services
  isExternal: false
  name: IServiceResponse
  nameWithType: IServiceResponse
  fullName: Cqrs.Services.IServiceResponse
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Services
  commentId: N:Cqrs.Services
  isExternal: false
  name: Cqrs.Services
  nameWithType: Cqrs.Services
  fullName: Cqrs.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Services.ServiceResponse
  commentId: T:Cqrs.Services.ServiceResponse
  parent: Cqrs.Services
  isExternal: false
  name: ServiceResponse
  nameWithType: ServiceResponse
  fullName: Cqrs.Services.ServiceResponse
- uid: Cqrs.Services.IVersionedServiceResponse
  commentId: T:Cqrs.Services.IVersionedServiceResponse
  parent: Cqrs.Services
  isExternal: false
  name: IVersionedServiceResponse
  nameWithType: IVersionedServiceResponse
  fullName: Cqrs.Services.IVersionedServiceResponse
- uid: Cqrs.Services.IServiceResponseWithResultData{{TResultData}}
  commentId: T:Cqrs.Services.IServiceResponseWithResultData{`0}
  parent: Cqrs.Services
  definition: Cqrs.Services.IServiceResponseWithResultData`1
  name: IServiceResponseWithResultData<TResultData>
  nameWithType: IServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData)
  name.vb: IServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.ServiceResponse.State
  commentId: P:Cqrs.Services.ServiceResponse.State
  parent: Cqrs.Services.ServiceResponse
  isExternal: false
  name: State
  nameWithType: ServiceResponse.State
  fullName: Cqrs.Services.ServiceResponse.State
- uid: Cqrs.Services.ServiceResponse.CorrelationId
  commentId: P:Cqrs.Services.ServiceResponse.CorrelationId
  parent: Cqrs.Services.ServiceResponse
  isExternal: false
  name: CorrelationId
  nameWithType: ServiceResponse.CorrelationId
  fullName: Cqrs.Services.ServiceResponse.CorrelationId
- uid: Cqrs.Services.ServiceResponse.Version
  commentId: P:Cqrs.Services.ServiceResponse.Version
  parent: Cqrs.Services.ServiceResponse
  isExternal: false
  name: Version
  nameWithType: ServiceResponse.Version
  fullName: Cqrs.Services.ServiceResponse.Version
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Services.IServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.IServiceResponseWithResultData`1
  isExternal: false
  name: IServiceResponseWithResultData<TResultData>
  nameWithType: IServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData)
  name.vb: IServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.IServiceResponseWithResultData`1
    name: IServiceResponseWithResultData
    nameWithType: IServiceResponseWithResultData
    fullName: Cqrs.Services.IServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.ServiceResponseWithResultData`1.ResultData*
  commentId: Overload:Cqrs.Services.ServiceResponseWithResultData`1.ResultData
  isExternal: false
  name: ResultData
  nameWithType: ServiceResponseWithResultData<TResultData>.ResultData
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>.ResultData
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData).ResultData
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData).ResultData
- uid: Cqrs.Services.IServiceResponseWithResultData{{TResultData}}.ResultData
  commentId: P:Cqrs.Services.IServiceResponseWithResultData{`0}.ResultData
  parent: Cqrs.Services.IServiceResponseWithResultData{{TResultData}}
  definition: Cqrs.Services.IServiceResponseWithResultData`1.ResultData
  name: ResultData
  nameWithType: IServiceResponseWithResultData<TResultData>.ResultData
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>.ResultData
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData).ResultData
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData).ResultData
- uid: '{TResultData}'
  commentId: '!:TResultData'
  definition: TResultData
  name: TResultData
  nameWithType: TResultData
  fullName: TResultData
- uid: Cqrs.Services.IServiceResponseWithResultData`1.ResultData
  commentId: P:Cqrs.Services.IServiceResponseWithResultData`1.ResultData
  isExternal: false
  name: ResultData
  nameWithType: IServiceResponseWithResultData<TResultData>.ResultData
  fullName: Cqrs.Services.IServiceResponseWithResultData<TResultData>.ResultData
  nameWithType.vb: IServiceResponseWithResultData(Of TResultData).ResultData
  fullName.vb: Cqrs.Services.IServiceResponseWithResultData(Of TResultData).ResultData
- uid: TResultData
  isExternal: false
  name: TResultData
  nameWithType: TResultData
  fullName: TResultData
- uid: Cqrs.Services.ServiceResponseWithResultData`1
  commentId: T:Cqrs.Services.ServiceResponseWithResultData`1
  isExternal: false
  name: ServiceResponseWithResultData<TResultData>
  nameWithType: ServiceResponseWithResultData<TResultData>
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData)
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData)
  name.vb: ServiceResponseWithResultData(Of TResultData)
  spec.csharp:
  - uid: Cqrs.Services.ServiceResponseWithResultData`1
    name: ServiceResponseWithResultData
    nameWithType: ServiceResponseWithResultData
    fullName: Cqrs.Services.ServiceResponseWithResultData
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Services.ServiceResponseWithResultData`1
    name: ServiceResponseWithResultData
    nameWithType: ServiceResponseWithResultData
    fullName: Cqrs.Services.ServiceResponseWithResultData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Services.ServiceResponseWithResultData`1.#ctor*
  commentId: Overload:Cqrs.Services.ServiceResponseWithResultData`1.#ctor
  isExternal: false
  name: ServiceResponseWithResultData
  nameWithType: ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData
  fullName: Cqrs.Services.ServiceResponseWithResultData<TResultData>.ServiceResponseWithResultData
  nameWithType.vb: ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData
  fullName.vb: Cqrs.Services.ServiceResponseWithResultData(Of TResultData).ServiceResponseWithResultData
