### YamlMime:ManagedReference
items:
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1
  commentId: T:Cqrs.Snapshots.DefaultSnapshotStrategy`1
  id: DefaultSnapshotStrategy`1
  parent: Cqrs.Snapshots
  children:
  - Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
  - Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable(System.Type)
  - Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  langs:
  - csharp
  - vb
  name: DefaultSnapshotStrategy<TAuthenticationToken>
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultSnapshotStrategy
    path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
    startLine: 18
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nAn <xref href=\"Cqrs.Snapshots.ISnapshotStrategy%601\" data-throw-if-not-resolved=\"false\"></xref> that takes a snapshot every 15 versions.\n"
  example: []
  syntax:
    content: 'public class DefaultSnapshotStrategy<TAuthenticationToken> : ISnapshotStrategy<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      Public Class DefaultSnapshotStrategy(Of TAuthenticationToken)
          Implements ISnapshotStrategy(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken)
  name.vb: DefaultSnapshotStrategy(Of TAuthenticationToken)
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable(System.Type)
  id: IsSnapshotable(System.Type)
  parent: Cqrs.Snapshots.DefaultSnapshotStrategy`1
  langs:
  - csharp
  - vb
  name: IsSnapshotable(Type)
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type)
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.IsSnapshotable(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsSnapshotable
    path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
    startLine: 27
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nIndicates if the <code data-dev-comment-type=\"paramref\">aggregateType</code> is able to be snapshotted by checking if the <code data-dev-comment-type=\"paramref\">aggregateType</code>\ndirectly inherits <xref href=\"Cqrs.Snapshots.SnapshotAggregateRoot%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual bool IsSnapshotable(Type aggregateType)
    parameters:
    - id: aggregateType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function IsSnapshotable(aggregateType As Type) As Boolean
  overload: Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable*
  implements:
  - Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}.IsSnapshotable(System.Type)
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(System.Type)
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  id: ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  parent: Cqrs.Snapshots.DefaultSnapshotStrategy`1
  langs:
  - csharp
  - vb
  name: ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ShouldMakeSnapShot
    path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
    startLine: 40
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nChecks <xref href=\"Cqrs.Snapshots.DefaultSnapshotStrategy%601.IsSnapshotable(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> and if it is, also checks if the calculated version number would be exactly dividable by <xref href=\"Cqrs.Snapshots.DefaultSnapshotStrategy%601.GetSnapshotInterval\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken> aggregate)
    parameters:
    - id: aggregate
      type: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ShouldMakeSnapShot(aggregate As IAggregateRoot(Of TAuthenticationToken)) As Boolean
  overload: Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot*
  implements:
  - Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}})
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
  commentId: M:Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
  id: GetSnapshotInterval
  parent: Cqrs.Snapshots.DefaultSnapshotStrategy`1
  langs:
  - csharp
  - vb
  name: GetSnapshotInterval()
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.GetSnapshotInterval()
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.GetSnapshotInterval()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSnapshotInterval
    path: Framework/Cqrs/Snapshots/DefaultSnapshotStrategy.cs
    startLine: 58
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nReturns the value of <xref href=\"Cqrs.Snapshots.DefaultSnapshotStrategy%601.SnapshotInterval\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual int GetSnapshotInterval()
    return:
      type: System.Int32
    content.vb: Protected Overridable Function GetSnapshotInterval As Integer
  overload: Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval*
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).GetSnapshotInterval()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).GetSnapshotInterval()
references:
- uid: Cqrs.Snapshots.ISnapshotStrategy`1
  commentId: T:Cqrs.Snapshots.ISnapshotStrategy`1
  isExternal: false
  name: ISnapshotStrategy<TAuthenticationToken>
  nameWithType: ISnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken)
  name.vb: ISnapshotStrategy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Snapshots
  commentId: N:Cqrs.Snapshots
  isExternal: false
  name: Cqrs.Snapshots
  nameWithType: Cqrs.Snapshots
  fullName: Cqrs.Snapshots
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
  commentId: T:Cqrs.Snapshots.ISnapshotStrategy{`0}
  parent: Cqrs.Snapshots
  definition: Cqrs.Snapshots.ISnapshotStrategy`1
  name: ISnapshotStrategy<TAuthenticationToken>
  nameWithType: ISnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken)
  name.vb: ISnapshotStrategy(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1
    name: ISnapshotStrategy
    nameWithType: ISnapshotStrategy
    fullName: Cqrs.Snapshots.ISnapshotStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
  commentId: T:Cqrs.Snapshots.SnapshotAggregateRoot`2
  isExternal: false
  name: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  nameWithType: SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  fullName: Cqrs.Snapshots.SnapshotAggregateRoot<TAuthenticationToken, TSnapshot>
  nameWithType.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  fullName.vb: Cqrs.Snapshots.SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  name.vb: SnapshotAggregateRoot(Of TAuthenticationToken, TSnapshot)
  spec.csharp:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Snapshots.SnapshotAggregateRoot`2
    name: SnapshotAggregateRoot
    nameWithType: SnapshotAggregateRoot
    fullName: Cqrs.Snapshots.SnapshotAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSnapshot
    nameWithType: TSnapshot
    fullName: TSnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable*
  commentId: Overload:Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable
  isExternal: false
  name: IsSnapshotable
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
- uid: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy{`0}.IsSnapshotable(System.Type)
  parent: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
  definition: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  name: IsSnapshotable(Type)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(System.Type)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(Type)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(System.Type)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  isExternal: true
  name: IsSnapshotable(Type)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(System.Type)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(Type)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(System.Type)
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
    name: IsSnapshotable
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.DefaultSnapshotStrategy`1.IsSnapshotable(System.Type)
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
  commentId: M:Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot*
  commentId: Overload:Cqrs.Snapshots.DefaultSnapshotStrategy`1.ShouldMakeSnapShot
  isExternal: false
  name: ShouldMakeSnapShot
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
- uid: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}})
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy{`0}.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  parent: Cqrs.Snapshots.ISnapshotStrategy{{TAuthenticationToken}}
  definition: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  name: ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  isExternal: false
  name: ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  spec.csharp:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
    name: ShouldMakeSnapShot
    nameWithType: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
    fullName: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.SnapshotInterval
  commentId: F:Cqrs.Snapshots.DefaultSnapshotStrategy`1.SnapshotInterval
- uid: Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval*
  commentId: Overload:Cqrs.Snapshots.DefaultSnapshotStrategy`1.GetSnapshotInterval
  isExternal: false
  name: GetSnapshotInterval
  nameWithType: DefaultSnapshotStrategy<TAuthenticationToken>.GetSnapshotInterval
  fullName: Cqrs.Snapshots.DefaultSnapshotStrategy<TAuthenticationToken>.GetSnapshotInterval
  nameWithType.vb: DefaultSnapshotStrategy(Of TAuthenticationToken).GetSnapshotInterval
  fullName.vb: Cqrs.Snapshots.DefaultSnapshotStrategy(Of TAuthenticationToken).GetSnapshotInterval
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
