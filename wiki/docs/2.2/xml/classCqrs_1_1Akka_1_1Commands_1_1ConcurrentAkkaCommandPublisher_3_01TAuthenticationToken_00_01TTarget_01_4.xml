<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4" kind="class" prot="public">
    <compoundname>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ReceiveActor</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4" prot="public" virt="non-virtual">Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
      <param>
        <type>TTarget</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a3ad0660fe46ca4b238a7e2a8cecad19c_1a3ad0660fe46ca4b238a7e2a8cecad19c" prot="protected" static="no" readable="no" writable="no" gettable="yes" settable="yes">
        <type>IActorRef</type>
        <definition>IActorRef Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.ActorReference</definition>
        <argsstring></argsstring>
        <name>ActorReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="27" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" prot="protected" static="no" readable="no" writable="no" gettable="yes" settable="yes">
        <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>ICommandReceiver&lt;TAuthenticationToken&gt; Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.CommandReceiver</definition>
        <argsstring></argsstring>
        <name>CommandReceiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="29" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a289c81c8877d2cf83b26f6be7e56f26b_1a289c81c8877d2cf83b26f6be7e56f26b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.ConcurrentAkkaCommandPublisher</definition>
        <argsstring>(IActorRef actorReference, ICommandReceiver&lt; TAuthenticationToken &gt; commandReceiver)</argsstring>
        <name>ConcurrentAkkaCommandPublisher</name>
        <param>
          <type>IActorRef</type>
          <declname>actorReference</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>commandReceiver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="31" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a1644fd35a9946df2e99be1044324c4cf_1a1644fd35a9946df2e99be1044324c4cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_aeeb487ad5686d9c44d214b1daaf7833a_1aeeb487ad5686d9c44d214b1daaf7833a">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="39" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a79cf34f63b994b3f70086aa6543d3a53_1a79cf34f63b994b3f70086aa6543d3a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="47" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_af8c681932cd7586a70cb65db8cbb5bfe_1af8c681932cd7586a70cb65db8cbb5bfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4_af0f033c0b949e5650032e4f00b11b595_1af0f033c0b949e5650032e4f00b11b595">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>commands</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="53" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_ae19e74f3221ff9175a03a66bb77cbf47_1ae19e74f3221ff9175a03a66bb77cbf47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="62" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_ad88c8edbc1e145807a400a246cb6531b_1ad88c8edbc1e145807a400a246cb6531b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a19ffb318c830e9f05d4adae985232f30_1a19ffb318c830e9f05d4adae985232f30">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="73" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a4a7273686d0f2af664673b74b71de019_1a4a7273686d0f2af664673b74b71de019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_ad3761879cf9e09c9e89cabf8067b6de4_1ad3761879cf9e09c9e89cabf8067b6de4">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="85" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a53bb54045aabca54124659e56f8fcede_1a53bb54045aabca54124659e56f8fcede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a02ef39482cb50e6e15e06144adca1ed5_1a02ef39482cb50e6e15e06144adca1ed5">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="97" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a396d965b3c74f546923840a680539164_1a396d965b3c74f546923840a680539164" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a83e4480bf8cd6015254d700056cf1647_1a83e4480bf8cd6015254d700056cf1647">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="112" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a158c0f61847635a7e2b6be760f5927ee_1a158c0f61847635a7e2b6be760f5927ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a4b6636f2dba029321c62a78c473590be_1a4b6636f2dba029321c62a78c473590be">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="125" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a80ae82e4812d7e52eafae1dcbcd4404a_1a80ae82e4812d7e52eafae1dcbcd4404a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4_a0460fc2091d52ba3463973fea5028bc6_1a0460fc2091d52ba3463973fea5028bc6">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the IEventReceiver{TAuthenticationToken} that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="138" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="138" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A IAkkaCommandPublisher{TAuthenticationToken} that ensure concurrency regardless of what it passes the command onto as it is a ReceiveActor </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the authentication token.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the object that is targeted that needs concurrency.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="27">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
      <node id="31">
        <label>IAkkaCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IAkkaCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>ReceiveActor</label>
      </node>
      <node id="32">
        <label>IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="34">
        <label>Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_3_01TAuthenticationToken_01_4"/>
      </node>
      <node id="38">
        <label>IAkkaCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IAkkaCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>IConcurrentAkkaCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Akka_1_1Commands_1_1IConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>ReceiveActor</label>
      </node>
      <node id="39">
        <label>IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_3_01TAuthenticationToken_01_4"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" line="26" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Akka.Net/Cqrs.Akka/Commands/ConcurrentAkkaCommandSender.cs" bodystart="23" bodyend="148"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a3ad0660fe46ca4b238a7e2a8cecad19c_1a3ad0660fe46ca4b238a7e2a8cecad19c" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>ActorReference</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a000c2cddf20768b5feec16a8f4e02587_1a000c2cddf20768b5feec16a8f4e02587" prot="protected" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>CommandReceiver</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a289c81c8877d2cf83b26f6be7e56f26b_1a289c81c8877d2cf83b26f6be7e56f26b" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>ConcurrentAkkaCommandPublisher</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a1644fd35a9946df2e99be1044324c4cf_1a1644fd35a9946df2e99be1044324c4cf" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_af8c681932cd7586a70cb65db8cbb5bfe_1af8c681932cd7586a70cb65db8cbb5bfe" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_ad88c8edbc1e145807a400a246cb6531b_1ad88c8edbc1e145807a400a246cb6531b" prot="public" virt="virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a4a7273686d0f2af664673b74b71de019_1a4a7273686d0f2af664673b74b71de019" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a53bb54045aabca54124659e56f8fcede_1a53bb54045aabca54124659e56f8fcede" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a396d965b3c74f546923840a680539164_1a396d965b3c74f546923840a680539164" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a158c0f61847635a7e2b6be760f5927ee_1a158c0f61847635a7e2b6be760f5927ee" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a80ae82e4812d7e52eafae1dcbcd4404a_1a80ae82e4812d7e52eafae1dcbcd4404a" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_a79cf34f63b994b3f70086aa6543d3a53_1a79cf34f63b994b3f70086aa6543d3a53" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Akka_1_1Commands_1_1ConcurrentAkkaCommandPublisher_3_01TAuthenticationToken_00_01TTarget_01_4_ae19e74f3221ff9175a03a66bb77cbf47_1ae19e74f3221ff9175a03a66bb77cbf47" prot="public" virt="non-virtual"><scope>Cqrs::Akka::Commands::ConcurrentAkkaCommandPublisher&lt; TAuthenticationToken, TTarget &gt;</scope><name>Send&lt; TCommand &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
