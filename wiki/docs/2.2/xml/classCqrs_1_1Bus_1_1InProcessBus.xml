<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCqrs_1_1Bus_1_1InProcessBus" kind="class" language="C#" prot="public">
    <compoundname>Cqrs::Bus::InProcessBus</compoundname>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender" prot="public" virt="non-virtual">Cqrs::Commands::ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher" prot="public" virt="non-virtual">Cqrs::Commands::IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Events_1_1IEventPublisher" prot="public" virt="non-virtual">Cqrs::Events::IEventPublisher&lt; TAuthenticationToken &gt;</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Bus_1_1IEventHandlerRegistrar" prot="public" virt="non-virtual">Cqrs.Bus.IEventHandlerRegistrar</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Bus_1_1ICommandHandlerRegistrar" prot="public" virt="non-virtual">Cqrs.Bus.ICommandHandlerRegistrar</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" prot="public" virt="non-virtual">Cqrs.Commands.ICommandReceiver&lt; TAuthenticationToken &gt;</basecompoundref>
    <basecompoundref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" prot="public" virt="non-virtual">Cqrs.Events.IEventReceiver&lt; TAuthenticationToken &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_1ae0fbffab2164da4a67056d10fa8a77c4" prot="private" static="yes" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type><ref refid="classCqrs_1_1Bus_1_1RouteManager" kindref="compound">RouteManager</ref></type>
        <definition>RouteManager Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Routes</definition>
        <argsstring></argsstring>
        <name>Routes</name>
        <briefdescription>
<para>Gets or sets the <ref refid="classCqrs_1_1Bus_1_1Route" kindref="compound">Route</ref> Manager </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="44" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a20d068b944183ab04e77c3164d19a860_1a20d068b944183ab04e77c3164d19a860" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Authentication_1_1IAuthenticationTokenHelper" kindref="compound">IAuthenticationTokenHelper</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>IAuthenticationTokenHelper&lt;TAuthenticationToken&gt; Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.AuthenticationTokenHelper</definition>
        <argsstring></argsstring>
        <name>AuthenticationTokenHelper</name>
        <briefdescription>
<para>Gets or sets the <ref refid="namespaceCqrs_1_1Authentication" kindref="compound">Authentication</ref> Token Helper </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="49" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a3ab05953af552331928ca0f1131c269d_1a3ab05953af552331928ca0f1131c269d" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>ICorrelationIdHelper</type>
        <definition>ICorrelationIdHelper Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.CorrelationIdHelper</definition>
        <argsstring></argsstring>
        <name>CorrelationIdHelper</name>
        <briefdescription>
<para>Gets or sets the CorrelationId Helper </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="54" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a2eafea26a2848880fdbf84717b8e60e1_1a2eafea26a2848880fdbf84717b8e60e1" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Configuration_1_1IDependencyResolver" kindref="compound">IDependencyResolver</ref></type>
        <definition>IDependencyResolver Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.DependencyResolver</definition>
        <argsstring></argsstring>
        <name>DependencyResolver</name>
        <briefdescription>
<para>Gets or sets the Dependency Resolver </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="59" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a6d20e32f64b6dfce12852083f0c641c8_1a6d20e32f64b6dfce12852083f0c641c8" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>ILogger</type>
        <definition>ILogger Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Logger</definition>
        <argsstring></argsstring>
        <name>Logger</name>
        <briefdescription>
<para>Gets or sets the Logger </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="64" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a403133ecfdbdfa85090366f1d5f95230_1a403133ecfdbdfa85090366f1d5f95230" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Configuration_1_1IConfigurationManager" kindref="compound">IConfigurationManager</ref></type>
        <definition>IConfigurationManager Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.ConfigurationManager</definition>
        <argsstring></argsstring>
        <name>ConfigurationManager</name>
        <briefdescription>
<para>Gets or sets the <ref refid="namespaceCqrs_1_1Configuration" kindref="compound">Configuration</ref> Manager </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="69" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a5dd1cb40277f3e04e743dd8cd63523ff_1a5dd1cb40277f3e04e743dd8cd63523ff" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Bus_1_1IBusHelper" kindref="compound">IBusHelper</ref></type>
        <definition>IBusHelper Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.BusHelper</definition>
        <argsstring></argsstring>
        <name>BusHelper</name>
        <briefdescription>
<para>Gets or sets the <ref refid="namespaceCqrs_1_1Bus" kindref="compound">Bus</ref> Helper </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="74" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_a84de47f021786b0400e0635ec68b4ec1_1a84de47f021786b0400e0635ec68b4ec1" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>IDictionary&lt; Guid, IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt; &gt; &gt;</type>
        <definition>IDictionary&lt;Guid, IList&lt;IEvent&lt;TAuthenticationToken&gt; &gt; &gt; Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.EventWaits</definition>
        <argsstring></argsstring>
        <name>EventWaits</name>
        <briefdescription>
<para>Gets or sets the current list of events waiting to be evaluated for <ref refid="classCqrs_1_1Bus_1_1InProcessBus_a38c0684e313f42bfb36b40703db94ccb_1a38c0684e313f42bfb36b40703db94ccb" kindref="member">PublishAndWait&lt;TCommand,TEvent&gt;(TCommand,Cqrs.Events.IEventReceiver&lt;TAuthenticationToken&gt;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="79" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Bus_1_1InProcessBus_aeb193bb8b08276db30dd376696726893_1aeb193bb8b08276db30dd376696726893" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>ITelemetryHelper</type>
        <definition>ITelemetryHelper Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.TelemetryHelper</definition>
        <argsstring></argsstring>
        <name>TelemetryHelper</name>
        <briefdescription>
<para>Gets or sets the Telemetry Helper </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="84" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_1a8ae406e8245fadc982a2fc79f76ab68f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>static</type>
        <definition>static Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.InProcessBus</definition>
        <argsstring>()</argsstring>
        <name>InProcessBus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="86" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a64bea583461562783d97cd98ff0dff91_1a64bea583461562783d97cd98ff0dff91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.InProcessBus</definition>
        <argsstring>(IAuthenticationTokenHelper&lt; TAuthenticationToken &gt; authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, IDependencyResolver dependencyResolver, ILogger logger, IConfigurationManager configurationManager, IBusHelper busHelper)</argsstring>
        <name>InProcessBus</name>
        <param>
          <type><ref refid="interfaceCqrs_1_1Authentication_1_1IAuthenticationTokenHelper" kindref="compound">IAuthenticationTokenHelper</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>authenticationTokenHelper</declname>
        </param>
        <param>
          <type>ICorrelationIdHelper</type>
          <declname>correlationIdHelper</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Configuration_1_1IDependencyResolver" kindref="compound">IDependencyResolver</ref></type>
          <declname>dependencyResolver</declname>
        </param>
        <param>
          <type>ILogger</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Configuration_1_1IConfigurationManager" kindref="compound">IConfigurationManager</ref></type>
          <declname>configurationManager</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Bus_1_1IBusHelper" kindref="compound">IBusHelper</ref></type>
          <declname>busHelper</declname>
        </param>
        <briefdescription>
<para>Instantiates a new instance of the InProcessBus&lt;TAuthenticationToken&gt; class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="94" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a6a074ef3663d2855875307b106fe4416_1a6a074ef3663d2855875307b106fe4416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandSender_a551d69f8679399fc0ce0fd99dead507a_1a551d69f8679399fc0ce0fd99dead507a">Send&lt; TCommand &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="199" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="199" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ae5dae5f2445387280c974ec181167055_1ae5dae5f2445387280c974ec181167055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Send&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Send&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandSender_a3fb3ec40a3e862f721a7c9204e67e832_1a3fb3ec40a3e862f721a7c9204e67e832">Send&lt; TCommand &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>commands</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="253" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="253" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a506d617dc7ec3838791a91e09b73b8ce_1a506d617dc7ec3838791a91e09b73b8ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ab64dd5144f0688b0e23ffe289d4ffa2e_1ab64dd5144f0688b0e23ffe289d4ffa2e">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="302" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a1b3540fe06b60cd601eaff4ea53f5465_1a1b3540fe06b60cd601eaff4ea53f5465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_aceee36522f8b677f3737ff0f9f2165ad_1aceee36522f8b677f3737ff0f9f2165ad">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="314" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a6d49efcd657ed029f97fac292e6296b0_1a6d49efcd657ed029f97fac292e6296b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_ada9643fbf8206bcc72cc5817f747ada8_1ada9643fbf8206bcc72cc5817f747ada8">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="326" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ac8c4a77edc761f15e16c638624424443_1ac8c4a77edc761f15e16c638624424443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_abc9bda930a4c8c57d8edf1044d2b8002_1abc9bda930a4c8c57d8edf1044d2b8002">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="341" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_af3ed033471e85b2943a470c1a635f9c4_1af3ed033471e85b2943a470c1a635f9c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a230c249fa137eafc9857c3b73ae86fcd_1a230c249fa137eafc9857c3b73ae86fcd">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="354" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="354" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_aae598cbe7ec6f4238e5a5b966df1157c_1aae598cbe7ec6f4238e5a5b966df1157c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TEvent</type>
        <definition>virtual TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.SendAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>SendAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender_a8a9b1333e70cc9d8a91d6374354a851f_1a8a9b1333e70cc9d8a91d6374354a851f">SendAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Sends the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to send.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="367" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="367" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_afd3d41a5f27a985e9d6ccf3f6f77f11a_1afd3d41a5f27a985e9d6ccf3f6f77f11a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Publish&lt; TEvent &gt;</definition>
        <argsstring>(TEvent @event)</argsstring>
        <name>Publish&lt; TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Events_1_1IEventPublisher_a02f0db0bc9b3aa1c7f766f58f8422ee3_1a02f0db0bc9b3aa1c7f766f58f8422ee3">Publish&lt; TEvent &gt;</reimplements>
        <param>
          <type>TEvent @</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>@event</emphasis>  on the event bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="380" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="380" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ae154f274db2a028a6094677d83cc1c74_1ae154f274db2a028a6094677d83cc1c74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Publish&lt; TEvent &gt;</definition>
        <argsstring>(IEnumerable&lt; TEvent &gt; events)</argsstring>
        <name>Publish&lt; TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Events_1_1IEventPublisher_a2cbcc3d2c24d015abef6337714ec51ff_1a2cbcc3d2c24d015abef6337714ec51ff">Publish&lt; TEvent &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TEvent &gt;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>events</emphasis>  on the event bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="461" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="461" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a38c0684e313f42bfb36b40703db94ccb_1a38c0684e313f42bfb36b40703db94ccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_a19ffb318c830e9f05d4adae985232f30_1a19ffb318c830e9f05d4adae985232f30">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="510" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a977e49340f771248ddf485eeee650e04_1a977e49340f771248ddf485eeee650e04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_ad3761879cf9e09c9e89cabf8067b6de4_1ad3761879cf9e09c9e89cabf8067b6de4">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="521" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="521" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a4178bdc4e17f28b0b89e11611693ab14_1a4178bdc4e17f28b0b89e11611693ab14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_a02ef39482cb50e6e15e06144adca1ed5_1a02ef39482cb50e6e15e06144adca1ed5">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="532" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="532" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_aad4ec1abb47389db59034e5d7d1aa322_1aad4ec1abb47389db59034e5d7d1aa322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_a83e4480bf8cd6015254d700056cf1647_1a83e4480bf8cd6015254d700056cf1647">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits until the specified condition is satisfied an event of <emphasis>TEvent</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="546" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_addd5bfd0feddfad326e63a548e7eb679_1addd5bfd0feddfad326e63a548e7eb679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, int millisecondsTimeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_a4b6636f2dba029321c62a78c473590be_1a4b6636f2dba029321c62a78c473590be">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millisecondsTimeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecondsTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait, or F:System.Threading.Timeout.Infinite (-1) to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="558" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="558" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ae818b3610165e0036bca718f97349641_1ae818b3610165e0036bca718f97349641" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TEvent</type>
        <definition>TEvent Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PublishAndWait&lt; TCommand, TEvent &gt;</definition>
        <argsstring>(TCommand command, Func&lt; IEnumerable&lt; IEvent&lt; TAuthenticationToken &gt;&gt;, TEvent &gt; condition, TimeSpan timeout, IEventReceiver&lt; TAuthenticationToken &gt; eventReceiver=null)</argsstring>
        <name>PublishAndWait&lt; TCommand, TEvent &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher_a0460fc2091d52ba3463973fea5028bc6_1a0460fc2091d52ba3463973fea5028bc6">PublishAndWait&lt; TCommand, TEvent &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>Func&lt; IEnumerable&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;, TEvent &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>TimeSpan</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventReceiver</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  and waits for an event of <emphasis>TEvent</emphasis>  or exits if the specified timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TCommand</emphasis>  to publish.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>A delegate to be executed over and over until it returns the <emphasis>TEvent</emphasis>  that is desired, return null to keep trying.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A T:System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>If provided, is the <ref refid="interfaceCqrs_1_1Events_1_1IEventReceiver" kindref="compound">IEventReceiver&lt;TAuthenticationToken&gt;</ref> that the event is expected to be returned on.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="617" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="617" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_aa14a00defdf2d48b2d0e6a65dbdb12d9_1aa14a00defdf2d48b2d0e6a65dbdb12d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.RegisterHandler&lt; TMessage &gt;</definition>
        <argsstring>(Action&lt; TMessage &gt; handler, Type targetedType, bool holdMessageLock=true)</argsstring>
        <name>RegisterHandler&lt; TMessage &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Bus_1_1IHandlerRegistrar_ab6ca4dfdc54a5aeebe4651dbdb479f55_1ab6ca4dfdc54a5aeebe4651dbdb479f55">RegisterHandler&lt; TMessage &gt;</reimplements>
        <param>
          <type>Action&lt; TMessage &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>targetedType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>holdMessageLock</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Register an event or command handler that will listen and respond to events or commands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="633" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="633" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a62171e3c6d155cfdfd921b07b4909adf_1a62171e3c6d155cfdfd921b07b4909adf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.RegisterHandler&lt; TMessage &gt;</definition>
        <argsstring>(Action&lt; TMessage &gt; handler, bool holdMessageLock=true)</argsstring>
        <name>RegisterHandler&lt; TMessage &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Bus_1_1IHandlerRegistrar_a07792dcc9a8b272709ff2e2dd336a642_1a07792dcc9a8b272709ff2e2dd336a642">RegisterHandler&lt; TMessage &gt;</reimplements>
        <param>
          <type>Action&lt; TMessage &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>holdMessageLock</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Register an event or command handler that will listen and respond to events or commands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="647" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ad9c2a857323c70f07eb0eb5632ec63e7_1ad9c2a857323c70f07eb0eb5632ec63e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.RegisterGlobalEventHandler&lt; TMessage &gt;</definition>
        <argsstring>(Action&lt; TMessage &gt; handler, bool holdMessageLock=true)</argsstring>
        <name>RegisterGlobalEventHandler&lt; TMessage &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Bus_1_1IEventHandlerRegistrar_a80854abefd17bc58bd94e45266cf141e_1a80854abefd17bc58bd94e45266cf141e">RegisterGlobalEventHandler&lt; TMessage &gt;</reimplements>
        <param>
          <type>Action&lt; TMessage &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>holdMessageLock</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Register an event handler that will listen and respond to all events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="656" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="656" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_afa5b4def79709baa28fbd15c215a4111_1afa5b4def79709baa28fbd15c215a4111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.ReceiveCommand</definition>
        <argsstring>(ICommand&lt; TAuthenticationToken &gt; command)</argsstring>
        <name>ReceiveCommand</name>
        <param>
          <type><ref refid="interfaceCqrs_1_1Commands_1_1ICommand" kindref="compound">ICommand</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Receives a ICommand&lt;TAuthenticationToken&gt; from the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="673" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="673" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_aab52f8518371f5ff5e3f193b1234f192_1aab52f8518371f5ff5e3f193b1234f192" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.ReceiveEvent</definition>
        <argsstring>(IEvent&lt; TAuthenticationToken &gt; @event)</argsstring>
        <name>ReceiveEvent</name>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt; @</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Receives an IEvent&lt;TAuthenticationToken&gt; from the event bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="682" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="682" bodyend="686"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_ab0064808b1b619bee57fa5eff49bfca7_1ab0064808b1b619bee57fa5eff49bfca7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PrepareCommand&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>PrepareCommand&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Sets the IMessageWithAuthenticationToken&lt;TAuthenticationToken&gt;.AuthenticationToken, IMessage.CorrelationId, ICommand&lt;TAuthenticationToken&gt;.OriginatingFramework to &quot;Built-In&quot; and adds a value of &quot;Built-In&quot; to the IMessage.Frameworks if not already done so </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="114" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="114" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_a603950d39c407d5b9661dc0937fa67cc_1a603950d39c407d5b9661dc0937fa67cc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.PrepareAndValidateCommand&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command, out RouteHandlerDelegate commandHandler)</argsstring>
        <name>PrepareAndValidateCommand&lt; TCommand &gt;</name>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>out <ref refid="classCqrs_1_1Bus_1_1RouteHandlerDelegate" kindref="compound">RouteHandlerDelegate</ref></type>
          <declname>commandHandler</declname>
        </param>
        <briefdescription>
<para>Locates a suitable ICommandValidator&lt;TAuthenticationToken,TCommand&gt; to validate the provided <emphasis>command</emphasis>  and validates the provided <emphasis>command</emphasis>  if one is located Calls <ref refid="classCqrs_1_1Bus_1_1InProcessBus_ab0064808b1b619bee57fa5eff49bfca7_1ab0064808b1b619bee57fa5eff49bfca7" kindref="member">PrepareCommand&lt;TCommand&gt;</ref> Checks if the provided <emphasis>command</emphasis>  is required to be processed Locates a single <ref refid="classCqrs_1_1Bus_1_1RouteHandlerDelegate" kindref="compound">command handler</ref> for the provided <emphasis>command</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>False if a suitable ICommandValidator&lt;TAuthenticationToken,TCommand&gt; is located and the provided <emphasis>command</emphasis>  fails validation, False if no <ref refid="classCqrs_1_1Bus_1_1RouteHandlerDelegate" kindref="compound">command handler</ref> is found but the command isn&apos;t required to be handled, True otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="142" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="142" bodyend="184"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_1af1a1f2c1a8664cc1ea449e06136054d2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void <ref refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher" kindref="compound">ICommandPublisher</ref>&lt; TAuthenticationToken &gt;.</type>
        <definition>void ICommandPublisher&lt;TAuthenticationToken&gt;. Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(TCommand command)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_aeeb487ad5686d9c44d214b1daaf7833a_1aeeb487ad5686d9c44d214b1daaf7833a">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>TCommand</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>command</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="191" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_1a09fe9d9c9932a25988dc0dd9c2e1294e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void <ref refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher" kindref="compound">ICommandPublisher</ref>&lt; TAuthenticationToken &gt;.</type>
        <definition>void ICommandPublisher&lt;TAuthenticationToken&gt;. Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Publish&lt; TCommand &gt;</definition>
        <argsstring>(IEnumerable&lt; TCommand &gt; commands)</argsstring>
        <name>Publish&lt; TCommand &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher_af0f033c0b949e5650032e4f00b11b595_1af0f033c0b949e5650032e4f00b11b595">Publish&lt; TCommand &gt;</reimplements>
        <param>
          <type>IEnumerable&lt; TCommand &gt;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Publishes the provided <emphasis>commands</emphasis>  on the command bus. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="245" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_1a5c06b0223285a6b4da8e3dad40bd5529" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void ICommandReceiver.</type>
        <definition>void ICommandReceiver. Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Start</definition>
        <argsstring>()</argsstring>
        <name>Start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="688" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="688" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Bus_1_1InProcessBus_1a95218641955d959fdf8f2eb0a4f006fa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void IEventReceiver.</type>
        <definition>void IEventReceiver. Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;.Start</definition>
        <argsstring>()</argsstring>
        <name>Start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="697" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="697" bodyend="700"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An in process command bus (ICommandPublisher&lt;TAuthenticationToken&gt; and <ref refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver" kindref="compound">ICommandReceiver&lt;TAuthenticationToken&gt;</ref>) event bus (IEventPublisher&lt;TAuthenticationToken&gt; and IEventHandler&lt;TAuthenticationToken,TTarget,TEvent&gt;) as well as a <ref refid="interfaceCqrs_1_1Bus_1_1IEventHandlerRegistrar" kindref="compound">IEventHandlerRegistrar</ref> and <ref refid="interfaceCqrs_1_1Bus_1_1ICommandHandlerRegistrar" kindref="compound">ICommandHandlerRegistrar</ref> that requires no networking. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the authentication token.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1052">
        <label>IHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1IHandlerRegistrar"/>
      </node>
      <node id="1053">
        <label>ICommandHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1ICommandHandlerRegistrar"/>
        <childnode refid="1052" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1045">
        <label>Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Bus_1_1InProcessBus"/>
        <childnode refid="1046" relation="public-inheritance">
        </childnode>
        <childnode refid="1049" relation="public-inheritance">
        </childnode>
        <childnode refid="1050" relation="public-inheritance">
        </childnode>
        <childnode refid="1051" relation="public-inheritance">
        </childnode>
        <childnode refid="1053" relation="public-inheritance">
        </childnode>
        <childnode refid="1054" relation="public-inheritance">
        </childnode>
        <childnode refid="1055" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1048">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher"/>
      </node>
      <node id="1055">
        <label>IEventReceiver&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Events_1_1IEventReceiver"/>
      </node>
      <node id="1054">
        <label>ICommandReceiver&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver"/>
      </node>
      <node id="1051">
        <label>IEventHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1IEventHandlerRegistrar"/>
        <childnode refid="1052" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1047">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender"/>
        <childnode refid="1048" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1046">
        <label>ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender"/>
        <childnode refid="1047" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1049">
        <label>IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher"/>
        <childnode refid="1048" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1050">
        <label>IEventPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Events_1_1IEventPublisher"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1063">
        <label>IHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1IHandlerRegistrar"/>
      </node>
      <node id="1064">
        <label>ICommandHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1ICommandHandlerRegistrar"/>
        <childnode refid="1063" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1056">
        <label>Cqrs.Bus.InProcessBus&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Bus_1_1InProcessBus"/>
        <childnode refid="1057" relation="public-inheritance">
        </childnode>
        <childnode refid="1060" relation="public-inheritance">
        </childnode>
        <childnode refid="1061" relation="public-inheritance">
        </childnode>
        <childnode refid="1062" relation="public-inheritance">
        </childnode>
        <childnode refid="1064" relation="public-inheritance">
        </childnode>
        <childnode refid="1065" relation="public-inheritance">
        </childnode>
        <childnode refid="1066" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1059">
        <label>ICommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandPublisher"/>
      </node>
      <node id="1066">
        <label>IEventReceiver&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Events_1_1IEventReceiver"/>
      </node>
      <node id="1065">
        <label>ICommandReceiver&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandReceiver"/>
      </node>
      <node id="1062">
        <label>IEventHandlerRegistrar</label>
        <link refid="interfaceCqrs_1_1Bus_1_1IEventHandlerRegistrar"/>
        <childnode refid="1063" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1058">
        <label>ICommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ICommandSender"/>
        <childnode refid="1059" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1057">
        <label>ISendAndWaitCommandSender&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1ISendAndWaitCommandSender"/>
        <childnode refid="1058" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1060">
        <label>IPublishAndWaitCommandPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Commands_1_1IPublishAndWaitCommandPublisher"/>
        <childnode refid="1059" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1061">
        <label>IEventPublisher&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Events_1_1IEventPublisher"/>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" line="40" column="1" bodyfile="/mnt/c/code/git/CQRS.XsamX/Framework/Cqrs/Bus/InProcessBus.cs" bodystart="32" bodyend="703"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a20d068b944183ab04e77c3164d19a860_1a20d068b944183ab04e77c3164d19a860" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>AuthenticationTokenHelper</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a5dd1cb40277f3e04e743dd8cd63523ff_1a5dd1cb40277f3e04e743dd8cd63523ff" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>BusHelper</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a403133ecfdbdfa85090366f1d5f95230_1a403133ecfdbdfa85090366f1d5f95230" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>ConfigurationManager</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a3ab05953af552331928ca0f1131c269d_1a3ab05953af552331928ca0f1131c269d" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>CorrelationIdHelper</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a2eafea26a2848880fdbf84717b8e60e1_1a2eafea26a2848880fdbf84717b8e60e1" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>DependencyResolver</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a84de47f021786b0400e0635ec68b4ec1_1a84de47f021786b0400e0635ec68b4ec1" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>EventWaits</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1a8ae406e8245fadc982a2fc79f76ab68f" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>InProcessBus</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a64bea583461562783d97cd98ff0dff91_1a64bea583461562783d97cd98ff0dff91" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>InProcessBus</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a6d20e32f64b6dfce12852083f0c641c8_1a6d20e32f64b6dfce12852083f0c641c8" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Logger</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a603950d39c407d5b9661dc0937fa67cc_1a603950d39c407d5b9661dc0937fa67cc" prot="protected" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PrepareAndValidateCommand&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ab0064808b1b619bee57fa5eff49bfca7_1ab0064808b1b619bee57fa5eff49bfca7" prot="protected" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PrepareCommand&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1af1a1f2c1a8664cc1ea449e06136054d2" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1a09fe9d9c9932a25988dc0dd9c2e1294e" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Publish&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_afd3d41a5f27a985e9d6ccf3f6f77f11a_1afd3d41a5f27a985e9d6ccf3f6f77f11a" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Publish&lt; TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ae154f274db2a028a6094677d83cc1c74_1ae154f274db2a028a6094677d83cc1c74" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Publish&lt; TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a38c0684e313f42bfb36b40703db94ccb_1a38c0684e313f42bfb36b40703db94ccb" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a977e49340f771248ddf485eeee650e04_1a977e49340f771248ddf485eeee650e04" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a4178bdc4e17f28b0b89e11611693ab14_1a4178bdc4e17f28b0b89e11611693ab14" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_aad4ec1abb47389db59034e5d7d1aa322_1aad4ec1abb47389db59034e5d7d1aa322" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_addd5bfd0feddfad326e63a548e7eb679_1addd5bfd0feddfad326e63a548e7eb679" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ae818b3610165e0036bca718f97349641_1ae818b3610165e0036bca718f97349641" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>PublishAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_afa5b4def79709baa28fbd15c215a4111_1afa5b4def79709baa28fbd15c215a4111" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>ReceiveCommand</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_aab52f8518371f5ff5e3f193b1234f192_1aab52f8518371f5ff5e3f193b1234f192" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>ReceiveEvent</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ad9c2a857323c70f07eb0eb5632ec63e7_1ad9c2a857323c70f07eb0eb5632ec63e7" prot="public" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>RegisterGlobalEventHandler&lt; TMessage &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_aa14a00defdf2d48b2d0e6a65dbdb12d9_1aa14a00defdf2d48b2d0e6a65dbdb12d9" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>RegisterHandler&lt; TMessage &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a62171e3c6d155cfdfd921b07b4909adf_1a62171e3c6d155cfdfd921b07b4909adf" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>RegisterHandler&lt; TMessage &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1ae0fbffab2164da4a67056d10fa8a77c4" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Routes</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a6a074ef3663d2855875307b106fe4416_1a6a074ef3663d2855875307b106fe4416" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ae5dae5f2445387280c974ec181167055_1ae5dae5f2445387280c974ec181167055" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Send&lt; TCommand &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a506d617dc7ec3838791a91e09b73b8ce_1a506d617dc7ec3838791a91e09b73b8ce" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a1b3540fe06b60cd601eaff4ea53f5465_1a1b3540fe06b60cd601eaff4ea53f5465" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_a6d49efcd657ed029f97fac292e6296b0_1a6d49efcd657ed029f97fac292e6296b0" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_ac8c4a77edc761f15e16c638624424443_1ac8c4a77edc761f15e16c638624424443" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_af3ed033471e85b2943a470c1a635f9c4_1af3ed033471e85b2943a470c1a635f9c4" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_aae598cbe7ec6f4238e5a5b966df1157c_1aae598cbe7ec6f4238e5a5b966df1157c" prot="public" virt="virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>SendAndWait&lt; TCommand, TEvent &gt;</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1a5c06b0223285a6b4da8e3dad40bd5529" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Start</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_1a95218641955d959fdf8f2eb0a4f006fa" prot="private" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>Start</name></member>
      <member refid="classCqrs_1_1Bus_1_1InProcessBus_aeb193bb8b08276db30dd376696726893_1aeb193bb8b08276db30dd376696726893" prot="protected" virt="non-virtual"><scope>Cqrs::Bus::InProcessBus</scope><name>TelemetryHelper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
