### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.SagaRepository`1
  commentId: T:Cqrs.Domain.SagaRepository`1
  id: SagaRepository`1
  parent: Cqrs.Domain
  children:
  - Cqrs.Domain.SagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper)
  - Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  - Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  - Cqrs.Domain.SagaRepository`1.EventStore
  - Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  - Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  - Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  - Cqrs.Domain.SagaRepository`1.Publisher
  - Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  - Cqrs.Domain.SagaRepository`1.SagaFactory
  - Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  langs:
  - csharp
  - vb
  name: SagaRepository<TAuthenticationToken>
  nameWithType: SagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SagaRepository
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 22
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nProvides basic repository methods for operations with instances of <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class SagaRepository<TAuthenticationToken> : ISagaRepository<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of authentication token.
    content.vb: >-
      Public Class SagaRepository(Of TAuthenticationToken)
          Implements ISagaRepository(Of TAuthenticationToken)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Akka.Domain.AkkaSagaRepository`1
  implements:
  - Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SagaRepository(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken)
  name.vb: SagaRepository(Of TAuthenticationToken)
- uid: Cqrs.Domain.SagaRepository`1.EventStore
  commentId: P:Cqrs.Domain.SagaRepository`1.EventStore
  id: EventStore
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: EventStore
  nameWithType: SagaRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.EventStore
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EventStore
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 27
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or sets the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> used to store and retrieve events from.\n"
  example: []
  syntax:
    content: protected IEventStore<TAuthenticationToken> EventStore { get; }
    parameters: []
    return:
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property EventStore As IEventStore(Of TAuthenticationToken)
  overload: Cqrs.Domain.SagaRepository`1.EventStore*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).EventStore
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Domain.SagaRepository`1.Publisher
  commentId: P:Cqrs.Domain.SagaRepository`1.Publisher
  id: Publisher
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: Publisher
  nameWithType: SagaRepository<TAuthenticationToken>.Publisher
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Publisher
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Publisher
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 32
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or sets the Publisher used to publish events on once saved into the <xref href=\"Cqrs.Domain.SagaRepository%601.EventStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IEventPublisher<TAuthenticationToken> Publisher { get; }
    parameters: []
    return:
      type: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
    content.vb: Protected ReadOnly Property Publisher As IEventPublisher(Of TAuthenticationToken)
  overload: Cqrs.Domain.SagaRepository`1.Publisher*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Publisher
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Publisher
- uid: Cqrs.Domain.SagaRepository`1.SagaFactory
  commentId: P:Cqrs.Domain.SagaRepository`1.SagaFactory
  id: SagaFactory
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: SagaFactory
  nameWithType: SagaRepository<TAuthenticationToken>.SagaFactory
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaFactory
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SagaFactory
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 37
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or set the <xref href=\"Cqrs.Domain.Factories.IAggregateFactory\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected IAggregateFactory SagaFactory { get; }
    parameters: []
    return:
      type: Cqrs.Domain.Factories.IAggregateFactory
    content.vb: Protected ReadOnly Property SagaFactory As IAggregateFactory
  overload: Cqrs.Domain.SagaRepository`1.SagaFactory*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaFactory
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaFactory
- uid: Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  commentId: P:Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  id: CorrelationIdHelper
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: CorrelationIdHelper
  nameWithType: SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CorrelationIdHelper
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 42
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nGets or set the <xref href=\"cdmdotnet.Logging.ICorrelationIdHelper\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ICorrelationIdHelper CorrelationIdHelper { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Protected ReadOnly Property CorrelationIdHelper As ICorrelationIdHelper
  overload: Cqrs.Domain.SagaRepository`1.CorrelationIdHelper*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
- uid: Cqrs.Domain.SagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper)
  commentId: M:Cqrs.Domain.SagaRepository`1.#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper)
  id: '#ctor(Cqrs.Domain.Factories.IAggregateFactory,Cqrs.Events.IEventStore{`0},Cqrs.Events.IEventPublisher{`0},cdmdotnet.Logging.ICorrelationIdHelper)'
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: SagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper)
  nameWithType: SagaRepository<TAuthenticationToken>.SagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaRepository(Cqrs.Domain.Factories.IAggregateFactory, Cqrs.Events.IEventStore<TAuthenticationToken>, Cqrs.Events.IEventPublisher<TAuthenticationToken>, cdmdotnet.Logging.ICorrelationIdHelper)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 47
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Domain.SagaRepository%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public SagaRepository(IAggregateFactory sagaFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper)
    parameters:
    - id: sagaFactory
      type: Cqrs.Domain.Factories.IAggregateFactory
    - id: eventStore
      type: Cqrs.Events.IEventStore{{TAuthenticationToken}}
    - id: publisher
      type: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
    - id: correlationIdHelper
      type: cdmdotnet.Logging.ICorrelationIdHelper
    content.vb: Public Sub New(sagaFactory As IAggregateFactory, eventStore As IEventStore(Of TAuthenticationToken), publisher As IEventPublisher(Of TAuthenticationToken), correlationIdHelper As ICorrelationIdHelper)
  overload: Cqrs.Domain.SagaRepository`1.#ctor*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaRepository(IAggregateFactory, IEventStore(Of TAuthenticationToken), IEventPublisher(Of TAuthenticationToken), ICorrelationIdHelper)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaRepository(Cqrs.Domain.Factories.IAggregateFactory, Cqrs.Events.IEventStore(Of TAuthenticationToken), Cqrs.Events.IEventPublisher(Of TAuthenticationToken), cdmdotnet.Logging.ICorrelationIdHelper)
  name.vb: SagaRepository(IAggregateFactory, IEventStore(Of TAuthenticationToken), IEventPublisher(Of TAuthenticationToken), ICorrelationIdHelper)
- uid: Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.SagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  id: Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Save
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 61
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nSave and persist the provided <span class=\"paramref\">saga</span>, optionally providing the version number the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> is expected to be at.\n"
  example: []
  syntax:
    content: 'public virtual void Save<TSaga>(TSaga saga, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: saga
      type: '{TSaga}'
      description: The <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> to save and persist.
    - id: expectedVersion
      type: System.Nullable{System.Int32}
      description: The version number the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> is expected to be at.
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Sub Save(Of TSaga As ISaga(Of TAuthenticationToken))(saga As TSaga, expectedVersion As Integer? = Nothing)
  overload: Cqrs.Domain.SagaRepository`1.Save*
  implements:
  - Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}.Save``1({TSaga},System.Nullable{System.Int32})
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
- uid: Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  commentId: M:Cqrs.Domain.SagaRepository`1.PublishEvent(Cqrs.Events.ISagaEvent{`0})
  id: PublishEvent(Cqrs.Events.ISagaEvent{`0})
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: PublishEvent(ISagaEvent<TAuthenticationToken>)
  nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent(ISagaEvent<TAuthenticationToken>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.ISagaEvent<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: PublishEvent
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 104
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nPublish the saved <span class=\"paramref\">event</span>.\n"
  example: []
  syntax:
    content: protected virtual void PublishEvent(ISagaEvent<TAuthenticationToken> event)
    parameters:
    - id: event
      type: Cqrs.Events.ISagaEvent{{TAuthenticationToken}}
    content.vb: Protected Overridable Sub PublishEvent(event As ISagaEvent(Of TAuthenticationToken))
  overload: Cqrs.Domain.SagaRepository`1.PublishEvent*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).PublishEvent(ISagaEvent(Of TAuthenticationToken))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent(Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: PublishEvent(ISagaEvent(Of TAuthenticationToken))
- uid: Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.SagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  id: Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Get
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 118
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nRetrieves an <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> of type <span class=\"typeparamref\">TSaga</span>.\n"
  example: []
  syntax:
    content: 'public virtual TSaga Get<TSaga>(Guid sagaId, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: sagaId
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> to retrieve.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: '{TSaga}'
    content.vb: Public Overridable Function Get(Of TSaga As ISaga(Of TAuthenticationToken))(sagaId As Guid, events As IList(Of ISagaEvent(Of TAuthenticationToken)) = Nothing) As TSaga
  overload: Cqrs.Domain.SagaRepository`1.Get*
  implements:
  - Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
- uid: Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  commentId: M:Cqrs.Domain.SagaRepository`1.CreateSaga``1(System.Guid)
  id: CreateSaga``1(System.Guid)
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: CreateSaga<TSaga>(Guid)
  nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(Guid)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(System.Guid)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSaga
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 129
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nCalls <xref href=\"Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type%2cSystem.Nullable%7bSystem.Guid%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to get a, <span class=\"typeparamref\">TSaga</span>.\n"
  example: []
  syntax:
    content: 'protected virtual TSaga CreateSaga<TSaga>(Guid id)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: id
      type: System.Guid
      description: The id of the <span class="typeparamref">TSaga</span> to create.
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: '{TSaga}'
    content.vb: Protected Overridable Function CreateSaga(Of TSaga As ISaga(Of TAuthenticationToken))(id As Guid) As TSaga
  overload: Cqrs.Domain.SagaRepository`1.CreateSaga*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(Guid)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga(Of TSaga)(System.Guid)
  name.vb: CreateSaga(Of TSaga)(Guid)
- uid: Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.SagaRepository`1.LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  id: LoadSaga``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LoadSaga
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 146
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nCalls <xref href=\"Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type%2cSystem.Nullable%7bSystem.Guid%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to get a, <span class=\"typeparamref\">TSaga</span> and then calls <xref href=\"Cqrs.Domain.SagaRepository%601.LoadSagaHistory%60%601(%60%600%2cSystem.Collections.Generic.IList%7bCqrs.Events.ISagaEvent%7b%600%7d%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'protected virtual TSaga LoadSaga<TSaga>(Guid id, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: id
      type: System.Guid
      description: The id of the <span class="typeparamref">TSaga</span> to create.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: '{TSaga}'
    content.vb: Protected Overridable Function LoadSaga(Of TSaga As ISaga(Of TAuthenticationToken))(id As Guid, events As IList(Of ISagaEvent(Of TAuthenticationToken)) = Nothing) As TSaga
  overload: Cqrs.Domain.SagaRepository`1.LoadSaga*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: LoadSaga(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
- uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  commentId: M:Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  id: LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  parent: Cqrs.Domain.SagaRepository`1
  langs:
  - csharp
  - vb
  name: LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Domain/SagaRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LoadSagaHistory
    path: Framework/Cqrs/Domain/SagaRepository.cs
    startLine: 166
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain
  summary: "\nIf <span class=\"paramref\">events</span> is null, loads the events from <xref href=\"Cqrs.Domain.SagaRepository%601.EventStore\" data-throw-if-not-resolved=\"false\"></xref>, checks for duplicates and then\nrehydrates the <span class=\"paramref\">saga</span> with the events.\n"
  example: []
  syntax:
    content: 'public virtual void LoadSagaHistory<TSaga>(TSaga saga, IList<ISagaEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TSaga : ISaga<TAuthenticationToken>'
    parameters:
    - id: saga
      type: '{TSaga}'
      description: The <span class="typeparamref">TSaga</span> to rehydrate.
    - id: events
      type: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
      description: "\nA collection of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> to replay on the retrieved <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null, the <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> will be used to retrieve a list of <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> for you.\n"
    - id: throwExceptionOnNoEvents
      type: System.Boolean
      description: If true will throw an instance of <xref href="Cqrs.Domain.Exceptions.AggregateNotFoundException%602" data-throw-if-not-resolved="false"></xref> if no aggregate events or provided or found in the <xref href="Cqrs.Domain.SagaRepository%601.EventStore" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Sub LoadSagaHistory(Of TSaga As ISaga(Of TAuthenticationToken))(saga As TSaga, events As IList(Of ISagaEvent(Of TAuthenticationToken)) = Nothing, throwExceptionOnNoEvents As Boolean = True)
  overload: Cqrs.Domain.SagaRepository`1.LoadSagaHistory*
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)), System.Boolean)
  name.vb: LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
references:
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.ISagaRepository{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.ISagaRepository`1
  name: ISagaRepository<TAuthenticationToken>
  nameWithType: ISagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken)
  name.vb: ISagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.ISagaRepository`1
  commentId: T:Cqrs.Domain.ISagaRepository`1
  isExternal: false
  name: ISagaRepository<TAuthenticationToken>
  nameWithType: ISagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken)
  name.vb: ISagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1
    name: ISagaRepository
    nameWithType: ISagaRepository
    fullName: Cqrs.Domain.ISagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.EventStore*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.EventStore
  isExternal: false
  name: EventStore
  nameWithType: SagaRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.EventStore
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Events.IEventStore{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventStore{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventStore`1
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events
  commentId: N:Cqrs.Events
  isExternal: false
  name: Cqrs.Events
  nameWithType: Cqrs.Events
  fullName: Cqrs.Events
- uid: Cqrs.Domain.SagaRepository`1.EventStore
  commentId: P:Cqrs.Domain.SagaRepository`1.EventStore
  isExternal: false
  name: EventStore
  nameWithType: SagaRepository<TAuthenticationToken>.EventStore
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.EventStore
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).EventStore
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).EventStore
- uid: Cqrs.Domain.SagaRepository`1.Publisher*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.Publisher
  isExternal: false
  name: Publisher
  nameWithType: SagaRepository<TAuthenticationToken>.Publisher
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Publisher
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Publisher
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Publisher
- uid: Cqrs.Events.IEventPublisher{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.IEventPublisher{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.IEventPublisher`1
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEventPublisher`1
  commentId: T:Cqrs.Events.IEventPublisher`1
  isExternal: false
  name: IEventPublisher<TAuthenticationToken>
  nameWithType: IEventPublisher<TAuthenticationToken>
  fullName: Cqrs.Events.IEventPublisher<TAuthenticationToken>
  nameWithType.vb: IEventPublisher(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventPublisher(Of TAuthenticationToken)
  name.vb: IEventPublisher(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventPublisher`1
    name: IEventPublisher
    nameWithType: IEventPublisher
    fullName: Cqrs.Events.IEventPublisher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Factories.IAggregateFactory
  commentId: T:Cqrs.Domain.Factories.IAggregateFactory
  parent: Cqrs.Domain.Factories
  isExternal: false
  name: IAggregateFactory
  nameWithType: IAggregateFactory
  fullName: Cqrs.Domain.Factories.IAggregateFactory
- uid: Cqrs.Domain.SagaRepository`1.SagaFactory*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.SagaFactory
  isExternal: false
  name: SagaFactory
  nameWithType: SagaRepository<TAuthenticationToken>.SagaFactory
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaFactory
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaFactory
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaFactory
- uid: Cqrs.Domain.Factories
  commentId: N:Cqrs.Domain.Factories
  isExternal: false
  name: Cqrs.Domain.Factories
  nameWithType: Cqrs.Domain.Factories
  fullName: Cqrs.Domain.Factories
- uid: cdmdotnet.Logging.ICorrelationIdHelper
  commentId: T:cdmdotnet.Logging.ICorrelationIdHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ICorrelationIdHelper
  nameWithType: ICorrelationIdHelper
  fullName: cdmdotnet.Logging.ICorrelationIdHelper
- uid: Cqrs.Domain.SagaRepository`1.CorrelationIdHelper*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.CorrelationIdHelper
  isExternal: false
  name: CorrelationIdHelper
  nameWithType: SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CorrelationIdHelper
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CorrelationIdHelper
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Domain.SagaRepository`1
  commentId: T:Cqrs.Domain.SagaRepository`1
  isExternal: false
  name: SagaRepository<TAuthenticationToken>
  nameWithType: SagaRepository<TAuthenticationToken>
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>
  nameWithType.vb: SagaRepository(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken)
  name.vb: SagaRepository(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1
    name: SagaRepository
    nameWithType: SagaRepository
    fullName: Cqrs.Domain.SagaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.#ctor*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.#ctor
  isExternal: false
  name: SagaRepository
  nameWithType: SagaRepository<TAuthenticationToken>.SagaRepository
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.SagaRepository
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).SagaRepository
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).SagaRepository
- uid: Cqrs.Domain.SagaRepository`1.Save*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.Save
  isExternal: false
  name: Save
  nameWithType: SagaRepository<TAuthenticationToken>.Save
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Save
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Save
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Save
- uid: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}.Save``1({TSaga},System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.ISagaRepository{`0}.Save``1(``0,System.Nullable{System.Int32})
  parent: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TSaga>
    nameWithType: ISagaRepository<TAuthenticationToken>.Save<TSaga>
    fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TSaga)
    nameWithType: ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)
    fullName: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSaga}'
  commentId: '!:TSaga'
  definition: TSaga
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  commentId: M:Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
  isExternal: true
  name: Save<TSaga>(TSaga, Nullable<Int32>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, System.Nullable<System.Int32>)
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, Nullable(Of Int32))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)(TSaga, System.Nullable(Of System.Int32))
  name.vb: Save(Of TSaga)(TSaga, Nullable(Of Int32))
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save<TSaga>
    nameWithType: ISagaRepository<TAuthenticationToken>.Save<TSaga>
    fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Save<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1.Save``1(``0,System.Nullable{System.Int32})
    name: Save(Of TSaga)
    nameWithType: ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)
    fullName: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Save(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TSaga
  isExternal: false
  name: TSaga
  nameWithType: TSaga
  fullName: TSaga
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.PublishEvent*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.PublishEvent
  isExternal: false
  name: PublishEvent
  nameWithType: SagaRepository<TAuthenticationToken>.PublishEvent
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).PublishEvent
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).PublishEvent
- uid: Cqrs.Events.ISagaEvent{{TAuthenticationToken}}
  commentId: T:Cqrs.Events.ISagaEvent{`0}
  parent: Cqrs.Events
  definition: Cqrs.Events.ISagaEvent`1
  name: ISagaEvent<TAuthenticationToken>
  nameWithType: ISagaEvent<TAuthenticationToken>
  fullName: Cqrs.Events.ISagaEvent<TAuthenticationToken>
  nameWithType.vb: ISagaEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.ISagaEvent(Of TAuthenticationToken)
  name.vb: ISagaEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.ISagaEvent`1
  commentId: T:Cqrs.Events.ISagaEvent`1
  isExternal: false
  name: ISagaEvent<TAuthenticationToken>
  nameWithType: ISagaEvent<TAuthenticationToken>
  fullName: Cqrs.Events.ISagaEvent<TAuthenticationToken>
  nameWithType.vb: ISagaEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.ISagaEvent(Of TAuthenticationToken)
  name.vb: ISagaEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.Get*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.Get
  isExternal: false
  name: Get
  nameWithType: SagaRepository<TAuthenticationToken>.Get
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.Get
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).Get
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).Get
- uid: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.ISagaRepository{`0}.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  parent: Cqrs.Domain.ISagaRepository{{TAuthenticationToken}}
  definition: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get<TSaga>
    nameWithType: ISagaRepository<TAuthenticationToken>.Get<TSaga>
    fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get(Of TSaga)
    nameWithType: ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)
    fullName: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ISagaEvent<TAuthenticationToken>>
  nameWithType: IList<ISagaEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>
  nameWithType.vb: IList(Of ISagaEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken))
  name.vb: IList(Of ISagaEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  commentId: M:Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
  isExternal: true
  name: Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  nameWithType: ISagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get<TSaga>(System.Guid, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>)
  nameWithType.vb: ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)(System.Guid, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)))
  name.vb: Get(Of TSaga)(Guid, IList(Of ISagaEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get<TSaga>
    nameWithType: ISagaRepository<TAuthenticationToken>.Get<TSaga>
    fullName: Cqrs.Domain.ISagaRepository<TAuthenticationToken>.Get<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.ISagaRepository`1.Get``1(System.Guid,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}})
    name: Get(Of TSaga)
    nameWithType: ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)
    fullName: Cqrs.Domain.ISagaRepository(Of TAuthenticationToken).Get(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  commentId: M:Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
  parent: Cqrs.Domain.Factories.IAggregateFactory
  isExternal: true
  name: Create(Type, Nullable<Guid>, Boolean)
  nameWithType: IAggregateFactory.Create(Type, Nullable<Guid>, Boolean)
  fullName: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type, System.Nullable<System.Guid>, System.Boolean)
  nameWithType.vb: IAggregateFactory.Create(Type, Nullable(Of Guid), Boolean)
  fullName.vb: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Create(Type, Nullable(Of Guid), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
    name: Create
    nameWithType: IAggregateFactory.Create
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.Factories.IAggregateFactory.Create(System.Type,System.Nullable{System.Guid},System.Boolean)
    name: Create
    nameWithType: IAggregateFactory.Create
    fullName: Cqrs.Domain.Factories.IAggregateFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.CreateSaga*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.CreateSaga
  isExternal: false
  name: CreateSaga
  nameWithType: SagaRepository<TAuthenticationToken>.CreateSaga
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).CreateSaga
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).CreateSaga
- uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  commentId: M:Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
  isExternal: true
  name: LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean)
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, System.Collections.Generic.IList<Cqrs.Events.ISagaEvent<TAuthenticationToken>>, System.Boolean)
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)(TSaga, System.Collections.Generic.IList(Of Cqrs.Events.ISagaEvent(Of TAuthenticationToken)), System.Boolean)
  name.vb: LoadSagaHistory(Of TSaga)(TSaga, IList(Of ISagaEvent(Of TAuthenticationToken)), Boolean)
  spec.csharp:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory<TSaga>
    nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
    fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory``1(``0,System.Collections.Generic.IList{Cqrs.Events.ISagaEvent{`0}},System.Boolean)
    name: LoadSagaHistory(Of TSaga)
    nameWithType: SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
    fullName: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory(Of TSaga)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.ISagaEvent`1
    name: ISagaEvent
    nameWithType: ISagaEvent
    fullName: Cqrs.Events.ISagaEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.LoadSaga*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.LoadSaga
  isExternal: false
  name: LoadSaga
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSaga
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSaga
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSaga
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSaga
- uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  commentId: T:Cqrs.Domain.Exceptions.AggregateNotFoundException`2
  isExternal: false
  name: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType: AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException<TAggregateRoot, TAuthenticationToken>
  nameWithType.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  name.vb: AggregateNotFoundException(Of TAggregateRoot, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.AggregateNotFoundException`2
    name: AggregateNotFoundException
    nameWithType: AggregateNotFoundException
    fullName: Cqrs.Domain.Exceptions.AggregateNotFoundException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.SagaRepository`1.LoadSagaHistory*
  commentId: Overload:Cqrs.Domain.SagaRepository`1.LoadSagaHistory
  isExternal: false
  name: LoadSagaHistory
  nameWithType: SagaRepository<TAuthenticationToken>.LoadSagaHistory
  fullName: Cqrs.Domain.SagaRepository<TAuthenticationToken>.LoadSagaHistory
  nameWithType.vb: SagaRepository(Of TAuthenticationToken).LoadSagaHistory
  fullName.vb: Cqrs.Domain.SagaRepository(Of TAuthenticationToken).LoadSagaHistory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
