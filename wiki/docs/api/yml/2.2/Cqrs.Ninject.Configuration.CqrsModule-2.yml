### YamlMime:ManagedReference
items:
- uid: Cqrs.Ninject.Configuration.CqrsModule`2
  commentId: T:Cqrs.Ninject.Configuration.CqrsModule`2
  id: CqrsModule`2
  parent: Cqrs.Ninject.Configuration
  children:
  - Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(Cqrs.Configuration.IConfigurationManager)
  - Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - Cqrs.Ninject.Configuration.CqrsModule`2.Load
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories
  - Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices
  - Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging
  - Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb
  langs:
  - csharp
  - vb
  name: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  type: Class
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CqrsModule
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 31
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nThe main <see cref=\"!:INinjectModule\"></see> for use with the CQRS package that wires up many of the prerequisites for running CQRS.NET.\n"
  example: []
  syntax:
    content: 'public class CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> : ResolvableModule where TAuthenticationTokenHelper : class, IAuthenticationTokenHelper<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
      description: The <see cref="!:Type"></see> of the authentication token.
    - id: TAuthenticationTokenHelper
      description: The <see cref="!:Type"></see> of the authentication token helper.
    content.vb: >-
      Public Class CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper As {Class, IAuthenticationTokenHelper(Of TAuthenticationToken)})
          Inherits ResolvableModule
  inheritance:
  - System.Object
  - Cqrs.Ninject.Configuration.ResolvableModule
  inheritedMembers:
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  - Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  - Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
  name.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb
  commentId: P:Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb
  id: SetupForWeb
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: SetupForWeb
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForWeb
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForWeb
  type: Property
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SetupForWeb
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 37
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nIndicates that web based wire-up is required rather than console, WPF or winforms based wire-up.s\n"
  example: []
  syntax:
    content: protected bool SetupForWeb { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property SetupForWeb As Boolean
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForWeb
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForWeb
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging
  commentId: P:Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging
  id: SetupForSqlLogging
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: SetupForSqlLogging
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForSqlLogging
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForSqlLogging
  type: Property
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SetupForSqlLogging
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 42
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nIndicates that logging should be configured for SQL Server rather than console.\n"
  example: []
  syntax:
    content: protected bool SetupForSqlLogging { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property SetupForSqlLogging As Boolean
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForSqlLogging
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForSqlLogging
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager
  commentId: P:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager
  id: RegisterDefaultConfigurationManager
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterDefaultConfigurationManager
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterDefaultConfigurationManager
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterDefaultConfigurationManager
  type: Property
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterDefaultConfigurationManager
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 47
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nIndicates that the <xref href=\"Cqrs.Configuration.ConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref> should be registered automatically.\n"
  example: []
  syntax:
    content: protected bool RegisterDefaultConfigurationManager { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property RegisterDefaultConfigurationManager As Boolean
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterDefaultConfigurationManager
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterDefaultConfigurationManager
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(Cqrs.Configuration.IConfigurationManager)
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(Cqrs.Configuration.IConfigurationManager)
  id: '#ctor(Cqrs.Configuration.IConfigurationManager)'
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: CqrsModule(IConfigurationManager)
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule(IConfigurationManager)
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule(Cqrs.Configuration.IConfigurationManager)
  type: Constructor
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 57
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nInstantiate a new instance of the <xref href=\"Cqrs.Ninject.Configuration.CqrsModule%602\" data-throw-if-not-resolved=\"false\"></xref> that uses the provided <span class=\"paramref\">configurationManager</span>\nto read the following configuration settings:\n&quot;Cqrs.SetupForWeb&quot;: If set to true the system will be configured for hosting in IIS or some other web-server that provides access to System.Web.HttpContext.Current.\n&quot;Cqrs.SetupForSqlLogging&quot;: If set to true the <see cref=\"!:SqlLogger\"></see> will be bootstrapped by default, otherwise the <see cref=\"!:ConsoleLogger\"></see> will be bootstrapped by default.\n&quot;Cqrs.RegisterDefaultConfigurationManager&quot;: If set true the <xref href=\"Cqrs.Configuration.ConfigurationManager\" data-throw-if-not-resolved=\"false\"></xref> will be registered. If you want to use the Azure one leave this as false (the default) and register it yourself.\n"
  example: []
  syntax:
    content: public CqrsModule(IConfigurationManager configurationManager = null)
    parameters:
    - id: configurationManager
      type: Cqrs.Configuration.IConfigurationManager
      description: The <xref href="Cqrs.Configuration.IConfigurationManager" data-throw-if-not-resolved="false"></xref> to use, if one isn&apos;t provided then <xref href="Cqrs.Configuration.ConfigurationManager" data-throw-if-not-resolved="false"></xref> is instantiate, used and then disposed.
    content.vb: Public Sub New(configurationManager As IConfigurationManager = Nothing)
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.#ctor*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule(IConfigurationManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule(Cqrs.Configuration.IConfigurationManager)
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: CqrsModule(Boolean, Boolean, Boolean)
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule(Boolean, Boolean, Boolean)
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 77
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nInstantiate a new instance of the <xref href=\"Cqrs.Ninject.Configuration.CqrsModule%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CqrsModule(bool setupForWeb, bool setupForSqlLogging, bool registerDefaultConfigurationManager = false)
    parameters:
    - id: setupForWeb
      type: System.Boolean
      description: Set this to true if you will host this in IIS or some other web-server that provides access to System.Web.HttpContext.Current.
    - id: setupForSqlLogging
      type: System.Boolean
      description: Set this to true to use <see cref="!:SqlLogger"></see> otherwise the <see cref="!:ConsoleLogger"></see> will be bootstrapped by default.
    - id: registerDefaultConfigurationManager
      type: System.Boolean
      description: Set this to true to use <xref href="Cqrs.Configuration.ConfigurationManager" data-throw-if-not-resolved="false"></xref>. If you want to use the Azure one leave this as false (the default) and register it yourself.
    content.vb: Public Sub New(setupForWeb As Boolean, setupForSqlLogging As Boolean, registerDefaultConfigurationManager As Boolean = False)
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.#ctor*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule(Boolean, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule(System.Boolean, System.Boolean, System.Boolean)
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.Load
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.Load
  id: Load
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.Load()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.Load()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 89
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nLoads the module into the kernel.\n"
  example: []
  syntax:
    content: public override void Load()
    content.vb: Public Overrides Sub Load
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.Load*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).Load()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).Load()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories
  id: RegisterFactories
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterFactories()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterFactories()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterFactories()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterFactories
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 106
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all factories\n"
  example: []
  syntax:
    content: public virtual void RegisterFactories()
    content.vb: Public Overridable Sub RegisterFactories
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterFactories()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterFactories()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents
  id: RegisterLoggerComponents
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterLoggerComponents()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterLoggerComponents()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterLoggerComponents()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterLoggerComponents
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 116
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all components for the <see cref=\"!:ILogger\"></see>\n"
  example: []
  syntax:
    content: public virtual void RegisterLoggerComponents()
    content.vb: Public Overridable Sub RegisterLoggerComponents
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterLoggerComponents()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterLoggerComponents()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents
  id: RegisterAutomapperComponents
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterAutomapperComponents()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterAutomapperComponents()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterAutomapperComponents()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterAutomapperComponents
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 164
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all <see cref=\"!:IAutomapHelper\"></see>\n"
  example: []
  syntax:
    content: public virtual void RegisterAutomapperComponents()
    content.vb: Public Overridable Sub RegisterAutomapperComponents
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterAutomapperComponents()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterAutomapperComponents()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories
  id: RegisterRepositories
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterRepositories()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterRepositories()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterRepositories()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterRepositories
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 174
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all repositories\n"
  example: []
  syntax:
    content: public virtual void RegisterRepositories()
    content.vb: Public Overridable Sub RegisterRepositories
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterRepositories()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterRepositories()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders
  id: RegisterQueryBuilders
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterQueryBuilders()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterQueryBuilders()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterQueryBuilders()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterQueryBuilders
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 181
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all query builders\n"
  example: []
  syntax:
    content: public virtual void RegisterQueryBuilders()
    content.vb: Public Overridable Sub RegisterQueryBuilders
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterQueryBuilders()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterQueryBuilders()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices
  id: RegisterServices
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterServices()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterServices()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterServices()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterServices
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 188
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all services\n"
  example: []
  syntax:
    content: public virtual void RegisterServices()
    content.vb: Public Overridable Sub RegisterServices
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterServices()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterServices()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching
  id: RegisterCaching
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterCaching()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCaching()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCaching()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterCaching
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 195
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all caching stuffs\n"
  example: []
  syntax:
    content: public virtual void RegisterCaching()
    content.vb: Public Overridable Sub RegisterCaching
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCaching()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCaching()
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements
  commentId: M:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements
  id: RegisterCqrsRequirements
  parent: Cqrs.Ninject.Configuration.CqrsModule`2
  langs:
  - csharp
  - vb
  name: RegisterCqrsRequirements()
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCqrsRequirements()
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCqrsRequirements()
  type: Method
  source:
    remote:
      path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RegisterCqrsRequirements
    path: Framework/Ninject/Cqrs.Ninject/Configuration/CqrsModule.cs
    startLine: 224
  assemblies:
  - Cqrs.Ninject
  namespace: Cqrs.Ninject.Configuration
  summary: "\nRegister the all Cqrs requirements\n"
  example: []
  syntax:
    content: public virtual void RegisterCqrsRequirements()
    content.vb: Public Overridable Sub RegisterCqrsRequirements
  overload: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements*
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCqrsRequirements()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCqrsRequirements()
references:
- uid: Cqrs.Ninject.Configuration
  commentId: N:Cqrs.Ninject.Configuration
  isExternal: false
  name: Cqrs.Ninject.Configuration
  nameWithType: Cqrs.Ninject.Configuration
  fullName: Cqrs.Ninject.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Ninject.Configuration.ResolvableModule
  commentId: T:Cqrs.Ninject.Configuration.ResolvableModule
  parent: Cqrs.Ninject.Configuration
  isExternal: false
  name: ResolvableModule
  nameWithType: ResolvableModule
  fullName: Cqrs.Ninject.Configuration.ResolvableModule
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: false
  name: Resolve<T>()
  nameWithType: ResolvableModule.Resolve<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve<T>()
  nameWithType.vb: ResolvableModule.Resolve(Of T)()
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Of T)()
  name.vb: Resolve(Of T)()
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
    name: Resolve<T>
    nameWithType: ResolvableModule.Resolve<T>
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve``1
    name: Resolve(Of T)
    nameWithType: ResolvableModule.Resolve(Of T)
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: true
  name: Resolve(Type)
  nameWithType: ResolvableModule.Resolve(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
    name: Resolve
    nameWithType: ResolvableModule.Resolve
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.Resolve(Type)
    name: Resolve
    nameWithType: ResolvableModule.Resolve
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: false
  name: IsRegistered<T>()
  nameWithType: ResolvableModule.IsRegistered<T>()
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered<T>()
  nameWithType.vb: ResolvableModule.IsRegistered(Of T)()
  fullName.vb: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Of T)()
  name.vb: IsRegistered(Of T)()
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
    name: IsRegistered<T>
    nameWithType: ResolvableModule.IsRegistered<T>
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered``1
    name: IsRegistered(Of T)
    nameWithType: ResolvableModule.IsRegistered(Of T)
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  commentId: M:Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  parent: Cqrs.Ninject.Configuration.ResolvableModule
  isExternal: true
  name: IsRegistered(Type)
  nameWithType: ResolvableModule.IsRegistered(Type)
  fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
    name: IsRegistered
    nameWithType: ResolvableModule.IsRegistered
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered(Type)
    name: IsRegistered
    nameWithType: ResolvableModule.IsRegistered
    fullName: Cqrs.Ninject.Configuration.ResolvableModule.IsRegistered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.SetupForWeb
  isExternal: false
  name: SetupForWeb
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForWeb
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForWeb
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForWeb
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForWeb
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.SetupForSqlLogging
  isExternal: false
  name: SetupForSqlLogging
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForSqlLogging
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.SetupForSqlLogging
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForSqlLogging
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).SetupForSqlLogging
- uid: Cqrs.Configuration.ConfigurationManager
  commentId: T:Cqrs.Configuration.ConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: Cqrs.Configuration.ConfigurationManager
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterDefaultConfigurationManager
  isExternal: false
  name: RegisterDefaultConfigurationManager
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterDefaultConfigurationManager
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterDefaultConfigurationManager
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterDefaultConfigurationManager
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterDefaultConfigurationManager
- uid: Cqrs.Configuration
  commentId: N:Cqrs.Configuration
  isExternal: false
  name: Cqrs.Configuration
  nameWithType: Cqrs.Configuration
  fullName: Cqrs.Configuration
- uid: Cqrs.Ninject.Configuration.CqrsModule`2
  commentId: T:Cqrs.Ninject.Configuration.CqrsModule`2
  isExternal: false
  name: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
  name.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper)
  spec.csharp:
  - uid: Cqrs.Ninject.Configuration.CqrsModule`2
    name: CqrsModule
    nameWithType: CqrsModule
    fullName: Cqrs.Ninject.Configuration.CqrsModule
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationTokenHelper
    nameWithType: TAuthenticationTokenHelper
    fullName: TAuthenticationTokenHelper
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Ninject.Configuration.CqrsModule`2
    name: CqrsModule
    nameWithType: CqrsModule
    fullName: Cqrs.Ninject.Configuration.CqrsModule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationTokenHelper
    nameWithType: TAuthenticationTokenHelper
    fullName: TAuthenticationTokenHelper
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Configuration.IConfigurationManager
  commentId: T:Cqrs.Configuration.IConfigurationManager
  parent: Cqrs.Configuration
  isExternal: false
  name: IConfigurationManager
  nameWithType: IConfigurationManager
  fullName: Cqrs.Configuration.IConfigurationManager
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.#ctor*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.#ctor
  isExternal: false
  name: CqrsModule
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.CqrsModule
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).CqrsModule
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.Load*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.Load
  isExternal: false
  name: Load
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.Load
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.Load
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).Load
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).Load
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterFactories
  isExternal: false
  name: RegisterFactories
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterFactories
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterFactories
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterFactories
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterFactories
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterLoggerComponents
  isExternal: false
  name: RegisterLoggerComponents
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterLoggerComponents
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterLoggerComponents
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterLoggerComponents
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterLoggerComponents
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterAutomapperComponents
  isExternal: false
  name: RegisterAutomapperComponents
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterAutomapperComponents
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterAutomapperComponents
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterAutomapperComponents
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterAutomapperComponents
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterRepositories
  isExternal: false
  name: RegisterRepositories
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterRepositories
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterRepositories
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterRepositories
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterRepositories
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterQueryBuilders
  isExternal: false
  name: RegisterQueryBuilders
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterQueryBuilders
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterQueryBuilders
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterQueryBuilders
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterQueryBuilders
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterServices
  isExternal: false
  name: RegisterServices
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterServices
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterServices
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterServices
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterServices
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCaching
  isExternal: false
  name: RegisterCaching
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCaching
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCaching
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCaching
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCaching
- uid: Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements*
  commentId: Overload:Cqrs.Ninject.Configuration.CqrsModule`2.RegisterCqrsRequirements
  isExternal: false
  name: RegisterCqrsRequirements
  nameWithType: CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCqrsRequirements
  fullName: Cqrs.Ninject.Configuration.CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper>.RegisterCqrsRequirements
  nameWithType.vb: CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCqrsRequirements
  fullName.vb: Cqrs.Ninject.Configuration.CqrsModule(Of TAuthenticationToken, TAuthenticationTokenHelper).RegisterCqrsRequirements
