### YamlMime:ManagedReference
items:
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  commentId: T:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  id: DuplicateSagaEventException`2
  parent: Cqrs.Domain.Exceptions
  children:
  - Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor(System.Guid,System.Int32)
  - Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id
  - Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType
  langs:
  - csharp
  - vb
  name: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DuplicateSagaEventException
    path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
    startLine: 19
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Exceptions
  summary: "\nThe <xref href=\"Cqrs.Events.IEventStore%601\" data-throw-if-not-resolved=\"false\"></xref> gave more than one event.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class DuplicateSagaEventException<TSaga, TAuthenticationToken> : Exception, ISerializable, _Exception where TSaga : ISaga<TAuthenticationToken>
    typeParameters:
    - id: TSaga
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> that wasn&apos;t found.
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: >-
      <Serializable>

      Public Class DuplicateSagaEventException(Of TSaga As ISaga(Of TAuthenticationToken), TAuthenticationToken)
          Inherits Exception
          Implements ISerializable, _Exception
  inheritance:
  - System.Object
  - System.Exception
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.InteropServices._Exception
  inheritedMembers:
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.Message
  - System.Exception.Data
  - System.Exception.InnerException
  - System.Exception.TargetSite
  - System.Exception.StackTrace
  - System.Exception.HelpLink
  - System.Exception.Source
  - System.Exception.HResult
  - System.Exception.SerializeObjectState
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  name.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor(System.Guid,System.Int32)
  commentId: M:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor(System.Guid,System.Int32)
  id: '#ctor(System.Guid,System.Int32)'
  parent: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  langs:
  - csharp
  - vb
  name: DuplicateSagaEventException(Guid, Int32)
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.DuplicateSagaEventException(Guid, Int32)
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.DuplicateSagaEventException(System.Guid, System.Int32)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
    startLine: 29
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Exceptions
  summary: "\nInstantiate a new instance of <xref href=\"Cqrs.Domain.Exceptions.DuplicateSagaEventException%602\" data-throw-if-not-resolved=\"false\"></xref> with the provided identifier of the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> that had duplicate <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>.\nand the <span class=\"paramref\">version</span> that had more than one <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref> provided.\n"
  example: []
  syntax:
    content: public DuplicateSagaEventException(Guid id, int version)
    parameters:
    - id: id
      type: System.Guid
      description: The identifier of the <xref href="Cqrs.Domain.ISaga%601" data-throw-if-not-resolved="false"></xref> that had <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>.
    - id: version
      type: System.Int32
      description: The version number of the duplicate <xref href="Cqrs.Events.IEvent%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(id As Guid, version As Integer)
  overload: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor*
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).DuplicateSagaEventException(Guid, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).DuplicateSagaEventException(System.Guid, System.Int32)
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id
  commentId: P:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id
  id: Id
  parent: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.Id
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.Id
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Id
    path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
    startLine: 39
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Exceptions
  summary: "\nThe identifier of the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> that had duplicate <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>..\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid Id { get; set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public Property Id As Guid
  overload: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).Id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).Id
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType
  commentId: P:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType
  id: SagaType
  parent: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  langs:
  - csharp
  - vb
  name: SagaType
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.SagaType
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.SagaType
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: SagaType
    path: Framework/Cqrs/Domain/Exceptions/DuplicateSagaEventException.cs
    startLine: 45
  assemblies:
  - Cqrs
  namespace: Cqrs.Domain.Exceptions
  summary: "\nThe <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"Cqrs.Domain.ISaga%601\" data-throw-if-not-resolved=\"false\"></xref> that had duplicate <xref href=\"Cqrs.Events.IEvent%601\" data-throw-if-not-resolved=\"false\"></xref>..\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Type SagaType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: >-
      <DataMember>

      Public Property SagaType As Type
  overload: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).SagaType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).SagaType
references:
- uid: Cqrs.Events.IEventStore`1
  commentId: T:Cqrs.Events.IEventStore`1
  isExternal: false
  name: IEventStore<TAuthenticationToken>
  nameWithType: IEventStore<TAuthenticationToken>
  fullName: Cqrs.Events.IEventStore<TAuthenticationToken>
  nameWithType.vb: IEventStore(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEventStore(Of TAuthenticationToken)
  name.vb: IEventStore(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEventStore`1
    name: IEventStore
    nameWithType: IEventStore
    fullName: Cqrs.Events.IEventStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Domain.ISaga`1
  commentId: T:Cqrs.Domain.ISaga`1
  isExternal: false
  name: ISaga<TAuthenticationToken>
  nameWithType: ISaga<TAuthenticationToken>
  fullName: Cqrs.Domain.ISaga<TAuthenticationToken>
  nameWithType.vb: ISaga(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.ISaga(Of TAuthenticationToken)
  name.vb: ISaga(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.ISaga`1
    name: ISaga
    nameWithType: ISaga
    fullName: Cqrs.Domain.ISaga
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions
  commentId: N:Cqrs.Domain.Exceptions
  isExternal: false
  name: Cqrs.Domain.Exceptions
  nameWithType: Cqrs.Domain.Exceptions
  fullName: Cqrs.Domain.Exceptions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.InteropServices._Exception
  commentId: T:System.Runtime.InteropServices._Exception
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Exception
  nameWithType: _Exception
  fullName: System.Runtime.InteropServices._Exception
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  parent: System.Exception
  isExternal: true
  name: GetBaseException()
  nameWithType: Exception.GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  parent: System.Exception
  isExternal: true
  name: ToString()
  nameWithType: Exception.ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Exception
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetType
  commentId: M:System.Exception.GetType
  parent: System.Exception
  isExternal: true
  name: GetType()
  nameWithType: Exception.GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  parent: System.Exception
  isExternal: true
  name: Message
  nameWithType: Exception.Message
  fullName: System.Exception.Message
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  parent: System.Exception
  isExternal: true
  name: Data
  nameWithType: Exception.Data
  fullName: System.Exception.Data
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  parent: System.Exception
  isExternal: true
  name: InnerException
  nameWithType: Exception.InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.TargetSite
  commentId: P:System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  name: TargetSite
  nameWithType: Exception.TargetSite
  fullName: System.Exception.TargetSite
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  parent: System.Exception
  isExternal: true
  name: StackTrace
  nameWithType: Exception.StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  parent: System.Exception
  isExternal: true
  name: HelpLink
  nameWithType: Exception.HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  parent: System.Exception
  isExternal: true
  name: Source
  nameWithType: Exception.Source
  fullName: System.Exception.Source
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  parent: System.Exception
  isExternal: true
  name: HResult
  nameWithType: Exception.HResult
  fullName: System.Exception.HResult
- uid: System.Exception.SerializeObjectState
  commentId: E:System.Exception.SerializeObjectState
  parent: System.Exception
  isExternal: true
  name: SerializeObjectState
  nameWithType: Exception.SerializeObjectState
  fullName: System.Exception.SerializeObjectState
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  commentId: T:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
  isExternal: false
  name: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  name.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
    name: DuplicateSagaEventException
    nameWithType: DuplicateSagaEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException
  - name: <
    nameWithType: <
    fullName: <
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2
    name: DuplicateSagaEventException
    nameWithType: DuplicateSagaEventException
    fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSaga
    nameWithType: TSaga
    fullName: TSaga
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Events.IEvent`1
  commentId: T:Cqrs.Events.IEvent`1
  isExternal: false
  name: IEvent<TAuthenticationToken>
  nameWithType: IEvent<TAuthenticationToken>
  fullName: Cqrs.Events.IEvent<TAuthenticationToken>
  nameWithType.vb: IEvent(Of TAuthenticationToken)
  fullName.vb: Cqrs.Events.IEvent(Of TAuthenticationToken)
  name.vb: IEvent(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor*
  commentId: Overload:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.#ctor
  isExternal: false
  name: DuplicateSagaEventException
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.DuplicateSagaEventException
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.DuplicateSagaEventException
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).DuplicateSagaEventException
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).DuplicateSagaEventException
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id*
  commentId: Overload:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.Id
  isExternal: false
  name: Id
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.Id
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.Id
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).Id
- uid: Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType*
  commentId: Overload:Cqrs.Domain.Exceptions.DuplicateSagaEventException`2.SagaType
  isExternal: false
  name: SagaType
  nameWithType: DuplicateSagaEventException<TSaga, TAuthenticationToken>.SagaType
  fullName: Cqrs.Domain.Exceptions.DuplicateSagaEventException<TSaga, TAuthenticationToken>.SagaType
  nameWithType.vb: DuplicateSagaEventException(Of TSaga, TAuthenticationToken).SagaType
  fullName.vb: Cqrs.Domain.Exceptions.DuplicateSagaEventException(Of TSaga, TAuthenticationToken).SagaType
