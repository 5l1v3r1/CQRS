### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  commentId: T:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  id: AzureRepository`3
  parent: Cqrs.Azure.DocumentDb.Repositories
  children:
  - Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor(Func{Cqrs.DataStores.IDataStore{`2}},`1)
  - Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable(Expression{Func{`2,System.Boolean}})
  - Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load(Guid,System.Boolean)
  langs:
  - csharp
  - vb
  name: AzureRepository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureRepository
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
    startLine: 19
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Repositories
  syntax:
    content: 'public abstract class AzureRepository<TQueryStrategy, TQueryBuilder, TData> : Repository<TQueryStrategy, TQueryBuilder, TData>, IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : AzureDocumentDbEntity'
    typeParameters:
    - id: TQueryStrategy
    - id: TQueryBuilder
    - id: TData
    content.vb: >-
      Public MustInherit Class AzureRepository(Of TQueryStrategy As IQueryStrategy, TQueryBuilder As QueryBuilder(Of TQueryStrategy, TData), TData As AzureDocumentDbEntity)

          Inherits Repository(Of TQueryStrategy, TQueryBuilder, TData)

          Implements IRepository(Of TQueryStrategy, TData)
  inheritance:
  - System.Object
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  inheritedMembers:
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateDataStoreFunction
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.QueryBuilder
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.TelemetryHelper
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Update({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Delete({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.DeleteAll
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Destroy({TData})
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Load(System.Guid,System.Boolean)
  - Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData)
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor(Func{Cqrs.DataStores.IDataStore{`2}},`1)
  commentId: M:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor(Func{Cqrs.DataStores.IDataStore{`2}},`1)
  id: '#ctor(Func{Cqrs.DataStores.IDataStore{`2}},`1)'
  parent: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  langs:
  - csharp
  - vb
  name: AzureRepository(Func<IDataStore<TData>>, TQueryBuilder)
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.AzureRepository(Func<IDataStore<TData>>, TQueryBuilder)
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.AzureRepository(Func<Cqrs.DataStores.IDataStore<TData>>, TQueryBuilder)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
    startLine: 24
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Repositories
  syntax:
    content: protected AzureRepository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder)
    parameters:
    - id: createDataStoreFunction
      type: Func{Cqrs.DataStores.IDataStore{{TData}}}
    - id: queryBuilder
      type: '{TQueryBuilder}'
    content.vb: Protected Sub New(createDataStoreFunction As Func(Of IDataStore(Of TData)), queryBuilder As TQueryBuilder)
  overload: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor*
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).AzureRepository(Func(Of IDataStore(Of TData)), TQueryBuilder)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).AzureRepository(Func(Of Cqrs.DataStores.IDataStore(Of TData)), TQueryBuilder)
  name.vb: AzureRepository(Func(Of IDataStore(Of TData)), TQueryBuilder)
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load(Guid,System.Boolean)
  commentId: M:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load(Guid,System.Boolean)
  id: Load(Guid,System.Boolean)
  parent: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  langs:
  - csharp
  - vb
  name: Load(Guid, Boolean)
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
    startLine: 29
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Repositories
  syntax:
    content: public override TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true)
    parameters:
    - id: rsn
      type: Guid
    - id: throwExceptionOnMissingEntity
      type: System.Boolean
    return:
      type: '{TData}'
    content.vb: Public Overrides Function Load(rsn As Guid, throwExceptionOnMissingEntity As Boolean = True) As TData
  overload: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load*
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, System.Boolean)
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable(Expression{Func{`2,System.Boolean}})
  commentId: M:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable(Expression{Func{`2,System.Boolean}})
  id: CreateQueryable(Expression{Func{`2,System.Boolean}})
  parent: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  langs:
  - csharp
  - vb
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateQueryable
    path: Framework/Azure/Cqrs.Azure.DocumentDb/Repositories/AzureRepository.cs
    startLine: 39
  assemblies:
  - Cqrs.Azure.DocumentDb
  namespace: Cqrs.Azure.DocumentDb.Repositories
  syntax:
    content: protected override IQueryable<TData> CreateQueryable(Expression<Func<TData, bool>> predicate)
    parameters:
    - id: predicate
      type: Expression{Func{{TData},System.Boolean}}
    return:
      type: IQueryable{{TData}}
    content.vb: Protected Overrides Function CreateQueryable(predicate As Expression(Of Func(Of TData, Boolean))) As IQueryable(Of TData)
  overload: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable*
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
references:
- uid: Cqrs.Azure.DocumentDb.Repositories
  commentId: N:Cqrs.Azure.DocumentDb.Repositories
  isExternal: false
  name: Cqrs.Azure.DocumentDb.Repositories
  nameWithType: Cqrs.Azure.DocumentDb.Repositories
  fullName: Cqrs.Azure.DocumentDb.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  commentId: T:Cqrs.Repositories.Repository{`0,`1,`2}
  parent: Cqrs.Repositories
  definition: Cqrs.Repositories.Repository`3
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.IRepository{`0,`2}
  parent: Cqrs.Repositories
  definition: Cqrs.Repositories.IRepository`2
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.CreateDataStoreFunction
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.QueryBuilder
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.QueryBuilder
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.TelemetryHelper
  commentId: P:Cqrs.Repositories.Repository{`0,`1,`2}.TelemetryHelper
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.TelemetryHelper
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Create(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Create(`2)
  name: Create(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Create(System.Collections.Generic.IEnumerable{`2})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  name: Create(IEnumerable<TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Update({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Update(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Update(`2)
  name: Update(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Delete({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Delete(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Delete(`2)
  name: Delete(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.DeleteAll
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.DeleteAll
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.DeleteAll
  name: DeleteAll()
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Destroy({TData})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Destroy(`2)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Destroy(`2)
  name: Destroy(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.Load(System.Guid,System.Boolean)
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  name: Load(Guid, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}})
  commentId: M:Cqrs.Repositories.Repository{`0,`1,`2}.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  parent: Cqrs.Repositories.Repository{{TQueryStrategy},{TQueryBuilder},{TData}}
  definition: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Repository`3
  commentId: T:Cqrs.Repositories.Repository`3
  isExternal: false
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories
  commentId: N:Cqrs.Repositories
  isExternal: false
  name: Cqrs.Repositories
  nameWithType: Cqrs.Repositories
  fullName: Cqrs.Repositories
- uid: Cqrs.Repositories.IRepository`2
  commentId: T:Cqrs.Repositories.IRepository`2
  isExternal: false
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  isExternal: false
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository`3.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository`3.QueryBuilder
  isExternal: false
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories.Repository`3.TelemetryHelper
  commentId: P:Cqrs.Repositories.Repository`3.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: Cqrs.Repositories.Repository`3.Create(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Create(`2)
  isExternal: false
  name: Create(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(`2)
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  commentId: M:Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  isExternal: true
  name: Create(IEnumerable<TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
    name: Create
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  isExternal: true
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  isExternal: false
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
    name: Retrieve
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Update(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Update(`2)
  isExternal: false
  name: Update(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Update(`2)
    name: Update
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Delete(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Delete(`2)
  isExternal: false
  name: Delete(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Delete(`2)
    name: Delete
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.DeleteAll
  commentId: M:Cqrs.Repositories.Repository`3.DeleteAll
  isExternal: false
  name: DeleteAll()
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.DeleteAll
    name: DeleteAll
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Destroy(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Destroy(`2)
  isExternal: false
  name: Destroy(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Destroy(`2)
    name: Destroy
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  isExternal: true
  name: Load(Guid, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  commentId: M:Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  isExternal: true
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
    fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
    name: CreateQueryable
    nameWithType: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
    fullName: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor*
  commentId: Overload:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.#ctor
  isExternal: false
  name: AzureRepository
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.AzureRepository
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.AzureRepository
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).AzureRepository
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).AzureRepository
- uid: Func{Cqrs.DataStores.IDataStore{{TData}}}
  commentId: '!:Func{Cqrs.DataStores.IDataStore{`2}}'
  definition: Func`1
  name: Func<IDataStore<TData>>
  nameWithType: Func<IDataStore<TData>>
  fullName: Func<Cqrs.DataStores.IDataStore<TData>>
  nameWithType.vb: Func(Of IDataStore(Of TData))
  fullName.vb: Func(Of Cqrs.DataStores.IDataStore(Of TData))
  name.vb: Func(Of IDataStore(Of TData))
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TQueryBuilder}'
  commentId: '!:TQueryBuilder'
  definition: TQueryBuilder
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TQueryBuilder
  isExternal: false
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load*
  commentId: Overload:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.Load
  isExternal: false
  name: Load
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.Load
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.Load
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).Load
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).Load
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable*
  commentId: Overload:Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3.CreateQueryable
  isExternal: false
  name: CreateQueryable
  nameWithType: AzureRepository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  fullName: Cqrs.Azure.DocumentDb.Repositories.AzureRepository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  nameWithType.vb: AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  fullName.vb: Cqrs.Azure.DocumentDb.Repositories.AzureRepository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
- uid: Expression{Func{{TData},System.Boolean}}
  commentId: '!:Expression{Func{`2,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<TData, Boolean>>
  nameWithType: Expression<Func<TData, Boolean>>
  fullName: Expression<Func<TData, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TData, Boolean))
  fullName.vb: Expression(Of Func(Of TData, System.Boolean))
  name.vb: Expression(Of Func(Of TData, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryable{{TData}}
  commentId: '!:IQueryable{`2}'
  definition: IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  commentId: '!:Expression`1'
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryable`1
  commentId: '!:IQueryable`1'
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
