<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCqrs_1_1Domain_1_1AggregateRepository" kind="class" language="C#" prot="public">
    <compoundname>Cqrs::Domain::AggregateRepository</compoundname>
    <basecompoundref refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository" prot="public" virt="non-virtual">Cqrs::Domain::IAggregateRepository&lt; TAuthenticationToken &gt;</basecompoundref>
    <derivedcompoundref refid="classCqrs_1_1Akka_1_1Domain_1_1AkkaAggregateRepository" prot="public" virt="non-virtual">Cqrs.Akka.Domain.AkkaAggregateRepository&lt; TAuthenticationToken &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>TAuthenticationToken</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="classCqrs_1_1Domain_1_1AggregateRepository_a99c8546ada9058c0488727b01c626528_1a99c8546ada9058c0488727b01c626528" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Events_1_1IEventStore" kindref="compound">IEventStore</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>IEventStore&lt;TAuthenticationToken&gt; Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.EventStore</definition>
        <argsstring></argsstring>
        <name>EventStore</name>
        <briefdescription>
<para>Gets or sets the IEventStore&lt;TAuthenticationToken&gt; used to store and retrieve events from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="31" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Domain_1_1AggregateRepository_a6388abb96d4480c6141f5d5e469a2ca0_1a6388abb96d4480c6141f5d5e469a2ca0" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Events_1_1IEventPublisher" kindref="compound">IEventPublisher</ref>&lt; TAuthenticationToken &gt;</type>
        <definition>IEventPublisher&lt;TAuthenticationToken&gt; Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.Publisher</definition>
        <argsstring></argsstring>
        <name>Publisher</name>
        <briefdescription>
<para>Gets or sets the Publisher used to publish events on once saved into the <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="36" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Domain_1_1AggregateRepository_a9c2ffdf87ba242cf0c540f4b0d020777_1a9c2ffdf87ba242cf0c540f4b0d020777" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Domain_1_1Factories_1_1IAggregateFactory" kindref="compound">IAggregateFactory</ref></type>
        <definition>IAggregateFactory Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.AggregateFactory</definition>
        <argsstring></argsstring>
        <name>AggregateFactory</name>
        <briefdescription>
<para>Gets or set the IAggregateFactory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="41" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Domain_1_1AggregateRepository_a758d2fd5c0cf30bc038a996800421fd0_1a758d2fd5c0cf30bc038a996800421fd0" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type>ICorrelationIdHelper</type>
        <definition>ICorrelationIdHelper Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.CorrelationIdHelper</definition>
        <argsstring></argsstring>
        <name>CorrelationIdHelper</name>
        <briefdescription>
<para>Gets or set the ICorrelationIdHelper. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="46" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classCqrs_1_1Domain_1_1AggregateRepository_acc91846378f7b76e0549586fc64d3e91_1acc91846378f7b76e0549586fc64d3e91" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="interfaceCqrs_1_1Configuration_1_1IConfigurationManager" kindref="compound">IConfigurationManager</ref></type>
        <definition>IConfigurationManager Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.ConfigurationManager</definition>
        <argsstring></argsstring>
        <name>ConfigurationManager</name>
        <briefdescription>
<para>Gets or sets the IConfigurationManager. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="51" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a12a5588533a7eb2cdd061576ad53c8ac_1a12a5588533a7eb2cdd061576ad53c8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.AggregateRepository</definition>
        <argsstring>(IAggregateFactory aggregateFactory, IEventStore&lt; TAuthenticationToken &gt; eventStore, IEventPublisher&lt; TAuthenticationToken &gt; publisher, ICorrelationIdHelper correlationIdHelper, IConfigurationManager configurationManager)</argsstring>
        <name>AggregateRepository</name>
        <param>
          <type><ref refid="interfaceCqrs_1_1Domain_1_1Factories_1_1IAggregateFactory" kindref="compound">IAggregateFactory</ref></type>
          <declname>aggregateFactory</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventStore" kindref="compound">IEventStore</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>eventStore</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEventPublisher" kindref="compound">IEventPublisher</ref>&lt; TAuthenticationToken &gt;</type>
          <declname>publisher</declname>
        </param>
        <param>
          <type>ICorrelationIdHelper</type>
          <declname>correlationIdHelper</declname>
        </param>
        <param>
          <type><ref refid="interfaceCqrs_1_1Configuration_1_1IConfigurationManager" kindref="compound">IConfigurationManager</ref></type>
          <declname>configurationManager</declname>
        </param>
        <briefdescription>
<para>Instantiates a new instance of <ref refid="classCqrs_1_1Domain_1_1AggregateRepository_a12a5588533a7eb2cdd061576ad53c8ac_1a12a5588533a7eb2cdd061576ad53c8ac" kindref="member">AggregateRepository&lt;TAuthenticationToken&gt;</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="56" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_aff9e828d19a091a4275f635bee4b3c9b_1aff9e828d19a091a4275f635bee4b3c9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.Save&lt; TAggregateRoot &gt;</definition>
        <argsstring>(TAggregateRoot aggregate, int? expectedVersion=null)</argsstring>
        <name>Save&lt; TAggregateRoot &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository_a306baf8aa6faabe893f93e5db5d3517d_1a306baf8aa6faabe893f93e5db5d3517d">Save&lt; TAggregateRoot &gt;</reimplements>
        <param>
          <type>TAggregateRoot</type>
          <declname>aggregate</declname>
        </param>
        <param>
          <type>int?</type>
          <declname>expectedVersion</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Save and persist the provided <emphasis>aggregate</emphasis> , optionally providing the version number the IAggregateRoot&lt;TAuthenticationToken&gt; is expected to be at. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregate</parametername>
</parameternamelist>
<parameterdescription>
<para>The IAggregateRoot&lt;TAuthenticationToken&gt; to save and persist.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expectedVersion</parametername>
</parameternamelist>
<parameterdescription>
<para>The version number the IAggregateRoot&lt;TAuthenticationToken&gt; is expected to be at.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="71" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="71" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a0e55881812d463129df34189d29544b6_1a0e55881812d463129df34189d29544b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.Get&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid aggregateId, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>Get&lt; TAggregateRoot &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository_a890633fddbd05bd3b9e9968a2de095bb_1a890633fddbd05bd3b9e9968a2de095bb">Get&lt; TAggregateRoot &gt;</reimplements>
        <param>
          <type>Guid</type>
          <declname>aggregateId</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Retrieves an IAggregateRoot&lt;TAuthenticationToken&gt; of type <emphasis>TAggregateRoot</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregateId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the IAggregateRoot&lt;TAuthenticationToken&gt; to retrieve.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="139" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a1369ca3e53e602ce236bd9a645d54335_1a1369ca3e53e602ce236bd9a645d54335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.GetToVersion&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid aggregateId, int version, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>GetToVersion&lt; TAggregateRoot &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository_aa0d6b4b9b117357e1676cae829fe2a5c_1aa0d6b4b9b117357e1676cae829fe2a5c">GetToVersion&lt; TAggregateRoot &gt;</reimplements>
        <param>
          <type>Guid</type>
          <declname>aggregateId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Retrieves an IAggregateRoot&lt;TAuthenticationToken&gt; of type <emphasis>TAggregateRoot</emphasis>  up to and including the provided <emphasis>version</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregateId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the IAggregateRoot&lt;TAuthenticationToken&gt; to retrieve.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this version</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="155" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_aaf2dba9114b4626ef1abb10879e38bed_1aaf2dba9114b4626ef1abb10879e38bed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.GetToDate&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid aggregateId, DateTime versionedDate, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>GetToDate&lt; TAggregateRoot &gt;</name>
        <reimplements refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository_a32308a27ce03c5d406e16b17430dd040_1a32308a27ce03c5d406e16b17430dd040">GetToDate&lt; TAggregateRoot &gt;</reimplements>
        <param>
          <type>Guid</type>
          <declname>aggregateId</declname>
        </param>
        <param>
          <type>DateTime</type>
          <declname>versionedDate</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Retrieves an IAggregateRoot&lt;TAuthenticationToken&gt; of type <emphasis>TAggregateRoot</emphasis>  up to and including the provided <emphasis>versionedDate</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of the IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregateId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the IAggregateRoot&lt;TAuthenticationToken&gt; to retrieve.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>versionedDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this DateTime</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="171" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_af26efcb464ac989962a9ad138466e4d7_1af26efcb464ac989962a9ad138466e4d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregateHistory&lt; TAggregateRoot &gt;</definition>
        <argsstring>(TAggregateRoot aggregate, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null, bool throwExceptionOnNoEvents=true)</argsstring>
        <name>LoadAggregateHistory&lt; TAggregateRoot &gt;</name>
        <param>
          <type>TAggregateRoot</type>
          <declname>aggregate</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>throwExceptionOnNoEvents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>If <emphasis>events</emphasis>  is null, loads the events from <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>, checks for duplicates and then rehydrates the <emphasis>aggregate</emphasis>  with the events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregate</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TAggregateRoot</emphasis>  to rehydrate.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>throwExceptionOnNoEvents</parametername>
</parameternamelist>
<parameterdescription>
<para>If true will throw an instance of AggregateNotFoundException&lt;TAggregateRoot,TAuthenticationToken&gt; if no aggregate events or provided or found in the <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="269" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="269" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_aace49d3070eb98875411a4817b5dea3e_1aace49d3070eb98875411a4817b5dea3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregateHistoryToVersion&lt; TAggregateRoot &gt;</definition>
        <argsstring>(TAggregateRoot aggregate, int version, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null, bool throwExceptionOnNoEvents=true)</argsstring>
        <name>LoadAggregateHistoryToVersion&lt; TAggregateRoot &gt;</name>
        <param>
          <type>TAggregateRoot</type>
          <declname>aggregate</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>throwExceptionOnNoEvents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>If <emphasis>events</emphasis>  is null, loads the events from <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>, checks for duplicates and then rehydrates the <emphasis>aggregate</emphasis>  with the events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregate</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TAggregateRoot</emphasis>  to rehydrate.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this version</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>throwExceptionOnNoEvents</parametername>
</parameternamelist>
<parameterdescription>
<para>If true will throw an instance of AggregateNotFoundException&lt;TAggregateRoot,TAuthenticationToken&gt; if no aggregate events or provided or found in the <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="302" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="302" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_afd9fec8b77eedefd1c4b39168c7b4809_1afd9fec8b77eedefd1c4b39168c7b4809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregateHistoryToDate&lt; TAggregateRoot &gt;</definition>
        <argsstring>(TAggregateRoot aggregate, DateTime versionedDate, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null, bool throwExceptionOnNoEvents=true)</argsstring>
        <name>LoadAggregateHistoryToDate&lt; TAggregateRoot &gt;</name>
        <param>
          <type>TAggregateRoot</type>
          <declname>aggregate</declname>
        </param>
        <param>
          <type>DateTime</type>
          <declname>versionedDate</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>throwExceptionOnNoEvents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>If <emphasis>events</emphasis>  is null, loads the events from <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>, checks for duplicates and then rehydrates the <emphasis>aggregate</emphasis>  with the events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aggregate</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>TAggregateRoot</emphasis>  to rehydrate.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>versionedDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this DateTime</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>throwExceptionOnNoEvents</parametername>
</parameternamelist>
<parameterdescription>
<para>If true will throw an instance of AggregateNotFoundException&lt;TAggregateRoot,TAuthenticationToken&gt; if no aggregate events or provided or found in the <ref refid="namespaceCqrs_1_1EventStore" kindref="compound">EventStore</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="335" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="335" bodyend="354"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a3191ba3d6fa4f6b904128c4731262944_1a3191ba3d6fa4f6b904128c4731262944" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.PublishEvent</definition>
        <argsstring>(IEvent&lt; TAuthenticationToken &gt; @event)</argsstring>
        <name>PublishEvent</name>
        <reimplementedby refid="classCqrs_1_1Akka_1_1Domain_1_1AkkaAggregateRepository_a144cbfdedb23039729ba5b3058f84e7a_1a144cbfdedb23039729ba5b3058f84e7a">PublishEvent</reimplementedby>
        <param>
          <type><ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt; @</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Publish the saved <emphasis>event</emphasis> . </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="125" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a64d82c57bbe49a11bd5cf20c5b86ce19_1a64d82c57bbe49a11bd5cf20c5b86ce19" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.CreateAggregate&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid id)</argsstring>
        <name>CreateAggregate&lt; TAggregateRoot &gt;</name>
        <reimplementedby refid="classCqrs_1_1Akka_1_1Domain_1_1AkkaAggregateRepository_a889a80595755372614382c36092f30dc_1a889a80595755372614382c36092f30dc">CreateAggregate&lt; TAggregateRoot &gt;</reimplementedby>
        <param>
          <type>Guid</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Calls IAggregateFactory.Create to get a, <emphasis>TAggregateRoot</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the <emphasis>TAggregateRoot</emphasis>  to create.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="182" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_a53bf020a5f2a0f697f361065b792cf61_1a53bf020a5f2a0f697f361065b792cf61" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregate&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid id, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>LoadAggregate&lt; TAggregateRoot &gt;</name>
        <param>
          <type>Guid</type>
          <declname>id</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Calls IAggregateFactory.Create to get a, <emphasis>TAggregateRoot</emphasis>  and then calls <ref refid="classCqrs_1_1Domain_1_1AggregateRepository_af26efcb464ac989962a9ad138466e4d7_1af26efcb464ac989962a9ad138466e4d7" kindref="member">LoadAggregateHistory&lt;TAggregateRoot&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the <emphasis>TAggregateRoot</emphasis>  to create.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="199" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="199" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_aa2b4511ff6327febc4bfa07567ba4385_1aa2b4511ff6327febc4bfa07567ba4385" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregateToVersion&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid id, int version, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>LoadAggregateToVersion&lt; TAggregateRoot &gt;</name>
        <param>
          <type>Guid</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Calls IAggregateFactory.Create to get a, <emphasis>TAggregateRoot</emphasis>  and then calls <ref refid="classCqrs_1_1Domain_1_1AggregateRepository_af26efcb464ac989962a9ad138466e4d7_1af26efcb464ac989962a9ad138466e4d7" kindref="member">LoadAggregateHistory&lt;TAggregateRoot&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the <emphasis>TAggregateRoot</emphasis>  to create.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this version</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="222" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="222" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classCqrs_1_1Domain_1_1AggregateRepository_ac53abaf866dc9a9bc5f7b50135c1aa92_1ac53abaf866dc9a9bc5f7b50135c1aa92" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>TAggregateRoot</type>
        <definition>virtual TAggregateRoot Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;.LoadAggregateToDate&lt; TAggregateRoot &gt;</definition>
        <argsstring>(Guid id, DateTime versionedDate, IList&lt; IEvent&lt; TAuthenticationToken &gt;&gt; events=null)</argsstring>
        <name>LoadAggregateToDate&lt; TAggregateRoot &gt;</name>
        <param>
          <type>Guid</type>
          <declname>id</declname>
        </param>
        <param>
          <type>DateTime</type>
          <declname>versionedDate</declname>
        </param>
        <param>
          <type>IList&lt; <ref refid="interfaceCqrs_1_1Events_1_1IEvent" kindref="compound">IEvent</ref>&lt; TAuthenticationToken &gt;&gt;</type>
          <declname>events</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Calls IAggregateFactory.Create to get a, <emphasis>TAggregateRoot</emphasis>  and then calls <ref refid="classCqrs_1_1Domain_1_1AggregateRepository_af26efcb464ac989962a9ad138466e4d7_1af26efcb464ac989962a9ad138466e4d7" kindref="member">LoadAggregateHistory&lt;TAggregateRoot&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAggregateRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of IAggregateRoot&lt;TAuthenticationToken&gt;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the <emphasis>TAggregateRoot</emphasis>  to create.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>versionedDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Load events up-to and including from this DateTime</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of IEvent&lt;TAuthenticationToken&gt; to replay on the retrieved IAggregateRoot&lt;TAuthenticationToken&gt;. If null, the IEventStore&lt;TAuthenticationToken&gt; will be used to retrieve a list of IEvent&lt;TAuthenticationToken&gt; for you. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="245" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="245" bodyend="256"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides basic repository methods for operations with instances of IAggregateRoot&lt;TAuthenticationToken&gt; using an IEventStore&lt;TAuthenticationToken&gt; that also publishes events once saved. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TAuthenticationToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of authentication token.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1306">
        <label>Cqrs::Akka::Domain::AkkaAggregateRepository&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Akka_1_1Domain_1_1AkkaAggregateRepository"/>
        <childnode refid="1304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1304">
        <label>Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Domain_1_1AggregateRepository"/>
        <childnode refid="1305" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1305">
        <label>IAggregateRepository&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1307">
        <label>Cqrs.Domain.AggregateRepository&lt; TAuthenticationToken &gt;</label>
        <link refid="classCqrs_1_1Domain_1_1AggregateRepository"/>
        <childnode refid="1308" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1308">
        <label>IAggregateRepository&lt; TAuthenticationToken &gt;</label>
        <link refid="interfaceCqrs_1_1Domain_1_1IAggregateRepository"/>
      </node>
    </collaborationgraph>
    <location file="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" line="27" column="1" bodyfile="/opt/buildAgent/work/a99f043f4d1af837/Framework/Cqrs/Domain/AggregateRepository.cs" bodystart="25" bodyend="355"/>
    <listofallmembers>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a9c2ffdf87ba242cf0c540f4b0d020777_1a9c2ffdf87ba242cf0c540f4b0d020777" prot="protected" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>AggregateFactory</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a12a5588533a7eb2cdd061576ad53c8ac_1a12a5588533a7eb2cdd061576ad53c8ac" prot="public" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>AggregateRepository</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_acc91846378f7b76e0549586fc64d3e91_1acc91846378f7b76e0549586fc64d3e91" prot="protected" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>ConfigurationManager</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a758d2fd5c0cf30bc038a996800421fd0_1a758d2fd5c0cf30bc038a996800421fd0" prot="protected" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>CorrelationIdHelper</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a64d82c57bbe49a11bd5cf20c5b86ce19_1a64d82c57bbe49a11bd5cf20c5b86ce19" prot="protected" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>CreateAggregate&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a99c8546ada9058c0488727b01c626528_1a99c8546ada9058c0488727b01c626528" prot="protected" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>EventStore</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a0e55881812d463129df34189d29544b6_1a0e55881812d463129df34189d29544b6" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>Get&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_aaf2dba9114b4626ef1abb10879e38bed_1aaf2dba9114b4626ef1abb10879e38bed" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>GetToDate&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a1369ca3e53e602ce236bd9a645d54335_1a1369ca3e53e602ce236bd9a645d54335" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>GetToVersion&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a53bf020a5f2a0f697f361065b792cf61_1a53bf020a5f2a0f697f361065b792cf61" prot="protected" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregate&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_af26efcb464ac989962a9ad138466e4d7_1af26efcb464ac989962a9ad138466e4d7" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregateHistory&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_afd9fec8b77eedefd1c4b39168c7b4809_1afd9fec8b77eedefd1c4b39168c7b4809" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregateHistoryToDate&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_aace49d3070eb98875411a4817b5dea3e_1aace49d3070eb98875411a4817b5dea3e" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregateHistoryToVersion&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_ac53abaf866dc9a9bc5f7b50135c1aa92_1ac53abaf866dc9a9bc5f7b50135c1aa92" prot="protected" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregateToDate&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_aa2b4511ff6327febc4bfa07567ba4385_1aa2b4511ff6327febc4bfa07567ba4385" prot="protected" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>LoadAggregateToVersion&lt; TAggregateRoot &gt;</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a6388abb96d4480c6141f5d5e469a2ca0_1a6388abb96d4480c6141f5d5e469a2ca0" prot="protected" virt="non-virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>Publisher</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_a3191ba3d6fa4f6b904128c4731262944_1a3191ba3d6fa4f6b904128c4731262944" prot="protected" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>PublishEvent</name></member>
      <member refid="classCqrs_1_1Domain_1_1AggregateRepository_aff9e828d19a091a4275f635bee4b3c9b_1aff9e828d19a091a4275f635bee4b3c9b" prot="public" virt="virtual"><scope>Cqrs::Domain::AggregateRepository</scope><name>Save&lt; TAggregateRoot &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
