### YamlMime:ManagedReference
items:
- uid: Cqrs.Azure.BlobStorage.StorageStore`2
  commentId: T:Cqrs.Azure.BlobStorage.StorageStore`2
  id: StorageStore`2
  parent: Cqrs.Azure.BlobStorage
  children:
  - Cqrs.Azure.BlobStorage.StorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  - Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  - Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  - Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  - Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  - Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  - Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  - Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  - Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  - Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  - Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  - Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  - Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  - Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  - Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  - Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  - Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  - Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  - Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  - Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  - Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  - Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  - Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  langs:
  - csharp
  - vb
  name: StorageStore<TData, TSource>
  nameWithType: StorageStore<TData, TSource>
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: StorageStore
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 28
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nA <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that uses Azure Storage for storage.\n"
  example: []
  syntax:
    content: 'public abstract class StorageStore<TData, TSource> : IEnumerable<TData>, IEnumerable'
    typeParameters:
    - id: TData
    - id: TSource
    content.vb: >-
      Public MustInherit Class StorageStore(Of TData, TSource)
          Implements IEnumerable(Of TData), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Azure.BlobStorage.BlobStorageStore`1
  - Cqrs.Azure.BlobStorage.TableStorageStore`2
  implements:
  - System.Collections.Generic.IEnumerable{{TData}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: StorageStore(Of TData, TSource)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource)
  name.vb: StorageStore(Of TData, TSource)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  id: WritableCollection
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: WritableCollection
  nameWithType: StorageStore<TData, TSource>.WritableCollection
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.WritableCollection
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: WritableCollection
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 31
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected IList<Tuple<CloudStorageAccount, TSource>> WritableCollection { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Tuple{Microsoft.WindowsAzure.Storage.CloudStorageAccount,{TSource}}}
    content.vb: Protected ReadOnly Property WritableCollection As IList(Of Tuple(Of CloudStorageAccount, TSource))
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection*
  nameWithType.vb: StorageStore(Of TData, TSource).WritableCollection
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).WritableCollection
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  id: ReadableStorageAccount
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: ReadableStorageAccount
  nameWithType: StorageStore<TData, TSource>.ReadableStorageAccount
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ReadableStorageAccount
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ReadableStorageAccount
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 33
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected CloudStorageAccount ReadableStorageAccount { get; }
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    content.vb: Protected ReadOnly Property ReadableStorageAccount As CloudStorageAccount
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount*
  nameWithType.vb: StorageStore(Of TData, TSource).ReadableStorageAccount
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ReadableStorageAccount
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  id: Logger
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: StorageStore<TData, TSource>.Logger
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Logger
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Logger
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 37
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Logger*
  nameWithType.vb: StorageStore(Of TData, TSource).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Logger
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  id: GetContainerName
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetContainerName
  nameWithType: StorageStore<TData, TSource>.GetContainerName
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetContainerName
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetContainerName
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 39
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected Func<string> GetContainerName { get; set; }
    parameters: []
    return:
      type: System.Func{System.String}
    content.vb: Protected Property GetContainerName As Func(Of String)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName*
  nameWithType.vb: StorageStore(Of TData, TSource).GetContainerName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetContainerName
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  id: IsContainerPublic
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: IsContainerPublic
  nameWithType: StorageStore<TData, TSource>.IsContainerPublic
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.IsContainerPublic
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsContainerPublic
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 41
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected Func<bool> IsContainerPublic { get; set; }
    parameters: []
    return:
      type: System.Func{System.Boolean}
    content.vb: Protected Property IsContainerPublic As Func(Of Boolean)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic*
  nameWithType.vb: StorageStore(Of TData, TSource).IsContainerPublic
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).IsContainerPublic
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.#ctor(cdmdotnet.Logging.ILogger)
  id: '#ctor(cdmdotnet.Logging.ILogger)'
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: StorageStore(ILogger)
  nameWithType: StorageStore<TData, TSource>.StorageStore(ILogger)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.StorageStore(cdmdotnet.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 46
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nInitializes a new instance of the <xref href=\"Cqrs.Azure.BlobStorage.StorageStore%602\" data-throw-if-not-resolved=\"false\"></xref> class using the specified container.\n"
  example: []
  syntax:
    content: protected StorageStore(ILogger logger)
    parameters:
    - id: logger
      type: cdmdotnet.Logging.ILogger
    content.vb: Protected Sub New(logger As ILogger)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.#ctor*
  nameWithType.vb: StorageStore(Of TData, TSource).StorageStore(ILogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).StorageStore(cdmdotnet.Logging.ILogger)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  id: DefaultSettings
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: DefaultSettings
  nameWithType: StorageStore<TData, TSource>.DefaultSettings
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.DefaultSettings
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultSettings
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 51
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public static JsonSerializerSettings DefaultSettings { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Public Shared ReadOnly Property DefaultSettings As JsonSerializerSettings
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings*
  nameWithType.vb: StorageStore(Of TData, TSource).DefaultSettings
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).DefaultSettings
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  id: Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Initialise(IStorageStoreConnectionStringFactory)
  nameWithType: StorageStore<TData, TSource>.Initialise(IStorageStoreConnectionStringFactory)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Initialise
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 58
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual void Initialise(IStorageStoreConnectionStringFactory storageDataStoreConnectionStringFactory)
    parameters:
    - id: storageDataStoreConnectionStringFactory
      type: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
    content.vb: Protected Overridable Sub Initialise(storageDataStoreConnectionStringFactory As IStorageStoreConnectionStringFactory)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise*
  nameWithType.vb: StorageStore(Of TData, TSource).Initialise(IStorageStoreConnectionStringFactory)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  id: GetEnumerator
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: StorageStore<TData, TSource>.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetEnumerator
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 81
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public abstract IEnumerator<TData> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TData}}
      description: "\nA <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the collection.\n"
    content.vb: Public MustOverride Function GetEnumerator As IEnumerator(Of TData)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  nameWithType.vb: StorageStore(Of TData, TSource).GetEnumerator()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetEnumerator()
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: StorageStore<TData, TSource>.IEnumerable.GetEnumerator()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 89
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  id: Expression
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: StorageStore<TData, TSource>.Expression
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Expression
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Expression
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 104
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the expression tree that is associated with the instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract Expression Expression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\nThe <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public MustOverride ReadOnly Property Expression As Expression
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Expression*
  nameWithType.vb: StorageStore(Of TData, TSource).Expression
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Expression
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  id: ElementType
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: StorageStore<TData, TSource>.ElementType
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ElementType
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ElementType
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 112
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the type of the element(s) that are returned when the expression tree associated with this instance of <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public abstract Type ElementType { get; }
    parameters: []
    return:
      type: System.Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.\n"
    content.vb: Public MustOverride ReadOnly Property ElementType As Type
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.ElementType*
  nameWithType.vb: StorageStore(Of TData, TSource).ElementType
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ElementType
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  id: Provider
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: StorageStore<TData, TSource>.Provider
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Provider
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Provider
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 120
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the query provider that is associated with this data source.\n"
  example: []
  syntax:
    content: public abstract IQueryProvider Provider { get; }
    parameters: []
    return:
      type: System.Linq.IQueryProvider
      description: "\nThe <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with this data source.\n"
    content.vb: Public MustOverride ReadOnly Property Provider As IQueryProvider
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Provider*
  nameWithType.vb: StorageStore(Of TData, TSource).Provider
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Provider
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  id: Dispose
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: StorageStore<TData, TSource>.Dispose()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Dispose()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Dispose
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 129
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose*
  nameWithType.vb: StorageStore(Of TData, TSource).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Dispose()
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Add(`0)
  id: Add(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Add(TData)
  nameWithType: StorageStore<TData, TSource>.Add(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 141
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public abstract void Add(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public MustOverride Sub Add(data As TData)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Add*
  nameWithType.vb: StorageStore(Of TData, TSource).Add(TData)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add(TData)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<TData>)
  nameWithType: StorageStore<TData, TSource>.Add(IEnumerable<TData>)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Add
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 143
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public virtual void Add(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overridable Sub Add(data As IEnumerable(Of TData))
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Add*
  nameWithType.vb: StorageStore(Of TData, TSource).Add(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Add(IEnumerable(Of TData))
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Destroy(`0)
  id: Destroy(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: StorageStore<TData, TSource>.Destroy(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 149
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public abstract void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public MustOverride Sub Destroy(data As TData)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy*
  nameWithType.vb: StorageStore(Of TData, TSource).Destroy(TData)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Destroy(TData)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  id: RemoveAll
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: StorageStore<TData, TSource>.RemoveAll()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.RemoveAll()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: RemoveAll
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 151
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public abstract void RemoveAll()
    content.vb: Public MustOverride Sub RemoveAll
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll*
  nameWithType.vb: StorageStore(Of TData, TSource).RemoveAll()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).RemoveAll()
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Update(`0)
  id: Update(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: StorageStore<TData, TSource>.Update(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 153
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: public abstract void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public MustOverride Sub Update(data As TData)
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Update*
  nameWithType.vb: StorageStore(Of TData, TSource).Update(TData)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Update(TData)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  id: CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: CreateSource(CloudStorageAccount, String, Boolean)
  nameWithType: StorageStore<TData, TSource>.CreateSource(CloudStorageAccount, String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateSource
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 163
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nCreates a <typeparam name=\"TSource\"></typeparam> with the specified name <code data-dev-comment-type=\"paramref\">sourceName</code> if it doesn&apos;t already exist.\n"
  example: []
  syntax:
    content: protected abstract TSource CreateSource(CloudStorageAccount storageAccount, string sourceName, bool isPublic = true)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account to create the container is
    - id: sourceName
      type: System.String
      description: The name of the source.
    - id: isPublic
      type: System.Boolean
      description: Whether or not this source is publicly accessible.
    return:
      type: '{TSource}'
    content.vb: Protected MustOverride Function CreateSource(storageAccount As CloudStorageAccount, sourceName As String, isPublic As Boolean = True) As TSource
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource*
  nameWithType.vb: StorageStore(Of TData, TSource).CreateSource(CloudStorageAccount, String, Boolean)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String)
  id: GetSafeSourceName(System.String)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetSafeSourceName(String)
  nameWithType: StorageStore<TData, TSource>.GetSafeSourceName(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName(System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSafeSourceName
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 165
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual string GetSafeSourceName(string sourceName)
    parameters:
    - id: sourceName
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function GetSafeSourceName(sourceName As String) As String
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName*
  nameWithType.vb: StorageStore(Of TData, TSource).GetSafeSourceName(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName(System.String)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName(System.String,System.Boolean)
  id: GetSafeSourceName(System.String,System.Boolean)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetSafeSourceName(String, Boolean)
  nameWithType: StorageStore<TData, TSource>.GetSafeSourceName(String, Boolean)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSafeSourceName
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 170
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual string GetSafeSourceName(string sourceName, bool lowerCaseName)
    parameters:
    - id: sourceName
      type: System.String
    - id: lowerCaseName
      type: System.Boolean
    return:
      type: System.String
    content.vb: Protected Overridable Function GetSafeSourceName(sourceName As String, lowerCaseName As Boolean) As String
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName*
  nameWithType.vb: StorageStore(Of TData, TSource).GetSafeSourceName(String, Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName(System.String, System.Boolean)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  commentId: P:Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  id: AzureStorageRetryPolicy
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: AzureStorageRetryPolicy
  nameWithType: StorageStore<TData, TSource>.AzureStorageRetryPolicy
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.AzureStorageRetryPolicy
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AzureStorageRetryPolicy
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 221
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  summary: "\nGets the default retry policy dedicated to handling transient conditions with Windows Azure Storage.\n"
  example: []
  syntax:
    content: protected virtual RetryPolicy AzureStorageRetryPolicy { get; }
    parameters: []
    return:
      type: Microsoft.Practices.TransientFaultHandling.RetryPolicy
    content.vb: Protected Overridable ReadOnly Property AzureStorageRetryPolicy As RetryPolicy
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy*
  nameWithType.vb: StorageStore(Of TData, TSource).AzureStorageRetryPolicy
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).AzureStorageRetryPolicy
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.IO.Stream)
  id: Deserialise(System.IO.Stream)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Deserialise(Stream)
  nameWithType: StorageStore<TData, TSource>.Deserialise(Stream)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 236
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual TData Deserialise(Stream dataStream)
    parameters:
    - id: dataStream
      type: System.IO.Stream
    return:
      type: '{TData}'
    content.vb: Protected Overridable Function Deserialise(dataStream As Stream) As TData
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise*
  nameWithType.vb: StorageStore(Of TData, TSource).Deserialise(Stream)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise(System.IO.Stream)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise(System.String)
  id: Deserialise(System.String)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Deserialise(String)
  nameWithType: StorageStore<TData, TSource>.Deserialise(String)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise(System.String)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Deserialise
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 249
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual TData Deserialise(string json)
    parameters:
    - id: json
      type: System.String
    return:
      type: '{TData}'
    content.vb: Protected Overridable Function Deserialise(json As String) As TData
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise*
  nameWithType.vb: StorageStore(Of TData, TSource).Deserialise(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise(System.String)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.Serialise(`0)
  id: Serialise(`0)
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: Serialise(TData)
  nameWithType: StorageStore<TData, TSource>.Serialise(TData)
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Serialise(TData)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Serialise
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 256
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual Stream Serialise(TData data)
    parameters:
    - id: data
      type: '{TData}'
    return:
      type: System.IO.Stream
    content.vb: Protected Overridable Function Serialise(data As TData) As Stream
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise*
  nameWithType.vb: StorageStore(Of TData, TSource).Serialise(TData)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Serialise(TData)
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  id: GetSerialisationSettings
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetSerialisationSettings()
  nameWithType: StorageStore<TData, TSource>.GetSerialisationSettings()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialisationSettings()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSerialisationSettings
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 266
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual JsonSerializerSettings GetSerialisationSettings()
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Protected Overridable Function GetSerialisationSettings As JsonSerializerSettings
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings*
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialisationSettings()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialisationSettings()
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  commentId: M:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  id: GetSerialiser
  parent: Cqrs.Azure.BlobStorage.StorageStore`2
  langs:
  - csharp
  - vb
  name: GetSerialiser()
  nameWithType: StorageStore<TData, TSource>.GetSerialiser()
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialiser()
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetSerialiser
    path: Framework/Azure/Cqrs.Azure.BlobStorage/StorageStore.cs
    startLine: 271
  assemblies:
  - Cqrs.Azure.BlobStorage
  namespace: Cqrs.Azure.BlobStorage
  syntax:
    content: protected virtual JsonSerializer GetSerialiser()
    return:
      type: Newtonsoft.Json.JsonSerializer
    content.vb: Protected Overridable Function GetSerialiser As JsonSerializer
  overload: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser*
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialiser()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialiser()
references:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage
  commentId: N:Cqrs.Azure.BlobStorage
  isExternal: false
  name: Cqrs.Azure.BlobStorage
  nameWithType: Cqrs.Azure.BlobStorage
  fullName: Cqrs.Azure.BlobStorage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.WritableCollection
  isExternal: false
  name: WritableCollection
  nameWithType: StorageStore<TData, TSource>.WritableCollection
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.WritableCollection
  nameWithType.vb: StorageStore(Of TData, TSource).WritableCollection
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).WritableCollection
- uid: System.Collections.Generic.IList{System.Tuple{Microsoft.WindowsAzure.Storage.CloudStorageAccount,{TSource}}}
  commentId: T:System.Collections.Generic.IList{System.Tuple{Microsoft.WindowsAzure.Storage.CloudStorageAccount,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Tuple<CloudStorageAccount, TSource>>
  nameWithType: IList<Tuple<CloudStorageAccount, TSource>>
  fullName: System.Collections.Generic.IList<System.Tuple<Microsoft.WindowsAzure.Storage.CloudStorageAccount, TSource>>
  nameWithType.vb: IList(Of Tuple(Of CloudStorageAccount, TSource))
  fullName.vb: System.Collections.Generic.IList(Of System.Tuple(Of Microsoft.WindowsAzure.Storage.CloudStorageAccount, TSource))
  name.vb: IList(Of Tuple(Of CloudStorageAccount, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    name: CloudStorageAccount
    nameWithType: CloudStorageAccount
    fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.ReadableStorageAccount
  isExternal: false
  name: ReadableStorageAccount
  nameWithType: StorageStore<TData, TSource>.ReadableStorageAccount
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ReadableStorageAccount
  nameWithType.vb: StorageStore(Of TData, TSource).ReadableStorageAccount
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ReadableStorageAccount
- uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
  commentId: T:Microsoft.WindowsAzure.Storage.CloudStorageAccount
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: CloudStorageAccount
  nameWithType: CloudStorageAccount
  fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Logger*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Logger
  isExternal: false
  name: Logger
  nameWithType: StorageStore<TData, TSource>.Logger
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Logger
  nameWithType.vb: StorageStore(Of TData, TSource).Logger
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Logger
- uid: cdmdotnet.Logging.ILogger
  commentId: T:cdmdotnet.Logging.ILogger
  parent: cdmdotnet.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: cdmdotnet.Logging.ILogger
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.GetContainerName
  isExternal: false
  name: GetContainerName
  nameWithType: StorageStore<TData, TSource>.GetContainerName
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetContainerName
  nameWithType.vb: StorageStore(Of TData, TSource).GetContainerName
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetContainerName
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullName.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.IsContainerPublic
  isExternal: false
  name: IsContainerPublic
  nameWithType: StorageStore<TData, TSource>.IsContainerPublic
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.IsContainerPublic
  nameWithType.vb: StorageStore(Of TData, TSource).IsContainerPublic
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).IsContainerPublic
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2
  commentId: T:Cqrs.Azure.BlobStorage.StorageStore`2
  isExternal: false
  name: StorageStore<TData, TSource>
  nameWithType: StorageStore<TData, TSource>
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>
  nameWithType.vb: StorageStore(Of TData, TSource)
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource)
  name.vb: StorageStore(Of TData, TSource)
  spec.csharp:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Azure.BlobStorage.StorageStore`2
    name: StorageStore
    nameWithType: StorageStore
    fullName: Cqrs.Azure.BlobStorage.StorageStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.#ctor*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.#ctor
  isExternal: false
  name: StorageStore
  nameWithType: StorageStore<TData, TSource>.StorageStore
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.StorageStore
  nameWithType.vb: StorageStore(Of TData, TSource).StorageStore
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).StorageStore
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.DefaultSettings
  isExternal: false
  name: DefaultSettings
  nameWithType: StorageStore<TData, TSource>.DefaultSettings
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.DefaultSettings
  nameWithType.vb: StorageStore(Of TData, TSource).DefaultSettings
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).DefaultSettings
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Initialise*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Initialise
  isExternal: false
  name: Initialise
  nameWithType: StorageStore<TData, TSource>.Initialise
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Initialise
  nameWithType.vb: StorageStore(Of TData, TSource).Initialise
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Initialise
- uid: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  commentId: T:Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
  parent: Cqrs.Azure.BlobStorage
  isExternal: false
  name: IStorageStoreConnectionStringFactory
  nameWithType: IStorageStoreConnectionStringFactory
  fullName: Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: StorageStore<TData, TSource>.GetEnumerator
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetEnumerator
  nameWithType.vb: StorageStore(Of TData, TSource).GetEnumerator
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TData}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TData}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TData>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TData).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TData>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TData>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TData).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TData).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TData}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TData>
  nameWithType: IEnumerator<TData>
  fullName: System.Collections.Generic.IEnumerator<TData>
  nameWithType.vb: IEnumerator(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TData)
  name.vb: IEnumerator(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: StorageStore<TData, TSource>.IEnumerable.GetEnumerator
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Expression*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Expression
  isExternal: false
  name: Expression
  nameWithType: StorageStore<TData, TSource>.Expression
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Expression
  nameWithType.vb: StorageStore(Of TData, TSource).Expression
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Expression
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.ElementType*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.ElementType
  isExternal: false
  name: ElementType
  nameWithType: StorageStore<TData, TSource>.ElementType
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.ElementType
  nameWithType.vb: StorageStore(Of TData, TSource).ElementType
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).ElementType
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Provider*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Provider
  isExternal: false
  name: Provider
  nameWithType: StorageStore<TData, TSource>.Provider
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Provider
  nameWithType.vb: StorageStore(Of TData, TSource).Provider
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Provider
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Dispose*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Dispose
  isExternal: false
  name: Dispose
  nameWithType: StorageStore<TData, TSource>.Dispose
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Dispose
  nameWithType.vb: StorageStore(Of TData, TSource).Dispose
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Dispose
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Add*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Add
  isExternal: false
  name: Add
  nameWithType: StorageStore<TData, TSource>.Add
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Add
  nameWithType.vb: StorageStore(Of TData, TSource).Add
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Add
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Destroy*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Destroy
  isExternal: false
  name: Destroy
  nameWithType: StorageStore<TData, TSource>.Destroy
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Destroy
  nameWithType.vb: StorageStore(Of TData, TSource).Destroy
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Destroy
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: StorageStore<TData, TSource>.RemoveAll
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.RemoveAll
  nameWithType.vb: StorageStore(Of TData, TSource).RemoveAll
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).RemoveAll
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Update*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Update
  isExternal: false
  name: Update
  nameWithType: StorageStore<TData, TSource>.Update
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Update
  nameWithType.vb: StorageStore(Of TData, TSource).Update
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Update
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.CreateSource
  isExternal: false
  name: CreateSource
  nameWithType: StorageStore<TData, TSource>.CreateSource
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.CreateSource
  nameWithType.vb: StorageStore(Of TData, TSource).CreateSource
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).CreateSource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  commentId: '!:TSource'
  isExternal: false
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.GetSafeSourceName
  isExternal: false
  name: GetSafeSourceName
  nameWithType: StorageStore<TData, TSource>.GetSafeSourceName
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSafeSourceName
  nameWithType.vb: StorageStore(Of TData, TSource).GetSafeSourceName
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSafeSourceName
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.AzureStorageRetryPolicy
  isExternal: false
  name: AzureStorageRetryPolicy
  nameWithType: StorageStore<TData, TSource>.AzureStorageRetryPolicy
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.AzureStorageRetryPolicy
  nameWithType.vb: StorageStore(Of TData, TSource).AzureStorageRetryPolicy
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).AzureStorageRetryPolicy
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  commentId: T:Microsoft.Practices.TransientFaultHandling.RetryPolicy
  parent: Microsoft.Practices.TransientFaultHandling
  isExternal: true
  name: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  nameWithType: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy
- uid: Microsoft.Practices.TransientFaultHandling
  commentId: N:Microsoft.Practices.TransientFaultHandling
  isExternal: false
  name: Microsoft.Practices.TransientFaultHandling
  nameWithType: Microsoft.Practices.TransientFaultHandling
  fullName: Microsoft.Practices.TransientFaultHandling
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Deserialise
  isExternal: false
  name: Deserialise
  nameWithType: StorageStore<TData, TSource>.Deserialise
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Deserialise
  nameWithType.vb: StorageStore(Of TData, TSource).Deserialise
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Deserialise
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.Serialise*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.Serialise
  isExternal: false
  name: Serialise
  nameWithType: StorageStore<TData, TSource>.Serialise
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.Serialise
  nameWithType.vb: StorageStore(Of TData, TSource).Serialise
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).Serialise
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialisationSettings
  isExternal: false
  name: GetSerialisationSettings
  nameWithType: StorageStore<TData, TSource>.GetSerialisationSettings
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialisationSettings
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialisationSettings
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialisationSettings
- uid: Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser*
  commentId: Overload:Cqrs.Azure.BlobStorage.StorageStore`2.GetSerialiser
  isExternal: false
  name: GetSerialiser
  nameWithType: StorageStore<TData, TSource>.GetSerialiser
  fullName: Cqrs.Azure.BlobStorage.StorageStore<TData, TSource>.GetSerialiser
  nameWithType.vb: StorageStore(Of TData, TSource).GetSerialiser
  fullName.vb: Cqrs.Azure.BlobStorage.StorageStore(Of TData, TSource).GetSerialiser
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
