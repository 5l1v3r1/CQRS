### YamlMime:ManagedReference
items:
- uid: Cqrs.Repositories.Repository`3
  commentId: T:Cqrs.Repositories.Repository`3
  id: Repository`3
  parent: Cqrs.Repositories
  children:
  - Cqrs.Repositories.Repository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  - Cqrs.Repositories.Repository`3.Create(`2)
  - Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  - Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  - Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  - Cqrs.Repositories.Repository`3.Delete(`2)
  - Cqrs.Repositories.Repository`3.DeleteAll
  - Cqrs.Repositories.Repository`3.Destroy(`2)
  - Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  - Cqrs.Repositories.Repository`3.QueryBuilder
  - Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  - Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  - Cqrs.Repositories.Repository`3.TelemetryHelper
  - Cqrs.Repositories.Repository`3.Update(`2)
  langs:
  - csharp
  - vb
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Repository
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 25
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nProvides basic repository methods for operations with an <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public abstract class Repository<TQueryStrategy, TQueryBuilder, TData> : IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : Entity'
    typeParameters:
    - id: TQueryStrategy
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Repositories.Queries.IQueryStrategy" data-throw-if-not-resolved="false"></xref>.
    - id: TQueryBuilder
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="Cqrs.Repositories.Repository%603.QueryBuilder" data-throw-if-not-resolved="false"></xref> that will be used to build queries.
    - id: TData
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of data held in storage.
    content.vb: >-
      Public MustInherit Class Repository(Of TQueryStrategy As IQueryStrategy, TQueryBuilder As QueryBuilder(Of TQueryStrategy, TData), TData As Entity)

          Implements IRepository(Of TQueryStrategy, TData)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Azure.BlobStorage.Repositories.BlobStorageRepository`3
  - Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository`3
  - Cqrs.Azure.DocumentDb.Repositories.AzureRepository`3
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
- uid: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  id: CreateDataStoreFunction
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateDataStoreFunction
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 33
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nGets or sets the <xref href=\"System.Func%601\" data-throw-if-not-resolved=\"false\"></xref> that is used to create new instances of <xref href=\"Cqrs.DataStores.IDataStore%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Func<IDataStore<TData>> CreateDataStoreFunction { get; }
    parameters: []
    return:
      type: System.Func{Cqrs.DataStores.IDataStore{{TData}}}
    content.vb: Protected ReadOnly Property CreateDataStoreFunction As Func(Of IDataStore(Of TData))
  overload: Cqrs.Repositories.Repository`3.CreateDataStoreFunction*
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository`3.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository`3.QueryBuilder
  id: QueryBuilder
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: QueryBuilder
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 38
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nGets or sets the <span class=\"typeparamref\">TQueryBuilder</span> that will be used to build queries.\n"
  example: []
  syntax:
    content: protected TQueryBuilder QueryBuilder { get; }
    parameters: []
    return:
      type: '{TQueryBuilder}'
    content.vb: Protected ReadOnly Property QueryBuilder As TQueryBuilder
  overload: Cqrs.Repositories.Repository`3.QueryBuilder*
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories.Repository`3.TelemetryHelper
  commentId: P:Cqrs.Repositories.Repository`3.TelemetryHelper
  id: TelemetryHelper
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: TelemetryHelper
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 43
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nGets or sets the <xref href=\"cdmdotnet.Logging.ITelemetryHelper\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ITelemetryHelper TelemetryHelper { get; set; }
    parameters: []
    return:
      type: cdmdotnet.Logging.ITelemetryHelper
    content.vb: Protected Property TelemetryHelper As ITelemetryHelper
  overload: Cqrs.Repositories.Repository`3.TelemetryHelper*
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: Cqrs.Repositories.Repository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  commentId: M:Cqrs.Repositories.Repository`3.#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)
  id: '#ctor(System.Func{Cqrs.DataStores.IDataStore{`2}},`1)'
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Repository(Func<IDataStore<TData>>, TQueryBuilder)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Repository(Func<IDataStore<TData>>, TQueryBuilder)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Repository(System.Func<Cqrs.DataStores.IDataStore<TData>>, TQueryBuilder)
  type: Constructor
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: .ctor
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 48
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nInstantiates a new instance of <xref href=\"Cqrs.Repositories.Repository%603\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected Repository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder)
    parameters:
    - id: createDataStoreFunction
      type: System.Func{Cqrs.DataStores.IDataStore{{TData}}}
    - id: queryBuilder
      type: '{TQueryBuilder}'
    content.vb: Protected Sub New(createDataStoreFunction As Func(Of IDataStore(Of TData)), queryBuilder As TQueryBuilder)
  overload: Cqrs.Repositories.Repository`3.#ctor*
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Repository(Func(Of IDataStore(Of TData)), TQueryBuilder)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Repository(System.Func(Of Cqrs.DataStores.IDataStore(Of TData)), TQueryBuilder)
  name.vb: Repository(Func(Of IDataStore(Of TData)), TQueryBuilder)
- uid: Cqrs.Repositories.Repository`3.Create(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Create(`2)
  id: Create(`2)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Create(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 60
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nCreate the newly provided <span class=\"paramref\">data</span> to storage.\n"
  example: []
  syntax:
    content: public virtual void Create(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Create(data As TData)
  overload: Cqrs.Repositories.Repository`3.Create*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Create({TData})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(TData)
- uid: Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  commentId: M:Cqrs.Repositories.Repository`3.Create(System.Collections.Generic.IEnumerable{`2})
  id: Create(System.Collections.Generic.IEnumerable{`2})
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Create
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 69
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nCreate the newly provided <span class=\"paramref\">data</span> to storage.\n"
  example: []
  syntax:
    content: public virtual void Create(IEnumerable<TData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
    content.vb: Public Overridable Sub Create(data As IEnumerable(Of TData))
  overload: Cqrs.Repositories.Repository`3.Create*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(IEnumerable(Of TData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  id: Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Retrieve
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 80
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nBuilds and executes the provided <span class=\"paramref\">singleResultQuery</span>.\n"
  example: []
  syntax:
    content: public virtual ISingleResultQuery<TQueryStrategy, TData> Retrieve(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery, bool throwExceptionWhenNoQueryResults = true)
    parameters:
    - id: singleResultQuery
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
      description: The <xref href="Cqrs.Repositories.Queries.ISingleResultQuery%602" data-throw-if-not-resolved="false"></xref> to build and execute.
    - id: throwExceptionWhenNoQueryResults
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no data is found in storage.
    return:
      type: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
    content.vb: Public Overridable Function Retrieve(singleResultQuery As ISingleResultQuery(Of TQueryStrategy, TData), throwExceptionWhenNoQueryResults As Boolean = True) As ISingleResultQuery(Of TQueryStrategy, TData)
  overload: Cqrs.Repositories.Repository`3.Retrieve*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
- uid: Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  commentId: M:Cqrs.Repositories.Repository`3.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  id: Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Retrieve
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 119
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nBuilds and executes the provided <span class=\"paramref\">resultQuery</span>.\n"
  example: []
  syntax:
    content: public virtual ICollectionResultQuery<TQueryStrategy, TData> Retrieve(ICollectionResultQuery<TQueryStrategy, TData> resultQuery)
    parameters:
    - id: resultQuery
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
      description: The <xref href="Cqrs.Repositories.Queries.ICollectionResultQuery%602" data-throw-if-not-resolved="false"></xref> to build and execute.
    return:
      type: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
    content.vb: Public Overridable Function Retrieve(resultQuery As ICollectionResultQuery(Of TQueryStrategy, TData)) As ICollectionResultQuery(Of TQueryStrategy, TData)
  overload: Cqrs.Repositories.Repository`3.Retrieve*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
- uid: Cqrs.Repositories.Repository`3.Update(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Update(`2)
  id: Update(`2)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Update(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Update
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 150
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nUpdate the provided <span class=\"paramref\">data</span> in storage.\n"
  example: []
  syntax:
    content: public virtual void Update(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Update(data As TData)
  overload: Cqrs.Repositories.Repository`3.Update*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Update({TData})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update(TData)
- uid: Cqrs.Repositories.Repository`3.Delete(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Delete(`2)
  id: Delete(`2)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Delete(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Delete
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 159
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nWill mark the <span class=\"paramref\">data</span> as logically (or soft).\n"
  example: []
  syntax:
    content: public virtual void Delete(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Overridable Sub Delete(data As TData)
  overload: Cqrs.Repositories.Repository`3.Delete*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Delete({TData})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete(TData)
- uid: Cqrs.Repositories.Repository`3.DeleteAll
  commentId: M:Cqrs.Repositories.Repository`3.DeleteAll
  id: DeleteAll
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: DeleteAll()
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DeleteAll
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 168
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nDelete all contents (normally by use of a truncate operation) in storage.\n"
  example: []
  syntax:
    content: public virtual void DeleteAll()
    content.vb: Public Overridable Sub DeleteAll
  overload: Cqrs.Repositories.Repository`3.DeleteAll*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.DeleteAll
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll()
- uid: Cqrs.Repositories.Repository`3.Destroy(`2)
  commentId: M:Cqrs.Repositories.Repository`3.Destroy(`2)
  id: Destroy(`2)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Destroy(TData)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Destroy
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 177
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nRemove the provided <span class=\"paramref\">data</span> from storage.\n"
  example: []
  syntax:
    content: public void Destroy(TData data)
    parameters:
    - id: data
      type: '{TData}'
    content.vb: Public Sub Destroy(data As TData)
  overload: Cqrs.Repositories.Repository`3.Destroy*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Destroy({TData})
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy(TData)
- uid: Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.Repository`3.Load(System.Guid,System.Boolean)
  id: Load(System.Guid,System.Boolean)
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: Load(Guid, Boolean)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Load
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 188
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nLoad the <span class=\"typeparamref\">TData</span> from storage identified by the provided <span class=\"paramref\">rsn</span>.\n"
  example: []
  syntax:
    content: public virtual TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true)
    parameters:
    - id: rsn
      type: System.Guid
      description: The identifier if the <span class="typeparamref">TData</span> to load.
    - id: throwExceptionOnMissingEntity
      type: System.Boolean
      description: If true will throw an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> if no data is found in storage.
    return:
      type: '{TData}'
    content.vb: Public Overridable Function Load(rsn As Guid, throwExceptionOnMissingEntity As Boolean = True) As TData
  overload: Cqrs.Repositories.Repository`3.Load*
  implements:
  - Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Load(System.Guid,System.Boolean)
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(Guid, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load(System.Guid, System.Boolean)
- uid: Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  commentId: M:Cqrs.Repositories.Repository`3.CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  id: CreateQueryable(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})
  parent: Cqrs.Repositories.Repository`3
  langs:
  - csharp
  - vb
  name: CreateQueryable(Expression<Func<TData, Boolean>>)
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>)
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Repositories/Repository.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: CreateQueryable
    path: Framework/Cqrs/Repositories/Repository.cs
    startLine: 223
  assemblies:
  - Cqrs
  namespace: Cqrs.Repositories
  summary: "\nCalls <xref href=\"Cqrs.Repositories.Repository%603.CreateDataStoreFunction\" data-throw-if-not-resolved=\"false\"></xref> passing the <span class=\"paramref\">predicate</span>.\n"
  example: []
  syntax:
    content: protected virtual IQueryable<TData> CreateQueryable(Expression<Func<TData, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}}
      description: A function defining a filter if required.
    return:
      type: System.Linq.IQueryable{{TData}}
    content.vb: Protected Overridable Function CreateQueryable(predicate As Expression(Of Func(Of TData, Boolean))) As IQueryable(Of TData)
  overload: Cqrs.Repositories.Repository`3.CreateQueryable*
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(Expression(Of Func(Of TData, Boolean)))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable(System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean)))
  name.vb: CreateQueryable(Expression(Of Func(Of TData, Boolean)))
references:
- uid: Cqrs.DataStores.IDataStore`1
  commentId: T:Cqrs.DataStores.IDataStore`1
  isExternal: false
  name: IDataStore<TData>
  nameWithType: IDataStore<TData>
  fullName: Cqrs.DataStores.IDataStore<TData>
  nameWithType.vb: IDataStore(Of TData)
  fullName.vb: Cqrs.DataStores.IDataStore(Of TData)
  name.vb: IDataStore(Of TData)
  spec.csharp:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Repositories.Queries.IQueryStrategy
  commentId: T:Cqrs.Repositories.Queries.IQueryStrategy
  parent: Cqrs.Repositories.Queries
  isExternal: false
  name: IQueryStrategy
  nameWithType: IQueryStrategy
  fullName: Cqrs.Repositories.Queries.IQueryStrategy
- uid: Cqrs.Repositories.Repository`3.QueryBuilder
  commentId: P:Cqrs.Repositories.Repository`3.QueryBuilder
  isExternal: false
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: Cqrs.Repositories
  commentId: N:Cqrs.Repositories
  isExternal: false
  name: Cqrs.Repositories
  nameWithType: Cqrs.Repositories
  fullName: Cqrs.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.IRepository{`0,`2}
  parent: Cqrs.Repositories
  definition: Cqrs.Repositories.IRepository`2
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Repositories.Queries
  commentId: N:Cqrs.Repositories.Queries
  isExternal: false
  name: Cqrs.Repositories.Queries
  nameWithType: Cqrs.Repositories.Queries
  fullName: Cqrs.Repositories.Queries
- uid: Cqrs.Repositories.IRepository`2
  commentId: T:Cqrs.Repositories.IRepository`2
  isExternal: false
  name: IRepository<TQueryStrategy, TData>
  nameWithType: IRepository<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>
  nameWithType.vb: IRepository(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData)
  name.vb: IRepository(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Cqrs.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateDataStoreFunction*
  commentId: Overload:Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  isExternal: false
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: System.Func{Cqrs.DataStores.IDataStore{{TData}}}
  commentId: T:System.Func{Cqrs.DataStores.IDataStore{`2}}
  parent: System
  definition: System.Func`1
  name: Func<IDataStore<TData>>
  nameWithType: Func<IDataStore<TData>>
  fullName: System.Func<Cqrs.DataStores.IDataStore<TData>>
  nameWithType.vb: Func(Of IDataStore(Of TData))
  fullName.vb: System.Func(Of Cqrs.DataStores.IDataStore(Of TData))
  name.vb: Func(Of IDataStore(Of TData))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.DataStores.IDataStore`1
    name: IDataStore
    nameWithType: IDataStore
    fullName: Cqrs.DataStores.IDataStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.QueryBuilder*
  commentId: Overload:Cqrs.Repositories.Repository`3.QueryBuilder
  isExternal: false
  name: QueryBuilder
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).QueryBuilder
- uid: '{TQueryBuilder}'
  commentId: '!:TQueryBuilder'
  definition: TQueryBuilder
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: TQueryBuilder
  isExternal: false
  name: TQueryBuilder
  nameWithType: TQueryBuilder
  fullName: TQueryBuilder
- uid: cdmdotnet.Logging.ITelemetryHelper
  commentId: T:cdmdotnet.Logging.ITelemetryHelper
  parent: cdmdotnet.Logging
  isExternal: true
  name: ITelemetryHelper
  nameWithType: ITelemetryHelper
  fullName: cdmdotnet.Logging.ITelemetryHelper
- uid: Cqrs.Repositories.Repository`3.TelemetryHelper*
  commentId: Overload:Cqrs.Repositories.Repository`3.TelemetryHelper
  isExternal: false
  name: TelemetryHelper
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).TelemetryHelper
- uid: cdmdotnet.Logging
  commentId: N:cdmdotnet.Logging
  isExternal: false
  name: cdmdotnet.Logging
  nameWithType: cdmdotnet.Logging
  fullName: cdmdotnet.Logging
- uid: Cqrs.Repositories.Repository`3
  commentId: T:Cqrs.Repositories.Repository`3
  isExternal: false
  name: Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData)
  name.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Repository`3
    name: Repository
    nameWithType: Repository
    fullName: Cqrs.Repositories.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TQueryBuilder
    nameWithType: TQueryBuilder
    fullName: TQueryBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.#ctor*
  commentId: Overload:Cqrs.Repositories.Repository`3.#ctor
  isExternal: false
  name: Repository
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Repository
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Repository
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Repository
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Repository
- uid: Cqrs.Repositories.Repository`3.Create*
  commentId: Overload:Cqrs.Repositories.Repository`3.Create
  isExternal: false
  name: Create
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Create
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Create
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Create({TData})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Create(`2)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Create(`1)
  name: Create(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Create(`1)
    name: Create
    nameWithType: IRepository<TQueryStrategy, TData>.Create
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Create(`1)
    name: Create
    nameWithType: IRepository(Of TQueryStrategy, TData).Create
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.Repositories.IRepository`2.Create(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Create(`1)
  isExternal: false
  name: Create(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Create(`1)
    name: Create
    nameWithType: IRepository<TQueryStrategy, TData>.Create
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Create(`1)
    name: Create
    nameWithType: IRepository(Of TQueryStrategy, TData).Create
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: TData
  isExternal: false
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Create(System.Collections.Generic.IEnumerable{{TData}})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Create(System.Collections.Generic.IEnumerable{`2})
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  name: Create(IEnumerable<TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
    name: Create
    nameWithType: IRepository<TQueryStrategy, TData>.Create
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
    name: Create
    nameWithType: IRepository(Of TQueryStrategy, TData).Create
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: Create(IEnumerable<TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Create(IEnumerable<TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create(System.Collections.Generic.IEnumerable<TData>)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Create(IEnumerable(Of TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create(System.Collections.Generic.IEnumerable(Of TData))
  name.vb: Create(IEnumerable(Of TData))
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
    name: Create
    nameWithType: IRepository<TQueryStrategy, TData>.Create
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Create(System.Collections.Generic.IEnumerable{`1})
    name: Create
    nameWithType: IRepository(Of TQueryStrategy, TData).Create
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery`2
  isExternal: false
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Cqrs.Repositories.Repository`3.Retrieve*
  commentId: Overload:Cqrs.Repositories.Repository`3.Retrieve
  isExternal: false
  name: Retrieve
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Retrieve
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}},System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`2},System.Boolean)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
    name: Retrieve
    nameWithType: IRepository<TQueryStrategy, TData>.Retrieve
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
    name: Retrieve
    nameWithType: IRepository(Of TQueryStrategy, TData).Retrieve
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ISingleResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ISingleResultQuery`2
  name: ISingleResultQuery<TQueryStrategy, TData>
  nameWithType: ISingleResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData)
  name.vb: ISingleResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
  isExternal: true
  name: Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery<TQueryStrategy, TData>, System.Boolean)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery(Of TQueryStrategy, TData), System.Boolean)
  name.vb: Retrieve(ISingleResultQuery(Of TQueryStrategy, TData), Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
    name: Retrieve
    nameWithType: IRepository<TQueryStrategy, TData>.Retrieve
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ISingleResultQuery{`0,`1},System.Boolean)
    name: Retrieve
    nameWithType: IRepository(Of TQueryStrategy, TData).Retrieve
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ISingleResultQuery`2
    name: ISingleResultQuery
    nameWithType: ISingleResultQuery
    fullName: Cqrs.Repositories.Queries.ISingleResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery`2
  isExternal: false
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`2})
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: Retrieve
    nameWithType: IRepository<TQueryStrategy, TData>.Retrieve
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: Retrieve
    nameWithType: IRepository(Of TQueryStrategy, TData).Retrieve
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Queries.ICollectionResultQuery{{TQueryStrategy},{TData}}
  commentId: T:Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1}
  parent: Cqrs.Repositories.Queries
  definition: Cqrs.Repositories.Queries.ICollectionResultQuery`2
  name: ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType: ICollectionResultQuery<TQueryStrategy, TData>
  fullName: Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>
  nameWithType.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  fullName.vb: Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData)
  name.vb: ICollectionResultQuery(Of TQueryStrategy, TData)
  spec.csharp:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  commentId: M:Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
  isExternal: false
  name: Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType: IRepository<TQueryStrategy, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery<TQueryStrategy, TData>)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery(Of TQueryStrategy, TData))
  name.vb: Retrieve(ICollectionResultQuery(Of TQueryStrategy, TData))
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: Retrieve
    nameWithType: IRepository<TQueryStrategy, TData>.Retrieve
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Retrieve(Cqrs.Repositories.Queries.ICollectionResultQuery{`0,`1})
    name: Retrieve
    nameWithType: IRepository(Of TQueryStrategy, TData).Retrieve
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Retrieve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cqrs.Repositories.Queries.ICollectionResultQuery`2
    name: ICollectionResultQuery
    nameWithType: ICollectionResultQuery
    fullName: Cqrs.Repositories.Queries.ICollectionResultQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TQueryStrategy
    nameWithType: TQueryStrategy
    fullName: TQueryStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Update*
  commentId: Overload:Cqrs.Repositories.Repository`3.Update
  isExternal: false
  name: Update
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Update
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Update
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Update({TData})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Update(`2)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Update(`1)
  name: Update(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Update(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Update(`1)
    name: Update
    nameWithType: IRepository<TQueryStrategy, TData>.Update
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Update(`1)
    name: Update
    nameWithType: IRepository(Of TQueryStrategy, TData).Update
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Update(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Update(`1)
  isExternal: false
  name: Update(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Update(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Update(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Update(`1)
    name: Update
    nameWithType: IRepository<TQueryStrategy, TData>.Update
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Update(`1)
    name: Update
    nameWithType: IRepository(Of TQueryStrategy, TData).Update
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Delete*
  commentId: Overload:Cqrs.Repositories.Repository`3.Delete
  isExternal: false
  name: Delete
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Delete
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Delete
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Delete({TData})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Delete(`2)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Delete(`1)
  name: Delete(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Delete(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository<TQueryStrategy, TData>.Delete
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository(Of TQueryStrategy, TData).Delete
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Delete(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Delete(`1)
  isExternal: false
  name: Delete(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Delete(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Delete(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository<TQueryStrategy, TData>.Delete
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository(Of TQueryStrategy, TData).Delete
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.DeleteAll*
  commentId: Overload:Cqrs.Repositories.Repository`3.DeleteAll
  isExternal: false
  name: DeleteAll
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).DeleteAll
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.DeleteAll
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.DeleteAll
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.DeleteAll
  name: DeleteAll()
  nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll()
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll()
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.DeleteAll
    name: DeleteAll
    nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.DeleteAll
    name: DeleteAll
    nameWithType: IRepository(Of TQueryStrategy, TData).DeleteAll
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.DeleteAll
  commentId: M:Cqrs.Repositories.IRepository`2.DeleteAll
  isExternal: false
  name: DeleteAll()
  nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll()
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll()
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).DeleteAll()
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll()
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.DeleteAll
    name: DeleteAll
    nameWithType: IRepository<TQueryStrategy, TData>.DeleteAll
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.DeleteAll
    name: DeleteAll
    nameWithType: IRepository(Of TQueryStrategy, TData).DeleteAll
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).DeleteAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Destroy*
  commentId: Overload:Cqrs.Repositories.Repository`3.Destroy
  isExternal: false
  name: Destroy
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Destroy
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Destroy({TData})
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Destroy(`2)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Destroy(`1)
  name: Destroy(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
    name: Destroy
    nameWithType: IRepository<TQueryStrategy, TData>.Destroy
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
    name: Destroy
    nameWithType: IRepository(Of TQueryStrategy, TData).Destroy
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
  commentId: M:Cqrs.Repositories.IRepository`2.Destroy(`1)
  isExternal: false
  name: Destroy(TData)
  nameWithType: IRepository<TQueryStrategy, TData>.Destroy(TData)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy(TData)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Destroy(TData)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy(TData)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
    name: Destroy
    nameWithType: IRepository<TQueryStrategy, TData>.Destroy
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Destroy(`1)
    name: Destroy
    nameWithType: IRepository(Of TQueryStrategy, TData).Destroy
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.Load*
  commentId: Overload:Cqrs.Repositories.Repository`3.Load
  isExternal: false
  name: Load
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).Load
- uid: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository{`0,`2}.Load(System.Guid,System.Boolean)
  parent: Cqrs.Repositories.IRepository{{TQueryStrategy},{TData}}
  definition: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  name: Load(Guid, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: IRepository<TQueryStrategy, TData>.Load
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: IRepository(Of TQueryStrategy, TData).Load
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  commentId: M:Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
  isExternal: true
  name: Load(Guid, Boolean)
  nameWithType: IRepository<TQueryStrategy, TData>.Load(Guid, Boolean)
  fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load(System.Guid, System.Boolean)
  nameWithType.vb: IRepository(Of TQueryStrategy, TData).Load(Guid, Boolean)
  fullName.vb: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load(System.Guid, System.Boolean)
  spec.csharp:
  - uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: IRepository<TQueryStrategy, TData>.Load
    fullName: Cqrs.Repositories.IRepository<TQueryStrategy, TData>.Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Repositories.IRepository`2.Load(System.Guid,System.Boolean)
    name: Load
    nameWithType: IRepository(Of TQueryStrategy, TData).Load
    fullName: Cqrs.Repositories.IRepository(Of TQueryStrategy, TData).Load
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  commentId: P:Cqrs.Repositories.Repository`3.CreateDataStoreFunction
  isExternal: false
  name: CreateDataStoreFunction
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateDataStoreFunction
- uid: Cqrs.Repositories.Repository`3.CreateQueryable*
  commentId: Overload:Cqrs.Repositories.Repository`3.CreateQueryable
  isExternal: false
  name: CreateQueryable
  nameWithType: Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  fullName: Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable
  nameWithType.vb: Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
  fullName.vb: Cqrs.Repositories.Repository(Of TQueryStrategy, TQueryBuilder, TData).CreateQueryable
- uid: System.Linq.Expressions.Expression{System.Func{{TData},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TData, Boolean>>
  nameWithType: Expression<Func<TData, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TData, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TData, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TData, System.Boolean))
  name.vb: Expression(Of Func(Of TData, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TData}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TData>
  nameWithType: IQueryable<TData>
  fullName: System.Linq.IQueryable<TData>
  nameWithType.vb: IQueryable(Of TData)
  fullName.vb: System.Linq.IQueryable(Of TData)
  name.vb: IQueryable(Of TData)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
