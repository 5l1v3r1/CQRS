### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  id: EntityPropertyConverter
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultPropertyNameDelimiter
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  langs:
  - csharp
  - vb
  name: EntityPropertyConverter
  nameWithType: EntityPropertyConverter
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  type: Class
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: EntityPropertyConverter
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 38
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nEntityPropertyConverter class.\n"
  example: []
  syntax:
    content: public static class EntityPropertyConverter
    content.vb: Public Module EntityPropertyConverter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
  commentId: P:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
  id: DefaultSettings
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: DefaultSettings
  nameWithType: EntityPropertyConverter.DefaultSettings
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
  type: Property
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultSettings
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 40
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  syntax:
    content: public static JsonSerializerSettings DefaultSettings { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Public Shared ReadOnly Property DefaultSettings As JsonSerializerSettings
  overload: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultPropertyNameDelimiter
  commentId: F:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultPropertyNameDelimiter
  id: DefaultPropertyNameDelimiter
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: DefaultPropertyNameDelimiter
  nameWithType: EntityPropertyConverter.DefaultPropertyNameDelimiter
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultPropertyNameDelimiter
  type: Field
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: DefaultPropertyNameDelimiter
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 65
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nThe property delimiter.\n"
  example: []
  syntax:
    content: public const string DefaultPropertyNameDelimiter = "_"
    return:
      type: System.String
    content.vb: Public Const DefaultPropertyNameDelimiter As String = "_"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Flatten(System.Object,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: Flatten(Object, OperationContext)
  nameWithType: EntityPropertyConverter.Flatten(Object, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Flatten
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 75
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nTraverses object graph, flattens and converts all nested (and not nested) properties to EntityProperties, stores them in the property dictionary.\nThe keys are constructed by appending the names of the properties visited during pre-order depth first traversal from root to each end node property delimited by &apos;_&apos;.\nAllows complex objects to be stored in persistent storage systems or passed between web services in a generic way.\n"
  example: []
  syntax:
    content: public static Dictionary<string, EntityProperty> Flatten(object root, OperationContext operationContext)
    parameters:
    - id: root
      type: System.Object
      description: The object to flatten and convert.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: The result containing <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> of <xref href="Microsoft.WindowsAzure.Storage.Table.EntityProperty" data-throw-if-not-resolved="false"></xref> objects for all properties of the flattened root object.
    content.vb: Public Shared Function Flatten(root As Object, operationContext As OperationContext) As Dictionary(Of String, EntityProperty)
  overload: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object,Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Flatten(System.Object,Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: Flatten(Object, EntityPropertyConverterOptions, OperationContext)
  nameWithType: EntityPropertyConverter.Flatten(Object, EntityPropertyConverterOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten(System.Object, Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Flatten
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 89
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nTraverses object graph, flattens and converts all nested (and not nested) properties to EntityProperties, stores them in the property dictionary.\nThe keys are constructed by appending the names of the properties visited during pre-order depth first traversal from root to each end node property delimited by &apos;_&apos;.\nAllows complex objects to be stored in persistent storage systems or passed between web services in a generic way.\n"
  example: []
  syntax:
    content: public static Dictionary<string, EntityProperty> Flatten(object root, EntityPropertyConverterOptions entityPropertyConverterOptions, OperationContext operationContext)
    parameters:
    - id: root
      type: System.Object
      description: The object to flatten and convert.
    - id: entityPropertyConverterOptions
      type: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions" data-throw-if-not-resolved="false"></xref> object that specifies options for the entity property conversion.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: The result containing <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> of <xref href="Microsoft.WindowsAzure.Storage.Table.EntityProperty" data-throw-if-not-resolved="false"></xref> objects for all properties of the flattened root object.
    content.vb: Public Shared Function Flatten(root As Object, entityPropertyConverterOptions As EntityPropertyConverterOptions, operationContext As OperationContext) As Dictionary(Of String, EntityProperty)
  overload: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  id: ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: ConvertBack<T>(IDictionary<String, EntityProperty>, OperationContext)
  nameWithType: EntityPropertyConverter.ConvertBack<T>(IDictionary<String, EntityProperty>, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack<T>(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConvertBack
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 110
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReconstructs the complete object graph of type T using the flattened entity property dictionary and returns reconstructed object.\nThe property dictionary may contain only basic properties, only nested properties or a mix of both types.\n"
  example: []
  syntax:
    content: public static T ConvertBack<T>(IDictionary<string, EntityProperty> flattenedEntityProperties, OperationContext operationContext)
    parameters:
    - id: flattenedEntityProperties
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: The flattened entity property dictionary.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: T
      description: The type of the object to populate
    return:
      type: '{T}'
      description: The result containing the reconstructed object with its full object hierarchy.
    content.vb: Public Shared Function ConvertBack(Of T)(flattenedEntityProperties As IDictionary(Of String, EntityProperty), operationContext As OperationContext) As T
  overload: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack*
  nameWithType.vb: EntityPropertyConverter.ConvertBack(Of T)(IDictionary(Of String, EntityProperty), OperationContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack(Of T)(System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty), Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ConvertBack(Of T)(IDictionary(Of String, EntityProperty), OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ConvertBack``1(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter
  langs:
  - csharp
  - vb
  name: ConvertBack<T>(IDictionary<String, EntityProperty>, EntityPropertyConverterOptions, OperationContext)
  nameWithType: EntityPropertyConverter.ConvertBack<T>(IDictionary<String, EntityProperty>, EntityPropertyConverterOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack<T>(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ConvertBack
    path: Framework/Azure/Cqrs.Azure.Storage/EntityPropertyConverter.cs
    startLine: 124
  assemblies:
  - Cqrs.Azure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReconstructs the complete object graph of type T using the flattened entity property dictionary and returns reconstructed object.\nThe property dictionary may contain only basic properties, only nested properties or a mix of both types.\n"
  example: []
  syntax:
    content: public static T ConvertBack<T>(IDictionary<string, EntityProperty> flattenedEntityProperties, EntityPropertyConverterOptions entityPropertyConverterOptions, OperationContext operationContext)
    parameters:
    - id: flattenedEntityProperties
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: The flattened entity property dictionary.
    - id: entityPropertyConverterOptions
      type: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions" data-throw-if-not-resolved="false"></xref> object that specifies options for the entity property conversion.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: T
      description: The type of the object to populate
    return:
      type: '{T}'
      description: The result containing the reconstructed object with its full object hierarchy.
    content.vb: Public Shared Function ConvertBack(Of T)(flattenedEntityProperties As IDictionary(Of String, EntityProperty), entityPropertyConverterOptions As EntityPropertyConverterOptions, operationContext As OperationContext) As T
  overload: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack*
  nameWithType.vb: EntityPropertyConverter.ConvertBack(Of T)(IDictionary(Of String, EntityProperty), EntityPropertyConverterOptions, OperationContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack(Of T)(System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty), Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ConvertBack(Of T)(IDictionary(Of String, EntityProperty), EntityPropertyConverterOptions, OperationContext)
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
  isExternal: false
  name: DefaultSettings
  nameWithType: EntityPropertyConverter.DefaultSettings
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.DefaultSettings
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.OperationContext
  commentId: T:Microsoft.WindowsAzure.Storage.OperationContext
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: Microsoft.WindowsAzure.Storage.OperationContext
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityProperty
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten
  isExternal: false
  name: Flatten
  nameWithType: EntityPropertyConverter.Flatten
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.Flatten
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, EntityProperty>
  nameWithType: Dictionary<String, EntityProperty>
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>
  nameWithType.vb: Dictionary(Of String, EntityProperty)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty)
  name.vb: Dictionary(Of String, EntityProperty)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: true
  name: EntityPropertyConverterOptions
  nameWithType: EntityPropertyConverterOptions
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions
- uid: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack
  isExternal: false
  name: ConvertBack
  nameWithType: EntityPropertyConverter.ConvertBack
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.ConvertBack
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, EntityProperty>
  nameWithType: IDictionary<String, EntityProperty>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>
  nameWithType.vb: IDictionary(Of String, EntityProperty)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty)
  name.vb: IDictionary(Of String, EntityProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
