### YamlMime:ManagedReference
items:
- uid: Cqrs.Entities.Range`1
  commentId: T:Cqrs.Entities.Range`1
  id: Range`1
  parent: Cqrs.Entities
  children:
  - Cqrs.Entities.Range`1.From
  - Cqrs.Entities.Range`1.IsFromInclusive
  - Cqrs.Entities.Range`1.IsToInclusive
  - Cqrs.Entities.Range`1.To
  langs:
  - csharp
  - vb
  name: Range<TPrimitive>
  nameWithType: Range<TPrimitive>
  fullName: Cqrs.Entities.Range<TPrimitive>
  type: Class
  source:
    remote:
      path: Framework/Cqrs/Entities/Range.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Range
    path: Framework/Cqrs/Entities/Range.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Entities
  summary: "\nA range object for collecting a lower and upper limit, such as a number or date range.\n"
  example: []
  syntax:
    content: >-
      public class Range<TPrimitive>
          where TPrimitive : struct
    typeParameters:
    - id: TPrimitive
    content.vb: Public Class Range(Of TPrimitive As Structure)
  inheritance:
  - System.Object
  derivedClasses:
  - Cqrs.Entities.DateRange
  - Cqrs.Entities.DecimalRange
  - Cqrs.Entities.IntegerRange
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Range(Of TPrimitive)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive)
  name.vb: Range(Of TPrimitive)
- uid: Cqrs.Entities.Range`1.From
  commentId: P:Cqrs.Entities.Range`1.From
  id: From
  parent: Cqrs.Entities.Range`1
  langs:
  - csharp
  - vb
  name: From
  nameWithType: Range<TPrimitive>.From
  fullName: Cqrs.Entities.Range<TPrimitive>.From
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Entities/Range.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: From
    path: Framework/Cqrs/Entities/Range.cs
    startLine: 21
  assemblies:
  - Cqrs
  namespace: Cqrs.Entities
  summary: "\nThe lower limit such as a from <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TPrimitive? From { get; set; }
    parameters: []
    return:
      type: System.Nullable{{TPrimitive}}
    content.vb: Public Property From As TPrimitive?
  overload: Cqrs.Entities.Range`1.From*
  nameWithType.vb: Range(Of TPrimitive).From
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).From
- uid: Cqrs.Entities.Range`1.To
  commentId: P:Cqrs.Entities.Range`1.To
  id: To
  parent: Cqrs.Entities.Range`1
  langs:
  - csharp
  - vb
  name: To
  nameWithType: Range<TPrimitive>.To
  fullName: Cqrs.Entities.Range<TPrimitive>.To
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Entities/Range.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: To
    path: Framework/Cqrs/Entities/Range.cs
    startLine: 26
  assemblies:
  - Cqrs
  namespace: Cqrs.Entities
  summary: "\nThe upper limit such as a to <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TPrimitive? To { get; set; }
    parameters: []
    return:
      type: System.Nullable{{TPrimitive}}
    content.vb: Public Property To As TPrimitive?
  overload: Cqrs.Entities.Range`1.To*
  nameWithType.vb: Range(Of TPrimitive).To
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).To
- uid: Cqrs.Entities.Range`1.IsFromInclusive
  commentId: P:Cqrs.Entities.Range`1.IsFromInclusive
  id: IsFromInclusive
  parent: Cqrs.Entities.Range`1
  langs:
  - csharp
  - vb
  name: IsFromInclusive
  nameWithType: Range<TPrimitive>.IsFromInclusive
  fullName: Cqrs.Entities.Range<TPrimitive>.IsFromInclusive
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Entities/Range.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsFromInclusive
    path: Framework/Cqrs/Entities/Range.cs
    startLine: 31
  assemblies:
  - Cqrs
  namespace: Cqrs.Entities
  summary: "\nIs the value of <xref href=\"Cqrs.Entities.Range%601.From\" data-throw-if-not-resolved=\"false\"></xref> inclusive or not. Defaults to true.\n"
  example: []
  syntax:
    content: public bool IsFromInclusive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsFromInclusive As Boolean
  overload: Cqrs.Entities.Range`1.IsFromInclusive*
  nameWithType.vb: Range(Of TPrimitive).IsFromInclusive
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).IsFromInclusive
- uid: Cqrs.Entities.Range`1.IsToInclusive
  commentId: P:Cqrs.Entities.Range`1.IsToInclusive
  id: IsToInclusive
  parent: Cqrs.Entities.Range`1
  langs:
  - csharp
  - vb
  name: IsToInclusive
  nameWithType: Range<TPrimitive>.IsToInclusive
  fullName: Cqrs.Entities.Range<TPrimitive>.IsToInclusive
  type: Property
  source:
    remote:
      path: Framework/Cqrs/Entities/Range.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsToInclusive
    path: Framework/Cqrs/Entities/Range.cs
    startLine: 36
  assemblies:
  - Cqrs
  namespace: Cqrs.Entities
  summary: "\nIs the value of <xref href=\"Cqrs.Entities.Range%601.To\" data-throw-if-not-resolved=\"false\"></xref> inclusive or not. Defaults to true.\n"
  example: []
  syntax:
    content: public bool IsToInclusive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsToInclusive As Boolean
  overload: Cqrs.Entities.Range`1.IsToInclusive*
  nameWithType.vb: Range(Of TPrimitive).IsToInclusive
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).IsToInclusive
references:
- uid: Cqrs.Entities
  commentId: N:Cqrs.Entities
  isExternal: false
  name: Cqrs.Entities
  nameWithType: Cqrs.Entities
  fullName: Cqrs.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Cqrs.Entities.Range`1.From*
  commentId: Overload:Cqrs.Entities.Range`1.From
  isExternal: false
  name: From
  nameWithType: Range<TPrimitive>.From
  fullName: Cqrs.Entities.Range<TPrimitive>.From
  nameWithType.vb: Range(Of TPrimitive).From
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).From
- uid: System.Nullable{{TPrimitive}}
  commentId: T:System.Nullable{`0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TPrimitive>
  nameWithType: Nullable<TPrimitive>
  fullName: System.Nullable<TPrimitive>
  nameWithType.vb: Nullable(Of TPrimitive)
  fullName.vb: System.Nullable(Of TPrimitive)
  name.vb: Nullable(Of TPrimitive)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPrimitive
    nameWithType: TPrimitive
    fullName: TPrimitive
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPrimitive
    nameWithType: TPrimitive
    fullName: TPrimitive
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Entities.Range`1.To*
  commentId: Overload:Cqrs.Entities.Range`1.To
  isExternal: false
  name: To
  nameWithType: Range<TPrimitive>.To
  fullName: Cqrs.Entities.Range<TPrimitive>.To
  nameWithType.vb: Range(Of TPrimitive).To
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).To
- uid: Cqrs.Entities.Range`1.From
  commentId: P:Cqrs.Entities.Range`1.From
  isExternal: false
  name: From
  nameWithType: Range<TPrimitive>.From
  fullName: Cqrs.Entities.Range<TPrimitive>.From
  nameWithType.vb: Range(Of TPrimitive).From
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).From
- uid: Cqrs.Entities.Range`1.IsFromInclusive*
  commentId: Overload:Cqrs.Entities.Range`1.IsFromInclusive
  isExternal: false
  name: IsFromInclusive
  nameWithType: Range<TPrimitive>.IsFromInclusive
  fullName: Cqrs.Entities.Range<TPrimitive>.IsFromInclusive
  nameWithType.vb: Range(Of TPrimitive).IsFromInclusive
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).IsFromInclusive
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Entities.Range`1.To
  commentId: P:Cqrs.Entities.Range`1.To
  isExternal: false
  name: To
  nameWithType: Range<TPrimitive>.To
  fullName: Cqrs.Entities.Range<TPrimitive>.To
  nameWithType.vb: Range(Of TPrimitive).To
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).To
- uid: Cqrs.Entities.Range`1.IsToInclusive*
  commentId: Overload:Cqrs.Entities.Range`1.IsToInclusive
  isExternal: false
  name: IsToInclusive
  nameWithType: Range<TPrimitive>.IsToInclusive
  fullName: Cqrs.Entities.Range<TPrimitive>.IsToInclusive
  nameWithType.vb: Range(Of TPrimitive).IsToInclusive
  fullName.vb: Cqrs.Entities.Range(Of TPrimitive).IsToInclusive
