### YamlMime:ManagedReference
items:
- uid: Cqrs.Snapshots.ISnapshotStrategy`1
  commentId: T:Cqrs.Snapshots.ISnapshotStrategy`1
  id: ISnapshotStrategy`1
  parent: Cqrs.Snapshots
  children:
  - Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  - Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  langs:
  - csharp
  - vb
  name: ISnapshotStrategy<TAuthenticationToken>
  nameWithType: ISnapshotStrategy<TAuthenticationToken>
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ISnapshotStrategy
    path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
    startLine: 17
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nProvides information about the ability to make and get <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface ISnapshotStrategy<TAuthenticationToken>
    typeParameters:
    - id: TAuthenticationToken
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the authentication token.
    content.vb: Public Interface ISnapshotStrategy(Of TAuthenticationToken)
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken)
  name.vb: ISnapshotStrategy(Of TAuthenticationToken)
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  id: ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot{`0})
  parent: Cqrs.Snapshots.ISnapshotStrategy`1
  langs:
  - csharp
  - vb
  name: ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot<TAuthenticationToken>)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ShouldMakeSnapShot
    path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
    startLine: 24
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nIndicates if the provided <span class=\"paramref\">aggregate</span> should have a <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref> made.\nThis does NOT indicate if the provided <span class=\"paramref\">aggregate</span> can have a <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref> made or not.\n"
  example: []
  syntax:
    content: bool ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken> aggregate)
    parameters:
    - id: aggregate
      type: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
      description: The <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
    content.vb: Function ShouldMakeSnapShot(aggregate As IAggregateRoot(Of TAuthenticationToken)) As Boolean
  overload: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot*
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot(Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken))
  name.vb: ShouldMakeSnapShot(IAggregateRoot(Of TAuthenticationToken))
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  commentId: M:Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable(System.Type)
  id: IsSnapshotable(System.Type)
  parent: Cqrs.Snapshots.ISnapshotStrategy`1
  langs:
  - csharp
  - vb
  name: IsSnapshotable(Type)
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type)
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(System.Type)
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: IsSnapshotable
    path: Framework/Cqrs/Snapshots/ISnapshotStrategy.cs
    startLine: 30
  assemblies:
  - Cqrs
  namespace: Cqrs.Snapshots
  summary: "\nIndicates if the provided <span class=\"paramref\">aggregateType</span> can have a <xref href=\"Cqrs.Snapshots.Snapshot\" data-throw-if-not-resolved=\"false\"></xref> made or not.\n"
  example: []
  syntax:
    content: bool IsSnapshotable(Type aggregateType)
    parameters:
    - id: aggregateType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of <xref href="Cqrs.Domain.IAggregateRoot%601" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
    content.vb: Function IsSnapshotable(aggregateType As Type) As Boolean
  overload: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable*
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(Type)
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable(System.Type)
references:
- uid: Cqrs.Snapshots.Snapshot
  commentId: T:Cqrs.Snapshots.Snapshot
  parent: Cqrs.Snapshots
  isExternal: false
  name: Snapshot
  nameWithType: Snapshot
  fullName: Cqrs.Snapshots.Snapshot
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Cqrs.Snapshots
  commentId: N:Cqrs.Snapshots
  isExternal: false
  name: Cqrs.Snapshots
  nameWithType: Cqrs.Snapshots
  fullName: Cqrs.Snapshots
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot*
  commentId: Overload:Cqrs.Snapshots.ISnapshotStrategy`1.ShouldMakeSnapShot
  isExternal: false
  name: ShouldMakeSnapShot
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).ShouldMakeSnapShot
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable*
  commentId: Overload:Cqrs.Snapshots.ISnapshotStrategy`1.IsSnapshotable
  isExternal: false
  name: IsSnapshotable
  nameWithType: ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  fullName: Cqrs.Snapshots.ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable
  nameWithType.vb: ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
  fullName.vb: Cqrs.Snapshots.ISnapshotStrategy(Of TAuthenticationToken).IsSnapshotable
