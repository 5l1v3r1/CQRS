<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "QueryStrategy");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string aggregateRootName = stereoTypeProperties.PropertyInstances
	.Single(property => property.Name == "AggregateRootName")
	.Value;
string entityName = stereoTypeProperties.PropertyInstances
	.Single(property => property.Name == "EntityName")
	.Value;

string targetName= entityName;
if (string.IsNullOrWhiteSpace(entityName))
	targetName = string.Format("{0}Entity", aggregateRootName);

// using statements
WriteUsingStatements(this.Element);

var technology = GetEntityPersistenceTechnology(this.Element);
string baseClass= technology == "Blob" ? "Cqrs.Azure.BlobStorage.Repositories.Queries.BlobStorageQueryBuilder" : "QueryBuilder";
#>
using Cqrs.Configuration;
using Cqrs.Authentication;
using Cqrs.Repositories.Queries;
using <#= GetNamespace(((INamedElement)FindModuleElement(this.Element)).Namespace) #>.Factories;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>Builder : <#= baseClass #><<#= className #>, Entities.<#= targetName #>>, I<#= className #>Builder
	{
		public <#= className #>Builder(IDomainDataStoreFactory dataStoreFactory, IDependencyResolver dependencyResolver)
			: base(dataStoreFactory.Get<#= string.IsNullOrWhiteSpace(entityName) ? aggregateRootName : entityName #>DataStore(), dependencyResolver)
		{
		}

		#region Overrides of QueryBuilder<<#= className #>,Entities.<#= targetName #>>

		protected override IQueryable<Entities.<#= targetName #>> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<Entities.<#= targetName #>> leftHandQueryable = null)
		{
			<#= className #> queryStrategy = GetNullQueryStrategy();
			SortedSet<QueryParameter> parameters = queryPredicate.Parameters;

			IQueryable<Entities.<#= targetName #>> resultingQueryable = null;
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);

		// If statements from Methods
		var applyMethodBody = new System.Text.StringBuilder();
		var methodNameList = new List<string>();
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string partialMethodName = collectionMethod.Name;
			// This overrides the while statement below which I'm only keeping in case i change my mind.
			if (methodNameList.Contains(partialMethodName))
				continue;

			int i = 1;
			while (methodNameList.Contains(partialMethodName))
			{
				partialMethodName = string.Format("{0}{1}", partialMethodName, i++);
			}
			methodNameList.Add(partialMethodName);

			string methodParameters = GetMethodParameterTypeList(collectionMethod);
			var queryStrategyOrderMethodProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "QueryStrategyOrderMethod");
			if (queryStrategyOrderMethodProperties != null)
				methodParameters = "int";
			if (!string.IsNullOrWhiteSpace(methodParameters))
				methodParameters = "<" + methodParameters + ">";
#>
			if (queryPredicate.Name == GetFunctionName<#= methodParameters #>(queryStrategy.<#= collectionMethod.Name #>))
			{
				OnGeneratePredicate<#= partialMethodName #>(queryPredicate, leftHandQueryable, parameters, ref resultingQueryable);
				GeneratePredicate<#= partialMethodName #>(parameters, leftHandQueryable, ref resultingQueryable);
				OnGeneratedPredicate<#= partialMethodName #>(queryPredicate, leftHandQueryable, parameters, ref resultingQueryable);
				return resultingQueryable;
			}
<#
		}
#>

			resultingQueryable
				= GeneratePredicateWithPermissionScopeAny<<#=GetDomainAuthenticationTokenType(this.Element) #>>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeUser<<#=GetDomainAuthenticationTokenType(this.Element) #>>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeCompany<<#=GetDomainAuthenticationTokenType(this.Element) #>>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeCompanyAndUser<<#=GetDomainAuthenticationTokenType(this.Element) #>>(queryPredicate, leftHandQueryable);

			if (resultingQueryable != null)
				return resultingQueryable;

			throw new InvalidOperationException("No known predicate could be generated.");
		}

		#endregion
<#
		// Partial methods from Methods
		methodNameList = new List<string>();
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string partialMethodName = collectionMethod.Name;
			int i = 1;
			while (methodNameList.Contains(partialMethodName))
			{
				partialMethodName = string.Format("{0}{1}", partialMethodName, i++);
			}
			methodNameList.Add(partialMethodName);
#>

		partial void OnGeneratePredicate<#= partialMethodName #>(QueryPredicate queryPredicate, IQueryable<Entities.<#= targetName #>> leftHandQueryable, SortedSet<QueryParameter> parameters, ref IQueryable<Entities.<#= targetName #>> resultingQueryable);

		partial void GeneratePredicate<#= partialMethodName #>(SortedSet<QueryParameter> parameters, IQueryable<Entities.<#= targetName #>> leftHandQueryable, ref IQueryable<Entities.<#= targetName #>> resultingQueryable);

		partial void OnGeneratedPredicate<#= partialMethodName #>(QueryPredicate queryPredicate, IQueryable<Entities.<#= targetName #>> leftHandQueryable, SortedSet<QueryParameter> parameters, ref IQueryable<Entities.<#= targetName #>> resultingQueryable);

<#
			var queryStrategyOrderMethodProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "QueryStrategyOrderMethod");
			if (queryStrategyOrderMethodProperties != null)
			{
				applyMethodBody.AppendLine("\t\t\t\tif (sortingMethod.Method.Name == GetFunctionName<int>(queryStrategy." + partialMethodName + "))");
				applyMethodBody.AppendLine("\t\t\t\t{");
				applyMethodBody.AppendLine("\t\t\t\t\tApply" + partialMethodName + "(ref orderQueryable, index++);");
				applyMethodBody.AppendLine("\t\t\t\t}");
#>

		partial void Apply<#= partialMethodName #>(ref IOrderedQueryable<Entities.<#= targetName #>> queryable, int index);
<#
			}
#>
<#
		}
#>

		protected override void ApplySorting(<#= className #> queryStrategy, ref IQueryable<Entities.<#= targetName #>> queryable)
		{
			var orderQueryable = (IOrderedQueryable<Entities.<#= targetName #>>)queryable;

			int index = 0;
			foreach (Func<int, <#= className #>> sortingMethod in queryStrategy.SortingList)
			{
<#= applyMethodBody #>
			}
			queryable = orderQueryable;
		}

	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "QueryStrategy");
	}
#>