### YamlMime:ManagedReference
items:
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  commentId: T:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  id: AkkaAggregateRootProxy`2
  parent: Cqrs.Akka.Domain
  children:
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted
  - Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version
  langs:
  - csharp
  - vb
  name: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>
  type: Class
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: AkkaAggregateRootProxy
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 17
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: 'public class AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> : IAkkaAggregateRootProxy<TAggregateRoot>, IAggregateRoot<TAuthenticationToken>'
    typeParameters:
    - id: TAuthenticationToken
    - id: TAggregateRoot
    content.vb: >-
      Public Class AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot)
          Implements IAkkaAggregateRootProxy(Of TAggregateRoot), IAggregateRoot(Of TAuthenticationToken)
  inheritance:
  - System.Object
  implements:
  - Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot)
  name.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot)
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference
  id: ActorReference
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: ActorReference
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.ActorReference
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.ActorReference
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ActorReference
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 23
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public IActorRef ActorReference { get; }
    parameters: []
    return:
      type: Akka.Actor.IActorRef
    content.vb: Public ReadOnly Property ActorReference As IActorRef
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference*
  implements:
  - Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}.ActorReference
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).ActorReference
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).ActorReference
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate
  id: Aggregate
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: Aggregate
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Aggregate
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Aggregate
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Aggregate
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 25
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public TAggregateRoot Aggregate { get; protected set; }
    parameters: []
    return:
      type: '{TAggregateRoot}'
    content.vb: Public Property Aggregate As TAggregateRoot
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate*
  implements:
  - Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}.Aggregate
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Aggregate
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Aggregate
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id
  id: Id
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Id
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Id
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Id
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 29
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public virtual Guid Id { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public Overridable ReadOnly Property Id As Guid
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id*
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.Id
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Id
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Id
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version
  commentId: P:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version
  id: Version
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Version
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Version
  type: Property
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Version
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 34
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public virtual int Version { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Version As Integer
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version*
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.Version
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Version
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Version
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges
  id: GetUncommittedChanges
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: GetUncommittedChanges()
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.GetUncommittedChanges()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.GetUncommittedChanges()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: GetUncommittedChanges
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 39
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public virtual IEnumerable<IEvent<TAuthenticationToken>> GetUncommittedChanges()
    return:
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Overridable Function GetUncommittedChanges As IEnumerable(Of IEvent(Of TAuthenticationToken))
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges*
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).GetUncommittedChanges()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).GetUncommittedChanges()
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted
  id: MarkChangesAsCommitted
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: MarkChangesAsCommitted()
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.MarkChangesAsCommitted()
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.MarkChangesAsCommitted()
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: MarkChangesAsCommitted
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 44
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public virtual void MarkChangesAsCommitted()
    content.vb: Public Overridable Sub MarkChangesAsCommitted
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted*
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).MarkChangesAsCommitted()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).MarkChangesAsCommitted()
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  id: LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2
  langs:
  - csharp
  - vb
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  type: Method
  source:
    remote:
      path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: LoadFromHistory
    path: Framework/Akka.Net/Cqrs.Akka/Domain/AkkaAggregateRootProxy.cs
    startLine: 49
  assemblies:
  - Cqrs.Akka
  namespace: Cqrs.Akka.Domain
  syntax:
    content: public virtual void LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>> history)
    parameters:
    - id: history
      type: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
    content.vb: Public Overridable Sub LoadFromHistory(history As IEnumerable(Of IEvent(Of TAuthenticationToken)))
  overload: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory*
  implements:
  - Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
references:
- uid: Cqrs.Akka.Domain
  commentId: N:Cqrs.Akka.Domain
  isExternal: false
  name: Cqrs.Akka.Domain
  nameWithType: Cqrs.Akka.Domain
  fullName: Cqrs.Akka.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}
  commentId: T:Cqrs.Akka.Domain.IAkkaAggregateRootProxy{`1}
  parent: Cqrs.Akka.Domain
  definition: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  name: IAkkaAggregateRootProxy<TAggregateRoot>
  nameWithType: IAkkaAggregateRootProxy<TAggregateRoot>
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregateRoot>
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregateRoot)
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregateRoot)
  name.vb: IAkkaAggregateRootProxy(Of TAggregateRoot)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
    name: IAkkaAggregateRootProxy
    nameWithType: IAkkaAggregateRootProxy
    fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
    name: IAkkaAggregateRootProxy
    nameWithType: IAkkaAggregateRootProxy
    fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregateRoot
    nameWithType: TAggregateRoot
    fullName: TAggregateRoot
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  commentId: T:Cqrs.Domain.IAggregateRoot{`0}
  parent: Cqrs.Domain
  definition: Cqrs.Domain.IAggregateRoot`1
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  commentId: T:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
  isExternal: false
  name: IAkkaAggregateRootProxy<TAggregate>
  nameWithType: IAkkaAggregateRootProxy<TAggregate>
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate)
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate)
  name.vb: IAkkaAggregateRootProxy(Of TAggregate)
  spec.csharp:
  - uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
    name: IAkkaAggregateRootProxy
    nameWithType: IAkkaAggregateRootProxy
    fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggregate
    nameWithType: TAggregate
    fullName: TAggregate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1
    name: IAkkaAggregateRootProxy
    nameWithType: IAkkaAggregateRootProxy
    fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggregate
    nameWithType: TAggregate
    fullName: TAggregate
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1
  commentId: T:Cqrs.Domain.IAggregateRoot`1
  isExternal: false
  name: IAggregateRoot<TAuthenticationToken>
  nameWithType: IAggregateRoot<TAuthenticationToken>
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken)
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken)
  name.vb: IAggregateRoot(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1
    name: IAggregateRoot
    nameWithType: IAggregateRoot
    fullName: Cqrs.Domain.IAggregateRoot
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain
  commentId: N:Cqrs.Domain
  isExternal: false
  name: Cqrs.Domain
  nameWithType: Cqrs.Domain
  fullName: Cqrs.Domain
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.ActorReference
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.ActorReference
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).ActorReference
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).ActorReference
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy{`1}.ActorReference
  parent: Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}
  definition: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  name: ActorReference
  nameWithType: IAkkaAggregateRootProxy<TAggregateRoot>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregateRoot>.ActorReference
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregateRoot).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregateRoot).ActorReference
- uid: Akka.Actor.IActorRef
  commentId: T:Akka.Actor.IActorRef
  parent: Akka.Actor
  isExternal: true
  name: IActorRef
  nameWithType: IActorRef
  fullName: Akka.Actor.IActorRef
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.ActorReference
  isExternal: false
  name: ActorReference
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.ActorReference
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.ActorReference
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).ActorReference
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).ActorReference
- uid: Akka.Actor
  commentId: N:Akka.Actor
  isExternal: false
  name: Akka.Actor
  nameWithType: Akka.Actor
  fullName: Akka.Actor
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Aggregate
  isExternal: false
  name: Aggregate
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Aggregate
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Aggregate
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Aggregate
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Aggregate
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}.Aggregate
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy{`1}.Aggregate
  parent: Cqrs.Akka.Domain.IAkkaAggregateRootProxy{{TAggregateRoot}}
  definition: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  name: Aggregate
  nameWithType: IAkkaAggregateRootProxy<TAggregateRoot>.Aggregate
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregateRoot>.Aggregate
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregateRoot).Aggregate
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregateRoot).Aggregate
- uid: '{TAggregateRoot}'
  commentId: '!:TAggregateRoot'
  definition: TAggregateRoot
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  commentId: P:Cqrs.Akka.Domain.IAkkaAggregateRootProxy`1.Aggregate
  isExternal: false
  name: Aggregate
  nameWithType: IAkkaAggregateRootProxy<TAggregate>.Aggregate
  fullName: Cqrs.Akka.Domain.IAkkaAggregateRootProxy<TAggregate>.Aggregate
  nameWithType.vb: IAkkaAggregateRootProxy(Of TAggregate).Aggregate
  fullName.vb: Cqrs.Akka.Domain.IAkkaAggregateRootProxy(Of TAggregate).Aggregate
- uid: TAggregateRoot
  isExternal: false
  name: TAggregateRoot
  nameWithType: TAggregateRoot
  fullName: TAggregateRoot
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Id
  isExternal: false
  name: Id
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Id
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Id
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Id
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Id
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.Id
  commentId: P:Cqrs.Domain.IAggregateRoot{`0}.Id
  parent: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRoot`1.Id
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Cqrs.Domain.IAggregateRoot`1.Id
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Id
  isExternal: false
  name: Id
  nameWithType: IAggregateRoot<TAuthenticationToken>.Id
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Id
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Id
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Id
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.Version
  isExternal: false
  name: Version
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Version
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.Version
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Version
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).Version
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.Version
  commentId: P:Cqrs.Domain.IAggregateRoot{`0}.Version
  parent: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRoot`1.Version
  name: Version
  nameWithType: IAggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Version
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cqrs.Domain.IAggregateRoot`1.Version
  commentId: P:Cqrs.Domain.IAggregateRoot`1.Version
  isExternal: false
  name: Version
  nameWithType: IAggregateRoot<TAuthenticationToken>.Version
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.Version
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).Version
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).Version
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.GetUncommittedChanges
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.GetUncommittedChanges
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).GetUncommittedChanges
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).GetUncommittedChanges
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.GetUncommittedChanges
  commentId: M:Cqrs.Domain.IAggregateRoot{`0}.GetUncommittedChanges
  parent: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
  name: GetUncommittedChanges()
  nameWithType: IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}}
  commentId: T:System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEvent<TAuthenticationToken>>
  nameWithType: IEnumerable<IEvent<TAuthenticationToken>>
  fullName: System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>
  nameWithType.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken))
  name.vb: IEnumerable(Of IEvent(Of TAuthenticationToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
  commentId: M:Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
  isExternal: false
  name: GetUncommittedChanges()
  nameWithType: IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges()
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges()
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.GetUncommittedChanges
    name: GetUncommittedChanges
    nameWithType: IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).GetUncommittedChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.MarkChangesAsCommitted
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.MarkChangesAsCommitted
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).MarkChangesAsCommitted
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).MarkChangesAsCommitted
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.IAggregateRoot{`0}.MarkChangesAsCommitted
  parent: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
  name: MarkChangesAsCommitted()
  nameWithType: IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
  commentId: M:Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
  isExternal: false
  name: MarkChangesAsCommitted()
  nameWithType: IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted()
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.MarkChangesAsCommitted
    name: MarkChangesAsCommitted
    nameWithType: IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).MarkChangesAsCommitted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory*
  commentId: Overload:Cqrs.Akka.Domain.AkkaAggregateRootProxy`2.LoadFromHistory
  isExternal: false
  name: LoadFromHistory
  nameWithType: AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.LoadFromHistory
  fullName: Cqrs.Akka.Domain.AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot>.LoadFromHistory
  nameWithType.vb: AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).LoadFromHistory
  fullName.vb: Cqrs.Akka.Domain.AkkaAggregateRootProxy(Of TAuthenticationToken, TAggregateRoot).LoadFromHistory
- uid: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{{TAuthenticationToken}}})
  commentId: M:Cqrs.Domain.IAggregateRoot{`0}.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  parent: Cqrs.Domain.IAggregateRoot{{TAuthenticationToken}}
  definition: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: IAggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: IAggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  commentId: M:Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
  isExternal: true
  name: LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  nameWithType: IAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>)
  fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.LoadFromHistory(System.Collections.Generic.IEnumerable<Cqrs.Events.IEvent<TAuthenticationToken>>)
  nameWithType.vb: IAggregateRoot(Of TAuthenticationToken).LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  fullName.vb: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).LoadFromHistory(System.Collections.Generic.IEnumerable(Of Cqrs.Events.IEvent(Of TAuthenticationToken)))
  name.vb: LoadFromHistory(IEnumerable(Of IEvent(Of TAuthenticationToken)))
  spec.csharp:
  - uid: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: IAggregateRoot<TAuthenticationToken>.LoadFromHistory
    fullName: Cqrs.Domain.IAggregateRoot<TAuthenticationToken>.LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cqrs.Domain.IAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Cqrs.Events.IEvent{`0}})
    name: LoadFromHistory
    nameWithType: IAggregateRoot(Of TAuthenticationToken).LoadFromHistory
    fullName: Cqrs.Domain.IAggregateRoot(Of TAuthenticationToken).LoadFromHistory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cqrs.Events.IEvent`1
    name: IEvent
    nameWithType: IEvent
    fullName: Cqrs.Events.IEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
