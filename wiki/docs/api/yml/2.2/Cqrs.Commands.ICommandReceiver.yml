### YamlMime:ManagedReference
items:
- uid: Cqrs.Commands.ICommandReceiver
  commentId: T:Cqrs.Commands.ICommandReceiver
  id: ICommandReceiver
  parent: Cqrs.Commands
  children:
  - Cqrs.Commands.ICommandReceiver.Start
  langs:
  - csharp
  - vb
  name: ICommandReceiver
  nameWithType: ICommandReceiver
  fullName: Cqrs.Commands.ICommandReceiver
  type: Interface
  source:
    remote:
      path: Framework/Cqrs/Commands/ICommandReceiver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: ICommandReceiver
    path: Framework/Cqrs/Commands/ICommandReceiver.cs
    startLine: 15
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nReceives instances of a <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> from the command bus.\n"
  example: []
  syntax:
    content: public interface ICommandReceiver
    content.vb: Public Interface ICommandReceiver
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cqrs.Commands.ICommandReceiver.Start
  commentId: M:Cqrs.Commands.ICommandReceiver.Start
  id: Start
  parent: Cqrs.Commands.ICommandReceiver
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: ICommandReceiver.Start()
  fullName: Cqrs.Commands.ICommandReceiver.Start()
  type: Method
  source:
    remote:
      path: Framework/Cqrs/Commands/ICommandReceiver.cs
      branch: features/documentation
      repo: https://github.com/Chinchilla-Software-Com/CQRS.git
    id: Start
    path: Framework/Cqrs/Commands/ICommandReceiver.cs
    startLine: 20
  assemblies:
  - Cqrs
  namespace: Cqrs.Commands
  summary: "\nStarts listening and processing instances of <xref href=\"Cqrs.Commands.ICommand%601\" data-throw-if-not-resolved=\"false\"></xref> from the command bus.\n"
  example: []
  syntax:
    content: void Start()
    content.vb: Sub Start
  overload: Cqrs.Commands.ICommandReceiver.Start*
references:
- uid: Cqrs.Commands.ICommand`1
  commentId: T:Cqrs.Commands.ICommand`1
  isExternal: false
  name: ICommand<TAuthenticationToken>
  nameWithType: ICommand<TAuthenticationToken>
  fullName: Cqrs.Commands.ICommand<TAuthenticationToken>
  nameWithType.vb: ICommand(Of TAuthenticationToken)
  fullName.vb: Cqrs.Commands.ICommand(Of TAuthenticationToken)
  name.vb: ICommand(Of TAuthenticationToken)
  spec.csharp:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cqrs.Commands.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: Cqrs.Commands.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAuthenticationToken
    nameWithType: TAuthenticationToken
    fullName: TAuthenticationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Cqrs.Commands
  commentId: N:Cqrs.Commands
  isExternal: false
  name: Cqrs.Commands
  nameWithType: Cqrs.Commands
  fullName: Cqrs.Commands
- uid: Cqrs.Commands.ICommandReceiver.Start*
  commentId: Overload:Cqrs.Commands.ICommandReceiver.Start
  isExternal: false
  name: Start
  nameWithType: ICommandReceiver.Start
  fullName: Cqrs.Commands.ICommandReceiver.Start
