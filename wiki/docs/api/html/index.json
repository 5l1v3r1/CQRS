{
  "wiki/docs/api/2.2/html/System.Web.Helpers.html": {
    "href": "wiki/docs/api/2.2/html/System.Web.Helpers.html",
    "title": "Namespace System.Web.Helpers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace System.Web.Helpers Classes DynamicJsonArray DynamicJsonObject Json"
  },
  "wiki/docs/api/2.2/html/System.Web.Helpers.Json.html": {
    "href": "wiki/docs/api/2.2/html/System.Web.Helpers.Json.html",
    "title": "Class Json | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Json Inheritance System.Object Json Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Web.Helpers Assembly : Cqrs.WebApi.dll Syntax public static class Json Methods Decode(String) Declaration public static dynamic Decode(string value) Parameters Type Name Description System.String value Returns Type Description System.Object Decode(String, Type) Declaration public static dynamic Decode(string value, Type targetType) Parameters Type Name Description System.String value System.Type targetType Returns Type Description System.Object Decode<T>(String) Declaration public static T Decode<T>(string value) Parameters Type Name Description System.String value Returns Type Description T Type Parameters Name Description T Encode(Object) Declaration public static string Encode(object value) Parameters Type Name Description System.Object value Returns Type Description System.String Write(Object, TextWriter) Declaration public static void Write(object value, TextWriter writer) Parameters Type Name Description System.Object value System.IO.TextWriter writer"
  },
  "wiki/docs/api/2.2/html/System.Web.Helpers.DynamicJsonObject.html": {
    "href": "wiki/docs/api/2.2/html/System.Web.Helpers.DynamicJsonObject.html",
    "title": "Class DynamicJsonObject | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DynamicJsonObject Inheritance System.Object System.Dynamic.DynamicObject DynamicJsonObject Inherited Members System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder) System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, System.Object) System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, System.Object) System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[]) System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Web.Helpers Assembly : Cqrs.WebApi.dll Syntax public class DynamicJsonObject : DynamicObject, IDynamicMetaObjectProvider Constructors DynamicJsonObject(IDictionary<String, Object>) Declaration public DynamicJsonObject(IDictionary<string, object> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > values Methods GetDynamicMemberNames() Declaration public override IEnumerable<string> GetDynamicMemberNames() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Overrides System.Dynamic.DynamicObject.GetDynamicMemberNames() TryConvert(ConvertBinder, out Object) Declaration public override bool TryConvert(ConvertBinder binder, out object result) Parameters Type Name Description System.Dynamic.ConvertBinder binder System.Object result Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, System.Object) TryGetIndex(GetIndexBinder, Object[], out Object) Declaration public override bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result) Parameters Type Name Description System.Dynamic.GetIndexBinder binder System.Object [] indexes System.Object result Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], System.Object) TryGetMember(GetMemberBinder, out Object) Declaration public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters Type Name Description System.Dynamic.GetMemberBinder binder System.Object result Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, System.Object) TrySetIndex(SetIndexBinder, Object[], Object) Declaration public override bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value) Parameters Type Name Description System.Dynamic.SetIndexBinder binder System.Object [] indexes System.Object value Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object) TrySetMember(SetMemberBinder, Object) Declaration public override bool TrySetMember(SetMemberBinder binder, object value) Parameters Type Name Description System.Dynamic.SetMemberBinder binder System.Object value Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object)"
  },
  "wiki/docs/api/2.2/html/System.Web.Helpers.DynamicJsonArray.html": {
    "href": "wiki/docs/api/2.2/html/System.Web.Helpers.DynamicJsonArray.html",
    "title": "Class DynamicJsonArray | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DynamicJsonArray Inheritance System.Object System.Dynamic.DynamicObject DynamicJsonArray Inherited Members System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object) System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder) System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, System.Object) System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, System.Object) System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object) System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[]) System.Dynamic.DynamicObject.GetDynamicMemberNames() System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Web.Helpers Assembly : Cqrs.WebApi.dll Syntax public class DynamicJsonArray : DynamicObject, IDynamicMetaObjectProvider, IEnumerable<object>, IEnumerable Constructors DynamicJsonArray(Object[]) Declaration public DynamicJsonArray(object[] arrayValues) Parameters Type Name Description System.Object [] arrayValues Properties Item[Int32] Declaration public dynamic this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Object Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() TryConvert(ConvertBinder, out Object) Declaration public override bool TryConvert(ConvertBinder binder, out object result) Parameters Type Name Description System.Dynamic.ConvertBinder binder System.Object result Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, System.Object) TryGetMember(GetMemberBinder, out Object) Declaration public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters Type Name Description System.Dynamic.GetMemberBinder binder System.Object result Returns Type Description System.Boolean Overrides System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, System.Object) Operators Implicit(DynamicJsonArray to Array) Declaration public static implicit operator Array(DynamicJsonArray obj) Parameters Type Name Description DynamicJsonArray obj Returns Type Description System.Array Implicit(DynamicJsonArray to Object[]) Declaration public static implicit operator object[](DynamicJsonArray obj) Parameters Type Name Description DynamicJsonArray obj Returns Type Description System.Object [] Explicit Interface Implementations IEnumerable<Object>.GetEnumerator() Declaration IEnumerator<object> IEnumerable<object>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Extension Methods SqlDataStoreExtensions.Single<TEntity, TDbEntity>(IEnumerable<TEntity>)"
  },
  "wiki/docs/api/2.2/html/System.Linq.html": {
    "href": "wiki/docs/api/2.2/html/System.Linq.html",
    "title": "Namespace System.Linq | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace System.Linq Classes AzureDocumentDbDataStoreExtensions Provides a set of static (Shared in Visual Basic) methods for querying objects that inherit AzureDocumentDbDataStore<TData> ."
  },
  "wiki/docs/api/2.2/html/System.Linq.AzureDocumentDbDataStoreExtensions.html": {
    "href": "wiki/docs/api/2.2/html/System.Linq.AzureDocumentDbDataStoreExtensions.html",
    "title": "Class AzureDocumentDbDataStoreExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbDataStoreExtensions Provides a set of static (Shared in Visual Basic) methods for querying objects that inherit AzureDocumentDbDataStore<TData> . Inheritance System.Object AzureDocumentDbDataStoreExtensions Namespace : System.Linq Assembly : Cqrs.Azure.DocumentDb.dll Syntax public static class AzureDocumentDbDataStoreExtensions : object Methods First<TData>(AzureDocumentDbDataStore<TData>) Returns the first element of the sequence. Declaration public static TData First<TData>(this AzureDocumentDbDataStore<TData> source)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Returns Type Description TData The first element of the sequence. Type Parameters Name Description TData The type of the elements of source. First<TData>(AzureDocumentDbDataStore<TData>, Func<TData, Boolean>) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists. Declaration public static TData First<TData>(this AzureDocumentDbDataStore<TData> source, Func<TData, bool> predicate)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Func <TData, System.Boolean > predicate A function to test an element for a condition. Returns Type Description TData The first element of the sequence. Type Parameters Name Description TData The type of the elements of source. FirstOrDefault<TData>(AzureDocumentDbDataStore<TData>) Returns the first element of the sequence that satisfies a condition or a default value if no such element is found. Declaration public static TData FirstOrDefault<TData>(this AzureDocumentDbDataStore<TData> source)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Returns Type Description TData The first element of the sequence. Type Parameters Name Description TData The type of the elements of source. FirstOrDefault<TData>(AzureDocumentDbDataStore<TData>, Func<TData, Boolean>) Returns the first element of a sequence, or a default value if the sequence contains no elements. Declaration public static TData FirstOrDefault<TData>(this AzureDocumentDbDataStore<TData> source, Func<TData, bool> predicate)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Func <TData, System.Boolean > predicate A function to test an element for a condition. Returns Type Description TData The first element of the sequence. Type Parameters Name Description TData The type of the elements of source. Single<TData>(AzureDocumentDbDataStore<TData>) Returns the only element of the sequence, and throws an exception if there is not exactly one element in the sequence. Declaration public static TData Single<TData>(this AzureDocumentDbDataStore<TData> source)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Returns Type Description TData The single element of the sequence. Type Parameters Name Description TData The type of the elements of source. Single<TData>(AzureDocumentDbDataStore<TData>, Func<TData, Boolean>) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists. Declaration public static TData Single<TData>(this AzureDocumentDbDataStore<TData> source, Func<TData, bool> predicate)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Func <TData, System.Boolean > predicate A function to test an element for a condition. Returns Type Description TData The single element of the sequence. Type Parameters Name Description TData The type of the elements of source. SingleOrDefault<TData>(AzureDocumentDbDataStore<TData>) Returns the only element of the sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence. Declaration public static TData SingleOrDefault<TData>(this AzureDocumentDbDataStore<TData> source)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Returns Type Description TData The single element of the sequence. Type Parameters Name Description TData The type of the elements of source. SingleOrDefault<TData>(AzureDocumentDbDataStore<TData>, Func<TData, Boolean>) Returns the only element of the sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition. Declaration public static TData SingleOrDefault<TData>(this AzureDocumentDbDataStore<TData> source, Func<TData, bool> predicate)where TData : AzureDocumentDbEntity Parameters Type Name Description AzureDocumentDbDataStore <TData> source The sequence to type as . Func <TData, System.Boolean > predicate A function to test an element for a condition. Returns Type Description TData The single element of the sequence. Type Parameters Name Description TData The type of the elements of source."
  },
  "wiki/docs/api/2.2/html/Microsoft.WindowsAzure.Storage.Table.html": {
    "href": "wiki/docs/api/2.2/html/Microsoft.WindowsAzure.Storage.Table.html",
    "title": "Namespace Microsoft.WindowsAzure.Storage.Table | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Microsoft.WindowsAzure.Storage.Table Classes EntityPropertyConverter EntityPropertyConverter class."
  },
  "wiki/docs/api/2.2/html/Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.html": {
    "href": "wiki/docs/api/2.2/html/Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverter.html",
    "title": "Class EntityPropertyConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EntityPropertyConverter EntityPropertyConverter class. Inheritance System.Object EntityPropertyConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.WindowsAzure.Storage.Table Assembly : Cqrs.Azure.Storage.dll Syntax public static class EntityPropertyConverter Fields DefaultPropertyNameDelimiter The property delimiter. Declaration public const string DefaultPropertyNameDelimiter = \"_\" Field Value Type Description System.String Properties DefaultSettings The default Newtonsoft.Json.JsonSerializerSettings to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods ConvertBack<T>(IDictionary<String, EntityProperty>, OperationContext) Reconstructs the complete object graph of type T using the flattened entity property dictionary and returns reconstructed object. The property dictionary may contain only basic properties, only nested properties or a mix of both types. Declaration public static T ConvertBack<T>(IDictionary<string, EntityProperty> flattenedEntityProperties, OperationContext operationContext) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , Microsoft.WindowsAzure.Storage.Table.EntityProperty > flattenedEntityProperties The flattened entity property dictionary. Microsoft.WindowsAzure.Storage.OperationContext operationContext An Microsoft.WindowsAzure.Storage.OperationContext object that represents the context for the current operation. Returns Type Description T The result containing the reconstructed object with its full object hierarchy. Type Parameters Name Description T The type of the object to populate ConvertBack<T>(IDictionary<String, EntityProperty>, EntityPropertyConverterOptions, OperationContext) Reconstructs the complete object graph of type T using the flattened entity property dictionary and returns reconstructed object. The property dictionary may contain only basic properties, only nested properties or a mix of both types. Declaration public static T ConvertBack<T>(IDictionary<string, EntityProperty> flattenedEntityProperties, EntityPropertyConverterOptions entityPropertyConverterOptions, OperationContext operationContext) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , Microsoft.WindowsAzure.Storage.Table.EntityProperty > flattenedEntityProperties The flattened entity property dictionary. Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions entityPropertyConverterOptions A Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions object that specifies options for the entity property conversion. Microsoft.WindowsAzure.Storage.OperationContext operationContext An Microsoft.WindowsAzure.Storage.OperationContext object that represents the context for the current operation. Returns Type Description T The result containing the reconstructed object with its full object hierarchy. Type Parameters Name Description T The type of the object to populate Flatten(Object, OperationContext) Traverses object graph, flattens and converts all nested (and not nested) properties to EntityProperties, stores them in the property dictionary. The keys are constructed by appending the names of the properties visited during pre-order depth first traversal from root to each end node property delimited by '_'. Allows complex objects to be stored in persistent storage systems or passed between web services in a generic way. Declaration public static Dictionary<string, EntityProperty> Flatten(object root, OperationContext operationContext) Parameters Type Name Description System.Object root The object to flatten and convert. Microsoft.WindowsAzure.Storage.OperationContext operationContext An Microsoft.WindowsAzure.Storage.OperationContext object that represents the context for the current operation. Returns Type Description System.Collections.Generic.Dictionary < System.String , Microsoft.WindowsAzure.Storage.Table.EntityProperty > The result containing System.Collections.Generic.IDictionary<TKey, TValue> of Microsoft.WindowsAzure.Storage.Table.EntityProperty objects for all properties of the flattened root object. Flatten(Object, EntityPropertyConverterOptions, OperationContext) Traverses object graph, flattens and converts all nested (and not nested) properties to EntityProperties, stores them in the property dictionary. The keys are constructed by appending the names of the properties visited during pre-order depth first traversal from root to each end node property delimited by '_'. Allows complex objects to be stored in persistent storage systems or passed between web services in a generic way. Declaration public static Dictionary<string, EntityProperty> Flatten(object root, EntityPropertyConverterOptions entityPropertyConverterOptions, OperationContext operationContext) Parameters Type Name Description System.Object root The object to flatten and convert. Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions entityPropertyConverterOptions A Microsoft.WindowsAzure.Storage.Table.EntityPropertyConverterOptions object that specifies options for the entity property conversion. Microsoft.WindowsAzure.Storage.OperationContext operationContext An Microsoft.WindowsAzure.Storage.OperationContext object that represents the context for the current operation. Returns Type Description System.Collections.Generic.Dictionary < System.String , Microsoft.WindowsAzure.Storage.Table.EntityProperty > The result containing System.Collections.Generic.IDictionary<TKey, TValue> of Microsoft.WindowsAzure.Storage.Table.EntityProperty objects for all properties of the flattened root object."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.html",
    "title": "Namespace Cqrs.WebApi | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi Classes CqrsApiController A System.Web.Http.ApiController that expects the Token to be sent as a System.Net.Http.Headers.HttpHeaders with a key whose name is defined by the System.Configuration.ConfigurationManager.AppSettings \"Cqrs.Web.AuthenticationTokenName\", in accordance with OAuth specifications CqrsApiController<TAuthenticationToken> A System.Web.Http.ApiController that expects the Token to be sent as a System.Net.Http.Headers.HttpHeaders with a key of \"X-Token\", in accordance with OAuth specifications CqrsEventApiController<TSingleSignOnToken> A CqrsApiController that includes an implementation of the GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) method CqrsHttpApplicationWithSignalR<TAuthenticationToken> A CqrsHttpApplication that uses the GlobalEventToHubProxy<TAuthenticationToken> to automatically proxy all IEvent<TAuthenticationToken> to SignalR CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> A CqrsHttpApplication that allows you to specify how IEvent<TAuthenticationToken> are sent to SignalR. HelpPageConfig<TAuthenticationToken> A start-up configuration class for the auto documenting features. HelpPageConfig<TAuthenticationToken>.UserCreatedEvent A sample IEvent<TAuthenticationToken> used for API documentation generation. HttpResponseMessage<TData> A System.Net.Http.HttpResponseMessage that supports auto self-documenting generation."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.html",
    "title": "Namespace Cqrs.WebApi.SignalR.Hubs | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.SignalR.Hubs Classes NotificationHub Sends IEvent<TAuthenticationToken> to different groups of users via a SignalR Microsoft.AspNet.SignalR.Hub . SignalRStartUp A Start-up class for SignalR. wired in using Microsoft.Owin.OwinStartupAttribute . Interfaces INotificationHub Sends IEvent<TAuthenticationToken> to different groups of users. ISingleSignOnTokenNotificationHub Sends IEvent<TAuthenticationToken> to different groups of users."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.SignalRStartUp.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.SignalRStartUp.html",
    "title": "Class SignalRStartUp | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SignalRStartUp A Start-up class for SignalR. wired in using Microsoft.Owin.OwinStartupAttribute . Inheritance System.Object SignalRStartUp Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.SignalR.Hubs Assembly : Cqrs.WebApi.dll Syntax public class SignalRStartUp Constructors SignalRStartUp() Instantiates a new instance of SignalRStartUp creating a new instance of ConfigurationManager . Declaration public SignalRStartUp() SignalRStartUp(IConfigurationManager) Instantiates a new instance of SignalRStartUp with the provided configurationManager . Declaration public SignalRStartUp(IConfigurationManager configurationManager) Parameters Type Name Description IConfigurationManager configurationManager Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration public IConfigurationManager ConfigurationManager { get; set; } Property Value Type Description IConfigurationManager Methods Configuration(IAppBuilder) Configure SignalR to run. Declaration public virtual void Configuration(IAppBuilder app) Parameters Type Name Description Owin.IAppBuilder app"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.NotificationHub.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.NotificationHub.html",
    "title": "Class NotificationHub | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NotificationHub Sends IEvent<TAuthenticationToken> to different groups of users via a SignalR Microsoft.AspNet.SignalR.Hub . Inheritance System.Object Microsoft.AspNet.SignalR.Hubs.HubBase Microsoft.AspNet.SignalR.Hub NotificationHub Inherited Members Microsoft.AspNet.SignalR.Hub.Clients Microsoft.AspNet.SignalR.Hubs.HubBase.OnDisconnected(System.Boolean) Microsoft.AspNet.SignalR.Hubs.HubBase.Dispose(System.Boolean) Microsoft.AspNet.SignalR.Hubs.HubBase.Dispose() Microsoft.AspNet.SignalR.Hubs.HubBase.Microsoft.AspNet.SignalR.Hubs.IHub.Clients Microsoft.AspNet.SignalR.Hubs.HubBase.Context Microsoft.AspNet.SignalR.Hubs.HubBase.Groups System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.SignalR.Hubs Assembly : Cqrs.WebApi.dll Syntax public class NotificationHub : Hub, IHub, IUntrackedDisposable, IDisposable, INotificationHub, ISingleSignOnTokenNotificationHub Constructors NotificationHub() Instantiates a new instance of NotificationHub . Declaration public NotificationHub() NotificationHub(ILogger, ICorrelationIdHelper) Instantiates a new instance of NotificationHub . Declaration public NotificationHub(ILogger logger, ICorrelationIdHelper correlationIdHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper Properties ConvertUserTokenToUserRsn The System.Func<T, TResult> that can convert a System.String based authentication token into the System.Guid based user identifier. Declaration public Func<string, Guid> ConvertUserTokenToUserRsn { get; set; } Property Value Type Description System.Func < System.String , System.Guid > CorrelationIdHelper Gets or sets the cdmdotnet.Logging.ICorrelationIdHelper . Declaration public ICorrelationIdHelper CorrelationIdHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper CurrentHub Gets the current Microsoft.AspNet.SignalR.IHubContext . Declaration protected virtual IHubContext CurrentHub { get; } Property Value Type Description Microsoft.AspNet.SignalR.IHubContext Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration public ILogger Logger { get; set; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetAdditionalDataForLogging(Guid) Create additional data containing the provided userRsn . Declaration protected virtual IDictionary<string, object> GetAdditionalDataForLogging(Guid userRsn) Parameters Type Name Description System.Guid userRsn Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > GetAdditionalDataForLogging(String) Create additional data containing the provided userToken . Declaration protected virtual IDictionary<string, object> GetAdditionalDataForLogging(string userToken) Parameters Type Name Description System.String userToken Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Join() Join the authenticated user to their relevant Microsoft.AspNet.SignalR.IHubContext.Groups . Declaration protected virtual Task Join() Returns Type Description System.Threading.Tasks.Task OnConnected() When the connection connects to this hub instance we register the connection so we can respond back to it. Declaration public override Task OnConnected() Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNet.SignalR.Hubs.HubBase.OnConnected() OnReconnected() When the connection reconnects to this hub instance we register the connection so we can respond back to it. Declaration public override Task OnReconnected() Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNet.SignalR.Hubs.HubBase.OnReconnected() UserToken() Gets the authentication token for the user from the incoming hub request looking at first the Microsoft.AspNet.SignalR.Hubs.HubCallerContext.RequestCookies and then the Microsoft.AspNet.SignalR.Hubs.HubCallerContext.QueryString . The authentication token should have a name matching the value of \"Cqrs.Web.AuthenticationTokenName\" from GetSetting(String) . Declaration protected virtual string UserToken() Returns Type Description System.String Explicit Interface Implementations INotificationHub.SendAllUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>) Send out an event to all users Declaration void INotificationHub.SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData) Parameters Type Name Description IEvent <TSingleSignOnToken> eventData Type Parameters Name Description TSingleSignOnToken Implements INotificationHub.SendAllUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>) INotificationHub.SendExceptThisUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) Send out an event to all users except the specific user token Declaration void INotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken) Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken Implements INotificationHub.SendExceptThisUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) INotificationHub.SendUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) Send out an event to specific user token Declaration void INotificationHub.SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken) Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken Implements INotificationHub.SendUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) INotificationHub.SendUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, Guid[]) Send out an event to specific user RSNs Declaration void INotificationHub.SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, params Guid[] userRsnCollection) Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.Guid [] userRsnCollection Type Parameters Name Description TSingleSignOnToken Implements INotificationHub.SendUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, Guid[]) ISingleSignOnTokenNotificationHub.SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>) Send out an event to all users Declaration void ISingleSignOnTokenNotificationHub.SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData Type Parameters Name Description TSingleSignOnToken Implements ISingleSignOnTokenNotificationHub.SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>) ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) Send out an event to all users except the specific user token Declaration void ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken Implements ISingleSignOnTokenNotificationHub.SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) ISingleSignOnTokenNotificationHub.SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) Send out an event to specific user token Declaration void ISingleSignOnTokenNotificationHub.SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken Implements ISingleSignOnTokenNotificationHub.SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) ISingleSignOnTokenNotificationHub.SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, Guid[]) Send out an event to specific user RSNs Declaration void ISingleSignOnTokenNotificationHub.SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, params Guid[] userRsnCollection)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.Guid [] userRsnCollection Type Parameters Name Description TSingleSignOnToken Implements ISingleSignOnTokenNotificationHub.SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, Guid[])"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.ISingleSignOnTokenNotificationHub.html",
    "title": "Interface ISingleSignOnTokenNotificationHub | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenNotificationHub Sends IEvent<TAuthenticationToken> to different groups of users. Namespace : Cqrs.WebApi.SignalR.Hubs Assembly : Cqrs.WebApi.dll Syntax public interface ISingleSignOnTokenNotificationHub Methods SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>) Send out an event to all users Declaration void SendAllUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData Type Parameters Name Description TSingleSignOnToken SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) Send out an event to all users except the specific user token Declaration void SendExceptThisUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, String) Send out an event to specific user token Declaration void SendUserEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, string userToken)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.String userToken Type Parameters Name Description TSingleSignOnToken SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken>, Guid[]) Send out an event to specific user RSNs Declaration void SendUsersEvent<TSingleSignOnToken>(IEvent<TSingleSignOnToken> eventData, params Guid[] userRsnCollection)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description IEvent <TSingleSignOnToken> eventData System.Guid [] userRsnCollection Type Parameters Name Description TSingleSignOnToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.INotificationHub.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.SignalR.Hubs.INotificationHub.html",
    "title": "Interface INotificationHub | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface INotificationHub Sends IEvent<TAuthenticationToken> to different groups of users. Namespace : Cqrs.WebApi.SignalR.Hubs Assembly : Cqrs.WebApi.dll Syntax public interface INotificationHub Methods SendAllUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>) Send out an event to all users Declaration void SendAllUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData Type Parameters Name Description TAuthenticationToken SendExceptThisUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) Send out an event to all users except the specific user token Declaration void SendExceptThisUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken> eventData, string userToken) Parameters Type Name Description IEvent <TAuthenticationToken> eventData System.String userToken Type Parameters Name Description TAuthenticationToken SendUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, String) Send out an event to specific user token Declaration void SendUserEvent<TAuthenticationToken>(IEvent<TAuthenticationToken> eventData, string userToken) Parameters Type Name Description IEvent <TAuthenticationToken> eventData System.String userToken Type Parameters Name Description TAuthenticationToken SendUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken>, Guid[]) Send out an event to specific user RSNs Declaration void SendUsersEvent<TAuthenticationToken>(IEvent<TAuthenticationToken> eventData, params Guid[] userRsnCollection) Parameters Type Name Description IEvent <TAuthenticationToken> eventData System.Guid [] userRsnCollection Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.html",
    "title": "Namespace Cqrs.WebApi.Controllers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Controllers Classes ClientController A WebAPI RESTful service that provide a 'no configuration required' java-script client ready for developers to use. ClientController.ApiMethodModel A WebAPI action method. ClientController.ApiParameterModel A parameter for a WebAPI action method."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.IDto.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.IDto.html",
    "title": "Interface IDto | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IDto A basic data transfer object suitable for CRUD operations. Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface IDto Properties Id The identifier of this IDto . Declaration [DataMember] Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.IAggregateRoot-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.IAggregateRoot-1.html",
    "title": "Interface IAggregateRoot<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAggregateRoot<TAuthenticationToken> An IAggregateRoot<TAuthenticationToken> is a larger unit of encapsulation than just a class. Every transaction is scoped to a single aggregate. The lifetimes of the components of an IAggregateRoot<TAuthenticationToken> are bounded by the lifetime of the entire IAggregateRoot<TAuthenticationToken> . Concretely, an IAggregateRoot<TAuthenticationToken> will handle ICommand<TAuthenticationToken> s, apply IEvent<TAuthenticationToken> s, and have a state model encapsulated within it that allows it to implement the required command validation, thus upholding the invariants (business rules) of the IAggregateRoot<TAuthenticationToken> . Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks I know IAggregateRoot<TAuthenticationToken> are transaction boundaries, but I really need to transactionally update two IAggregateRoot<TAuthenticationToken> in the same transaction. What should I do? You should re-think the following: * Your IAggregateRoot<TAuthenticationToken> boundaries. * The responsibilities of each IAggregateRoot<TAuthenticationToken> . * What you can get away with doing in a read side or in a saga. * The actual non-functional requirements of your domain. If you write a solution where two or more IAggregateRoot<TAuthenticationToken> are transactionally coupled, you have not understood IAggregateRoot<TAuthenticationToken> . Why is the use of System.Guid as identifiers a good practice? Because they are (reasonably) globally unique, and can be generated either by the server or by the client. What is an Rsn and what is an Id? Because few systems are truely green field and there is usually some existing system to operate with our framework identifies Id properties as System.Int32 typed properties from an external system and Rsn properties as System.Guid typed properties for internal use. An example might be { Guid Rsn string Name Guid CategoryRsn int CategoryId } Here the category can be referenced within the CQRS framework by it's Rsn System.Guid typed identifier, but still has a reference to the external systems System.Int32 typed identifier value. How can I get the Rsn for newly created IAggregateRoot<TAuthenticationToken> ? It's an important insight that the client can generate its own Rsns. If the client generates a System.Guid and places it in the create-the-aggregate ICommand<TAuthenticationToken> , this is a non-issue. Otherwise, you have to listen to the the appropriate the-aggregate-was-created IEvent<TAuthenticationToken> , where the Rsn will appear be populated. Should I allow references between IAggregateRoot<TAuthenticationToken> ? In the sense of an actual \"memory reference\", absolutely not. On the write side, an actual memory reference from one IAggregateRoot<TAuthenticationToken> to another is forbidden and wrong, since IAggregateRoot<TAuthenticationToken> by definition are not allowed to reach outside of themselves. (Allowing this would mean an IAggregateRoot<TAuthenticationToken> is no longer a transaction boundary, meaning we can no longer sanely reason about its ability to uphold its invariants; it would also preclude sharding of IAggregateRoot<TAuthenticationToken> .) Referring to another IAggregateRoot<TAuthenticationToken> using an identifier is fine. It is useless on the write side (since the identifier must be treated as an opaque value, since IAggregateRoot<TAuthenticationToken> can not reach outside of themselves). Read sides may freely use such information, however, to do interesting correlations. How can I validate a ICommand<TAuthenticationToken> across a group of IAggregateRoot<TAuthenticationToken> ? This is a common reaction to not being able to query across IAggregateRoot<TAuthenticationToken> anymore. There are several answers: * Do client-side validation. * Use a read side. * Use a saga. * If those are all completely impractical, then it's time to consider if you got your IAggregateRoot<TAuthenticationToken> boundaries correct. How can I guarantee referential integrity across IAggregateRoot<TAuthenticationToken> ? You're still thinking in terms of foreign relations, not IAggregateRoot<TAuthenticationToken> . See last question. Also, remember that just because something would be in two tables in a relational design does not in any way suggest it should be two IAggregateRoot<TAuthenticationToken> . Designing an IAggregateRoot<TAuthenticationToken> is different. How can I make sure a newly created user has a unique user name? This is a commonly occurring question since we're explicitly not performing cross-aggregate operations on the write side. We do, however, have a number of options: * Create a read-side of already allocated user names. Make the client query the read-side interactively as the user types in a name. * Create a reactive saga to flag down and inactivate accounts that were nevertheless created with a duplicate user name. (Whether by extreme coincidence or maliciously or because of a faulty client.) How can I verify that a customer identifier really exists when I place an order? Assuming customer and order are IAggregateRoot<TAuthenticationToken> here, it's clear that the order IAggregateRoot<TAuthenticationToken> cannot really validate this, since that would mean reaching out of the IAggregateRoot<TAuthenticationToken> . Checking up on it after the fact, in a saga or just in a read side that records \"broken\" orders, is one option. After all, the most important thing about an order is actually recording it, and presumably any interesting data about the recipient of the order is being copied into the order IAggregateRoot<TAuthenticationToken> (referring to the customer to find the address is bad design; the order was always made to be deliverd to a particular address, whether or not that customer changes their address in the future). Being able to use what data was recorded in this broken order means you've got a chance to rescue it and rectify the situation - which makes a good bit more business sense rather than dropping the order on the floor because a foreign key constraint was violated! How can I update a set of IAggregateRoot<TAuthenticationToken> with a single ICommand<TAuthenticationToken> ? A single ICommand<TAuthenticationToken> can't act on a set of IAggregateRoot<TAuthenticationToken> . It just can't. First off, ask yourself whether you really need to update several IAggregateRoot<TAuthenticationToken> using just one ICommand<TAuthenticationToken> . What in the situation makes this a requirement? However, here's what you could do. Allow a new kind of \"bulk command\", conceptually containing the command you want to issue, and a set of IAggregateRoot<TAuthenticationToken> (specified either explicitly or implicitly) that you want to issue it on. The write side isn't powerful enough to make the bulk action, but it's able to create a corresponding \"bulk event\". A saga captures the event, and issues the ICommand<TAuthenticationToken> on each of the specified IAggregateRoot<TAuthenticationToken> s. The saga can do rollback or send an email, as appropriate, if some of the ICommand<TAuthenticationToken> fail. There are some advantages to this approach: we store the intent of the bulk action in the event store. The saga automates rollback or equivalent. Still, having to resort to this solution is a strong indication that your IAggregateRoot<TAuthenticationToken> boundaries are not drawn correctly. You might want to consider changing your IAggregateRoot<TAuthenticationToken> boundaries rather than building a saga for this. What is sharding? A way to distribute large amounts of IAggregateRoot<TAuthenticationToken> on several write-side nodes. We can shard IAggregateRoot<TAuthenticationToken> easily because they are completely self-reliant. We can shard IAggregateRoot<TAuthenticationToken> easily because they don't have any external references. Can an IAggregateRoot<TAuthenticationToken> send an IEvent<TAuthenticationToken> to another IAggregateRoot<TAuthenticationToken> ? No. The factoring of your IAggregateRoot<TAuthenticationToken> and ICommandHandler<TAuthenticationToken, TCommand> will typically already make this idea impossible to express in code. But there's a deeper philosophical reason: go back and re-read the first sentence in the answer to \"What is an IAggregateRoot<TAuthenticationToken> ?\". If you manage to circumvent the ICommandHandler<TAuthenticationToken, TCommand> and just push IEvent<TAuthenticationToken> into another IAggregateRoot<TAuthenticationToken> somehow, you will have taken away that IAggregateRoot<TAuthenticationToken> 's chance to participate in validation of changes. That's ultimately why we only allow IEvent<TAuthenticationToken> to be created as a result of ICommand<TAuthenticationToken> s validated by a ICommandHandler<TAuthenticationToken, TCommand> on an IAggregateRoot<TAuthenticationToken> . Can I call a read side from my IAggregateRoot<TAuthenticationToken> ? No. How do I send e-mail in a CQRS system? In an IEventHandler<TAuthenticationToken, TEvent> outside of the IAggregateRoot<TAuthenticationToken> . Do not do it in the ICommandHandler<TAuthenticationToken, TCommand> , as if the IEvent<TAuthenticationToken> artefacts are not persisted due to losing a race with another ICommand<TAuthenticationToken> then the email will have been sent on a false premise. ******************************************** Also see http://cqrs.nu/Faq/aggregates . Properties Id The identifier of this IAggregateRoot<TAuthenticationToken> . Declaration [DataMember] Guid Id { get; } Property Value Type Description System.Guid Version The current version of this IAggregateRoot<TAuthenticationToken> . Declaration [DataMember] int Version { get; } Property Value Type Description System.Int32 Methods GetUncommittedChanges() Get all applied changes that haven't yet been committed. Declaration IEnumerable<IEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) Apply all the IEvent<TAuthenticationToken> in history using event replay to this instance. Declaration void LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> history MarkChangesAsCommitted() Mark all applied changes as committed, increment Version and flush the internal collection of changes. Declaration void MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.IAggregateRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.IAggregateRepository-1.html",
    "title": "Interface IAggregateRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAggregateRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> . Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Methods Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Retrieves an IAggregateRoot<TAuthenticationToken> of type TAggregateRoot . Declaration TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid aggregateId The identifier of the IAggregateRoot<TAuthenticationToken> to retrieve. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) Save and persist the provided aggregate , optionally providing the version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Declaration void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate The IAggregateRoot<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.html",
    "title": "Namespace Cqrs.Domain.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Domain.Factories Classes AggregateFactory A factory for creating instances of aggregates. Interfaces IAggregateFactory A factory for creating instances of aggregates."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.IAggregateFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.IAggregateFactory.html",
    "title": "Interface IAggregateFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAggregateFactory A factory for creating instances of aggregates. Namespace : Cqrs.Domain.Factories Assembly : Cqrs.dll Syntax public interface IAggregateFactory Methods Create(Type, Nullable<Guid>, Boolean) Creates instance of type aggregateType Declaration object Create(Type aggregateType, Guid? rsn = null, bool tryDependencyResolutionFirst = true) Parameters Type Name Description System.Type aggregateType The System.Type of the aggregate to create. System.Nullable < System.Guid > rsn The identifier of the aggregate to create an instance of if an existing aggregate. System.Boolean tryDependencyResolutionFirst Indicates the use of IDependencyResolver should be tried first. Returns Type Description System.Object Create<TAggregate>(Nullable<Guid>, Boolean) Creates instance of TAggregate . Declaration TAggregate Create<TAggregate>(Guid? rsn = null, bool tryDependencyResolutionFirst = true) Parameters Type Name Description System.Nullable < System.Guid > rsn The identifier of the aggregate to create an instance of if an existing aggregate. System.Boolean tryDependencyResolutionFirst Indicates the use of IDependencyResolver should be tried first. Returns Type Description TAggregate Type Parameters Name Description TAggregate The System.Type of the aggregate to create."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.AggregateFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Factories.AggregateFactory.html",
    "title": "Class AggregateFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AggregateFactory A factory for creating instances of aggregates. Inheritance System.Object AggregateFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Factories Assembly : Cqrs.dll Syntax public class AggregateFactory : IAggregateFactory Constructors AggregateFactory(IDependencyResolver, ILogger) Instantiates a new instance of AggregateFactory . Declaration public AggregateFactory(IDependencyResolver dependencyResolver, ILogger logger) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger Properties DependencyResolver Gets or sets the IDependencyResolver used. Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Logger Gets or sets the cdmdotnet.Logging.ILogger used. Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods Create(Type, Nullable<Guid>, Boolean) Creates instance of type aggregateType Declaration public object Create(Type aggregateType, Guid? rsn = null, bool tryDependencyResolutionFirst = true) Parameters Type Name Description System.Type aggregateType The System.Type of the aggregate to create. System.Nullable < System.Guid > rsn The identifier of the aggregate to create an instance of if an existing aggregate. System.Boolean tryDependencyResolutionFirst Indicates the use of IDependencyResolver should be tried first. Returns Type Description System.Object Implements IAggregateFactory.Create(Type, Nullable<Guid>, Boolean) Create<TAggregate>(Nullable<Guid>, Boolean) Creates instance of TAggregate . Declaration public virtual TAggregate Create<TAggregate>(Guid? rsn = null, bool tryDependencyResolutionFirst = true) Parameters Type Name Description System.Nullable < System.Guid > rsn The identifier of the aggregate to create an instance of if an existing aggregate. System.Boolean tryDependencyResolutionFirst Indicates the use of IDependencyResolver should be tried first. Returns Type Description TAggregate Type Parameters Name Description TAggregate The System.Type of the aggregate to create. Implements IAggregateFactory.Create<TAggregate>(Nullable<Guid>, Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.html",
    "title": "Namespace Cqrs.Domain.Exceptions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Domain.Exceptions Classes AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> The IAggregateRoot<TAuthenticationToken> requested was not found. AggregateOrEventMissingIdException The IEvent<TAuthenticationToken> had not Id set. ConcurrencyException An IEvent<TAuthenticationToken> was processed out of order or an expected IEvent<TAuthenticationToken> was not found. DuplicateCreateCommandException The operation resulted in a duplicate. DuplicateEventException<TAggregateRoot, TAuthenticationToken> The IEventStore<TAuthenticationToken> gave more than one IEvent<TAuthenticationToken> . DuplicateSagaEventException<TSaga, TAuthenticationToken> The IEventStore<TAuthenticationToken> gave more than one event. EntityNotFoundException<TEntity> The IEntity requested was not found. EventsOutOfOrderException The IEventStore<TAuthenticationToken> gave IEvent<TAuthenticationToken> out of order or an expected IEvent<TAuthenticationToken> with a specific version number wasn't provided. MissingParameterLessConstructorException A parameterless constructor is missing. SagaNotFoundException<TSaga, TAuthenticationToken> The ISaga<TAuthenticationToken> requested was not found."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.SagaNotFoundException-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.SagaNotFoundException-2.html",
    "title": "Class SagaNotFoundException<TSaga, TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SagaNotFoundException<TSaga, TAuthenticationToken> The ISaga<TAuthenticationToken> requested was not found. Inheritance System.Object System.Exception SagaNotFoundException<TSaga, TAuthenticationToken> Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class SagaNotFoundException<TSaga, TAuthenticationToken> : Exception, ISerializable, _Exception where TSaga : ISaga<TAuthenticationToken> Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> that wasn't found. TAuthenticationToken The System.Type of the authentication token. Constructors SagaNotFoundException(Guid) Instantiate a new instance of SagaNotFoundException<TSaga, TAuthenticationToken> with the provided identifier of the ISaga<TAuthenticationToken> that wasn't found. Declaration public SagaNotFoundException(Guid id) Parameters Type Name Description System.Guid id The identifier of the ISaga<TAuthenticationToken> that wasn't found. Properties Id The identifier of the ISaga<TAuthenticationToken> that wasn't found. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid SagaType The System.Type of the ISaga<TAuthenticationToken> that wasn't found. Declaration [DataMember] public Type SagaType { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.MissingParameterLessConstructorException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.MissingParameterLessConstructorException.html",
    "title": "Class MissingParameterLessConstructorException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MissingParameterLessConstructorException A parameterless constructor is missing. Inheritance System.Object System.Exception MissingParameterLessConstructorException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class MissingParameterLessConstructorException : Exception, ISerializable, _Exception Constructors MissingParameterLessConstructorException(Type) Instantiate a new instance of MissingParameterLessConstructorException with the Type of the object that needs to have a parameterless constructor. Declaration public MissingParameterLessConstructorException(Type type) Parameters Type Name Description System.Type type The Type of the object that needs to have a parameterless constructor. Properties Type The Type of the object that needs to have a parameterless constructor. Declaration [DataMember] public Type Type { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.EventsOutOfOrderException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.EventsOutOfOrderException.html",
    "title": "Class EventsOutOfOrderException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventsOutOfOrderException The IEventStore<TAuthenticationToken> gave IEvent<TAuthenticationToken> out of order or an expected IEvent<TAuthenticationToken> with a specific version number wasn't provided. Inheritance System.Object System.Exception EventsOutOfOrderException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class EventsOutOfOrderException : Exception, ISerializable, _Exception Constructors EventsOutOfOrderException(Guid, Type, Int32, Int32) Instantiate a new instance of EventsOutOfOrderException with the provided identifier of the IAggregateRoot<TAuthenticationToken> that had out of order IEvent<TAuthenticationToken> . and the currentVersion the IAggregateRoot<TAuthenticationToken> was at and the providedEventVersion . Declaration public EventsOutOfOrderException(Guid id, Type aggregateType, int currentVersion, int providedEventVersion) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> that had IEvent<TAuthenticationToken> . System.Type aggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that the IEvent<TAuthenticationToken> was trying to be saved on. System.Int32 currentVersion The version number the IAggregateRoot<TAuthenticationToken> was at when it received an out of order IEvent<TAuthenticationToken> . System.Int32 providedEventVersion The version number the IEvent<TAuthenticationToken> that was provided, that was out of order. Properties AggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that had out of order IEvent<TAuthenticationToken> . Declaration [DataMember] public Type AggregateType { get; set; } Property Value Type Description System.Type CurrentVersion The version number the IAggregateRoot<TAuthenticationToken> was at when it received an out of order IEvent<TAuthenticationToken> . Declaration [DataMember] public int CurrentVersion { get; set; } Property Value Type Description System.Int32 Id The identifier of the IAggregateRoot<TAuthenticationToken> that had out of order IEvent<TAuthenticationToken> . Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid ProvidedEventVersion The version number the IEvent<TAuthenticationToken> that was provided, that was out of order. Declaration [DataMember] public int ProvidedEventVersion { get; set; } Property Value Type Description System.Int32"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.EntityNotFoundException-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.EntityNotFoundException-1.html",
    "title": "Class EntityNotFoundException<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EntityNotFoundException<TEntity> The IEntity requested was not found. Inheritance System.Object System.Exception EntityNotFoundException<TEntity> Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class EntityNotFoundException<TEntity> : Exception, ISerializable, _Exception where TEntity : IEntity Type Parameters Name Description TEntity The System.Type of the IEntity that wasn't found Constructors EntityNotFoundException(Guid) Instantiate a new instance of EntityNotFoundException<TEntity> with the provided identifier of the IEntity that wasn't found. Declaration public EntityNotFoundException(Guid id) Parameters Type Name Description System.Guid id The identifier of the IEntity that wasn't found. Properties EntityType The System.Type of the IEntity that wasn't found. Declaration [DataMember] public Type EntityType { get; set; } Property Value Type Description System.Type Id The identifier of the IEntity that wasn't found. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateSagaEventException-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateSagaEventException-2.html",
    "title": "Class DuplicateSagaEventException<TSaga, TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DuplicateSagaEventException<TSaga, TAuthenticationToken> The IEventStore<TAuthenticationToken> gave more than one event. Inheritance System.Object System.Exception DuplicateSagaEventException<TSaga, TAuthenticationToken> Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class DuplicateSagaEventException<TSaga, TAuthenticationToken> : Exception, ISerializable, _Exception where TSaga : ISaga<TAuthenticationToken> Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> that wasn't found. TAuthenticationToken The System.Type of the authentication token. Constructors DuplicateSagaEventException(Guid, Int32) Instantiate a new instance of DuplicateSagaEventException<TSaga, TAuthenticationToken> with the provided identifier of the ISaga<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> . and the version that had more than one IEvent<TAuthenticationToken> provided. Declaration public DuplicateSagaEventException(Guid id, int version) Parameters Type Name Description System.Guid id The identifier of the ISaga<TAuthenticationToken> that had IEvent<TAuthenticationToken> . System.Int32 version The version number of the duplicate IEvent<TAuthenticationToken> Properties Id The identifier of the ISaga<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> .. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid SagaType The System.Type of the ISaga<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> .. Declaration [DataMember] public Type SagaType { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateEventException-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateEventException-2.html",
    "title": "Class DuplicateEventException<TAggregateRoot, TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DuplicateEventException<TAggregateRoot, TAuthenticationToken> The IEventStore<TAuthenticationToken> gave more than one IEvent<TAuthenticationToken> . Inheritance System.Object System.Exception DuplicateEventException<TAggregateRoot, TAuthenticationToken> Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class DuplicateEventException<TAggregateRoot, TAuthenticationToken> : Exception, ISerializable, _Exception where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> that wasn't found. TAuthenticationToken The System.Type of the authentication token. Constructors DuplicateEventException(Guid, Int32) Instantiate a new instance of DuplicateEventException<TAggregateRoot, TAuthenticationToken> with the provided identifier of the IAggregateRoot<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> . and the version that had more than one IEvent<TAuthenticationToken> provided. Declaration public DuplicateEventException(Guid id, int version) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> that had IEvent<TAuthenticationToken> . System.Int32 version The version number of the duplicate IEvent<TAuthenticationToken> Properties AggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> .. Declaration [DataMember] public Type AggregateType { get; set; } Property Value Type Description System.Type Id The identifier of the IAggregateRoot<TAuthenticationToken> that had duplicate IEvent<TAuthenticationToken> .. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateCreateCommandException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.DuplicateCreateCommandException.html",
    "title": "Class DuplicateCreateCommandException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DuplicateCreateCommandException The operation resulted in a duplicate. Inheritance System.Object System.Exception DuplicateCreateCommandException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class DuplicateCreateCommandException : Exception, ISerializable, _Exception Constructors DuplicateCreateCommandException(Exception) Instantiate a new instance of DuplicateCreateCommandException with a reference to the inner exception that is the cause of this System.Exception . Declaration public DuplicateCreateCommandException(Exception exception) Parameters Type Name Description System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. DuplicateCreateCommandException(String, Exception) Instantiate a new instance of DuplicateCreateCommandException with a specified message and a reference to the inner exception that is the cause of this System.Exception . Declaration public DuplicateCreateCommandException(string message, Exception exception) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. DuplicateCreateCommandException(Type, Guid, Exception) Instantiate a new instance of DuplicateCreateCommandException with the commandType and commandId that was issued as well as a reference to the inner exception that is the cause of this System.Exception . Declaration public DuplicateCreateCommandException(Type commandType, Guid commandId, Exception exception) Parameters Type Name Description System.Type commandType The System.Type of the ICommand<TAuthenticationToken> that was issued. System.Guid commandId The Id of the ICommand<TAuthenticationToken> that was issued. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. Properties CommandId The Id of the ICommand<TAuthenticationToken> that was issued. Declaration [DataMember] public Guid CommandId { get; set; } Property Value Type Description System.Guid CommandType The System.Type of the ICommand<TAuthenticationToken> that was issued. Declaration [DataMember] public Type CommandType { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.ConcurrencyException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.ConcurrencyException.html",
    "title": "Class ConcurrencyException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConcurrencyException An IEvent<TAuthenticationToken> was processed out of order or an expected IEvent<TAuthenticationToken> was not found. Inheritance System.Object System.Exception ConcurrencyException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class ConcurrencyException : Exception, ISerializable, _Exception Constructors ConcurrencyException(Guid) Instantiate a new instance of ConcurrencyException with the provided identifier of the IAggregateRoot<TAuthenticationToken> that had a concurrency issue. Declaration public ConcurrencyException(Guid id) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> that wasn't found. Properties Id The identifier of the IAggregateRoot<TAuthenticationToken> that had a concurrency issue. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.DependencyResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.DependencyResolver.html",
    "title": "Class DependencyResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DependencyResolver Provides an ability to resolve instances of objects. Inheritance System.Object DependencyResolver NinjectDependencyResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public abstract class DependencyResolver : IDependencyResolver Properties Current The current instance of the IDependencyResolver . Declaration public static IDependencyResolver Current { get; protected set; } Property Value Type Description IDependencyResolver Methods Resolve(Type) Resolves a single instance for the specified type . Different implementations may return the first or last instance found or may return an exception. Declaration public abstract object Resolve(Type type) Parameters Type Name Description System.Type type The System.Type of object you want to resolve. Returns Type Description System.Object An instance of type type . Implements IDependencyResolver.Resolve(Type) Resolve<T>() Resolves a single instance for the specified T . Different implementations may return the first or last instance found or may return an exception. Declaration public abstract T Resolve<T>() Returns Type Description T An instance of type T . Type Parameters Name Description T The System.Type of object you want to resolve. Implements IDependencyResolver.Resolve<T>()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureQueuedEventBusReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureQueuedEventBusReceiver-1.html",
    "title": "Class AzureQueuedEventBusReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedEventBusReceiver<TAuthenticationToken> A concurrent implementation of AzureEventBusReceiver<TAuthenticationToken> that resides in memory. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureEventBus <TAuthenticationToken> AzureEventBusReceiver <TAuthenticationToken> AzureQueuedEventBusReceiver<TAuthenticationToken> Inherited Members AzureEventBusReceiver<TAuthenticationToken>.NumberOfReceiversCountConfigurationKey AzureEventBusReceiver<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCountConfigurationKey AzureEventBusReceiver<TAuthenticationToken>.FilterKeyConfigurationKey AzureEventBusReceiver<TAuthenticationToken>.FilterKey AzureEventBusReceiver<TAuthenticationToken>.Routes AzureEventBusReceiver<TAuthenticationToken>.CurrentHandles AzureEventBusReceiver<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureEventBusReceiver<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) AzureEventBusReceiver<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Boolean) AzureEventBusReceiver<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) AzureEventBusReceiver<TAuthenticationToken>.ReceiveEvent(IEvent<TAuthenticationToken>) AzureEventBusReceiver<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureEventBusReceiver<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureEventBusReceiver<TAuthenticationToken>.Start() AzureEventBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.DefaultPrivateTopicName AzureEventBus<TAuthenticationToken>.DefaultPublicTopicName AzureEventBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureQueuedEventBusReceiver<TAuthenticationToken> : AzureEventBusReceiver<TAuthenticationToken>, IEventHandlerRegistrar, IHandlerRegistrar, IEventReceiver<TAuthenticationToken>, IEventReceiver Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureQueuedEventBusReceiver(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureQueuedEventBusReceiver<TAuthenticationToken> . Declaration public AzureQueuedEventBusReceiver(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Properties QueueCount The number of queues currently known. Declaration public int QueueCount { get; } Property Value Type Description System.Int32 QueueNames The name of all currently known queues. Declaration public ICollection<string> QueueNames { get; } Property Value Type Description ICollection < System.String > QueueTracker Tracks all queues. Declaration protected static ConcurrentDictionary<string, ConcurrentQueue<IEvent<TAuthenticationToken>>> QueueTracker { get; } Property Value Type Description ConcurrentDictionary < System.String , ConcurrentQueue < IEvent <TAuthenticationToken>>> QueueTrackerLock Gets the . Declaration protected ReaderWriterLockSlim QueueTrackerLock { get; } Property Value Type Description ReaderWriterLockSlim Methods CreateQueueAndAttachListenerIfNotExist(String) Creates the queue of the name queueName if it does not already exist, the queue is attached to DequeuAndProcessEvent(String) using a . Declaration protected void CreateQueueAndAttachListenerIfNotExist(string queueName) Parameters Type Name Description System.String queueName The name of the queue to check and create. DequeuAndProcessEvent(String) Takes an IEvent<TAuthenticationToken> off the queue of queueName and calls ReceiveEvent(BrokeredMessage) . Repeats in a loop until the queue is empty. Declaration protected void DequeuAndProcessEvent(string queueName) Parameters Type Name Description System.String queueName The name of the queue process. ReceiveEvent(BrokeredMessage) Receives a from the event bus, identifies a key and queues it accordingly. Declaration protected override void ReceiveEvent(BrokeredMessage message) Parameters Type Name Description BrokeredMessage message Overrides Cqrs.Azure.ServiceBus.AzureEventBusReceiver<TAuthenticationToken>.ReceiveEvent(BrokeredMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureQueuedCommandBusReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureQueuedCommandBusReceiver-1.html",
    "title": "Class AzureQueuedCommandBusReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedCommandBusReceiver<TAuthenticationToken> A concurrent implementation of AzureCommandBusReceiver<TAuthenticationToken> that resides in memory. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureCommandBus <TAuthenticationToken> AzureCommandBusReceiver <TAuthenticationToken> AzureQueuedCommandBusReceiver<TAuthenticationToken> Inherited Members AzureCommandBusReceiver<TAuthenticationToken>.NumberOfReceiversCountConfigurationKey AzureCommandBusReceiver<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCountConfigurationKey AzureCommandBusReceiver<TAuthenticationToken>.FilterKeyConfigurationKey AzureCommandBusReceiver<TAuthenticationToken>.FilterKey AzureCommandBusReceiver<TAuthenticationToken>.Routes AzureCommandBusReceiver<TAuthenticationToken>.CurrentHandles AzureCommandBusReceiver<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureCommandBusReceiver<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) AzureCommandBusReceiver<TAuthenticationToken>.RegisterHandler<TMessage>(Action<TMessage>, Boolean) AzureCommandBusReceiver<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>) AzureCommandBusReceiver<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureCommandBusReceiver<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureCommandBusReceiver<TAuthenticationToken>.Start() AzureCommandBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.DefaultPrivateTopicName AzureCommandBus<TAuthenticationToken>.DefaultPublicTopicName AzureCommandBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureQueuedCommandBusReceiver<TAuthenticationToken> : AzureCommandBusReceiver<TAuthenticationToken>, ICommandHandlerRegistrar, IHandlerRegistrar, ICommandReceiver<TAuthenticationToken>, ICommandReceiver Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureQueuedCommandBusReceiver(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureQueuedCommandBusReceiver<TAuthenticationToken> . Declaration public AzureQueuedCommandBusReceiver(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Properties QueueCount The number of queues currently known. Declaration public int QueueCount { get; } Property Value Type Description System.Int32 QueueNames The name of all currently known queues. Declaration public ICollection<string> QueueNames { get; } Property Value Type Description ICollection < System.String > QueueTracker Tracks all queues. Declaration protected static ConcurrentDictionary<string, ConcurrentQueue<ICommand<TAuthenticationToken>>> QueueTracker { get; } Property Value Type Description ConcurrentDictionary < System.String , ConcurrentQueue < ICommand <TAuthenticationToken>>> QueueTrackerLock Gets the . Declaration protected ReaderWriterLockSlim QueueTrackerLock { get; } Property Value Type Description ReaderWriterLockSlim Methods CreateQueueAndAttachListenerIfNotExist(String) Creates the queue of the name queueName if it does not already exist, the queue is attached to DequeuAndProcessCommand(String) using a . Declaration protected void CreateQueueAndAttachListenerIfNotExist(string queueName) Parameters Type Name Description System.String queueName The name of the queue to check and create. DequeuAndProcessCommand(String) Takes an ICommand<TAuthenticationToken> off the queue of queueName and calls ReceiveCommand(BrokeredMessage) . Repeats in a loop until the queue is empty. Declaration protected void DequeuAndProcessCommand(string queueName) Parameters Type Name Description System.String queueName The name of the queue process. ReceiveCommand(BrokeredMessage) Receives a from the command bus, identifies a key and queues it accordingly. Declaration protected override void ReceiveCommand(BrokeredMessage message) Parameters Type Name Description BrokeredMessage message Overrides Cqrs.Azure.ServiceBus.AzureCommandBusReceiver<TAuthenticationToken>.ReceiveCommand(BrokeredMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventHubBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventHubBus-1.html",
    "title": "Class AzureEventHubBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventHubBus<TAuthenticationToken> A event bus based on AzureEventHub<TAuthenticationToken> . Inheritance System.Object AzureBus <TAuthenticationToken> AzureEventHub <TAuthenticationToken> AzureEventHubBus<TAuthenticationToken> Inherited Members AzureEventHub<TAuthenticationToken>.EventHubPublisher AzureEventHub<TAuthenticationToken>.EventHubReceiver AzureEventHub<TAuthenticationToken>.PrivateEventHubName AzureEventHub<TAuthenticationToken>.PublicEventHubName AzureEventHub<TAuthenticationToken>.PrivateEventHubConsumerGroupName AzureEventHub<TAuthenticationToken>.PublicEventHubConsumerGroupName AzureEventHub<TAuthenticationToken>.DefaultPrivateEventHubConsumerGroupName AzureEventHub<TAuthenticationToken>.DefaultPublicEventHubConsumerGroupName AzureEventHub<TAuthenticationToken>.StorageConnectionString AzureEventHub<TAuthenticationToken>.ReceiverMessageHandler AzureEventHub<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureEventHub<TAuthenticationToken>.TelemetryHelper AzureEventHub<TAuthenticationToken>.GetConnectionString() AzureEventHub<TAuthenticationToken>.SetConnectionStrings() AzureEventHub<TAuthenticationToken>.InstantiatePublishing() AzureEventHub<TAuthenticationToken>.InstantiateReceiving() AzureEventHub<TAuthenticationToken>.CheckPrivateHubExists(NamespaceManager) AzureEventHub<TAuthenticationToken>.CheckPublicHubExists(NamespaceManager) AzureEventHub<TAuthenticationToken>.CheckHubExists(NamespaceManager, String, String) AzureEventHub<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureEventHub<TAuthenticationToken>.TriggerSettingsChecking() AzureEventHub<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<PartitionContext, EventData>, EventProcessorOptions) AzureEventHub<TAuthenticationToken>.StoreReceiverMessageHandler(Action<PartitionContext, EventData>, EventProcessorOptions) AzureEventHub<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.UpdateSettings() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureEventHubBus<TAuthenticationToken> : AzureEventHub<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors AzureEventHubBus(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, Boolean) Instantiate a new instance of AzureEventHubBus<TAuthenticationToken> . Declaration protected AzureEventHubBus(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper cdmdotnet.Logging.ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper System.Boolean isAPublisher Properties AzureBusHelper Gets the IAzureBusHelper<TAuthenticationToken> . Declaration protected IAzureBusHelper<TAuthenticationToken> AzureBusHelper { get; } Property Value Type Description IAzureBusHelper <TAuthenticationToken> DefaultPrivateEventHubName The default name of the private event hub if no IConfigurationManager value is set. Declaration protected override string DefaultPrivateEventHubName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.DefaultPrivateEventHubName DefaultPublicEventHubName The default name of the public event hub if no IConfigurationManager value is set. Declaration protected override string DefaultPublicEventHubName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.DefaultPublicEventHubName EventHubConnectionStringNameConfigurationKey The configuration key for the event hub connection string as used by IConfigurationManager . Declaration protected override string EventHubConnectionStringNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.EventHubConnectionStringNameConfigurationKey EventHubStorageConnectionStringNameConfigurationKey The configuration key for the event hub storage connection string as used by IConfigurationManager . Declaration protected override string EventHubStorageConnectionStringNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.EventHubStorageConnectionStringNameConfigurationKey PrivateEventHubConsumerGroupNameConfigurationKey The configuration key for the name of the consumer group name of the private event hub as used by IConfigurationManager . Declaration protected override string PrivateEventHubConsumerGroupNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.PrivateEventHubConsumerGroupNameConfigurationKey PrivateEventHubNameConfigurationKey The configuration key for the name of the private event hub as used by IConfigurationManager . Declaration protected override string PrivateEventHubNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.PrivateEventHubNameConfigurationKey PublicEventHubConsumerGroupNameConfigurationKey The configuration key for the name of the consumer group name of the public event hub as used by IConfigurationManager . Declaration protected override string PublicEventHubConsumerGroupNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.PublicEventHubConsumerGroupNameConfigurationKey PublicEventHubNameConfigurationKey The configuration key for the name of the public event hub as used by IConfigurationManager . Declaration protected override string PublicEventHubNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureEventHub<TAuthenticationToken>.PublicEventHubNameConfigurationKey"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventHub-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventHub-1.html",
    "title": "Class AzureEventHub<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventHub<TAuthenticationToken> An AzureBus<TAuthenticationToken> that uses Azure Service Event Hubs. Inheritance System.Object AzureBus <TAuthenticationToken> AzureEventHub<TAuthenticationToken> AzureEventHubBus<TAuthenticationToken> Inherited Members AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.UpdateSettings() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureEventHub<TAuthenticationToken> : AzureBus<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors AzureEventHub(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, Boolean) Instantiates a new instance of AzureEventHub<TAuthenticationToken> Declaration protected AzureEventHub(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper cdmdotnet.Logging.ILogger logger System.Boolean isAPublisher Fields DefaultPrivateEventHubConsumerGroupName The default name of the consumer group in the private event hub if no IConfigurationManager value is set. Declaration protected const string DefaultPrivateEventHubConsumerGroupName = \"$Default\" Field Value Type Description System.String DefaultPublicEventHubConsumerGroupName The default name of the consumer group in the public event hub if no IConfigurationManager value is set. Declaration protected const string DefaultPublicEventHubConsumerGroupName = \"$Default\" Field Value Type Description System.String Properties DefaultPrivateEventHubName The default name of the private event hub if no IConfigurationManager value is set. Declaration protected abstract string DefaultPrivateEventHubName { get; } Property Value Type Description System.String DefaultPublicEventHubName The default name of the public event hub if no IConfigurationManager value is set. Declaration protected abstract string DefaultPublicEventHubName { get; } Property Value Type Description System.String EventHubConnectionStringNameConfigurationKey The configuration key for the event hub connection string as used by IConfigurationManager . Declaration protected abstract string EventHubConnectionStringNameConfigurationKey { get; } Property Value Type Description System.String EventHubPublisher Gets the public Microsoft.ServiceBus.Messaging.EventHubClient . Declaration protected EventHubClient EventHubPublisher { get; } Property Value Type Description Microsoft.ServiceBus.Messaging.EventHubClient EventHubReceiver Gets the public Microsoft.ServiceBus.Messaging.EventProcessorHost . Declaration protected EventProcessorHost EventHubReceiver { get; } Property Value Type Description Microsoft.ServiceBus.Messaging.EventProcessorHost EventHubStorageConnectionStringNameConfigurationKey The configuration key for the event hub storage connection string as used by IConfigurationManager . Declaration protected abstract string EventHubStorageConnectionStringNameConfigurationKey { get; } Property Value Type Description System.String PrivateEventHubConsumerGroupName The name of the consumer group in the private event hub. Declaration protected string PrivateEventHubConsumerGroupName { get; } Property Value Type Description System.String PrivateEventHubConsumerGroupNameConfigurationKey The configuration key for the name of the consumer group name of the private event hub as used by IConfigurationManager . Declaration protected abstract string PrivateEventHubConsumerGroupNameConfigurationKey { get; } Property Value Type Description System.String PrivateEventHubName The name of the private event hub. Declaration protected string PrivateEventHubName { get; set; } Property Value Type Description System.String PrivateEventHubNameConfigurationKey The configuration key for the name of the private event hub as used by IConfigurationManager . Declaration protected abstract string PrivateEventHubNameConfigurationKey { get; } Property Value Type Description System.String PublicEventHubConsumerGroupName The name of the consumer group in the public event hub. Declaration protected string PublicEventHubConsumerGroupName { get; } Property Value Type Description System.String PublicEventHubConsumerGroupNameConfigurationKey The configuration key for the name of the consumer group name of the public event hub as used by IConfigurationManager . Declaration protected abstract string PublicEventHubConsumerGroupNameConfigurationKey { get; } Property Value Type Description System.String PublicEventHubName The name of the public event hub. Declaration protected string PublicEventHubName { get; } Property Value Type Description System.String PublicEventHubNameConfigurationKey The configuration key for the name of the public event hub as used by IConfigurationManager . Declaration protected abstract string PublicEventHubNameConfigurationKey { get; } Property Value Type Description System.String ReceiverMessageHandler The System.Action<T1, T2> used for Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory) on EventHubReceiver . Declaration protected Action<PartitionContext, EventData> ReceiverMessageHandler { get; } Property Value Type Description System.Action < Microsoft.ServiceBus.Messaging.PartitionContext , Microsoft.ServiceBus.Messaging.EventData > ReceiverMessageHandlerOptions The Microsoft.ServiceBus.Messaging.EventProcessorOptions used for Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory) on EventHubReceiver . Declaration protected EventProcessorOptions ReceiverMessageHandlerOptions { get; } Property Value Type Description Microsoft.ServiceBus.Messaging.EventProcessorOptions StorageConnectionString The event hub storage connection string. Declaration protected string StorageConnectionString { get; } Property Value Type Description System.String TelemetryHelper Gets the cdmdotnet.Logging.ITelemetryHelper . Declaration protected ITelemetryHelper TelemetryHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ITelemetryHelper Methods ApplyReceiverMessageHandler() Applies the stored ReceiverMessageHandler and ReceiverMessageHandlerOptions to the EventHubReceiver . Declaration protected override void ApplyReceiverMessageHandler() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.ApplyReceiverMessageHandler() CheckHubExists(NamespaceManager, String, String) Checks if a event hub by the provided hubName exists and Checks if a consumer group by the provided consumerGroupNames exists. Declaration protected virtual void CheckHubExists(NamespaceManager namespaceManager, string hubName, string consumerGroupNames) Parameters Type Name Description Microsoft.ServiceBus.NamespaceManager namespaceManager System.String hubName System.String consumerGroupNames CheckPrivateHubExists(NamespaceManager) Checks if the private hub and consumer group name exists as per PrivateEventHubName and PrivateEventHubConsumerGroupName . Declaration protected virtual void CheckPrivateHubExists(NamespaceManager namespaceManager) Parameters Type Name Description Microsoft.ServiceBus.NamespaceManager namespaceManager The Microsoft.ServiceBus.NamespaceManager . CheckPublicHubExists(NamespaceManager) Checks if the public hub and consumer group name exists as per PublicEventHubName and PublicEventHubConsumerGroupName . Declaration protected virtual void CheckPublicHubExists(NamespaceManager namespaceManager) Parameters Type Name Description Microsoft.ServiceBus.NamespaceManager namespaceManager The Microsoft.ServiceBus.NamespaceManager . GetConnectionString() Gets the connection string for the bus from ConfigurationManager Declaration protected override string GetConnectionString() Returns Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetConnectionString() InstantiatePublishing() Instantiate publishing on this bus by calling CheckPrivateHubExists(NamespaceManager) and CheckPublicHubExists(NamespaceManager) then calling StartSettingsChecking() Declaration protected override void InstantiatePublishing() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.InstantiatePublishing() InstantiateReceiving() Instantiate receiving on this bus by calling CheckPrivateHubExists(NamespaceManager) and CheckPublicHubExists(NamespaceManager) then InstantiateReceiving for private and public topics, then calling StartSettingsChecking() Declaration protected override void InstantiateReceiving() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.InstantiateReceiving() RegisterReceiverMessageHandler(Action<PartitionContext, EventData>, EventProcessorOptions) Registers the provided receiverMessageHandler with the provided receiverMessageHandlerOptions . Declaration protected virtual void RegisterReceiverMessageHandler(Action<PartitionContext, EventData> receiverMessageHandler, EventProcessorOptions receiverMessageHandlerOptions = null) Parameters Type Name Description System.Action < Microsoft.ServiceBus.Messaging.PartitionContext , Microsoft.ServiceBus.Messaging.EventData > receiverMessageHandler Microsoft.ServiceBus.Messaging.EventProcessorOptions receiverMessageHandlerOptions SetConnectionStrings() Calls SetConnectionStrings() and then sets the required storage connection string. Declaration protected override void SetConnectionStrings() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.SetConnectionStrings() StoreReceiverMessageHandler(Action<PartitionContext, EventData>, EventProcessorOptions) Stores the provided receiverMessageHandler and receiverMessageHandlerOptions . Declaration protected virtual void StoreReceiverMessageHandler(Action<PartitionContext, EventData> receiverMessageHandler, EventProcessorOptions receiverMessageHandlerOptions = null) Parameters Type Name Description System.Action < Microsoft.ServiceBus.Messaging.PartitionContext , Microsoft.ServiceBus.Messaging.EventData > receiverMessageHandler Microsoft.ServiceBus.Messaging.EventProcessorOptions receiverMessageHandlerOptions TriggerSettingsChecking() Triggers settings checking on EventHubPublisher and EventHubReceiver , then calls InstantiateReceiving() and InstantiatePublishing() . Declaration protected override void TriggerSettingsChecking() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.TriggerSettingsChecking() ValidateSettingsHaveChanged() Checks ValidateSettingsHaveChanged() and that StorageConnectionString have changed. Declaration protected override bool ValidateSettingsHaveChanged() Returns Type Description System.Boolean Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBusReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBusReceiver-1.html",
    "title": "Class AzureEventBusReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusReceiver<TAuthenticationToken> A IEventReceiver<TAuthenticationToken> that receives network messages, resolves handlers and executes the handler. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureEventBus <TAuthenticationToken> AzureEventBusReceiver<TAuthenticationToken> AzureQueuedEventBusReceiver<TAuthenticationToken> Inherited Members AzureEventBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.DefaultPrivateTopicName AzureEventBus<TAuthenticationToken>.DefaultPublicTopicName AzureEventBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureEventBusReceiver<TAuthenticationToken> : AzureEventBus<TAuthenticationToken>, IEventHandlerRegistrar, IHandlerRegistrar, IEventReceiver<TAuthenticationToken>, IEventReceiver Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureEventBusReceiver(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureEventBusReceiver<TAuthenticationToken> . Declaration public AzureEventBusReceiver(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Properties CurrentHandles The number of handles currently being executed. Declaration protected static long CurrentHandles { get; set; } Property Value Type Description System.Int64 FilterKey The that can be applied to the instances in the receivers Declaration protected string FilterKey { get; set; } Property Value Type Description System.String FilterKeyConfigurationKey The configuration key for the that can be applied to the instances in the receivers as used by IConfigurationManager . Declaration protected virtual string FilterKeyConfigurationKey { get; } Property Value Type Description System.String MaximumConcurrentReceiverProcessesCountConfigurationKey The configuration key for . as used by IConfigurationManager . Declaration protected virtual string MaximumConcurrentReceiverProcessesCountConfigurationKey { get; } Property Value Type Description System.String NumberOfReceiversCountConfigurationKey The configuration key for the number of receiver instances to create as used by IConfigurationManager . Declaration protected virtual string NumberOfReceiversCountConfigurationKey { get; } Property Value Type Description System.String Routes Gets the RouteManager . Declaration public static RouteManager Routes { get; } Property Value Type Description RouteManager Methods GetCurrentMaximumConcurrentReceiverProcessesCount() Returns MaximumConcurrentReceiverProcessesCountConfigurationKey from IConfigurationManager if no value is set, returns DefaultMaximumConcurrentReceiverProcessesCount . Declaration protected override int GetCurrentMaximumConcurrentReceiverProcessesCount() Returns Type Description System.Int32 Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() GetCurrentNumberOfReceiversCount() Returns NumberOfReceiversCountConfigurationKey from IConfigurationManager if no value is set, returns DefaultNumberOfReceiversCount . Declaration protected override int GetCurrentNumberOfReceiversCount() Returns Type Description System.Int32 Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) Calls InstantiateReceiving() then uses a to apply the FilterKey as a to the instances in serviceBusReceivers . Declaration protected override void InstantiateReceiving(NamespaceManager namespaceManager, IDictionary<int, SubscriptionClient> serviceBusReceivers, string topicName, string topicSubscriptionName) Parameters Type Name Description NamespaceManager namespaceManager The . IDictionary < System.Int32 , SubscriptionClient > serviceBusReceivers The receivers collection to place instances into. System.String topicName The topic name. System.String topicSubscriptionName The topic subscription name. Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<System.Int32, SubscriptionClient>, System.String, System.String) ReceiveEvent(BrokeredMessage) Receives a from the event bus. Declaration protected virtual void ReceiveEvent(BrokeredMessage message) Parameters Type Name Description BrokeredMessage message ReceiveEvent(IEvent<TAuthenticationToken>) Receives a IEvent<TAuthenticationToken> from the event bus. Declaration public virtual bool ? ReceiveEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Returns Type Description System.Nullable < System.Boolean > RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to events. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = false)where TMessage : IMessage Parameters Type Name Description Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event handler that will listen and respond to events. Declaration public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description Action <TMessage> handler Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Remarks In many cases the targetedType will be the handler class itself, what you actually want is the target of what is being updated. Start() Starts listening and processing instances of IEvent<TAuthenticationToken> from the event bus. Declaration public void Start() Implements IEventReceiver.Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBusPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBusPublisher-1.html",
    "title": "Class AzureEventBusPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusPublisher<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that resolves handlers and executes the handler. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureEventBus <TAuthenticationToken> AzureEventBusPublisher<TAuthenticationToken> Inherited Members AzureEventBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureEventBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureEventBus<TAuthenticationToken>.DefaultPrivateTopicName AzureEventBus<TAuthenticationToken>.DefaultPublicTopicName AzureEventBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureEventBusPublisher<TAuthenticationToken> : AzureEventBus<TAuthenticationToken>, IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureEventBusPublisher(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureEventBusPublisher<TAuthenticationToken> . Declaration public AzureEventBusPublisher(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Methods Publish<TEvent>(TEvent) Publishes the provided event on the event bus. Declaration public virtual void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Publishes the provided events on the event bus. Declaration public virtual void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description IEnumerable <TEvent> events Type Parameters Name Description TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureEventBus-1.html",
    "title": "Class AzureEventBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBus<TAuthenticationToken> A event bus based on AzureServiceBus<TAuthenticationToken> . Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureEventBus<TAuthenticationToken> AzureEventBusPublisher<TAuthenticationToken> AzureEventBusReceiver<TAuthenticationToken> Inherited Members AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureEventBus<TAuthenticationToken> : AzureServiceBus<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureEventBus(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper, Boolean) Instantiate a new instance of AzureEventBus<TAuthenticationToken> . Declaration protected AzureEventBus(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper System.Boolean isAPublisher Properties DefaultPrivateTopicName The default name of the private topic if no IConfigurationManager value is set. Declaration protected override string DefaultPrivateTopicName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicName DefaultPublicTopicName The default name of the public topic if no IConfigurationManager value is set. Declaration protected override string DefaultPublicTopicName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicName MessageBusConnectionStringConfigurationKey The configuration key for the message bus connection string as used by IConfigurationManager . Declaration protected override string MessageBusConnectionStringConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey PrivateTopicNameConfigurationKey The configuration key for the name of the private topic as used by IConfigurationManager . Declaration protected override string PrivateTopicNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey PrivateTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the private topic as used by IConfigurationManager . Declaration protected override string PrivateTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey PublicTopicNameConfigurationKey The configuration key for the name of the public topic as used by IConfigurationManager . Declaration protected override string PublicTopicNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PublicTopicNameConfigurationKey PublicTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the public topic as used by IConfigurationManager . Declaration protected override string PublicTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey The configuration key that specifies if an is thrown if the network lock is lost as used by IConfigurationManager . Declaration protected override string ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandHubReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandHubReceiverModule-1.html",
    "title": "Class AzureCommandHubReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandHubReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandHubReceiverModule<TAuthenticationToken> AzureCommandBusReceiverModule<TAuthenticationToken> AzureQueuedCommandHubReceiverModule<TAuthenticationToken> Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureCommandHubReceiverModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCommandHandlerRegistrar() Register the CQRS command handler registrar Declaration public virtual void RegisterCommandHandlerRegistrar() RegisterCommandMessageSerialiser() Register the CQRS command handler message serialiser Declaration public virtual void RegisterCommandMessageSerialiser()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandHubPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandHubPublisherModule-1.html",
    "title": "Class AzureCommandHubPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandHubPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureCommandHubPublisherModule<TAuthenticationToken> AzureCommandBusPublisherModule<TAuthenticationToken> AzureCommandBusSenderModule<TAuthenticationToken> Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureCommandHubPublisherModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCommandMessageSerialiser() Register the CQRS command handler message serialiser Declaration public virtual void RegisterCommandMessageSerialiser() RegisterCommandSender() Register the CQRS command publisher Declaration public virtual void RegisterCommandSender()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusSenderModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusSenderModule-1.html",
    "title": "Class AzureCommandBusSenderModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusSenderModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureCommandHubPublisherModule <TAuthenticationToken> AzureCommandBusSenderModule<TAuthenticationToken> Inherited Members AzureCommandHubPublisherModule<TAuthenticationToken>.Load() AzureCommandHubPublisherModule<TAuthenticationToken>.RegisterCommandSender() AzureCommandHubPublisherModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureCommandBusSenderModule<TAuthenticationToken> : AzureCommandHubPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusReceiverModule-1.html",
    "title": "Class AzureCommandBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandHubReceiverModule <TAuthenticationToken> AzureCommandBusReceiverModule<TAuthenticationToken> Inherited Members AzureCommandHubReceiverModule<TAuthenticationToken>.Load() AzureCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandHandlerRegistrar() AzureCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureCommandBusReceiverModule<TAuthenticationToken> : AzureCommandHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandBusPublisherModule-1.html",
    "title": "Class AzureCommandBusPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureCommandHubPublisherModule <TAuthenticationToken> AzureCommandBusPublisherModule<TAuthenticationToken> Inherited Members AzureCommandHubPublisherModule<TAuthenticationToken>.Load() AzureCommandHubPublisherModule<TAuthenticationToken>.RegisterCommandSender() AzureCommandHubPublisherModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureCommandBusPublisherModule<TAuthenticationToken> : AzureCommandHubPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.html",
    "title": "Namespace Cqrs.Azure.DocumentDb | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb Classes AzureDocumentDbHelper DocumentDbException GlobalAzureDocumentDbConnectionCache ThreadedAzureDocumentDbConnectionCache Interfaces IAzureDocumentDbConnectionCache IAzureDocumentDbHelper"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.ThreadedAzureDocumentDbConnectionCache.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.ThreadedAzureDocumentDbConnectionCache.html",
    "title": "Class ThreadedAzureDocumentDbConnectionCache | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ThreadedAzureDocumentDbConnectionCache Inheritance System.Object ThreadedAzureDocumentDbConnectionCache Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class ThreadedAzureDocumentDbConnectionCache : object, IAzureDocumentDbConnectionCache Methods SetClient(String, DocumentClient) Declaration public void SetClient(string key, DocumentClient client) Parameters Type Name Description System.String key DocumentClient client Implements IAzureDocumentDbConnectionCache.SetClient(String, DocumentClient) SetDatabase(String, Database) Declaration public void SetDatabase(string key, Database database) Parameters Type Name Description System.String key Database database Implements IAzureDocumentDbConnectionCache.SetDatabase(String, Database) SetDocumentCollection(String, DocumentCollection) Declaration public void SetDocumentCollection(string key, DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection Implements IAzureDocumentDbConnectionCache.SetDocumentCollection(String, DocumentCollection) TryGetClient(String, out DocumentClient) Declaration public bool TryGetClient(string key, out DocumentClient client) Parameters Type Name Description System.String key DocumentClient client Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetClient(String, out DocumentClient) TryGetDatabase(String, out Database) Declaration public bool TryGetDatabase(string key, out Database database) Parameters Type Name Description System.String key Database database Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetDatabase(String, out Database) TryGetDocumentCollection(String, out DocumentCollection) Declaration public bool TryGetDocumentCollection(string key, out DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetDocumentCollection(String, out DocumentCollection)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.Repositories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.Repositories Classes AzureRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure DocumentDB (CosmosDB)."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.AzureDocumentDbDataStoreFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.AzureDocumentDbDataStoreFactory.html",
    "title": "Class AzureDocumentDbDataStoreFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbDataStoreFactory A factory for obtaining DataStore collections from Azure DocumentDB Inheritance System.Object AzureDocumentDbDataStoreFactory Namespace : Cqrs.Azure.DocumentDb.Factories Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbDataStoreFactory : object Constructors AzureDocumentDbDataStoreFactory(IAzureDocumentDbDataStoreConnectionStringFactory, IAzureDocumentDbHelper, ILogger) Declaration public AzureDocumentDbDataStoreFactory(IAzureDocumentDbDataStoreConnectionStringFactory azureDocumentDbDataStoreConnectionStringFactory, IAzureDocumentDbHelper azureDocumentDbHelper, ILogger logger) Parameters Type Name Description IAzureDocumentDbDataStoreConnectionStringFactory azureDocumentDbDataStoreConnectionStringFactory IAzureDocumentDbHelper azureDocumentDbHelper ILogger logger Properties AzureDocumentDbDataStoreConnectionStringFactory Declaration protected IAzureDocumentDbDataStoreConnectionStringFactory AzureDocumentDbDataStoreConnectionStringFactory { get; } Property Value Type Description IAzureDocumentDbDataStoreConnectionStringFactory AzureDocumentDbHelper Declaration protected IAzureDocumentDbHelper AzureDocumentDbHelper { get; } Property Value Type Description IAzureDocumentDbHelper Logger Declaration protected ILogger Logger { get; } Property Value Type Description ILogger Methods GetClient() Declaration protected virtual DocumentClient GetClient() Returns Type Description DocumentClient GetCollection<TEntity>(DocumentClient, Database) Declaration protected virtual DocumentCollection GetCollection<TEntity>(DocumentClient client, Database database) Parameters Type Name Description DocumentClient client Database database Returns Type Description DocumentCollection Type Parameters Name Description TEntity GetDatabase(DocumentClient) Declaration protected virtual Database GetDatabase(DocumentClient client) Parameters Type Name Description DocumentClient client Returns Type Description Database GetQuery<TEntity>(DocumentClient, DocumentCollection) Declaration protected virtual IOrderedQueryable<TEntity> GetQuery<TEntity>(DocumentClient client, DocumentCollection collection) Parameters Type Name Description DocumentClient client DocumentCollection collection Returns Type Description IOrderedQueryable <TEntity> Type Parameters Name Description TEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRoot-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRoot-1.html",
    "title": "Class AkkaAggregateRoot<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaAggregateRoot<TAuthenticationToken> Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaAggregateRoot<TAuthenticationToken> HelloWorld Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public abstract class AkkaAggregateRoot<TAuthenticationToken> : ReceiveActor, IInternalActor, IInitializableActor, IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AkkaAggregateRoot(IUnitOfWork<TAuthenticationToken>, ILogger, IAkkaAggregateRepository<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration protected AkkaAggregateRoot(IUnitOfWork<TAuthenticationToken> unitOfWork, ILogger logger, IAkkaAggregateRepository<TAuthenticationToken> repository, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IUnitOfWork <TAuthenticationToken> unitOfWork cdmdotnet.Logging.ILogger logger IAkkaAggregateRepository <TAuthenticationToken> repository cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; set; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Id The identifier of this IAggregateRoot<TAuthenticationToken> . Declaration public Guid Id { get; protected set; } Property Value Type Description System.Guid Implements IAggregateRoot<TAuthenticationToken>.Id Logger Declaration protected ILogger Logger { get; set; } Property Value Type Description cdmdotnet.Logging.ILogger Repository Declaration protected IAkkaAggregateRepository<TAuthenticationToken> Repository { get; set; } Property Value Type Description IAkkaAggregateRepository <TAuthenticationToken> UnitOfWork Declaration protected IUnitOfWork<TAuthenticationToken> UnitOfWork { get; set; } Property Value Type Description IUnitOfWork <TAuthenticationToken> Version The current version of this IAggregateRoot<TAuthenticationToken> . Declaration public int Version { get; protected set; } Property Value Type Description System.Int32 Implements IAggregateRoot<TAuthenticationToken>.Version Methods ApplyChange(IEvent<TAuthenticationToken>) Declaration protected virtual void ApplyChange(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Execute<TCommand>(Action<TCommand>, TCommand) Declaration protected virtual void Execute<TCommand>(Action<TCommand> action, TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Action <TCommand> action TCommand command Type Parameters Name Description TCommand GetUncommittedChanges() Declaration public IEnumerable<IEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) Declaration public virtual void LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> history Implements IAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Declaration public virtual void MarkChangesAsCommitted() Implements IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted() PreStart() User overridable callback. Is called when an Actor is started. Actors are automatically started asynchronously when created. Empty default implementation. Declaration protected override void PreStart() Overrides Akka.Actor.ActorBase.PreStart()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.html",
    "title": "Namespace Cqrs.Akka.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Configuration Classes AkkaBusRegistrar<TAuthenticationToken> Triggers the BusRegistrar instantiates instances of IEventHandler<TAuthenticationToken, TEvent> and ICommandHandler<TAuthenticationToken, TCommand> classes that inherit the akka.net Akka.Actor.ReceiveActor via the IDependencyResolver so their message registration kicks in. Interfaces IHandlerResolver Resolves handlers for use with Akka.Net"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.AkkaBusRegistrar-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.AkkaBusRegistrar-1.html",
    "title": "Class AkkaBusRegistrar<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaBusRegistrar<TAuthenticationToken> Triggers the BusRegistrar instantiates instances of IEventHandler<TAuthenticationToken, TEvent> and ICommandHandler<TAuthenticationToken, TCommand> classes that inherit the akka.net Akka.Actor.ReceiveActor via the IDependencyResolver so their message registration kicks in. Inheritance System.Object BusRegistrar AkkaBusRegistrar<TAuthenticationToken> Inherited Members BusRegistrar.DependencyResolver BusRegistrar.GetEventHandlerRegistrar BusRegistrar.GetCommandHandlerRegistrar BusRegistrar.Register(Type[]) BusRegistrar.Register(Boolean, Func<Type, IEnumerable<Type>>, Boolean, Type[]) BusRegistrar.InvokeHandler(Type, Boolean, Func<Type, IEnumerable<Type>>, Type) BusRegistrar.BuildExecutorMethod(MethodInfo, Type, Type) BusRegistrar.ResolveEventHandlerInterface(Type) BusRegistrar.ResolveCommandHandlerInterface(Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Configuration Assembly : Cqrs.Akka.dll Syntax public class AkkaBusRegistrar<TAuthenticationToken> : BusRegistrar Type Parameters Name Description TAuthenticationToken Constructors AkkaBusRegistrar(IDependencyResolver, IHandlerResolver) Instantiates a new instance of AkkaBusRegistrar<TAuthenticationToken> . Declaration public AkkaBusRegistrar(IDependencyResolver dependencyResolver, IHandlerResolver handlerResolver) Parameters Type Name Description IDependencyResolver dependencyResolver IHandlerResolver handlerResolver Properties HandlerResolver Gets or sets the IHandlerResolver . Declaration protected IHandlerResolver HandlerResolver { get; } Property Value Type Description IHandlerResolver Methods BuildDelegateAction(Type, Func<Type, IEnumerable<Type>>) Builds a HandlerDelegate that will resolve the provided executorType and invoke the Handle method, when executed. Declaration protected override HandlerDelegate BuildDelegateAction(Type executorType, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface) Parameters Type Name Description System.Type executorType The type of IHandler to resolve.> System.Func < System.Type , System.Collections.Generic.IEnumerable < System.Type >> resolveMessageHandlerInterface Not used. Returns Type Description HandlerDelegate Overrides BusRegistrar.BuildDelegateAction(Type, Func<Type, IEnumerable<Type>>) InvokeHandlerDelegate(MethodInfo, Boolean, HandlerDelegate) Invokes handlerDelegate , fetching the corresponding \"HoldMessageLock\" configuration setting Declaration protected override void InvokeHandlerDelegate(MethodInfo registerExecutorMethod, bool trueForEventsFalseForCommands, HandlerDelegate handlerDelegate) Parameters Type Name Description System.Reflection.MethodInfo registerExecutorMethod The System.Reflection.MethodInfo to use to invoke handlerDelegate . System.Boolean trueForEventsFalseForCommands Indicates if this is registers IEventHandler or ICommandHandler<TAuthenticationToken, TCommand> . HandlerDelegate handlerDelegate The actual HandlerDelegate that gets executed. Overrides BusRegistrar.InvokeHandlerDelegate(MethodInfo, Boolean, HandlerDelegate)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher-2.html",
    "title": "Interface IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor Inherited Members IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public interface IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> : IConcurrentAkkaCommandPublisher<TAuthenticationToken>, IAkkaCommandPublisher<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. TTarget The System.Type of the object that is targeted that needs concurrency."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IAkkaCommandPublisherProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IAkkaCommandPublisherProxy-1.html",
    "title": "Interface IAkkaCommandPublisherProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaCommandPublisherProxy<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the ICommand<TAuthenticationToken> on the public command bus. Inherited Members ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public interface IAkkaCommandPublisherProxy<TAuthenticationToken> : ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.ConcurrentAkkaCommandPublisher-2.html",
    "title": "Class ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public class ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> : ReceiveActor, IInternalActor, IInitializableActor, IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget>, IConcurrentAkkaCommandPublisher<TAuthenticationToken>, IAkkaCommandPublisher<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. TTarget The System.Type of the object that is targeted that needs concurrency. Constructors ConcurrentAkkaCommandPublisher(IActorRef, ICommandReceiver<TAuthenticationToken>) Declaration public ConcurrentAkkaCommandPublisher(IActorRef actorReference, ICommandReceiver<TAuthenticationToken> commandReceiver) Parameters Type Name Description Akka.Actor.IActorRef actorReference ICommandReceiver <TAuthenticationToken> commandReceiver Properties ActorReference Declaration protected IActorRef ActorReference { get; } Property Value Type Description Akka.Actor.IActorRef CommandReceiver Declaration protected ICommandReceiver<TAuthenticationToken> CommandReceiver { get; } Property Value Type Description ICommandReceiver <TAuthenticationToken> Methods Publish<TCommand>(TCommand) Declaration public void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publish<TCommand>(IEnumerable<TCommand>) Declaration public void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits until the specified condition is satisfied an event of TEvent Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Send<TCommand>(TCommand) Declaration public void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Send<TCommand>(IEnumerable<TCommand>) Declaration public void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBusProxy-1.BusActor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBusProxy-1.BusActor.html",
    "title": "Class AkkaCommandBusProxy<TAuthenticationToken>.BusActor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaCommandBusProxy<TAuthenticationToken>.BusActor Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaCommandBusProxy<TAuthenticationToken>.BusActor Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public class BusActor : ReceiveActor, IInternalActor, IInitializableActor Constructors BusActor(IAkkaCommandPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration public BusActor(IAkkaCommandPublisher<TAuthenticationToken> commandHandlerResolver, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IAkkaCommandPublisher <TAuthenticationToken> commandHandlerResolver cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CommandHandlerResolver Declaration protected IAkkaCommandPublisher<TAuthenticationToken> CommandHandlerResolver { get; } Property Value Type Description IAkkaCommandPublisher <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Methods ExecuteReceive(ICommand<TAuthenticationToken>) Declaration protected virtual void ExecuteReceive(ICommand<TAuthenticationToken> command) Parameters Type Name Description ICommand <TAuthenticationToken> command"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.HttpResponseMessage-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.HttpResponseMessage-1.html",
    "title": "Class HttpResponseMessage<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HttpResponseMessage<TData> A System.Net.Http.HttpResponseMessage that supports auto self-documenting generation. Inheritance System.Object System.Net.Http.HttpResponseMessage HttpResponseMessage<TData> Inherited Members System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode() System.Net.Http.HttpResponseMessage.ToString() System.Net.Http.HttpResponseMessage.Dispose(System.Boolean) System.Net.Http.HttpResponseMessage.Dispose() System.Net.Http.HttpResponseMessage.Version System.Net.Http.HttpResponseMessage.Content System.Net.Http.HttpResponseMessage.StatusCode System.Net.Http.HttpResponseMessage.ReasonPhrase System.Net.Http.HttpResponseMessage.Headers System.Net.Http.HttpResponseMessage.RequestMessage System.Net.Http.HttpResponseMessage.IsSuccessStatusCode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public class HttpResponseMessage<TData> : HttpResponseMessage, IDisposable Type Parameters Name Description TData The System.Type of data returned."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.BooleanConverterEx.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.BooleanConverterEx.html",
    "title": "Class BooleanConverterEx | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BooleanConverterEx Provides a System.ComponentModel.TypeConverter to convert System.Boolean objects to and from various other representations with support for HTTP specification specific values such as ON or OFF. Inheritance System.Object System.ComponentModel.TypeConverter System.ComponentModel.BooleanConverter BooleanConverterEx Inherited Members System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.CanConvertFrom(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type) System.ComponentModel.TypeConverter.ConvertFrom(System.Object) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String) System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary) System.ComponentModel.TypeConverter.GetConvertFromException(System.Object) System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type) System.ComponentModel.TypeConverter.GetCreateInstanceSupported() System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetProperties(System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[]) System.ComponentModel.TypeConverter.GetPropertiesSupported() System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValues() System.ComponentModel.TypeConverter.GetStandardValuesExclusive() System.ComponentModel.TypeConverter.GetStandardValuesSupported() System.ComponentModel.TypeConverter.IsValid(System.Object) System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters Assembly : Cqrs.WebApi.dll Syntax public class BooleanConverterEx : BooleanConverter Methods ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given value object to a System.Boolean object. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context An System.ComponentModel.ITypeDescriptorContext that provides a format context. System.Globalization.CultureInfo culture A System.Globalization.CultureInfo that specifies the culture to which to convert. System.Object value The System.Object to convert. Returns Type Description System.Object An System.Object that represents the converted value . Overrides System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.MultipartFormatterSettings.html",
    "title": "Class MultipartFormatterSettings | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MultipartFormatterSettings Settings for use during multi-part form-data formatting. Inheritance System.Object MultipartFormatterSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Assembly : Cqrs.WebApi.dll Syntax public class MultipartFormatterSettings Properties CultureInfo Default is System.Globalization.CultureInfo.CurrentCulture Declaration public CultureInfo CultureInfo { get; set; } Property Value Type Description System.Globalization.CultureInfo SerializeByteArrayAsHttpFile Serialize byte array property as HttpFile when sending data if true or as indexed array if false (default value is \"false) Declaration public bool SerializeByteArrayAsHttpFile { get; set; } Property Value Type Description System.Boolean ValidateNonNullableMissedProperty Add validation error \"The value is required.\" if no value is present in request for non-nullable property if this parameter is \"true\" (default value is \"false) Declaration public bool ValidateNonNullableMissedProperty { get; set; } Property Value Type Description System.Boolean"
  },
  "README.html": {
    "href": "README.html",
    "title": "CQRS.NET | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "CQRS.NET https://www.nuget.org/packages/Cqrs Nightly build packages and symbols available at https://cqrs-nightly-nuget-builds.azurewebsites.net/ The framework A lightweight enterprise framework to write CQRS, event-sourced and micro-service applications in hybrid multi-datacentre, on-premise and Azure environments. Currently published as nuget packages @ http://www.nuget.org . It is written in C# and targets .NET 4.0 (where possible) and .NET 4.5. CQRS.NET borrows heavily from CQRSlite ( https://github.com/gautema/cqrslite ), from some point in 2013. CQRS.NET has been designed with modularity in mind... see the number of technology packages below you can chose from. Every package and design choice made should be interchangeable with custom code if needed. Tutorials and getting started For those new to CQRS.NET, we strongly suggest you have a look at our basic Hello World Tutorial that covers basic commands and events. Or you have a look at our basic Northwind Tutorial which takes a look into queries, views, read stores and read models, then commands, eents aggregates and event handlers. And for those looking for a more thorough tutorial we suggest you start with the getting started section in the wiki Documentation CQRS.NET API reference documentation is available to browse. We are adding more and more documentation as we edit each file. By version 3.0 we aim to have all public methods and classes documented. User documentation is starting off for now in the wiki section of this project. We strongly invite people to post questions and issues which we'll answer and work on. Sample projects. Several sample projects are located within the code and on our wiki . These show a few different approaches/common usage scenarios of the framework. One sample is the original sample from CQRSlite, ported to use CQRS.NET - this is not documented and found within the main Visual Studio solution in our code base. The second is a rather basic Hello World sample that covers basic commands and events, but not queries. The third is a more traditional mixed-mode scenario, Northwind Tutorial thats starts off by replacing one query, then one create, update and delete operation out of several in an existing website. The project should compile without any setup in .NET 4.5.2. I'm guessing Mono 3.10.0 should work too. Commerical Support Commercial support is now available through our partner company Chinchilla Software . Continual improvements This project is actively developed, however we sometimes have specific feature requests that are outside of our roadmap and plan. We're always open to new ideas and requests for new modules and technology connectors that you need. The biggest requests in version 2.0 were to have better akka.net modules as well as support for Azure blob/table storage and performance/telemetry. Features Command sending and event publishing. Unit of work through session with aggregate tracking (I'm tempted to remove the UOW). Repository for getting and saving aggregates and process managers. Strategy/Specification pattern for querying. Optimistic concurrency checking. In process bus with autoregistration of handlers. Azure service bus/event hub for event bus'ing. Azure service bus/event hub for command bus'ing. Greg Youngs EventStore for event sourcing. MongoDB for entity, view and project persistence and event sourcing. Azure CosmosDB for event sourcing, entity, view and project persistence. Azure Blob/Table Storage for event sourcing, entity, view and project persistence. Sql for event sourcing, entity, view and project persistence with built-in mirroring. Advanced concurrency support via akka.net Projects / Nuget packages: See Nuget Packages in the wiki."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.html",
    "title": "Class ClientController | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ClientController A WebAPI RESTful service that provide a 'no configuration required' java-script client ready for developers to use. Inheritance System.Object System.Web.Http.ApiController ClientController Inherited Members System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext, System.Threading.CancellationToken) System.Web.Http.ApiController.Validate<TEntity>(TEntity) System.Web.Http.ApiController.Validate<TEntity>(TEntity, System.String) System.Web.Http.ApiController.BadRequest() System.Web.Http.ApiController.BadRequest(System.String) System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary) System.Web.Http.ApiController.Conflict() System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.String) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.Net.Http.Headers.MediaTypeHeaderValue) System.Web.Http.ApiController.Created<T>(System.String, T) System.Web.Http.ApiController.Created<T>(System.Uri, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Object, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>, T) System.Web.Http.ApiController.InternalServerError() System.Web.Http.ApiController.InternalServerError(System.Exception) System.Web.Http.ApiController.Json<T>(T) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings, System.Text.Encoding) System.Web.Http.ApiController.NotFound() System.Web.Http.ApiController.Ok() System.Web.Http.ApiController.Ok<T>(T) System.Web.Http.ApiController.Redirect(System.String) System.Web.Http.ApiController.Redirect(System.Uri) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Object) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>) System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage) System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode) System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[]) System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable<System.Net.Http.Headers.AuthenticationHeaderValue>) System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext) System.Web.Http.ApiController.Dispose() System.Web.Http.ApiController.Dispose(System.Boolean) System.Web.Http.ApiController.Configuration System.Web.Http.ApiController.ControllerContext System.Web.Http.ApiController.ActionContext System.Web.Http.ApiController.ModelState System.Web.Http.ApiController.Request System.Web.Http.ApiController.RequestContext System.Web.Http.ApiController.Url System.Web.Http.ApiController.User System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Controllers Assembly : Cqrs.WebApi.dll Syntax [RoutePrefix(\"Client\")] public class ClientController : ApiController, IHttpController, IDisposable Methods Index() A java-script file with a 'no configuration required' java-script client Declaration [Route(\"\")] [HttpGet] public virtual HttpResponseMessage Index() Returns Type Description System.Net.Http.HttpResponseMessage"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.ApiParameterModel.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.ApiParameterModel.html",
    "title": "Class ClientController.ApiParameterModel | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ClientController.ApiParameterModel A parameter for a WebAPI action method. Inheritance System.Object ClientController.ApiParameterModel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Controllers Assembly : Cqrs.WebApi.dll Syntax public class ApiParameterModel Constructors ApiParameterModel(ApiParameterDescription) Instantiates a new instance of ClientController.ApiParameterModel with the provided apiParameterDescription . Declaration public ApiParameterModel(ApiParameterDescription apiParameterDescription) Parameters Type Name Description System.Web.Http.Description.ApiParameterDescription apiParameterDescription Properties IsBodyParameter Indicates if the parameter is provided in the body of the request or not. Declaration public bool IsBodyParameter { get; set; } Property Value Type Description System.Boolean IsUriParameter Indicates if the parameter is provided in the URL of the request or not. Declaration public bool IsUriParameter { get; set; } Property Value Type Description System.Boolean Name The name of the parameter. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.ApiMethodModel.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Controllers.ClientController.ApiMethodModel.html",
    "title": "Class ClientController.ApiMethodModel | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ClientController.ApiMethodModel A WebAPI action method. Inheritance System.Object ClientController.ApiMethodModel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Controllers Assembly : Cqrs.WebApi.dll Syntax public class ApiMethodModel Constructors ApiMethodModel(ApiDescription) Instantiates a new instance of ClientController.ApiMethodModel with the provided apiDescription . Declaration public ApiMethodModel(ApiDescription apiDescription) Parameters Type Name Description System.Web.Http.Description.ApiDescription apiDescription Properties ActionName The name of the action method. Declaration public string ActionName { get; set; } Property Value Type Description System.String ControllerName The name of the System.Web.Http.ApiController this action method is in. Declaration public string ControllerName { get; set; } Property Value Type Description System.String Method The type of the System.Net.Http.HttpMethod . Declaration public string Method { get; set; } Property Value Type Description System.String Parameters The ClientController.ApiParameterModel of this action method. Declaration public IEnumerable<ClientController.ApiParameterModel> Parameters { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < ClientController.ApiParameterModel > Url The URL of the action method. Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Configuration.html",
    "title": "Namespace Cqrs.WebApi.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Configuration Classes WebApiConfig A configuration class for WebAPI."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Configuration.WebApiConfig.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Configuration.WebApiConfig.html",
    "title": "Class WebApiConfig | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class WebApiConfig A configuration class for WebAPI. Inheritance System.Object WebApiConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Configuration Assembly : Cqrs.WebApi.dll Syntax public class WebApiConfig Methods Register(HttpConfiguration) Registers the require routes, set relevant CORS settings and defines WebAPI relevant JSON serialisation settings. Declaration public static void Register(HttpConfiguration config) Parameters Type Name Description System.Web.Http.HttpConfiguration config"
  },
  "wiki/docs/api/2.2/html/Cqrs.Web.Mvc.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Web.Mvc.html",
    "title": "Namespace Cqrs.Web.Mvc | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Web.Mvc Classes NullableGuidBinder A System.Web.Mvc.IModelBinder designed to return System.Guid.Empty is not System.Guid is provided."
  },
  "wiki/docs/api/2.2/html/Cqrs.Web.Mvc.NullableGuidBinder.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Web.Mvc.NullableGuidBinder.html",
    "title": "Class NullableGuidBinder | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NullableGuidBinder A System.Web.Mvc.IModelBinder designed to return System.Guid.Empty is not System.Guid is provided. Inheritance System.Object System.Web.Mvc.DefaultModelBinder NullableGuidBinder Inherited Members System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.ComponentModel.PropertyDescriptor) System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.Type) System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String, System.Int32) System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String, System.String) System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String, System.String) System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext) System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.ComponentModel.PropertyDescriptor, System.Object) System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.ComponentModel.PropertyDescriptor, System.Object) System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.ComponentModel.PropertyDescriptor, System.Object) System.Web.Mvc.DefaultModelBinder.Binders System.Web.Mvc.DefaultModelBinder.ResourceClassKey System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Web.Mvc Assembly : Cqrs.Web.Mvc.dll Syntax public class NullableGuidBinder : DefaultModelBinder, IModelBinder Methods GetPropertyValue(ControllerContext, ModelBindingContext, PropertyDescriptor, IModelBinder) Returns the value of a property using the specified controllerContext , bindingContext , propertyDescriptor , and propertyBinder . Declaration protected override object GetPropertyValue(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, IModelBinder propertyBinder) Parameters Type Name Description System.Web.Mvc.ControllerContext controllerContext The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data. System.Web.Mvc.ModelBindingContext bindingContext The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider. System.ComponentModel.PropertyDescriptor propertyDescriptor The descriptor for the property to access. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value. System.Web.Mvc.IModelBinder propertyBinder An object that provides a way to bind the property. Returns Type Description System.Object An object that represents the property value. Overrides System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext, System.Web.Mvc.ModelBindingContext, System.ComponentModel.PropertyDescriptor, System.Web.Mvc.IModelBinder)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.html",
    "title": "Namespace Cqrs.Tests.Substitutes | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Substitutes Classes OrderEntity TestAggregate TestAggregateCreated TestAggregateDidSomething TestAggregateDidSomethingElse TestAggregateDidSomethingElse2 TestAggregateDidSomethingHandler TestAggregateDoSomething TestAggregateDoSomething2 TestAggregateDoSomething3 TestAggregateDoSomethingElseHandler TestAggregateDoSomethingHandler TestAggregateNoParameterLessConstructor TestAggregateRepository TestCommandPublisher TestDependencyResolver TestEventPublisher TestEventStore TestEventStoreWithBugs TestHandleRegistrar TestHandlerListItem TestInMemoryEventStore TestInMemorySnapshotStore TestSaga TestSagaEventHandlers TestSagaUnitOfWork TestSnapshotAggregate TestSnapshotAggregateSnapshot TestSnapshotEventStore TestSnapshotStore"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotStore.html",
    "title": "Class TestSnapshotStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSnapshotStore Inheritance System.Object TestSnapshotStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSnapshotStore : ISnapshotStore Properties SavedVersion Declaration public int SavedVersion { get; } Property Value Type Description System.Int32 VerifyGet Declaration public bool VerifyGet { get; } Property Value Type Description System.Boolean VerifySave Declaration public bool VerifySave { get; } Property Value Type Description System.Boolean Methods Get<TAggregateRoot>(Guid) Declaration public Snapshot Get<TAggregateRoot>(Guid id) Parameters Type Name Description System.Guid id Returns Type Description Snapshot Type Parameters Name Description TAggregateRoot Implements ISnapshotStore.Get<TAggregateRoot>(Guid) Save(Snapshot) Declaration public void Save(Snapshot snapshot) Parameters Type Name Description Snapshot snapshot Implements ISnapshotStore.Save(Snapshot)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotEventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotEventStore.html",
    "title": "Class TestSnapshotEventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSnapshotEventStore Inheritance System.Object TestEventStore TestSnapshotEventStore Inherited Members TestEventStore.EmptyGuid TestEventStore.Save(Type, IEvent<ISingleSignOnToken>) TestEventStore.Get<T>(Guid, Boolean, Int32) TestEventStore.Get(Guid) TestEventStore.Save<T>(IEvent<ISingleSignOnToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSnapshotEventStore : TestEventStore, IEventStore<ISingleSignOnToken> Methods Get(Type, Guid, Boolean, Int32) Declaration public override IEnumerable<IEvent<ISingleSignOnToken>> Get(Type aggregateType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateType System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Overrides TestEventStore.Get(Type, Guid, Boolean, Int32)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot.html",
    "title": "Class TestSnapshotAggregateSnapshot | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSnapshotAggregateSnapshot Inheritance System.Object Snapshot TestSnapshotAggregateSnapshot Inherited Members Snapshot.Id Snapshot.Version System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSnapshotAggregateSnapshot : Snapshot Properties Number Declaration public int Number { get; set; } Property Value Type Description System.Int32"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotAggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSnapshotAggregate.html",
    "title": "Class TestSnapshotAggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSnapshotAggregate Inheritance System.Object AggregateRoot < ISingleSignOnToken > SnapshotAggregateRoot < ISingleSignOnToken , TestSnapshotAggregateSnapshot > TestSnapshotAggregate Inherited Members SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.GetSnapshot() SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.Restore(TestSnapshotAggregateSnapshot) SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.CreateSnapshot() SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>.RestoreFromSnapshot(TestSnapshotAggregateSnapshot) AggregateRoot<ISingleSignOnToken>.Id AggregateRoot<ISingleSignOnToken>.Version AggregateRoot<ISingleSignOnToken>.GetUncommittedChanges() AggregateRoot<ISingleSignOnToken>.MarkChangesAsCommitted() AggregateRoot<ISingleSignOnToken>.LoadFromHistory(IEnumerable<IEvent<ISingleSignOnToken>>) AggregateRoot<ISingleSignOnToken>.ApplyChange(IEvent<ISingleSignOnToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSnapshotAggregate : SnapshotAggregateRoot<ISingleSignOnToken, TestSnapshotAggregateSnapshot>, IAggregateRoot<ISingleSignOnToken> Constructors TestSnapshotAggregate(Nullable<Guid>) Declaration public TestSnapshotAggregate(Guid? id = null) Parameters Type Name Description System.Nullable < System.Guid > id Properties Loaded Declaration public bool Loaded { get; } Property Value Type Description System.Boolean Number Declaration public int Number { get; } Property Value Type Description System.Int32 Restored Declaration public bool Restored { get; } Property Value Type Description System.Boolean Methods CreateSnapshot() Declaration protected override TestSnapshotAggregateSnapshot CreateSnapshot() Returns Type Description TestSnapshotAggregateSnapshot Overrides Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.CreateSnapshot() DoSomething() Declaration public void DoSomething() RestoreFromSnapshot(TestSnapshotAggregateSnapshot) Declaration protected override void RestoreFromSnapshot(TestSnapshotAggregateSnapshot snapshot) Parameters Type Name Description TestSnapshotAggregateSnapshot snapshot Overrides Cqrs.Snapshots.SnapshotAggregateRoot<Cqrs.Authentication.ISingleSignOnToken, Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot>.RestoreFromSnapshot(Cqrs.Tests.Substitutes.TestSnapshotAggregateSnapshot)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSagaUnitOfWork.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSagaUnitOfWork.html",
    "title": "Class TestSagaUnitOfWork | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSagaUnitOfWork Inheritance System.Object TestSagaUnitOfWork Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSagaUnitOfWork : ISagaUnitOfWork<ISingleSignOnToken>, ISagaUnitOfWork<Guid> Properties TestGuidSagasWithAddCountGetCountAndCommitCount Declaration public static IDictionary<Guid, Tuple<ISaga<Guid>, int, int, int>> TestGuidSagasWithAddCountGetCountAndCommitCount { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < ISaga < System.Guid >, System.Int32 , System.Int32 , System.Int32 >> TestSagasWithAddCountGetCountAndCommitCount Declaration public static IDictionary<Guid, Tuple<ISaga<ISingleSignOnToken>, int, int, int>> TestSagasWithAddCountGetCountAndCommitCount { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < ISaga < ISingleSignOnToken >, System.Int32 , System.Int32 , System.Int32 >> Methods Add<TSaga>(TSaga) Add an item into the ISagaUnitOfWork<TAuthenticationToken> ready to be committed. Declaration public void Add<TSaga>(TSaga saga)where TSaga : ISaga<Guid> Parameters Type Name Description TSaga saga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Add<TSaga>(TSaga) Commit() Commit any changed Saga<TAuthenticationToken> added to this ISagaUnitOfWork<TAuthenticationToken> via Add<TSaga>(TSaga) Declaration public void Commit() Implements ISagaUnitOfWork<TAuthenticationToken>.Commit() ISagaUnitOfWork<TAuthenticationToken>.Commit() Get<TSaga>(Guid, Nullable<Int32>) Get an item from the ISagaUnitOfWork<TAuthenticationToken> if it has already been loaded. Declaration public TSaga Get<TSaga>(Guid id, int ? expectedVersion = null)where TSaga : ISaga<Guid> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TSaga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Get<TSaga>(Guid, Nullable<Int32>) Explicit Interface Implementations ISagaUnitOfWork<ISingleSignOnToken>.Add<TSaga>(TSaga) Add an item into the ISagaUnitOfWork<TAuthenticationToken> ready to be committed. Declaration void ISagaUnitOfWork<ISingleSignOnToken>.Add<TSaga>(TSaga saga)where TSaga : ISaga<ISingleSignOnToken> Parameters Type Name Description TSaga saga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Add<TSaga>(TSaga) ISagaUnitOfWork<ISingleSignOnToken>.Get<TSaga>(Guid, Nullable<Int32>) Get an item from the ISagaUnitOfWork<TAuthenticationToken> if it has already been loaded. Declaration TSaga ISagaUnitOfWork<ISingleSignOnToken>.Get<TSaga>(Guid id, int ? expectedVersion)where TSaga : ISaga<ISingleSignOnToken> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TSaga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Get<TSaga>(Guid, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSagaEventHandlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSagaEventHandlers.html",
    "title": "Class TestSagaEventHandlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSagaEventHandlers Inheritance System.Object SagaEventHandler < ISingleSignOnToken , TestSaga > TestSagaEventHandlers Inherited Members SagaEventHandler<ISingleSignOnToken, TestSaga>.SagaUnitOfWork SagaEventHandler<ISingleSignOnToken, TestSaga>.DependencyResolver SagaEventHandler<ISingleSignOnToken, TestSaga>.Logger SagaEventHandler<ISingleSignOnToken, TestSaga>.GetSaga(Guid) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSagaEventHandlers : SagaEventHandler<ISingleSignOnToken, TestSaga>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomething>, IMessageHandler<TestAggregateDidSomething>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse>, IMessageHandler<TestAggregateDidSomethingElse>, IEventHandler<ISingleSignOnToken, TestAggregateDidSomethingElse2>, IMessageHandler<TestAggregateDidSomethingElse2>, IEventHandler, IHandler Constructors TestSagaEventHandlers(IDependencyResolver, ILogger) A constructor for the IAggregateFactory Declaration public TestSagaEventHandlers(IDependencyResolver dependencyResolver, ILogger logger) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger TestSagaEventHandlers(IDependencyResolver, ILogger, ISagaUnitOfWork<ISingleSignOnToken>) Declaration public TestSagaEventHandlers(IDependencyResolver dependencyResolver, ILogger logger, ISagaUnitOfWork<ISingleSignOnToken> sagaUnitOfWork) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger ISagaUnitOfWork < ISingleSignOnToken > sagaUnitOfWork Properties TimesRun Declaration public int TimesRun { get; set; } Property Value Type Description System.Int32 Methods Handle(TestAggregateDidSomething) Declaration public void Handle(TestAggregateDidSomething message) Parameters Type Name Description TestAggregateDidSomething message Implements IMessageHandler<TMessage>.Handle(TMessage) Handle(TestAggregateDidSomethingElse) Declaration public void Handle(TestAggregateDidSomethingElse message) Parameters Type Name Description TestAggregateDidSomethingElse message Implements IMessageHandler<TMessage>.Handle(TMessage) Handle(TestAggregateDidSomethingElse2) Declaration public void Handle(TestAggregateDidSomethingElse2 message) Parameters Type Name Description TestAggregateDidSomethingElse2 message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSaga.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestSaga.html",
    "title": "Class TestSaga | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestSaga Inheritance System.Object Saga < ISingleSignOnToken > TestSaga Inherited Members Saga<ISingleSignOnToken>.Rsn Saga<ISingleSignOnToken>.Id Saga<ISingleSignOnToken>.Version Saga<ISingleSignOnToken>.CommandPublisher Saga<ISingleSignOnToken>.DependencyResolver Saga<ISingleSignOnToken>.Logger Saga<ISingleSignOnToken>.GetUncommittedChanges() Saga<ISingleSignOnToken>.MarkChangesAsCommitted() Saga<ISingleSignOnToken>.LoadFromHistory(IEnumerable<ISagaEvent<ISingleSignOnToken>>) Saga<ISingleSignOnToken>.ApplyChange(ISagaEvent<ISingleSignOnToken>) Saga<ISingleSignOnToken>.ApplyChange(IEvent<ISingleSignOnToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestSaga : Saga<ISingleSignOnToken>, ISaga<ISingleSignOnToken> Constructors TestSaga(IDependencyResolver, Guid) Declaration public TestSaga(IDependencyResolver dependencyResolver, Guid id) Parameters Type Name Description IDependencyResolver dependencyResolver System.Guid id Fields DidSomething Declaration public bool DidSomething Field Value Type Description System.Boolean DidSomethingCount Declaration public int DidSomethingCount Field Value Type Description System.Int32 DidSomethingElse Declaration public bool DidSomethingElse Field Value Type Description System.Boolean DidSomethingElse2 Declaration public bool DidSomethingElse2 Field Value Type Description System.Boolean Responded Declaration public bool Responded Field Value Type Description System.Boolean Methods Apply(TestAggregateDidSomething) Declaration public void Apply(TestAggregateDidSomething e) Parameters Type Name Description TestAggregateDidSomething e Apply(TestAggregateDidSomethingElse) Declaration public void Apply(TestAggregateDidSomethingElse e) Parameters Type Name Description TestAggregateDidSomethingElse e Handle(TestAggregateDidSomething) Declaration public void Handle(TestAggregateDidSomething message) Parameters Type Name Description TestAggregateDidSomething message Handle(TestAggregateDidSomethingElse) Declaration public void Handle(TestAggregateDidSomethingElse message) Parameters Type Name Description TestAggregateDidSomethingElse message Handle(TestAggregateDidSomethingElse2) Declaration public void Handle(TestAggregateDidSomethingElse2 message) Parameters Type Name Description TestAggregateDidSomethingElse2 message"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestInMemorySnapshotStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestInMemorySnapshotStore.html",
    "title": "Class TestInMemorySnapshotStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestInMemorySnapshotStore Inheritance System.Object TestInMemorySnapshotStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestInMemorySnapshotStore : ISnapshotStore Properties FirstSaved Declaration public bool FirstSaved { get; } Property Value Type Description System.Boolean SavedVersion Declaration public int SavedVersion { get; } Property Value Type Description System.Int32 Methods Get<TAggregateRoot>(Guid) Declaration public Snapshot Get<TAggregateRoot>(Guid id) Parameters Type Name Description System.Guid id Returns Type Description Snapshot Type Parameters Name Description TAggregateRoot Implements ISnapshotStore.Get<TAggregateRoot>(Guid) Save(Snapshot) Declaration public void Save(Snapshot snapshot) Parameters Type Name Description Snapshot snapshot Implements ISnapshotStore.Save(Snapshot)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestInMemoryEventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestInMemoryEventStore.html",
    "title": "Class TestInMemoryEventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestInMemoryEventStore Inheritance System.Object TestInMemoryEventStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestInMemoryEventStore : IEventStore<ISingleSignOnToken> Fields Events Declaration public readonly List<IEvent<ISingleSignOnToken>> Events Field Value Type Description System.Collections.Generic.List < IEvent < ISingleSignOnToken >> Methods Get(Guid) Declaration public IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Declaration public IEnumerable<IEvent<ISingleSignOnToken>> Get(Type aggregateType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateType System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Get<T>(Guid, Boolean, Int32) Declaration public IEnumerable<IEvent<ISingleSignOnToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) Save(Type, IEvent<ISingleSignOnToken>) Declaration public void Save(Type aggregateRootType, IEvent<ISingleSignOnToken> event) Parameters Type Name Description System.Type aggregateRootType IEvent < ISingleSignOnToken > event Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<ISingleSignOnToken>) Declaration public void Save<T>(IEvent<ISingleSignOnToken> event) Parameters Type Name Description IEvent < ISingleSignOnToken > event Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestHandlerListItem.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestHandlerListItem.html",
    "title": "Class TestHandlerListItem | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestHandlerListItem Inheritance System.Object TestHandlerListItem Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestHandlerListItem Properties Handler Declaration public dynamic Handler { get; set; } Property Value Type Description System.Object Type Declaration public Type Type { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestHandleRegistrar.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestHandleRegistrar.html",
    "title": "Class TestHandleRegistrar | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestHandleRegistrar Inheritance System.Object TestHandleRegistrar Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestHandleRegistrar : IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar Fields HandlerList Declaration public static readonly IList<TestHandlerListItem> HandlerList Field Value Type Description System.Collections.Generic.IList < TestHandlerListItem > Methods RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<T>(Action<T>, Type, Boolean) Declaration public void RegisterHandler<T>(Action<T> handler, Type targetedType, bool holdMessageLock = true)where T : IMessage Parameters Type Name Description System.Action <T> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description T Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventStoreWithBugs.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventStoreWithBugs.html",
    "title": "Class TestEventStoreWithBugs | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEventStoreWithBugs Inheritance System.Object TestEventStoreWithBugs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestEventStoreWithBugs : IEventStore<ISingleSignOnToken> Methods Get(Guid) Declaration public IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Declaration public IEnumerable<IEvent<ISingleSignOnToken>> Get(Type aggregateType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateType System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Get<T>(Guid, Boolean, Int32) Declaration public IEnumerable<IEvent<ISingleSignOnToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) Save(Type, IEvent<ISingleSignOnToken>) Declaration public void Save(Type aggregateRootType, IEvent<ISingleSignOnToken> event) Parameters Type Name Description System.Type aggregateRootType IEvent < ISingleSignOnToken > event Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<ISingleSignOnToken>) Declaration public void Save<T>(IEvent<ISingleSignOnToken> eventDescriptor) Parameters Type Name Description IEvent < ISingleSignOnToken > eventDescriptor Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventStore.html",
    "title": "Class TestEventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEventStore Inheritance System.Object TestEventStore TestSnapshotEventStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestEventStore : IEventStore<ISingleSignOnToken> Constructors TestEventStore() Declaration public TestEventStore() Properties EmptyGuid Declaration public Guid EmptyGuid { get; } Property Value Type Description System.Guid Methods Get(Guid) Declaration public IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Declaration public virtual IEnumerable<IEvent<ISingleSignOnToken>> Get(Type aggregateType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateType System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Get<T>(Guid, Boolean, Int32) Declaration public virtual IEnumerable<IEvent<ISingleSignOnToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) Save(Type, IEvent<ISingleSignOnToken>) Declaration public virtual void Save(Type aggregateRootType, IEvent<ISingleSignOnToken> event) Parameters Type Name Description System.Type aggregateRootType IEvent < ISingleSignOnToken > event Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<ISingleSignOnToken>) Declaration public virtual void Save<T>(IEvent<ISingleSignOnToken> event) Parameters Type Name Description IEvent < ISingleSignOnToken > event Type Parameters Name Description T Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventPublisher.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestEventPublisher.html",
    "title": "Class TestEventPublisher | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEventPublisher Inheritance System.Object TestEventPublisher Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestEventPublisher : IEventPublisher<ISingleSignOnToken> Properties Published Declaration public int Published { get; } Property Value Type Description System.Int32 Methods Publish<T>(T) Declaration public void Publish<T>(T event)where T : IEvent<ISingleSignOnToken> Parameters Type Name Description T event Type Parameters Name Description T Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Declaration public void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<ISingleSignOnToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestDependencyResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestDependencyResolver.html",
    "title": "Class TestDependencyResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestDependencyResolver Inheritance System.Object TestDependencyResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestDependencyResolver : IDependencyResolver Constructors TestDependencyResolver(TestEventStore, ICommandPublisher<ISingleSignOnToken>) Declaration public TestDependencyResolver(TestEventStore testEventStore, ICommandPublisher<ISingleSignOnToken> testSingleSignOnTokenCommandPublisher = null) Parameters Type Name Description TestEventStore testEventStore ICommandPublisher < ISingleSignOnToken > testSingleSignOnTokenCommandPublisher Fields Handlers Declaration public readonly List<dynamic> Handlers Field Value Type Description System.Collections.Generic.List < System.Object > Properties NewAggregateGuid Declaration public Guid? NewAggregateGuid { get; set; } Property Value Type Description System.Nullable < System.Guid > TestEventStore Declaration protected TestEventStore TestEventStore { get; } Property Value Type Description TestEventStore TestSingleSignOnTokenCommandPublisher Declaration protected ICommandPublisher<ISingleSignOnToken> TestSingleSignOnTokenCommandPublisher { get; } Property Value Type Description ICommandPublisher < ISingleSignOnToken > UseTestEventStoreGuid Declaration public bool UseTestEventStoreGuid { get; set; } Property Value Type Description System.Boolean Methods Resolve(Type) Declaration public object Resolve(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Object Implements IDependencyResolver.Resolve(Type) Resolve<T>() Declaration public T Resolve<T>() Returns Type Description T Type Parameters Name Description T Implements IDependencyResolver.Resolve<T>()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestCommandPublisher.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestCommandPublisher.html",
    "title": "Class TestCommandPublisher | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestCommandPublisher Inheritance System.Object TestCommandPublisher Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestCommandPublisher : ICommandPublisher<ISingleSignOnToken> Constructors TestCommandPublisher() Declaration public TestCommandPublisher() Properties Published Declaration public int Published { get; } Property Value Type Description System.Int32 PublishedCommands Declaration public List<ICommand<ISingleSignOnToken>> PublishedCommands { get; } Property Value Type Description System.Collections.Generic.List < ICommand < ISingleSignOnToken >> Methods Publish<TCommand>(TCommand) Declaration public void Publish<TCommand>(TCommand command)where TCommand : ICommand<ISingleSignOnToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publish<TCommand>(IEnumerable<TCommand>) Declaration public void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<ISingleSignOnToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateRepository.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateRepository.html",
    "title": "Class TestAggregateRepository | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateRepository Inheritance System.Object TestAggregateRepository Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateRepository : IAggregateRepository<ISingleSignOnToken> Properties Saved Declaration public IAggregateRoot<ISingleSignOnToken> Saved { get; } Property Value Type Description IAggregateRoot < ISingleSignOnToken > Methods Get<TAggregateRoot>(Guid, IList<IEvent<ISingleSignOnToken>>) Declaration public TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<ISingleSignOnToken>> events = null)where TAggregateRoot : IAggregateRoot<ISingleSignOnToken> Parameters Type Name Description System.Guid aggregateId System.Collections.Generic.IList < IEvent < ISingleSignOnToken >> events Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot Implements IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) Declaration public void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<ISingleSignOnToken> Parameters Type Name Description TAggregateRoot aggregate System.Nullable < System.Int32 > expectedVersion Type Parameters Name Description TAggregateRoot Implements IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateNoParameterLessConstructor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateNoParameterLessConstructor.html",
    "title": "Class TestAggregateNoParameterLessConstructor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateNoParameterLessConstructor Inheritance System.Object AggregateRoot < ISingleSignOnToken > TestAggregateNoParameterLessConstructor Inherited Members AggregateRoot<ISingleSignOnToken>.Id AggregateRoot<ISingleSignOnToken>.Version AggregateRoot<ISingleSignOnToken>.GetUncommittedChanges() AggregateRoot<ISingleSignOnToken>.MarkChangesAsCommitted() AggregateRoot<ISingleSignOnToken>.LoadFromHistory(IEnumerable<IEvent<ISingleSignOnToken>>) AggregateRoot<ISingleSignOnToken>.ApplyChange(IEvent<ISingleSignOnToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateNoParameterLessConstructor : AggregateRoot<ISingleSignOnToken>, IAggregateRoot<ISingleSignOnToken> Constructors TestAggregateNoParameterLessConstructor(Int32, Nullable<Guid>) Declaration public TestAggregateNoParameterLessConstructor(int i, Guid? id = null) Parameters Type Name Description System.Int32 i System.Nullable < System.Guid > id Methods DoSomething() Declaration public void DoSomething()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomethingHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomethingHandler.html",
    "title": "Class TestAggregateDoSomethingHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDoSomethingHandler Inheritance System.Object TestAggregateDoSomethingHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDoSomethingHandler : ICommandHandler<ISingleSignOnToken, TestAggregateDoSomething>, IMessageHandler<TestAggregateDoSomething>, ICommandHandle, IHandler Properties TimesRun Declaration public int TimesRun { get; set; } Property Value Type Description System.Int32 Methods Handle(TestAggregateDoSomething) Declaration public void Handle(TestAggregateDoSomething message) Parameters Type Name Description TestAggregateDoSomething message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomethingElseHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomethingElseHandler.html",
    "title": "Class TestAggregateDoSomethingElseHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDoSomethingElseHandler Inheritance System.Object TestAggregateDoSomethingElseHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDoSomethingElseHandler : ICommandHandler<ISingleSignOnToken, TestAggregateDoSomething>, IMessageHandler<TestAggregateDoSomething>, ICommandHandle, IHandler Methods Handle(TestAggregateDoSomething) Declaration public void Handle(TestAggregateDoSomething message) Parameters Type Name Description TestAggregateDoSomething message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething3.html",
    "title": "Class TestAggregateDoSomething3 | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDoSomething3 Inheritance System.Object TestAggregateDoSomething TestAggregateDoSomething3 Inherited Members TestAggregateDoSomething.Id TestAggregateDoSomething.ExpectedVersion TestAggregateDoSomething.AuthenticationToken TestAggregateDoSomething.CorrelationId TestAggregateDoSomething.OriginatingFramework TestAggregateDoSomething.Frameworks System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDoSomething3 : TestAggregateDoSomething, ICommand<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething2.html",
    "title": "Class TestAggregateDoSomething2 | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDoSomething2 Inheritance System.Object TestAggregateDoSomething TestAggregateDoSomething2 Inherited Members TestAggregateDoSomething.Id TestAggregateDoSomething.ExpectedVersion TestAggregateDoSomething.AuthenticationToken TestAggregateDoSomething.CorrelationId TestAggregateDoSomething.OriginatingFramework TestAggregateDoSomething.Frameworks System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDoSomething2 : TestAggregateDoSomething, ICommand<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDoSomething.html",
    "title": "Class TestAggregateDoSomething | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDoSomething Inheritance System.Object TestAggregateDoSomething TestAggregateDoSomething2 TestAggregateDoSomething3 Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDoSomething : ICommand<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage Properties AuthenticationToken Declaration public ISingleSignOnToken AuthenticationToken { get; set; } Property Value Type Description ISingleSignOnToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion Declaration public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id Declaration public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_aggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_aggregate.html",
    "title": "Class When_saving_aggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_aggregate Inheritance System.Object When_saving_aggregate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_aggregate Methods Setup() Declaration [SetUp] public void Setup() Should_get_same_aggregate_on_get() Declaration [Test] public void Should_get_same_aggregate_on_get() Should_not_cache_empty_id() Declaration [Test] public void Should_not_cache_empty_id() Should_save_to_repository() Declaration [Test] public void Should_save_to_repository()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.Snapshot.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.Snapshot.html",
    "title": "Class Snapshot | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Snapshot Holds state information about an IAggregateRoot<TAuthenticationToken> for fast rehydration. Inheritance System.Object Snapshot TestSnapshotAggregateSnapshot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax [Serializable] public abstract class Snapshot Properties Id The identifier of the IAggregateRoot<TAuthenticationToken> this holds information about. Declaration [DataMember] public virtual Guid Id { get; set; } Property Value Type Description System.Guid Version The version number the IAggregateRoot<TAuthenticationToken> was at when this snapshot was taken. Declaration [DataMember] public virtual int Version { get; set; } Property Value Type Description System.Int32"
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.ISnapshotStrategy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.ISnapshotStrategy-1.html",
    "title": "Interface ISnapshotStrategy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISnapshotStrategy<TAuthenticationToken> Provides information about the ability to make and get Snapshot . Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax public interface ISnapshotStrategy<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods IsSnapshotable(Type) Indicates if the provided aggregateType can have a Snapshot made or not. Declaration bool IsSnapshotable(Type aggregateType) Parameters Type Name Description System.Type aggregateType The System.Type of IAggregateRoot<TAuthenticationToken> to check. Returns Type Description System.Boolean ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>) Indicates if the provided aggregate should have a Snapshot made. This does NOT indicate if the provided aggregate can have a Snapshot made or not. Declaration bool ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken> aggregate) Parameters Type Name Description IAggregateRoot <TAuthenticationToken> aggregate The IAggregateRoot<TAuthenticationToken> to check. Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.ISnapshotStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.ISnapshotStore.html",
    "title": "Interface ISnapshotStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISnapshotStore Stores the most recent Snapshot for replay and IAggregateRoot<TAuthenticationToken> rehydration on a SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> . Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax public interface ISnapshotStore Methods Get<TAggregateRoot>(Guid) Get the latest Snapshot from storage. Declaration Snapshot Get<TAggregateRoot>(Guid id) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> to get the most recent Snapshot of. Returns Type Description Snapshot The most recent Snapshot of Type Parameters Name Description TAggregateRoot The System.Type of IAggregateRoot<TAuthenticationToken> to find a snapshot for. Save(Snapshot) Saves the provided snapshot into storage. Declaration void Save(Snapshot snapshot) Parameters Type Name Description Snapshot snapshot the Snapshot to save and store."
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.DefaultSnapshotStrategy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.DefaultSnapshotStrategy-1.html",
    "title": "Class DefaultSnapshotStrategy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DefaultSnapshotStrategy<TAuthenticationToken> An ISnapshotStrategy<TAuthenticationToken> that takes a snapshot every 15 versions. Inheritance System.Object DefaultSnapshotStrategy<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax public class DefaultSnapshotStrategy<TAuthenticationToken> : ISnapshotStrategy<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods GetSnapshotInterval() Returns the value of Cqrs.Snapshots.DefaultSnapshotStrategy`1.SnapshotInterval . Declaration protected virtual int GetSnapshotInterval() Returns Type Description System.Int32 IsSnapshotable(Type) Indicates if the aggregateType is able to be snapshotted by checking if the aggregateType directly inherits SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> Declaration public virtual bool IsSnapshotable(Type aggregateType) Parameters Type Name Description System.Type aggregateType The System.Type of IAggregateRoot<TAuthenticationToken> to check. Returns Type Description System.Boolean Implements ISnapshotStrategy<TAuthenticationToken>.IsSnapshotable(Type) ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>) Checks IsSnapshotable(Type) and if it is, also checks if the calculated version number would be exactly dividable by GetSnapshotInterval() . Declaration public virtual bool ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken> aggregate) Parameters Type Name Description IAggregateRoot <TAuthenticationToken> aggregate The IAggregateRoot<TAuthenticationToken> to check. Returns Type Description System.Boolean Implements ISnapshotStrategy<TAuthenticationToken>.ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.html",
    "title": "Namespace Cqrs.Services | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Services Classes BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> A System.Runtime.Serialization.DataContractResolver for use via WCF that ensures basic support for ServiceResponse , ServiceRequest<TAuthenticationToken> and anything TokenResolver and EventDataResolver support. EventService<TAuthenticationToken> A WCF System.ServiceModel.ServiceContractAttribute that provides read-only access to IEventStore<TAuthenticationToken> IEvent<TAuthenticationToken> raised with the same CorrelationId . ServiceChannelFactory<TService> A factory that creates channels of different types that are used by clients to send messages to variously configured service endpoints. ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> A BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> . ServiceRequest<TAuthenticationToken> A request message envelope that holds authentication and correlation information used when making public API requests. ServiceRequestWithData<TAuthenticationToken, TData> A IServiceRequest<TAuthenticationToken> that holds authentication, correlation information as well as request data used when making public API requests. ServiceResponse A response message envelope that holds request state and correlation information in response to using public API requests. ServiceResponseWithResultData<TResultData> A IServiceResponse that holds request state, correlation information as well as the response data returned from making a public API request. UnitOfWorkService<TAuthenticationToken> Provides a basic container to control how the IUnitOfWork<TAuthenticationToken> is accessed. WcfDataContractResolverConfiguration Configuration information for setting up WCF System.Runtime.Serialization.DataContractResolver . Interfaces IEventDataResolver Resolves EventData , ServiceRequestWithData<TAuthenticationToken, TData> and ServiceResponseWithResultData<TResultData> parameter types when serialising with WCF. IEventService<TAuthenticationToken> A WCF System.ServiceModel.ServiceContractAttribute that provides read-only access to IEventStore<TAuthenticationToken> IEvent<TAuthenticationToken> raised with the same CorrelationId . IServiceParameterResolver Resolves parameter types when serialising with WCF. IServiceRequest<TAuthenticationToken> A request message envelope that holds authentication and correlation information used when making public API requests. IServiceRequestWithData<TAuthenticationToken, TData> A IServiceRequest<TAuthenticationToken> that holds authentication, correlation information as well as request data used when making public API requests. IServiceResponse A response message envelope that holds request state and correlation information in response to using public API requests. IServiceResponseWithResultData<TResultData> A IServiceResponse that holds request state, correlation information as well as the response data returned from making a public API request. ISingleSignOnTokenResolver Resolves parameter type when serialising with WCF. IUnitOfWorkService Provides a basic container to control how the IUnitOfWork<TAuthenticationToken> is accessed. IVersionedServiceResponse A IServiceResponse that provides version information. Enums ServiceResponseStateType The response state of a given request. WcfDataContractResolverConfiguration.RegistrationHandling The type of registration action to take"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.WcfDataContractResolverConfiguration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.WcfDataContractResolverConfiguration.html",
    "title": "Class WcfDataContractResolverConfiguration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class WcfDataContractResolverConfiguration Configuration information for setting up WCF System.Runtime.Serialization.DataContractResolver . Inheritance System.Object WcfDataContractResolverConfiguration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public class WcfDataContractResolverConfiguration Constructors WcfDataContractResolverConfiguration() Instantiates a new instance of WcfDataContractResolverConfiguration Declaration public WcfDataContractResolverConfiguration() Properties Current The current instance of WcfDataContractResolverConfiguration to use. Declaration public static WcfDataContractResolverConfiguration Current { get; protected set; } Property Value Type Description WcfDataContractResolverConfiguration DataContracts Gets or set the data contracts for the system to use. Declaration protected IDictionary<Type, IDictionary<string, Type>> DataContracts { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Collections.Generic.IDictionary < System.String , System.Type >> Methods GetDataContracts<TService>(String) Gets the System.Type of System.Runtime.Serialization.DataContractResolver for the operation named operationName of the TService Declaration public virtual Type GetDataContracts<TService>(string operationName) Parameters Type Name Description System.String operationName The name of the operation. Returns Type Description System.Type Type Parameters Name Description TService The System.Type of service. RegisterDataContract<TService, TDataContract>(String, WcfDataContractResolverConfiguration.RegistrationHandling) Register the TDataContract to use for the operation named operationName for the TService . Declaration public virtual void RegisterDataContract<TService, TDataContract>(string operationName, WcfDataContractResolverConfiguration.RegistrationHandling registrationHandling = WcfDataContractResolverConfiguration.RegistrationHandling.Replace)where TDataContract : new () Parameters Type Name Description System.String operationName The name of the operation. WcfDataContractResolverConfiguration.RegistrationHandling registrationHandling Defaults to Replace Type Parameters Name Description TService The System.Type of service. TDataContract The System.Type of the resolver."
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.WcfDataContractResolverConfiguration.RegistrationHandling.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.WcfDataContractResolverConfiguration.RegistrationHandling.html",
    "title": "Enum WcfDataContractResolverConfiguration.RegistrationHandling | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Enum WcfDataContractResolverConfiguration.RegistrationHandling The type of registration action to take Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public enum RegistrationHandling Fields Name Description Nothing Keep the existing one and don't do anything. Replace Add any new, and replace any existing. ThrowExceptionOnDuplicate Throw an System.Exception if one already exists."
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.UnitOfWorkService-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.UnitOfWorkService-1.html",
    "title": "Class UnitOfWorkService<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class UnitOfWorkService<TAuthenticationToken> Provides a basic container to control how the IUnitOfWork<TAuthenticationToken> is accessed. Inheritance System.Object UnitOfWorkService<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public class UnitOfWorkService<TAuthenticationToken> : IUnitOfWorkService Type Parameters Name Description TAuthenticationToken Constructors UnitOfWorkService(IUnitOfWork<TAuthenticationToken>) Instantiate a new instance of UnitOfWorkService<TAuthenticationToken> . Declaration public UnitOfWorkService(IUnitOfWork<TAuthenticationToken> unitOfWork) Parameters Type Name Description IUnitOfWork <TAuthenticationToken> unitOfWork Properties Committer Gets or set the object that wants to control the UnitOfWork . Declaration protected object Committer { get; } Property Value Type Description System.Object UnitOfWork Gets or set the IUnitOfWork<TAuthenticationToken> . Declaration protected IUnitOfWork<TAuthenticationToken> UnitOfWork { get; } Property Value Type Description IUnitOfWork <TAuthenticationToken> Methods Commit(Object) Commits the UnitOfWork if the provided commiter is the Committer . Declaration public bool Commit(object commiter) Parameters Type Name Description System.Object commiter Returns Type Description System.Boolean true if the provided commiter is the Committer , false otherwise. Implements IUnitOfWorkService.Commit(Object) SetCommitter(Object) Informs the service of the object that will be committing the UnitOfWork . Declaration public bool SetCommitter(object commiter) Parameters Type Name Description System.Object commiter Returns Type Description System.Boolean true if the provided commiter is accepted as the committer, false otherwise. Implements IUnitOfWorkService.SetCommitter(Object)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponseWithResultData-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponseWithResultData-1.html",
    "title": "Class ServiceResponseWithResultData<TResultData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceResponseWithResultData<TResultData> A IServiceResponse that holds request state, correlation information as well as the response data returned from making a public API request. Inheritance System.Object ServiceResponse ServiceResponseWithResultData<TResultData> Inherited Members ServiceResponse.State ServiceResponse.CorrelationId ServiceResponse.Version System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class ServiceResponseWithResultData<TResultData> : ServiceResponse, IVersionedServiceResponse, IServiceResponseWithResultData<TResultData>, IServiceResponse Type Parameters Name Description TResultData The System.Type of data returned from making a public API request. Constructors ServiceResponseWithResultData() Instantiate a new instance of the ServiceResponseWithResultData<TResultData> class. Declaration public ServiceResponseWithResultData() ServiceResponseWithResultData(TResultData) Instantiate a new instance of the ServiceResponseWithResultData<TResultData> class providing resultData . Declaration public ServiceResponseWithResultData(TResultData resultData) Parameters Type Name Description TResultData resultData Properties ResultData The data returned from making a public API request. Declaration [DataMember] public TResultData ResultData { get; set; } Property Value Type Description TResultData Implements IServiceResponseWithResultData<TResultData>.ResultData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponseStateType.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponseStateType.html",
    "title": "Enum ServiceResponseStateType | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Enum ServiceResponseStateType The response state of a given request. Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public enum ServiceResponseStateType Fields Name Description AggregateNotFound The request failed as the IAggregateRoot<TAuthenticationToken> was not found. EntityNotFound The request failed as the IEntity was not found. FailedAuthentication The request failed to be authenticated. FailedAuthorisation The request failed to be authorised. FailedValidation The request failed validation. FailedWithAFatalException The request failed with a fatal System.Exception . FailedWithAnUnexpectedException The request failed with an unknown, non-fatal System.Exception . SagaNotFound The request failed as the Saga<TAuthenticationToken> was not found. Succeeded The request succeeded in being placed. Unknown The state is unknown."
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponse.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceResponse.html",
    "title": "Class ServiceResponse | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceResponse A response message envelope that holds request state and correlation information in response to using public API requests. Inheritance System.Object ServiceResponse ServiceResponseWithResultData<TResultData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class ServiceResponse : IVersionedServiceResponse, IServiceResponse Constructors ServiceResponse() Instantiate a new instance of the ServiceResponse class. Declaration public ServiceResponse() Properties CorrelationId The correlation id used to group together events and notifications. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IServiceResponse.CorrelationId State The state of the request. Declaration [DataMember] public ServiceResponseStateType State { get; set; } Property Value Type Description ServiceResponseStateType Implements IServiceResponse.State Version The version of the data being returned Declaration [DataMember] public double Version { get; set; } Property Value Type Description System.Double Implements IVersionedServiceResponse.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceRequestWithData-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceRequestWithData-2.html",
    "title": "Class ServiceRequestWithData<TAuthenticationToken, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceRequestWithData<TAuthenticationToken, TData> A IServiceRequest<TAuthenticationToken> that holds authentication, correlation information as well as request data used when making public API requests. Inheritance System.Object ServiceRequest <TAuthenticationToken> ServiceRequestWithData<TAuthenticationToken, TData> Inherited Members ServiceRequest<TAuthenticationToken>.AuthenticationToken ServiceRequest<TAuthenticationToken>.CorrelationId System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class ServiceRequestWithData<TAuthenticationToken, TData> : ServiceRequest<TAuthenticationToken>, IServiceRequestWithData<TAuthenticationToken, TData>, IServiceRequest<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token used. TData The System.Type of data sent along with the request to act upon/with. Properties Data The data sent along with the request to act upon/with. Declaration [DataMember] public TData Data { get; set; } Property Value Type Description TData Implements IServiceRequestWithData<TAuthenticationToken, TData>.Data"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceRequest-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceRequest-1.html",
    "title": "Class ServiceRequest<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceRequest<TAuthenticationToken> A request message envelope that holds authentication and correlation information used when making public API requests. Inheritance System.Object ServiceRequest<TAuthenticationToken> ServiceRequestWithData<TAuthenticationToken, TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class ServiceRequest<TAuthenticationToken> : IServiceRequest<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token used. Properties AuthenticationToken The authentication token used to identify the requester. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IServiceRequest<TAuthenticationToken>.AuthenticationToken CorrelationId The correlation id used to group together events and notifications. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IServiceRequest<TAuthenticationToken>.CorrelationId"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceParameterResolver-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceParameterResolver-2.html",
    "title": "Class ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> A BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> . Inheritance System.Object System.Runtime.Serialization.DataContractResolver BasicServiceParameterResolver <TServiceParameter, TSingleSignOnTokenResolver> ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> Inherited Members BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.TokenResolver BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.EventDataResolver BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.ServiceNamespace BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString) BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.TryResolveUnResolvedType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString) BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.ResolveName(String, String, Type, DataContractResolver) BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>.ResolveUnResolvedName(String, String, Type, DataContractResolver) System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString) System.Runtime.Serialization.DataContractResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public abstract class ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> : BasicServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver>, IServiceParameterResolver where TSingleSignOnTokenResolver : ISingleSignOnToken Type Parameters Name Description TServiceParameter TSingleSignOnTokenResolver Constructors ServiceParameterResolver(ISingleSignOnTokenResolver, IEventDataResolver) Instantiates a new instance of ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> Declaration protected ServiceParameterResolver(ISingleSignOnTokenResolver tokenResolver, IEventDataResolver eventDataResolver) Parameters Type Name Description ISingleSignOnTokenResolver tokenResolver IEventDataResolver eventDataResolver"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ServiceChannelFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ServiceChannelFactory-1.html",
    "title": "Class ServiceChannelFactory<TService> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ServiceChannelFactory<TService> A factory that creates channels of different types that are used by clients to send messages to variously configured service endpoints. Inheritance System.Object System.ServiceModel.Channels.CommunicationObject System.ServiceModel.ChannelFactory System.ServiceModel.ChannelFactory <TService> ServiceChannelFactory<TService> Inherited Members System.ServiceModel.ChannelFactory<TService>.CreateChannel(System.ServiceModel.EndpointAddress) System.ServiceModel.ChannelFactory<TService>.CreateChannel(System.ServiceModel.EndpointAddress, System.Uri) System.ServiceModel.ChannelFactory<TService>.CreateChannel() System.ServiceModel.ChannelFactory<TService>.CreateDescription() System.ServiceModel.ChannelFactory<TService>.CreateChannel(System.String) System.ServiceModel.ChannelFactory<TService>.CreateChannel(System.ServiceModel.Channels.Binding, System.ServiceModel.EndpointAddress) System.ServiceModel.ChannelFactory<TService>.CreateChannel(System.ServiceModel.Channels.Binding, System.ServiceModel.EndpointAddress, System.Uri) System.ServiceModel.ChannelFactory.EnsureOpened() System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String) System.ServiceModel.ChannelFactory.CreateFactory() System.ServiceModel.ChannelFactory.System.IDisposable.Dispose() System.ServiceModel.ChannelFactory.GetProperty<T>() System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String, System.ServiceModel.EndpointAddress) System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint) System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding, System.ServiceModel.EndpointAddress) System.ServiceModel.ChannelFactory.OnOpened() System.ServiceModel.ChannelFactory.OnAbort() System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object) System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object) System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan) System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult) System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult) System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan) System.ServiceModel.ChannelFactory.OnOpening() System.ServiceModel.ChannelFactory.Credentials System.ServiceModel.ChannelFactory.DefaultCloseTimeout System.ServiceModel.ChannelFactory.DefaultOpenTimeout System.ServiceModel.ChannelFactory.Endpoint System.ServiceModel.Channels.CommunicationObject.Abort() System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback, System.Object) System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan, System.AsyncCallback, System.Object) System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback, System.Object) System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan, System.AsyncCallback, System.Object) System.ServiceModel.Channels.CommunicationObject.Close() System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan) System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult) System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult) System.ServiceModel.Channels.CommunicationObject.Fault() System.ServiceModel.Channels.CommunicationObject.Open() System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan) System.ServiceModel.Channels.CommunicationObject.OnClosed() System.ServiceModel.Channels.CommunicationObject.OnClosing() System.ServiceModel.Channels.CommunicationObject.OnFaulted() System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType() System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed() System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable() System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen() System.ServiceModel.Channels.CommunicationObject.IsDisposed System.ServiceModel.Channels.CommunicationObject.State System.ServiceModel.Channels.CommunicationObject.ThisLock System.ServiceModel.Channels.CommunicationObject.Closed System.ServiceModel.Channels.CommunicationObject.Closing System.ServiceModel.Channels.CommunicationObject.Faulted System.ServiceModel.Channels.CommunicationObject.Opened System.ServiceModel.Channels.CommunicationObject.Opening System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public class ServiceChannelFactory<TService> : ChannelFactory<TService>, IDisposable, IChannelFactory<TService>, IChannelFactory, ICommunicationObject Type Parameters Name Description TService The System.Type of service this System.ServiceModel.ChannelFactory is for. Constructors ServiceChannelFactory(String) Instantiates a new instance of the ServiceChannelFactory<TService> class with a specified endpoint configuration name. Declaration public ServiceChannelFactory(string endpointConfigurationName) Parameters Type Name Description System.String endpointConfigurationName The configuration name used for the endpoint. Methods AttachDataContractResolver(ServiceEndpoint) Uses GetDataContracts<TService>(String) to find System.Runtime.Serialization.DataContractResolver to automatically attach to each System.ServiceModel.Description.OperationDescription in System.ServiceModel.Description.ContractDescription.Operations of System.ServiceModel.Description.ServiceEndpoint.Contract of the provided endpoint . Declaration protected virtual void AttachDataContractResolver(ServiceEndpoint endpoint) Parameters Type Name Description System.ServiceModel.Description.ServiceEndpoint endpoint RegisterDataContracts() Register any additional System.Runtime.Serialization.DataContractResolver . Declaration protected virtual void RegisterDataContracts()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IVersionedServiceResponse.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IVersionedServiceResponse.html",
    "title": "Interface IVersionedServiceResponse | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IVersionedServiceResponse A IServiceResponse that provides version information. Inherited Members IServiceResponse.State IServiceResponse.CorrelationId Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IVersionedServiceResponse : IServiceResponse Properties Version The version of the data being returned Declaration double Version { get; set; } Property Value Type Description System.Double"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IUnitOfWorkService.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IUnitOfWorkService.html",
    "title": "Interface IUnitOfWorkService | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IUnitOfWorkService Provides a basic container to control how the IUnitOfWork<TAuthenticationToken> is accessed. Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IUnitOfWorkService Methods Commit(Object) Commits the UnitOfWork if the provided commiter is the Committer. Declaration bool Commit(object commiter) Parameters Type Name Description System.Object commiter Returns Type Description System.Boolean true if the provided commiter is the Committer, false otherwise. SetCommitter(Object) Informs the service of the object that will be committing the UnitOfWork. Declaration bool SetCommitter(object commiter) Parameters Type Name Description System.Object commiter Returns Type Description System.Boolean true if the provided commiter is accepted as the committer, false otherwise."
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.ISingleSignOnTokenResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.ISingleSignOnTokenResolver.html",
    "title": "Interface ISingleSignOnTokenResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenResolver Resolves parameter type when serialising with WCF. Inherited Members IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString) Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface ISingleSignOnTokenResolver : IServiceParameterResolver"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IServiceResponseWithResultData-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IServiceResponseWithResultData-1.html",
    "title": "Interface IServiceResponseWithResultData<TResultData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IServiceResponseWithResultData<TResultData> A IServiceResponse that holds request state, correlation information as well as the response data returned from making a public API request. Inherited Members IServiceResponse.State IServiceResponse.CorrelationId Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IServiceResponseWithResultData<TResultData> : IServiceResponse Type Parameters Name Description TResultData The System.Type of data returned from making a public API request. Properties ResultData The data returned from making a public API request. Declaration [DataMember] TResultData ResultData { get; set; } Property Value Type Description TResultData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IServiceResponse.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IServiceResponse.html",
    "title": "Interface IServiceResponse | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IServiceResponse A response message envelope that holds request state and correlation information in response to using public API requests. Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IServiceResponse Properties CorrelationId The correlation id used to group together events and notifications. Declaration [DataMember] Guid CorrelationId { get; set; } Property Value Type Description System.Guid State The state of the request. Declaration [DataMember] ServiceResponseStateType State { get; set; } Property Value Type Description ServiceResponseStateType"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IServiceRequestWithData-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IServiceRequestWithData-2.html",
    "title": "Interface IServiceRequestWithData<TAuthenticationToken, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IServiceRequestWithData<TAuthenticationToken, TData> A IServiceRequest<TAuthenticationToken> that holds authentication, correlation information as well as request data used when making public API requests. Inherited Members IServiceRequest<TAuthenticationToken>.AuthenticationToken IServiceRequest<TAuthenticationToken>.CorrelationId Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IServiceRequestWithData<TAuthenticationToken, TData> : IServiceRequest<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token used. TData The System.Type of data sent along with the request to act upon/with. Properties Data The data sent along with the request to act upon/with. Declaration [DataMember] TData Data { get; set; } Property Value Type Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IServiceRequest-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IServiceRequest-1.html",
    "title": "Interface IServiceRequest<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IServiceRequest<TAuthenticationToken> A request message envelope that holds authentication and correlation information used when making public API requests. Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IServiceRequest<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token used. Properties AuthenticationToken The authentication token used to identify the requester. Declaration [DataMember] TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken CorrelationId The correlation id used to group together events and notifications. Declaration [DataMember] Guid CorrelationId { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IServiceParameterResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IServiceParameterResolver.html",
    "title": "Interface IServiceParameterResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IServiceParameterResolver Resolves parameter types when serialising with WCF. Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IServiceParameterResolver Methods ResolveName(String, String, Type, DataContractResolver) Indicates if the provided typeName is resolvable. Declaration Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName System.String typeNamespace System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver Returns Type Description System.Type TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) Returns the System.Type if the typeName is resolvable. Declaration bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver System.Xml.XmlDictionaryString typeName System.Xml.XmlDictionaryString typeNamespace Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IEventService-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IEventService-1.html",
    "title": "Interface IEventService<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventService<TAuthenticationToken> A WCF System.ServiceModel.ServiceContractAttribute that provides read-only access to IEventStore<TAuthenticationToken> IEvent<TAuthenticationToken> raised with the same CorrelationId . Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/Domain/1001/\")] public interface IEventService<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Methods GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) Get all IEvent<TAuthenticationToken> raised with the same CorrelationId . Declaration [OperationContract] IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TAuthenticationToken, System.Guid > serviceRequest The CorrelationId of the IEvent<TAuthenticationToken> to find. Returns Type Description IServiceResponseWithResultData < System.Collections.Generic.IEnumerable < EventData >>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.IEventDataResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.IEventDataResolver.html",
    "title": "Interface IEventDataResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventDataResolver Resolves EventData , ServiceRequestWithData<TAuthenticationToken, TData> and ServiceResponseWithResultData<TResultData> parameter types when serialising with WCF. Inherited Members IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString) Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public interface IEventDataResolver : IServiceParameterResolver"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.EventService-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.EventService-1.html",
    "title": "Class EventService<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventService<TAuthenticationToken> A WCF System.ServiceModel.ServiceContractAttribute that provides read-only access to IEventStore<TAuthenticationToken> IEvent<TAuthenticationToken> raised with the same CorrelationId . Inheritance System.Object EventService<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public abstract class EventService<TAuthenticationToken> : IEventService<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors EventService(IEventStore<TAuthenticationToken>, ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Instantiates a new instance of EventService<TAuthenticationToken> . Declaration protected EventService(IEventStore<TAuthenticationToken> eventStore, ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IEventStore <TAuthenticationToken> eventStore cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CorrelationIdHelper Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventStore Gets or sets the IEventStore<TAuthenticationToken> . Declaration protected virtual IEventStore<TAuthenticationToken> EventStore { get; } Property Value Type Description IEventStore <TAuthenticationToken> Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods CompleteResponse<TServiceResponse>(TServiceResponse) Sets the CorrelationId on the provided serviceResponse . Declaration protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)where TServiceResponse : IServiceResponse Parameters Type Name Description TServiceResponse serviceResponse Returns Type Description TServiceResponse Type Parameters Name Description TServiceResponse GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) Get all IEvent<TAuthenticationToken> raised with the same CorrelationId . Declaration public virtual IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TAuthenticationToken, System.Guid > serviceRequest The CorrelationId of the IEvent<TAuthenticationToken> to find. Returns Type Description IServiceResponseWithResultData < System.Collections.Generic.IEnumerable < EventData >> Implements IEventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) OnGetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) Executed before calling the Get(Type, Guid, Boolean, Int32) method on EventStore in GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) . Declaration protected virtual void OnGetEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TAuthenticationToken, System.Guid > serviceRequest The original IServiceRequestWithData<TAuthenticationToken, TData> . OnGotEventData(IServiceRequestWithData<TAuthenticationToken, Guid>, IEnumerable<EventData>) Executed after calling the Get(Type, Guid, Boolean, Int32) method on EventStore in GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) . Declaration protected virtual IEnumerable<EventData> OnGotEventData(IServiceRequestWithData<TAuthenticationToken, Guid> serviceRequest, IEnumerable<EventData> results) Parameters Type Name Description IServiceRequestWithData <TAuthenticationToken, System.Guid > serviceRequest The original IServiceRequestWithData<TAuthenticationToken, TData> . System.Collections.Generic.IEnumerable < EventData > results The collection of IEvent<TAuthenticationToken> from the EventStore . Returns Type Description System.Collections.Generic.IEnumerable < EventData >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Services.BasicServiceParameterResolver-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Services.BasicServiceParameterResolver-2.html",
    "title": "Class BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> A System.Runtime.Serialization.DataContractResolver for use via WCF that ensures basic support for ServiceResponse , ServiceRequest<TAuthenticationToken> and anything TokenResolver and EventDataResolver support. Inheritance System.Object System.Runtime.Serialization.DataContractResolver BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> ServiceParameterResolver<TServiceParameter, TSingleSignOnTokenResolver> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Services Assembly : Cqrs.dll Syntax public abstract class BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> : DataContractResolver, IServiceParameterResolver Type Parameters Name Description TServiceParameter The System.Type of the service to include in the ServiceNamespace . TAuthenticationToken The System.Type of authentication token. Constructors BasicServiceParameterResolver(IEventDataResolver) Instantiates a new instance of BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> defaulting TokenResolver to BasicTokenResolver . Declaration protected BasicServiceParameterResolver(IEventDataResolver eventDataResolver) Parameters Type Name Description IEventDataResolver eventDataResolver BasicServiceParameterResolver(ISingleSignOnTokenResolver, IEventDataResolver) Instantiates a new instance of BasicServiceParameterResolver<TServiceParameter, TAuthenticationToken> . Declaration protected BasicServiceParameterResolver(ISingleSignOnTokenResolver tokenResolver, IEventDataResolver eventDataResolver) Parameters Type Name Description ISingleSignOnTokenResolver tokenResolver IEventDataResolver eventDataResolver Properties EventDataResolver Gets or sets the IEventDataResolver . Declaration protected IEventDataResolver EventDataResolver { get; } Property Value Type Description IEventDataResolver ServiceNamespace The Service Name included in all System.Type resolution information. Declaration protected string ServiceNamespace { get; } Property Value Type Description System.String TokenResolver The IServiceParameterResolver that has information about resolving authentication tokens such as TAuthenticationToken . Declaration protected IServiceParameterResolver TokenResolver { get; } Property Value Type Description IServiceParameterResolver Methods ResolveName(String, String, Type, DataContractResolver) Maps the specified xsi:type name and namespace to a data contract type during deserialization. Declaration public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName The xsi:type name to map. System.String typeNamespace The xsi:type namespace to map. System.Type declaredType The type declared in the data contract. System.Runtime.Serialization.DataContractResolver knownTypeResolver The known type resolver. Returns Type Description System.Type The type the xsi:type name and namespace is mapped to. Overrides System.Runtime.Serialization.DataContractResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver) Implements IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) ResolveUnResolvedName(String, String, Type, DataContractResolver) Try to resolve an types ResolveName(String, String, Type, DataContractResolver) fails to. Declaration protected abstract Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName The xsi:type name to map. System.String typeNamespace The xsi:type namespace to map. System.Type declaredType The type declared in the data contract. System.Runtime.Serialization.DataContractResolver knownTypeResolver The known type resolver. Returns Type Description System.Type The type the xsi:type name and namespace is mapped to. TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) Maps a data contract type to an xsi:type name and namespace during serialization. Declaration public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType The type to map. System.Type declaredType The type declared in the data contract. System.Runtime.Serialization.DataContractResolver knownTypeResolver The known type resolver. System.Xml.XmlDictionaryString typeName The xsi:type name. System.Xml.XmlDictionaryString typeNamespace The xsi:type namespace. Returns Type Description System.Boolean true if mapping succeeded; otherwise, false. Overrides System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString) Implements IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) TryResolveUnResolvedType(Type, Type, DataContractResolver, ref XmlDictionaryString, ref XmlDictionaryString) Try to resolve an types TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) fails to. Declaration protected abstract bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType The type to map. System.Type declaredType The type declared in the data contract. System.Runtime.Serialization.DataContractResolver knownTypeResolver The known type resolver. System.Xml.XmlDictionaryString typeName The xsi:type name. System.Xml.XmlDictionaryString typeNamespace The xsi:type namespace. Returns Type Description System.Boolean true if mapping succeeded; otherwise, false."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.html",
    "title": "Namespace Cqrs.Repositories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Repositories Classes InMemoryDatabase Uses a static System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> to store data accessible by all threads. Repository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> . Interfaces IRepository<TQueryStrategy, TData> Provides basic repository methods for operations with an IDataStore<TData> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Repository-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Repository-3.html",
    "title": "Class Repository<TQueryStrategy, TQueryBuilder, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Repository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> . Inheritance System.Object Repository<TQueryStrategy, TQueryBuilder, TData> BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> AzureRepository<TQueryStrategy, TQueryBuilder, TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories Assembly : Cqrs.dll Syntax public abstract class Repository<TQueryStrategy, TQueryBuilder, TData> : IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : Entity Type Parameters Name Description TQueryStrategy The System.Type of IQueryStrategy . TQueryBuilder The System.Type of the QueryBuilder<TQueryStrategy, TData> that will be used to build queries. TData The System.Type of data held in storage. Constructors Repository(Func<IDataStore<TData>>, TQueryBuilder) Instantiates a new instance of Repository<TQueryStrategy, TQueryBuilder, TData> Declaration protected Repository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder) Parameters Type Name Description System.Func < IDataStore <TData>> createDataStoreFunction TQueryBuilder queryBuilder Properties CreateDataStoreFunction Gets or sets the System.Func<TResult> that is used to create new instances of IDataStore<TData> . Declaration protected Func<IDataStore<TData>> CreateDataStoreFunction { get; } Property Value Type Description System.Func < IDataStore <TData>> QueryBuilder Gets or sets the TQueryBuilder that will be used to build queries. Declaration protected TQueryBuilder QueryBuilder { get; } Property Value Type Description TQueryBuilder TelemetryHelper Gets or sets the cdmdotnet.Logging.ITelemetryHelper . Declaration protected ITelemetryHelper TelemetryHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ITelemetryHelper Methods Create(TData) Create the newly provided data to storage. Declaration public virtual void Create(TData data) Parameters Type Name Description TData data Implements IRepository<TQueryStrategy, TData>.Create(TData) Create(IEnumerable<TData>) Create the newly provided data to storage. Declaration public virtual void Create(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Implements IRepository<TQueryStrategy, TData>.Create(IEnumerable<TData>) CreateQueryable(Expression<Func<TData, Boolean>>) Calls CreateDataStoreFunction passing the predicate . Declaration protected virtual IQueryable<TData> CreateQueryable(Expression<Func<TData, bool>> predicate) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TData, System.Boolean >> predicate A function defining a filter if required. Returns Type Description System.Linq.IQueryable <TData> Delete(TData) Will mark the data as logically (or soft). Declaration public virtual void Delete(TData data) Parameters Type Name Description TData data Implements IRepository<TQueryStrategy, TData>.Delete(TData) DeleteAll() Delete all contents (normally by use of a truncate operation) in storage. Declaration public virtual void DeleteAll() Implements IRepository<TQueryStrategy, TData>.DeleteAll() Destroy(TData) Remove the provided data from storage. Declaration public void Destroy(TData data) Parameters Type Name Description TData data Implements IRepository<TQueryStrategy, TData>.Destroy(TData) Load(Guid, Boolean) Load the TData from storage identified by the provided rsn . Declaration public virtual TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true) Parameters Type Name Description System.Guid rsn The identifier if the TData to load. System.Boolean throwExceptionOnMissingEntity If true will throw an System.Exception if no data is found in storage. Returns Type Description TData Implements IRepository<TQueryStrategy, TData>.Load(Guid, Boolean) Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Builds and executes the provided resultQuery . Declaration public virtual ICollectionResultQuery<TQueryStrategy, TData> Retrieve(ICollectionResultQuery<TQueryStrategy, TData> resultQuery) Parameters Type Name Description ICollectionResultQuery <TQueryStrategy, TData> resultQuery The ICollectionResultQuery<TQueryStrategy, TData> to build and execute. Returns Type Description ICollectionResultQuery <TQueryStrategy, TData> Implements IRepository<TQueryStrategy, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Builds and executes the provided singleResultQuery . Declaration public virtual ISingleResultQuery<TQueryStrategy, TData> Retrieve(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery, bool throwExceptionWhenNoQueryResults = true) Parameters Type Name Description ISingleResultQuery <TQueryStrategy, TData> singleResultQuery The ISingleResultQuery<TQueryStrategy, TData> to build and execute. System.Boolean throwExceptionWhenNoQueryResults If true will throw an System.Exception if no data is found in storage. Returns Type Description ISingleResultQuery <TQueryStrategy, TData> Implements IRepository<TQueryStrategy, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Update(TData) Update the provided data in storage. Declaration public virtual void Update(TData data) Parameters Type Name Description TData data Implements IRepository<TQueryStrategy, TData>.Update(TData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.html",
    "title": "Namespace Cqrs.Repositories.Queries | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Repositories.Queries Classes AndQueryPredicate An IQueryPredicate where both the LeftQueryPredicate and the RightQueryPredicate must evaluate to true. CollectionResultQuery<TQueryStrategy, TData> A query that will produce a result that contains a collection of TData items. OrQueryPredicate An IQueryPredicate where either the LeftQueryPredicate or the RightQueryPredicate must evaluate to true. QueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy . QueryFactory A factory to create new instances of ResultQuery<TQueryStrategy, TData> . QueryParameter Information about a parameter pass to a function in a IQueryStrategy . QueryPredicate Information about a query. QueryPredicateExtensions A collection of extension methods for working with queries. QueryStrategy A specification for a query to execute. ResultQuery<TQueryStrategy, TData> A query that will produce a result SingleResultQuery<TQueryStrategy, TData> A query that will produce a result that is a single TData item. SortParameter<TSortBy> Sorting information. Interfaces IAndQueryPredicate An IQueryPredicate where both the LeftQueryPredicate and the RightQueryPredicate must evaluate to true. ICollectionResultQuery<TQueryStrategy, TData> A query that will produce a result that contains a collection of TData items. IOrQueryPredicate An IQueryPredicate where either the LeftQueryPredicate or the RightQueryPredicate must evaluate to true. IQueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy . IQueryFactory A factory to create new instances of ResultQuery<TQueryStrategy, TData> . IQueryPredicate A predicate used in queries, similar to a filter and/order statement. IQueryPredicateData Information about a query. IQueryStrategy A specification for a query to execute. IQueryWithResults<TResult> A query that will produce a result IQueryWithStrategy<TQueryStrategy> A query that utilises a TQueryStrategy . ISingleResultQuery<TQueryStrategy, TData> A query that will produce a result that is a single TData item. Enums SortParameter<TSortBy>.SortParameterDirectionType Sort direction."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SortParameter-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SortParameter-1.html",
    "title": "Class SortParameter<TSortBy> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SortParameter<TSortBy> Sorting information. Inheritance System.Object SortParameter<TSortBy> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class SortParameter<TSortBy> Type Parameters Name Description TSortBy The System.Type to sort by Properties Direction The direction to sort. Declaration public SortParameter<TSortBy>.SortParameterDirectionType Direction { get; set; } Property Value Type Description SortParameter.SortParameterDirectionType <> SortBy What to sort by. Declaration public TSortBy SortBy { get; set; } Property Value Type Description TSortBy"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.html",
    "title": "Namespace Cqrs.Ninject.MongoDB.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.MongoDB.Configuration Classes MongoDbDataStoreModule A Ninject.Modules.INinjectModule that wires up MongoDbDataStoreConnectionStringFactory as the IMongoDbDataStoreConnectionStringFactory . MongoDbEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up MongoDbEventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . TestMongoDbDataStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up TestMongoDbDataStoreConnectionStringFactory as the IMongoDbEventStoreConnectionStringFactory and IMongoDbDataStoreConnectionStringFactory ."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.MongoDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.MongoDbDataStoreConnectionStringFactory.html",
    "title": "Class MongoDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbDataStoreConnectionStringFactory A factory for getting connection strings and database names for IDataStore<TData> access. Inheritance System.Object MongoDbDataStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Factories Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbDataStoreConnectionStringFactory : IMongoDbDataStoreConnectionStringFactory Constructors MongoDbDataStoreConnectionStringFactory(IConfigurationManager, ILogger) Instantiates a new instance of MongoDbDataStoreConnectionStringFactory . Declaration public MongoDbDataStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields MongoDbConnectionStringKey The name of the app setting in IConfigurationManager that will have the name of the connection string of the MongoDB server. Declaration public static string MongoDbConnectionStringKey Field Value Type Description System.String MongoDbDatabaseNameKey The name of the app setting in IConfigurationManager that will have the name of the database. Declaration public static string MongoDbDatabaseNameKey Field Value Type Description System.String OldMongoDbConnectionStringKey Backwards compatibility with version 1. Declaration public static string OldMongoDbConnectionStringKey Field Value Type Description System.String OldMongoDbDatabaseNameKey Backwards compatibility with version 1. Declaration public static string OldMongoDbDatabaseNameKey Field Value Type Description System.String Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetDataStoreConnectionString() Gets the current connection string. Declaration public string GetDataStoreConnectionString() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreConnectionString() GetDataStoreDatabaseName() Gets the current database name. Declaration public string GetDataStoreDatabaseName() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.IMongoDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.IMongoDbDataStoreConnectionStringFactory.html",
    "title": "Interface IMongoDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMongoDbDataStoreConnectionStringFactory A factory for getting connection strings and database names for IDataStore<TData> access. Namespace : Cqrs.MongoDB.Factories Assembly : Cqrs.MongoDB.dll Syntax public interface IMongoDbDataStoreConnectionStringFactory Methods GetDataStoreConnectionString() Gets the current connection string. Declaration string GetDataStoreConnectionString() Returns Type Description System.String GetDataStoreDatabaseName() Gets the current database name. Declaration string GetDataStoreDatabaseName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.html",
    "title": "Namespace Cqrs.MongoDB.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Events Classes MongoDbEventData Captures all the data relevant to an IEvent<TAuthenticationToken> for MongoDbEventStore<TAuthenticationToken> to persist. MongoDbEventStore<TAuthenticationToken> A MongoDB based EventStore<TAuthenticationToken> . MongoDbEventStoreConnectionStringFactory A factory for getting connection strings and database names for IEventStore<TAuthenticationToken> access. Interfaces IMongoDbEventStoreConnectionStringFactory A factory for getting connection strings and database names for IEventStore<TAuthenticationToken> access."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventStoreConnectionStringFactory.html",
    "title": "Class MongoDbEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventStoreConnectionStringFactory A factory for getting connection strings and database names for IEventStore<TAuthenticationToken> access. Inheritance System.Object MongoDbEventStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbEventStoreConnectionStringFactory : IMongoDbEventStoreConnectionStringFactory Constructors MongoDbEventStoreConnectionStringFactory(IConfigurationManager, ILogger) Instantiates a new instance of MongoDbEventStoreConnectionStringFactory . Declaration public MongoDbEventStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields MongoDbConnectionNameApplicationKey The name of the app setting in IConfigurationManager that will have the name of the connection string of the MongoDB server. Declaration public static string MongoDbConnectionNameApplicationKey Field Value Type Description System.String MongoDbConnectionStringKey Backwards compatibility with version 1. Declaration public static string MongoDbConnectionStringKey Field Value Type Description System.String MongoDbDatabaseNameApplicationKey The name of the app setting in IConfigurationManager that will have the name of the database. Declaration public static string MongoDbDatabaseNameApplicationKey Field Value Type Description System.String MongoDbDatabaseNameKey Backwards compatibility with version 1. Declaration public static string MongoDbDatabaseNameKey Field Value Type Description System.String Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetEventStoreConnectionString() Gets the current connection string. Declaration public string GetEventStoreConnectionString() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreConnectionString() GetEventStoreDatabaseName() Gets the current database name. Declaration public string GetEventStoreDatabaseName() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventStore-1.html",
    "title": "Class MongoDbEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventStore<TAuthenticationToken> A MongoDB based EventStore<TAuthenticationToken> . Inheritance System.Object EventStore <TAuthenticationToken> MongoDbEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors MongoDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IMongoDbEventStoreConnectionStringFactory, IConfigurationManager) Instantiate a new instance of MongoDbEventStore<TAuthenticationToken> triggering any require index checks. Declaration public MongoDbEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IMongoDbEventStoreConnectionStringFactory mongoDbEventStoreConnectionStringFactory, IConfigurationManager configurationManager) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger IMongoDbEventStoreConnectionStringFactory mongoDbEventStoreConnectionStringFactory IConfigurationManager configurationManager Properties ConfigurationManager Gets or sets the IConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager MongoCollection Gets or sets the MongoDB.Driver.IMongoCollection<TDocument> Declaration protected IMongoCollection<MongoDbEventData> MongoCollection { get; } Property Value Type Description MongoDB.Driver.IMongoCollection < MongoDbEventData > MongoDbEventStoreConnectionStringFactory Gets or sets the IMongoDbEventStoreConnectionStringFactory Declaration protected IMongoDbEventStoreConnectionStringFactory MongoDbEventStoreConnectionStringFactory { get; } Property Value Type Description IMongoDbEventStoreConnectionStringFactory Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32) GetCollection() Get a MongoDB.Driver.IMongoCollection<TDocument> Declaration protected virtual IMongoCollection<MongoDbEventData> GetCollection() Returns Type Description MongoDB.Driver.IMongoCollection < MongoDbEventData > PersistEvent(EventData) Persist the provided eventData into storage. Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData) VerifyIndex(MongoDbIndex<MongoDbEventData>) Verify the provided mongoIndex is defined and ready to go. Declaration protected virtual void VerifyIndex(MongoDbIndex<MongoDbEventData> mongoIndex) Parameters Type Name Description MongoDbIndex < MongoDbEventData > mongoIndex VerifyIndexes() Verify all required MongoDbIndex<TEntity> are defined and ready to go. Declaration protected virtual void VerifyIndexes()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventData.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.MongoDbEventData.html",
    "title": "Class MongoDbEventData | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventData Captures all the data relevant to an IEvent<TAuthenticationToken> for MongoDbEventStore<TAuthenticationToken> to persist. Inheritance System.Object EventData MongoDbEventData Inherited Members EventData.Data EventData.EventId EventData.EventType EventData.AggregateId EventData.AggregateRsn EventData.Version EventData.Timestamp EventData.CorrelationId System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events Assembly : Cqrs.MongoDB.dll Syntax [Serializable] [DataContract] public class MongoDbEventData : EventData Constructors MongoDbEventData() Instantiates a new instance of MongoDbEventData . Declaration public MongoDbEventData() MongoDbEventData(EventData) Instantiates a new instance of MongoDbEventData . Declaration public MongoDbEventData(EventData eventData) Parameters Type Name Description EventData eventData Properties _id An internal MongoDB identifier. Declaration [DataMember] public ObjectId _id { get; set; } Property Value Type Description MongoDB.Bson.ObjectId"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.html",
    "title": "Namespace Cqrs.MongoDB.Events.Indexes | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Events.Indexes Classes ByAggregateIdAndVersionMongoDbIndex A MongoDbIndex<TEntity> for AggregateId and Version . ByCorrelationIdMongoDbIndex A MongoDbIndex<TEntity> for CorrelationId . ByTimestampAndEventTypeMongoDbIndex A MongoDbIndex<TEntity> for Timestamp and EventType . ByTimestampMongoDbIndex A MongoDbIndex<TEntity> for Timestamp ."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByTimestampMongoDbIndex.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByTimestampMongoDbIndex.html",
    "title": "Class ByTimestampMongoDbIndex | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByTimestampMongoDbIndex A MongoDbIndex<TEntity> for Timestamp . Inheritance System.Object MongoDbIndex < MongoDbEventData > ByTimestampMongoDbIndex Inherited Members MongoDbIndex<MongoDbEventData>.IsUnique MongoDbIndex<MongoDbEventData>.IsAcending MongoDbIndex<MongoDbEventData>.Name MongoDbIndex<MongoDbEventData>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events.Indexes Assembly : Cqrs.MongoDB.dll Syntax public class ByTimestampMongoDbIndex : MongoDbIndex<MongoDbEventData> Constructors ByTimestampMongoDbIndex() Instantiate a new instance of ByTimestampMongoDbIndex . Declaration public ByTimestampMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByTimestampAndEventTypeMongoDbIndex.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByTimestampAndEventTypeMongoDbIndex.html",
    "title": "Class ByTimestampAndEventTypeMongoDbIndex | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByTimestampAndEventTypeMongoDbIndex A MongoDbIndex<TEntity> for Timestamp and EventType . Inheritance System.Object MongoDbIndex < MongoDbEventData > ByTimestampAndEventTypeMongoDbIndex Inherited Members MongoDbIndex<MongoDbEventData>.IsUnique MongoDbIndex<MongoDbEventData>.IsAcending MongoDbIndex<MongoDbEventData>.Name MongoDbIndex<MongoDbEventData>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events.Indexes Assembly : Cqrs.MongoDB.dll Syntax public class ByTimestampAndEventTypeMongoDbIndex : MongoDbIndex<MongoDbEventData> Constructors ByTimestampAndEventTypeMongoDbIndex() Instantiate a new instance of ByTimestampAndEventTypeMongoDbIndex . Declaration public ByTimestampAndEventTypeMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByCorrelationIdMongoDbIndex.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByCorrelationIdMongoDbIndex.html",
    "title": "Class ByCorrelationIdMongoDbIndex | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByCorrelationIdMongoDbIndex A MongoDbIndex<TEntity> for CorrelationId . Inheritance System.Object MongoDbIndex < MongoDbEventData > ByCorrelationIdMongoDbIndex Inherited Members MongoDbIndex<MongoDbEventData>.IsUnique MongoDbIndex<MongoDbEventData>.IsAcending MongoDbIndex<MongoDbEventData>.Name MongoDbIndex<MongoDbEventData>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events.Indexes Assembly : Cqrs.MongoDB.dll Syntax public class ByCorrelationIdMongoDbIndex : MongoDbIndex<MongoDbEventData> Constructors ByCorrelationIdMongoDbIndex() Instantiate a new instance of ByCorrelationIdMongoDbIndex . Declaration public ByCorrelationIdMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByAggregateIdAndVersionMongoDbIndex.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.Indexes.ByAggregateIdAndVersionMongoDbIndex.html",
    "title": "Class ByAggregateIdAndVersionMongoDbIndex | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByAggregateIdAndVersionMongoDbIndex A MongoDbIndex<TEntity> for AggregateId and Version . Inheritance System.Object MongoDbIndex < MongoDbEventData > ByAggregateIdAndVersionMongoDbIndex Inherited Members MongoDbIndex<MongoDbEventData>.IsUnique MongoDbIndex<MongoDbEventData>.IsAcending MongoDbIndex<MongoDbEventData>.Name MongoDbIndex<MongoDbEventData>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Events.Indexes Assembly : Cqrs.MongoDB.dll Syntax public class ByAggregateIdAndVersionMongoDbIndex : MongoDbIndex<MongoDbEventData> Constructors ByAggregateIdAndVersionMongoDbIndex() Instantiate a new instance of ByAggregateIdAndVersionMongoDbIndex . Declaration public ByAggregateIdAndVersionMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Events.IMongoDbEventStoreConnectionStringFactory.html",
    "title": "Interface IMongoDbEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMongoDbEventStoreConnectionStringFactory A factory for getting connection strings and database names for IEventStore<TAuthenticationToken> access. Namespace : Cqrs.MongoDB.Events Assembly : Cqrs.MongoDB.dll Syntax public interface IMongoDbEventStoreConnectionStringFactory Methods GetEventStoreConnectionString() Gets the current connection string. Declaration string GetEventStoreConnectionString() Returns Type Description System.String GetEventStoreDatabaseName() Gets the current database name. Declaration string GetEventStoreDatabaseName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Entities.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Entities.html",
    "title": "Namespace Cqrs.MongoDB.Entities | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Entities Classes MongoEntity A projection/entity especially designed to work with MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Entities.MongoEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Entities.MongoEntity.html",
    "title": "Class MongoEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoEntity A projection/entity especially designed to work with MongoDB. Inheritance System.Object Entity MongoEntity SingleSignOnToken Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Entities Assembly : Cqrs.MongoDB.dll Syntax [Serializable] [DataContract] public abstract class MongoEntity : Entity, IEntity Properties IsLogicallyDeleted Indicates if this IEntity has been deleted, but not removed from the IDataStore<TData> , this way entities can be retrieved so an un-deleted operation can be triggered. Declaration [Required] [DataMember] public override bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Overrides Entity.IsLogicallyDeleted Rsn The identifier of the IEntity . Declaration [Required] [BsonId] [DataMember] public override Guid Rsn { get; set; } Property Value Type Description System.Guid Overrides Entity.Rsn SortingOrder The order of this IEntity to sort by, by default. Declaration [DataMember] public override int SortingOrder { get; set; } Property Value Type Description System.Int32 Overrides Entity.SortingOrder"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.html",
    "title": "Namespace Cqrs.MongoDB.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.DataStores Classes MongoDbDataStore<TData> A IDataStore<TData> that uses MongoDB for storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.html",
    "title": "Namespace Cqrs.Mongo.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.DataStores Classes MongoDataStore<TData> A IDataStore<TData> that uses MongoDB for storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.html",
    "title": "Namespace Cqrs.EventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.EventStore Classes EventFactory<TAuthenticationToken> A factory implementing IEventDeserialiser<TAuthenticationToken> and IEventBuilder<TAuthenticationToken> EventStore<TAuthenticationToken> A Greg Young Event Store based EventStore<TAuthenticationToken> . EventStoreConnectionHelper<TAuthenticationToken> Creates instances of EventStore.ClientAPI.IEventStoreConnection . ProjectionReader<TAuthenticationToken> Reads projection streams from a Greg Young's Event sTore. SimpleEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> that holds the event data in Message . Interfaces IEventBuilder<TAuthenticationToken> Builds EventStore.ClientAPI.EventData from various input formats. IEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. IEventStoreConnectionHelper Creates instances of EventStore.ClientAPI.IEventStoreConnection ."
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.SimpleEvent-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.SimpleEvent-1.html",
    "title": "Class SimpleEvent<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimpleEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> that holds the event data in Message . Inheritance System.Object SimpleEvent<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public class SimpleEvent<TAuthenticationToken> : IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id Message A serialised version of one or more instances of IEvent<TAuthenticationToken> . Declaration [DataMember] public string Message { get; set; } Property Value Type Description System.String OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.ProjectionReader-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.ProjectionReader-1.html",
    "title": "Class ProjectionReader<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ProjectionReader<TAuthenticationToken> Reads projection streams from a Greg Young's Event sTore. Inheritance System.Object ProjectionReader<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public abstract class ProjectionReader<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors ProjectionReader(IEventStoreConnectionHelper, IEventDeserialiser<TAuthenticationToken>) Instantiates a new instance of ProjectionReader<TAuthenticationToken> . Declaration protected ProjectionReader(IEventStoreConnectionHelper eventStoreConnectionHelper, IEventDeserialiser<TAuthenticationToken> eventDeserialiser) Parameters Type Name Description IEventStoreConnectionHelper eventStoreConnectionHelper IEventDeserialiser <TAuthenticationToken> eventDeserialiser Properties EventDeserialiser The IEventDeserialiser<TAuthenticationToken> used to deserialise events. Declaration protected IEventDeserialiser<TAuthenticationToken> EventDeserialiser { get; set; } Property Value Type Description IEventDeserialiser <TAuthenticationToken> EventStoreConnectionHelper The EventStore.ClientAPI.IEventStoreConnection used to read and write streams in the Greg Young Event Store. Declaration protected IEventStoreConnectionHelper EventStoreConnectionHelper { get; set; } Property Value Type Description IEventStoreConnectionHelper Methods GetDataByStreamName(String) Get a collection of data objects from a stream with the provided streamName . Declaration protected IEnumerable<dynamic> GetDataByStreamName(string streamName) Parameters Type Name Description System.String streamName The name of the stream to read events from. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > GetDataByStreamName<TData>(String) Get a collection of TData from a stream with the provided streamName . Declaration protected IEnumerable<TData> GetDataByStreamName<TData>(string streamName) Parameters Type Name Description System.String streamName The name of the stream to read events from. Returns Type Description System.Collections.Generic.IEnumerable <TData> Type Parameters Name Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventStoreConnectionHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventStoreConnectionHelper.html",
    "title": "Interface IEventStoreConnectionHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventStoreConnectionHelper Creates instances of EventStore.ClientAPI.IEventStoreConnection . Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public interface IEventStoreConnectionHelper Methods GetEventStoreConnection() Gets a EventStore.ClientAPI.IEventStoreConnection Declaration IEventStoreConnection GetEventStoreConnection() Returns Type Description EventStore.ClientAPI.IEventStoreConnection"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventDeserialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventDeserialiser-1.html",
    "title": "Interface IEventDeserialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public interface IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Deserialise(RecordedEvent) Deserialise the provided eventData into an IEvent<TAuthenticationToken> . Declaration IEvent<TAuthenticationToken> Deserialise(RecordedEvent eventData) Parameters Type Name Description EventStore.ClientAPI.RecordedEvent eventData The EventStore.ClientAPI.RecordedEvent to Deserialise. Returns Type Description IEvent <TAuthenticationToken> Deserialise(ResolvedEvent) Deserialise the provided notification into an IEvent<TAuthenticationToken> . Declaration IEvent<TAuthenticationToken> Deserialise(ResolvedEvent notification) Parameters Type Name Description EventStore.ClientAPI.ResolvedEvent notification The EventStore.ClientAPI.ResolvedEvent to Deserialise. Returns Type Description IEvent <TAuthenticationToken> GetSerialisationSettings() Gets the Newtonsoft.Json.JsonSerializerSettings used while Deserialising. Declaration JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.IEventBuilder-1.html",
    "title": "Interface IEventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventBuilder<TAuthenticationToken> Builds EventStore.ClientAPI.EventData from various input formats. Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public interface IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods CreateClientConnectedEvent(String) Create an EventStore.ClientAPI.EventData that notifies people a client has connected. Declaration EventData CreateClientConnectedEvent(string clientName) Parameters Type Name Description System.String clientName The name of the client that has connected. Returns Type Description EventStore.ClientAPI.EventData CreateFrameworkEvent(IEvent<TAuthenticationToken>) Create an EventStore.ClientAPI.EventData with the provided eventData . Declaration EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventStore.ClientAPI.EventData . Returns Type Description EventStore.ClientAPI.EventData CreateFrameworkEvent(String) Create an EventStore.ClientAPI.EventData from the provided eventDataBody . Declaration EventData CreateFrameworkEvent(string eventDataBody) Parameters Type Name Description System.String eventDataBody A JSON string of serialised data. Returns Type Description EventStore.ClientAPI.EventData CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) Create an EventStore.ClientAPI.EventData with the provided eventData . Declaration EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventStore.ClientAPI.EventData . Returns Type Description EventStore.ClientAPI.EventData CreateFrameworkEvent(String, String) Create an EventStore.ClientAPI.EventData from the provided eventDataBody . Declaration EventData CreateFrameworkEvent(string type, string eventDataBody) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. System.String eventDataBody A JSON string of serialised data. Returns Type Description EventStore.ClientAPI.EventData"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.EventStoreConnectionHelper-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.EventStoreConnectionHelper-1.html",
    "title": "Class EventStoreConnectionHelper<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreConnectionHelper<TAuthenticationToken> Creates instances of EventStore.ClientAPI.IEventStoreConnection . Inheritance System.Object EventStoreConnectionHelper<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public class EventStoreConnectionHelper<TAuthenticationToken> : IEventStoreConnectionHelper Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors EventStoreConnectionHelper(IEventBuilder<TAuthenticationToken>, IConfigurationManager) Instantiates a new instance of EventStoreConnectionHelper<TAuthenticationToken> Declaration public EventStoreConnectionHelper(IEventBuilder<TAuthenticationToken> eventBuilder, IConfigurationManager configurationManager) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder The IEventBuilder<TAuthenticationToken> that is used. IConfigurationManager configurationManager The IConfigurationManager that is used. Properties ConfigurationManager The IConfigurationManager that is used. Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager EventBuilder The IEventBuilder<TAuthenticationToken> that is used. Declaration protected IEventBuilder<TAuthenticationToken> EventBuilder { get; } Property Value Type Description IEventBuilder <TAuthenticationToken> Methods GetEventStoreClientName() Get the client name from the ConfigurationManager that describes the client that will connect to the server. Declaration protected virtual string GetEventStoreClientName() Returns Type Description System.String GetEventStoreConnection() Gets a EventStore.ClientAPI.IEventStoreConnection Declaration public virtual IEventStoreConnection GetEventStoreConnection() Returns Type Description EventStore.ClientAPI.IEventStoreConnection Implements IEventStoreConnectionHelper.GetEventStoreConnection() GetEventStoreConnectionLogStreamName() Get the connection stream name from the ConfigurationManager . Declaration protected virtual string GetEventStoreConnectionLogStreamName() Returns Type Description System.String GetEventStoreIpEndPoint() Get the IP address of the server from the ConfigurationManager . Declaration protected virtual IPEndPoint GetEventStoreIpEndPoint() Returns Type Description System.Net.IPEndPoint"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.EventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.EventStore-1.html",
    "title": "Class EventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStore<TAuthenticationToken> A Greg Young Event Store based EventStore<TAuthenticationToken> . Inheritance System.Object EventStore<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public class EventStore<TAuthenticationToken> : IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors EventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, IEventStoreConnectionHelper) Instantiates a new instance of EventStore<TAuthenticationToken> . Declaration public EventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, IEventStoreConnectionHelper eventStoreConnectionHelper) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser IEventStoreConnectionHelper eventStoreConnectionHelper Fields CqrsEventStoreStreamNamePattern The pattern used to create stream names. Declaration protected const string CqrsEventStoreStreamNamePattern = \"{0}/{1}\" Field Value Type Description System.String Properties EventBuilder The IEventBuilder<TAuthenticationToken> used to build events. Declaration protected IEventBuilder<TAuthenticationToken> EventBuilder { get; set; } Property Value Type Description IEventBuilder <TAuthenticationToken> EventDeserialiser The IEventDeserialiser<TAuthenticationToken> used to deserialise events. Declaration protected IEventDeserialiser<TAuthenticationToken> EventDeserialiser { get; set; } Property Value Type Description IEventDeserialiser <TAuthenticationToken> EventStoreConnection The EventStore.ClientAPI.IEventStoreConnection used to read and write streams in the Greg Young Event Store. Declaration protected IEventStoreConnection EventStoreConnection { get; set; } Property Value Type Description EventStore.ClientAPI.IEventStoreConnection Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Remarks The value of fromVersion is zero based but the internals indexing of the EventStore is offset by EventStore.ClientAPI.StreamPosition.Start . Adjust the value of fromVersion by EventStore.ClientAPI.StreamPosition.Start Get<T>(Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the T with the ID matching the provided aggregateId . Declaration public IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) Remarks The value of fromVersion is zero based but the internals indexing of the EventStore is offset by EventStore.ClientAPI.StreamPosition.Start . Adjust the value of fromVersion by EventStore.ClientAPI.StreamPosition.Start ListenForNotificationsOnConnection(IEventStoreConnection) Requests the connection responds to OnConnect client notifications. Declaration protected virtual void ListenForNotificationsOnConnection(IEventStoreConnection connection) Parameters Type Name Description EventStore.ClientAPI.IEventStoreConnection connection The EventStore.ClientAPI.IEventStoreConnection that will be monitored. Save(Type, IEvent<TAuthenticationToken>) Saves the provided event . Declaration public void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<TAuthenticationToken>) Saves the provided event . Declaration public void Save<T>(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.EventFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.EventFactory-1.html",
    "title": "Class EventFactory<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventFactory<TAuthenticationToken> A factory implementing IEventDeserialiser<TAuthenticationToken> and IEventBuilder<TAuthenticationToken> Inheritance System.Object EventFactory<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore Assembly : Cqrs.EventStore.dll Syntax public class EventFactory<TAuthenticationToken> : IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods CreateClientConnectedEvent(String) Create an EventStore.ClientAPI.EventData that notifies people a client has connected. Declaration public EventData CreateClientConnectedEvent(string clientName) Parameters Type Name Description System.String clientName The name of the client that has connected. Returns Type Description EventStore.ClientAPI.EventData Implements IEventBuilder<TAuthenticationToken>.CreateClientConnectedEvent(String) CreateFrameworkEvent(IEvent<TAuthenticationToken>) Create an EventStore.ClientAPI.EventData with the provided eventData . Declaration public EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventStore.ClientAPI.EventData . Returns Type Description EventStore.ClientAPI.EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>) CreateFrameworkEvent(String) Create an EventStore.ClientAPI.EventData from the provided eventDataBody . Declaration public EventData CreateFrameworkEvent(string eventDataBody) Parameters Type Name Description System.String eventDataBody A JSON string of serialised data. Returns Type Description EventStore.ClientAPI.EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String) CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) Create an EventStore.ClientAPI.EventData with the provided eventData . Declaration public EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventStore.ClientAPI.EventData . Returns Type Description EventStore.ClientAPI.EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) CreateFrameworkEvent(String, String) Create an EventStore.ClientAPI.EventData from the provided eventDataBody . Declaration public EventData CreateFrameworkEvent(string type, string eventDataBody) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. System.String eventDataBody A JSON string of serialised data. Returns Type Description EventStore.ClientAPI.EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, String) Deserialise(RecordedEvent) Deserialise the provided eventData into an IEvent<TAuthenticationToken> . Declaration public IEvent<TAuthenticationToken> Deserialise(RecordedEvent eventData) Parameters Type Name Description EventStore.ClientAPI.RecordedEvent eventData The EventStore.ClientAPI.RecordedEvent to Deserialise. Returns Type Description IEvent <TAuthenticationToken> Implements IEventDeserialiser<TAuthenticationToken>.Deserialise(RecordedEvent) Deserialise(ResolvedEvent) Deserialise the provided notification into an IEvent<TAuthenticationToken> . Declaration public IEvent<TAuthenticationToken> Deserialise(ResolvedEvent notification) Parameters Type Name Description EventStore.ClientAPI.ResolvedEvent notification The EventStore.ClientAPI.ResolvedEvent to Deserialise. Returns Type Description IEvent <TAuthenticationToken> Implements IEventDeserialiser<TAuthenticationToken>.Deserialise(ResolvedEvent) GetSerialisationSettings() Gets the Newtonsoft.Json.JsonSerializerSettings used while Deserialising. Declaration public JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings Implements IEventDeserialiser<TAuthenticationToken>.GetSerialisationSettings()"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.html",
    "title": "Namespace Cqrs.EventStore.Bus | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.EventStore.Bus Classes EventConverter Converts a stream of JSON text using deserialisation. EventStoreBasedLastEventProcessedStore Indicates the position in store where the stream has been read up to. EventStoreEventPublisher<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that uses Greg Young's Event Store. EventStoreUtilities A collection of utility functions. InvalidLastEventProcessedException The EventStore.ClientAPI.Position information provided was invalid and a EventStore.ClientAPI.Position was unable to be created."
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.InvalidLastEventProcessedException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.InvalidLastEventProcessedException.html",
    "title": "Class InvalidLastEventProcessedException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InvalidLastEventProcessedException The EventStore.ClientAPI.Position information provided was invalid and a EventStore.ClientAPI.Position was unable to be created. Inheritance System.Object System.Exception InvalidLastEventProcessedException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore.Bus Assembly : Cqrs.EventStore.dll Syntax [Serializable] public class InvalidLastEventProcessedException : Exception, ISerializable, _Exception Constructors InvalidLastEventProcessedException() Instantiates a new instance of InvalidLastEventProcessedException . Declaration public InvalidLastEventProcessedException() InvalidLastEventProcessedException(SerializationInfo, StreamingContext) Instantiates a new instance of InvalidLastEventProcessedException with serialized data. Declaration protected InvalidLastEventProcessedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. InvalidLastEventProcessedException(String) Instantiates a new instance of InvalidLastEventProcessedException with a specified error message. Declaration public InvalidLastEventProcessedException(string message) Parameters Type Name Description System.String message The error message that explains the reason for the exception. InvalidLastEventProcessedException(String, Exception) Instantiates a new instance of InvalidLastEventProcessedException with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidLastEventProcessedException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreUtilities.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreUtilities.html",
    "title": "Class EventStoreUtilities | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreUtilities A collection of utility functions. Inheritance System.Object EventStoreUtilities Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore.Bus Assembly : Cqrs.EventStore.dll Syntax public static class EventStoreUtilities Methods ByteArrayToString(Byte[]) Converts the provided value into a string. Declaration public static string ByteArrayToString(byte[] value) Parameters Type Name Description System.Byte [] value Returns Type Description System.String FormattedStringToPosition(String) Converts the provided formattedPosition of a EventStore.ClientAPI.Position back into a EventStore.ClientAPI.Position . Declaration public static Position FormattedStringToPosition(string formattedPosition) Parameters Type Name Description System.String formattedPosition Returns Type Description EventStore.ClientAPI.Position PositionToFormattedString(Position) Converts the provide position into a string representation of itself. Declaration public static string PositionToFormattedString(Position position) Parameters Type Name Description EventStore.ClientAPI.Position position Returns Type Description System.String StringToByteArray(String) Converts the provided value into a System.Byte System.Array . Declaration public static byte[] StringToByteArray(string value) Parameters Type Name Description System.String value Returns Type Description System.Byte []"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreEventPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreEventPublisher-1.html",
    "title": "Class EventStoreEventPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreEventPublisher<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that uses Greg Young's Event Store. Inheritance System.Object EventStoreEventPublisher<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore.Bus Assembly : Cqrs.EventStore.dll Syntax public class EventStoreEventPublisher<TAuthenticationToken> : IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors EventStoreEventPublisher(IEventStoreConnectionHelper, IStoreLastEventProcessed) Instantiates a new instance of EventStoreEventPublisher<TAuthenticationToken> Declaration public EventStoreEventPublisher(IEventStoreConnectionHelper eventStoreConnectionHelper, IStoreLastEventProcessed lastEventProcessedStore) Parameters Type Name Description IEventStoreConnectionHelper eventStoreConnectionHelper The EventStore.ClientAPI.IEventStoreConnection used to read and write streams in the Greg Young Event Store. IStoreLastEventProcessed lastEventProcessedStore The store that hold stream position information. Properties EventStoreConnection The EventStore.ClientAPI.IEventStoreConnection used to read and write streams in the Greg Young Event Store. Declaration protected IEventStoreConnection EventStoreConnection { get; } Property Value Type Description EventStore.ClientAPI.IEventStoreConnection LastEventProcessedStore The store that hold stream position information. Declaration protected IStoreLastEventProcessed LastEventProcessedStore { get; } Property Value Type Description IStoreLastEventProcessed Routes The actions to execute per System.Type Declaration protected Dictionary<Type, List<Action<IMessage>>> Routes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.List < System.Action < IMessage >>> Methods InitialiseCatchUpSubscription() Reads the position the store was last within the stream and subscribes requesting all events prior to that position aren't replayed. Declaration protected void InitialiseCatchUpSubscription() Publish<TEvent>(TEvent) Publishes the provided event on the event bus. Declaration public void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Publishes the provided events on the event bus. Declaration public void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreBasedLastEventProcessedStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventStoreBasedLastEventProcessedStore.html",
    "title": "Class EventStoreBasedLastEventProcessedStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreBasedLastEventProcessedStore Indicates the position in store where the stream has been read up to. Inheritance System.Object EventStoreBasedLastEventProcessedStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore.Bus Assembly : Cqrs.EventStore.dll Syntax public class EventStoreBasedLastEventProcessedStore : IStoreLastEventProcessed Constructors EventStoreBasedLastEventProcessedStore(IEventStoreConnection) Instantiates a new instance of EventStoreBasedLastEventProcessedStore . Declaration public EventStoreBasedLastEventProcessedStore(IEventStoreConnection eventStoreConnection) Parameters Type Name Description EventStore.ClientAPI.IEventStoreConnection eventStoreConnection The EventStore.ClientAPI.IEventStoreConnection used to read streams. Fields EventsProcessedStreamName The name of the event stream use to store the position/location information. Declaration public const string EventsProcessedStreamName = \"EventsProcessed\" Field Value Type Description System.String EventType The name of the event type we use in the event stream to store the position/location information. Declaration public const string EventType = \"ProcessedEvent\" Field Value Type Description System.String Properties EventLocation The location within the store where the stream has been read up to. Declaration public string EventLocation { get; set; } Property Value Type Description System.String Implements IStoreLastEventProcessed.EventLocation EventStoreConnection The EventStore.ClientAPI.IEventStoreConnection used to read and write streams in the Greg Young Event Store. Declaration protected IEventStoreConnection EventStoreConnection { get; } Property Value Type Description EventStore.ClientAPI.IEventStoreConnection"
  },
  "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventConverter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.EventStore.Bus.EventConverter.html",
    "title": "Class EventConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventConverter Converts a stream of JSON text using deserialisation. Inheritance System.Object EventConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.EventStore.Bus Assembly : Cqrs.EventStore.dll Syntax public class EventConverter Methods GetEventFromData<TEvent>(Byte[], String) Assumes the provided eventData is a strean of JSON text and deserialises the provided eventData into an object of type typeName then casts to TEvent . Declaration public static TEvent GetEventFromData<TEvent>(byte[] eventData, string typeName) Parameters Type Name Description System.Byte [] eventData A strean of JSON text System.String typeName The name of the System.Type to deserialise the provided eventData to. Returns Type Description TEvent Type Parameters Name Description TEvent The System.Type of the event to convert to."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.ISaga-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.ISaga-1.html",
    "title": "Interface ISaga<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISaga<TAuthenticationToken> An independent component that reacts to domain IEvent<TAuthenticationToken> in a cross- IAggregateRoot<TAuthenticationToken> , eventually consistent manner. Time can also be a trigger. A Saga<TAuthenticationToken> can sometimes be purely reactive, and sometimes represent workflows. From an implementation perspective, a Saga<TAuthenticationToken> is a state machine that is driven forward by incoming IEvent<TAuthenticationToken> (which may come from many AggregateRoot<TAuthenticationToken> or other Saga<TAuthenticationToken> ). Some states will have side effects, such as sending ICommand<TAuthenticationToken> , talking to external web services, or sending emails. Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface ISaga<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks Isn't a Saga<TAuthenticationToken> just leaked domain logic? No. A Saga<TAuthenticationToken> can doing things that no individual AggregateRoot<TAuthenticationToken> can sensibly do. Thus, it's not a logic leak since the logic didn't belong in an AggregateRoot<TAuthenticationToken> anyway. Furthermore, we're not breaking encapsulation in any way, since Saga<TAuthenticationToken> operate with ICommand<TAuthenticationToken> and IEvent<TAuthenticationToken> , which are part of the public API. How can I make my Saga<TAuthenticationToken> react to an IEvent<TAuthenticationToken> that did not happen? The Saga<TAuthenticationToken> , besides reacting to domain IEvent<TAuthenticationToken> , can be \"woken up\" by recurrent internal alarms. Implementing such alarms is easy. See cron in Unix, or triggered WebJobs in Azure for examples. How does the Saga<TAuthenticationToken> interact with the write side? By sending an ICommand<TAuthenticationToken> to it. Properties Id The identifier of the ISaga<TAuthenticationToken> . Declaration [DataMember] Guid Id { get; } Property Value Type Description System.Guid Version The current version of this ISaga<TAuthenticationToken> . Declaration [DataMember] int Version { get; } Property Value Type Description System.Int32 Methods GetUncommittedChanges() Get all applied changes that haven't yet been committed. Declaration IEnumerable<ISagaEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) Apply all the IEvent<TAuthenticationToken> in history using event replay to this instance. Declaration void LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> history MarkChangesAsCommitted() Mark all applied changes as committed, increment Version and flush the internal collection of changes. Declaration void MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.ReplyToHelloWorldCommand.html",
    "title": "Class ReplyToHelloWorldCommand | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ReplyToHelloWorldCommand Someone wants to reply to someone saying \"Hello World\". Inheritance System.Object ReplyToHelloWorldCommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class ReplyToHelloWorldCommand : ICommand<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.SayHelloWorldCommandHandler.html",
    "title": "Class SayHelloWorldCommandHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SayHelloWorldCommandHandler Handles the SayHelloWorldCommand . Inheritance System.Object SayHelloWorldCommandHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class SayHelloWorldCommandHandler : ICommandHandler<Guid, SayHelloWorldCommand>, IMessageHandler<SayHelloWorldCommand>, ICommandHandle, IHandler Constructors SayHelloWorldCommandHandler(IAkkaAggregateResolver) Instantiates the SayHelloWorldCommandHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public SayHelloWorldCommandHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(SayHelloWorldCommand) Responds to the provided command . Declaration public void Handle(SayHelloWorldCommand command) Parameters Type Name Description SayHelloWorldCommand command The SayHelloWorldCommand to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.ReplyToHelloWorldCommandHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.ReplyToHelloWorldCommandHandler.html",
    "title": "Class ReplyToHelloWorldCommandHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ReplyToHelloWorldCommandHandler Handles the ReplyToHelloWorldCommand . Inheritance System.Object ReplyToHelloWorldCommandHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class ReplyToHelloWorldCommandHandler : ICommandHandler<Guid, ReplyToHelloWorldCommand>, IMessageHandler<ReplyToHelloWorldCommand>, ICommandHandle, IHandler Constructors ReplyToHelloWorldCommandHandler(IAkkaAggregateResolver) Instantiates the ReplyToHelloWorldCommandHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public ReplyToHelloWorldCommandHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(ReplyToHelloWorldCommand) Responds to the provided command . Declaration public void Handle(ReplyToHelloWorldCommand command) Parameters Type Name Description ReplyToHelloWorldCommand command The ReplyToHelloWorldCommand to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.AkkaUnitTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.AkkaUnitTests.html",
    "title": "Class AkkaUnitTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaUnitTests A series of tests on Akka.net Inheritance System.Object AkkaUnitTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit Assembly : Cqrs.Akka.Tests.Unit.dll Syntax [TestClass] public class AkkaUnitTests Methods SendingCommandsAndEvents_AcrossBusesInMultipleWays_AllWork() AkkaSystem_ATestSayHelloWorldCommand_5PointsAreReached Declaration [TestMethod] public void SendingCommandsAndEvents_AcrossBusesInMultipleWays_AllWork()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Aggregates.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Aggregates.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Aggregates | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Aggregates Classes HelloWorld An Akka.Net actor based IAggregateRoot<TAuthenticationToken> that represents a conversation."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.IAkkaEventPublisherProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.IAkkaEventPublisherProxy-1.html",
    "title": "Interface IAkkaEventPublisherProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaEventPublisherProxy<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus. Inherited Members IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>) Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public interface IAkkaEventPublisherProxy<TAuthenticationToken> : IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.IAkkaEventPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.IAkkaEventPublisher-1.html",
    "title": "Interface IAkkaEventPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaEventPublisher<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus. Inherited Members IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>) Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public interface IAkkaEventPublisher<TAuthenticationToken> : IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBusProxy-1.BusActor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBusProxy-1.BusActor.html",
    "title": "Class AkkaEventBusProxy<TAuthenticationToken>.BusActor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaEventBusProxy<TAuthenticationToken>.BusActor Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaEventBusProxy<TAuthenticationToken>.BusActor Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public class BusActor : ReceiveActor, IInternalActor, IInitializableActor Constructors BusActor(IAkkaEventPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration public BusActor(IAkkaEventPublisher<TAuthenticationToken> eventHandlerResolver, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IAkkaEventPublisher <TAuthenticationToken> eventHandlerResolver cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventHandlerResolver Declaration protected IAkkaEventPublisher<TAuthenticationToken> EventHandlerResolver { get; } Property Value Type Description IAkkaEventPublisher <TAuthenticationToken> Methods ExecuteReceive(IEvent<TAuthenticationToken>) Declaration protected virtual void ExecuteReceive(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBus-1.html",
    "title": "Class AkkaEventBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaEventBus<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus. Inheritance System.Object AkkaEventBus<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public class AkkaEventBus<TAuthenticationToken> : IAkkaEventPublisher<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, IEventHandlerRegistrar, IHandlerRegistrar Type Parameters Name Description TAuthenticationToken Constructors AkkaEventBus(IBusHelper, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IEventPublisher<TAuthenticationToken>, IEventReceiver<TAuthenticationToken>) Declaration public AkkaEventBus(IBusHelper busHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IEventPublisher<TAuthenticationToken> eventPublisher, IEventReceiver<TAuthenticationToken> eventReceiver) Parameters Type Name Description IBusHelper busHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper cdmdotnet.Logging.ILogger logger IEventPublisher <TAuthenticationToken> eventPublisher IEventReceiver <TAuthenticationToken> eventReceiver Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> BusHelper Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventPublisher Declaration protected IEventPublisher<TAuthenticationToken> EventPublisher { get; } Property Value Type Description IEventPublisher <TAuthenticationToken> EventReceiver Declaration protected IEventReceiver<TAuthenticationToken> EventReceiver { get; } Property Value Type Description IEventReceiver <TAuthenticationToken> Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Routes Declaration protected static RouteManager Routes { get; } Property Value Type Description RouteManager Methods PrepareAndValidateEvent<TEvent>(TEvent, String, out IEnumerable<RouteHandlerDelegate>) Declaration public virtual bool PrepareAndValidateEvent<TEvent>(TEvent event, string framework, out IEnumerable<RouteHandlerDelegate> handlers)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event System.String framework System.Collections.Generic.IEnumerable < RouteHandlerDelegate > handlers Returns Type Description System.Boolean Type Parameters Name Description TEvent PrepareEvent<TEvent>(TEvent, String) Declaration public virtual void PrepareEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event System.String framework Type Parameters Name Description TEvent Publish<TEvent>(TEvent) Declaration public void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Declaration public virtual void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>) RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Remarks In many cases the targetedType will be the event handler class itself, what you actually want is the target of what is being updated"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaRepository-1.html",
    "title": "Interface IAkkaSagaRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaSagaRepository<TAuthenticationToken> Inherited Members ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>) ISagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaSagaRepository<TAuthenticationToken> : ISagaRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean) Declaration void LoadSagaHistory<TSaga>(TSaga saga, IList<ISagaEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga System.Collections.Generic.IList < ISagaEvent <TAuthenticationToken>> events System.Boolean throwExceptionOnNoEvents Type Parameters Name Description TSaga"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaProxy-1.html",
    "title": "Interface IAkkaSagaProxy<TSaga> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaSagaProxy<TSaga> Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaSagaProxy<out TSaga> Type Parameters Name Description TSaga Properties ActorReference Declaration IActorRef ActorReference { get; } Property Value Type Description Akka.Actor.IActorRef Saga Declaration TSaga Saga { get; } Property Value Type Description TSaga"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateRepository-1.html",
    "title": "Interface IAkkaAggregateRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaAggregateRepository<TAuthenticationToken> Inherited Members IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaAggregateRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean) Declaration void LoadAggregateHistory<TAggregateRoot>(TAggregateRoot aggregate, IList<IEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events System.Boolean throwExceptionOnNoEvents Type Parameters Name Description TAggregateRoot"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.html",
    "title": "Namespace Cqrs.Akka.Domain.Commands | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Domain.Commands Classes GetAkkaAggregateRootId Get the Id from the Akka.net system. GetAkkaAggregateRootVersion Get the Version from the Akka.net system. GetAkkaSagaId Get the Id from the Akka.net system. GetAkkaSagaVersion Get the Version from the Akka.net system."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaAggregateRootVersion.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaAggregateRootVersion.html",
    "title": "Class GetAkkaAggregateRootVersion | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GetAkkaAggregateRootVersion Get the Version from the Akka.net system. Inheritance System.Object GetAkkaAggregateRootVersion Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain.Commands Assembly : Cqrs.Akka.dll Syntax public class GetAkkaAggregateRootVersion"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaAggregateRootId.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaAggregateRootId.html",
    "title": "Class GetAkkaAggregateRootId | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GetAkkaAggregateRootId Get the Id from the Akka.net system. Inheritance System.Object GetAkkaAggregateRootId Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain.Commands Assembly : Cqrs.Akka.dll Syntax public class GetAkkaAggregateRootId"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSaga-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSaga-1.html",
    "title": "Class AkkaSaga<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaSaga<TAuthenticationToken> Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaSaga<TAuthenticationToken> ConversationReportProcessManager Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public abstract class AkkaSaga<TAuthenticationToken> : ReceiveActor, IInternalActor, IInitializableActor, ISaga<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AkkaSaga(ISagaUnitOfWork<TAuthenticationToken>, ILogger, IAkkaSagaRepository<TAuthenticationToken>, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>) Declaration protected AkkaSaga(ISagaUnitOfWork<TAuthenticationToken> unitOfWork, ILogger logger, IAkkaSagaRepository<TAuthenticationToken> repository, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICommandPublisher<TAuthenticationToken> commandPublisher) Parameters Type Name Description ISagaUnitOfWork <TAuthenticationToken> unitOfWork cdmdotnet.Logging.ILogger logger IAkkaSagaRepository <TAuthenticationToken> repository cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICommandPublisher <TAuthenticationToken> commandPublisher Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; set; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CommandPublisher Declaration protected ICommandPublisher<TAuthenticationToken> CommandPublisher { get; set; } Property Value Type Description ICommandPublisher <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Id The identifier of the ISaga<TAuthenticationToken> . Declaration public Guid Id { get; protected set; } Property Value Type Description System.Guid Implements ISaga<TAuthenticationToken>.Id Logger Declaration protected ILogger Logger { get; set; } Property Value Type Description cdmdotnet.Logging.ILogger Repository Declaration protected IAkkaSagaRepository<TAuthenticationToken> Repository { get; set; } Property Value Type Description IAkkaSagaRepository <TAuthenticationToken> UnitOfWork Declaration protected ISagaUnitOfWork<TAuthenticationToken> UnitOfWork { get; set; } Property Value Type Description ISagaUnitOfWork <TAuthenticationToken> Version The current version of this ISaga<TAuthenticationToken> . Declaration public int Version { get; protected set; } Property Value Type Description System.Int32 Implements ISaga<TAuthenticationToken>.Version Methods Apply(ISagaEvent<TAuthenticationToken>) Declaration protected virtual void Apply(ISagaEvent<TAuthenticationToken> sagaEvent) Parameters Type Name Description ISagaEvent <TAuthenticationToken> sagaEvent ApplyChange(IEvent<TAuthenticationToken>) Declaration protected virtual void ApplyChange(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event ApplyChange(ISagaEvent<TAuthenticationToken>) Declaration protected virtual void ApplyChange(ISagaEvent<TAuthenticationToken> event) Parameters Type Name Description ISagaEvent <TAuthenticationToken> event Execute<TEvent>(Action<TEvent>, TEvent) Declaration protected virtual void Execute<TEvent>(Action<TEvent> action, TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Action <TEvent> action TEvent event Type Parameters Name Description TEvent GetUncommittedChanges() Declaration public IEnumerable<ISagaEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> Implements ISaga<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) Declaration public virtual void LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> history Implements ISaga<TAuthenticationToken>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Declaration public virtual void MarkChangesAsCommitted() Implements ISaga<TAuthenticationToken>.MarkChangesAsCommitted() PreStart() User overridable callback. Is called when an Actor is started. Actors are automatically started asynchronously when created. Empty default implementation. Declaration protected override void PreStart() Overrides Akka.Actor.ActorBase.PreStart() SetId(ISagaEvent<TAuthenticationToken>) Declaration protected virtual void SetId(ISagaEvent<TAuthenticationToken> sagaEvent) Parameters Type Name Description ISagaEvent <TAuthenticationToken> sagaEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.html",
    "title": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters Classes BooleanConverterEx Provides a System.ComponentModel.TypeConverter to convert System.Boolean objects to and from various other representations with support for HTTP specification specific values such as ON or OFF. FromStringConverterAdapter Provides a unified way of converting System.String values to other types with support for a textual \"undefined\" value referring to null."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.FromStringConverterAdapter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters.FromStringConverterAdapter.html",
    "title": "Class FromStringConverterAdapter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FromStringConverterAdapter Provides a unified way of converting System.String values to other types with support for a textual \"undefined\" value referring to null. Inheritance System.Object FromStringConverterAdapter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.TypeConverters Assembly : Cqrs.WebApi.dll Syntax public class FromStringConverterAdapter Constructors FromStringConverterAdapter(Type, TypeConverter) Instantiates a new instance of FromStringConverterAdapter . Declaration public FromStringConverterAdapter(Type type, TypeConverter typeConverter) Parameters Type Name Description System.Type type System.ComponentModel.TypeConverter typeConverter Methods ConvertFromString(String, CultureInfo) Converts the given text to an object, using the specified context and culture information. Declaration public object ConvertFromString(string value, CultureInfo culture) Parameters Type Name Description System.String value The System.String to convert. System.Globalization.CultureInfo culture A System.Globalization.CultureInfo that specifies the culture to which to convert. Returns Type Description System.Object An System.Object that represents the converted value ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.CqrsWebHost-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.CqrsWebHost-3.html",
    "title": "Class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> Execute command and event handlers in a WCF Host using Ninject Inheritance System.Object CoreHost <TAuthenticationToken> TelemetryCoreHost <TAuthenticationToken> CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> Inherited Members TelemetryCoreHost<TAuthenticationToken>._configurationManager TelemetryCoreHost<TAuthenticationToken>.ConfigurationManager TelemetryCoreHost<TAuthenticationToken>.TelemetryClient TelemetryCoreHost<TAuthenticationToken>.ConfigureTelemetry() TelemetryCoreHost<TAuthenticationToken>.Run(Action) TelemetryCoreHost<TAuthenticationToken>.PrepareSecurityProtocol() TelemetryCoreHost<TAuthenticationToken>.Prepare() TelemetryCoreHost<TAuthenticationToken>.Start() CoreHost<TAuthenticationToken>.HandlerTypes CoreHost<TAuthenticationToken>.EventBus CoreHost<TAuthenticationToken>.CommandBus CoreHost<TAuthenticationToken>.TelemetryName CoreHost<TAuthenticationToken>.CorrelationIdHelper CoreHost<TAuthenticationToken>.Logger CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.StartBusRegistrar() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.Wcf Assembly : Cqrs.Ninject.Azure.Wcf.dll Syntax public class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> : TelemetryCoreHost<TAuthenticationToken> where TAuthenticationTokenHelper : class, IAuthenticationTokenHelper<TAuthenticationToken> where TWebHostModule : WebHostModule, new () Type Parameters Name Description TAuthenticationToken TAuthenticationTokenHelper TWebHostModule Methods ConfigureDefaultDependencyResolver() Configure the DependencyResolver . Declaration protected override void ConfigureDefaultDependencyResolver() Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver() GetCommandBusModules() A collection of Ninject.Modules.INinjectModule that configure the Azure Servicebus as a command bus as both ICommandPublisher<TAuthenticationToken> and ICommandReceiver<TAuthenticationToken> . Declaration protected virtual IEnumerable<INinjectModule> GetCommandBusModules() Returns Type Description System.Collections.Generic.IEnumerable < Ninject.Modules.INinjectModule > GetEventBusModules() A collection of Ninject.Modules.INinjectModule that configure the Azure Servicebus as a event bus as both IEventPublisher<TAuthenticationToken> and IEventReceiver<TAuthenticationToken> If the app setting Cqrs.Host.EnableEventReceiving is \"false\" then no modules will be returned. Declaration protected virtual IEnumerable<INinjectModule> GetEventBusModules() Returns Type Description System.Collections.Generic.IEnumerable < Ninject.Modules.INinjectModule > GetEventStoreModules() A collection of Ninject.Modules.INinjectModule that configure SQL server as the IEventStore<TAuthenticationToken> Declaration protected virtual IEnumerable<INinjectModule> GetEventStoreModules() Returns Type Description System.Collections.Generic.IEnumerable < Ninject.Modules.INinjectModule > GetSupplementaryModules() A collection of Ninject.Modules.INinjectModule that are required to be loaded Declaration protected virtual IEnumerable<INinjectModule> GetSupplementaryModules() Returns Type Description System.Collections.Generic.IEnumerable < Ninject.Modules.INinjectModule >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.CqrsWebHost-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.CqrsWebHost-2.html",
    "title": "Class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> Execute command and event handlers in a WCF Host using Ninject, defaulting to WebHostModule as the module to load. Inheritance System.Object CoreHost <TAuthenticationToken> TelemetryCoreHost <TAuthenticationToken> CqrsWebHost <TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule > CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> Inherited Members CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule>.ConfigureDefaultDependencyResolver() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule>.GetSupplementaryModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule>.GetCommandBusModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule>.GetEventBusModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule>.GetEventStoreModules() TelemetryCoreHost<TAuthenticationToken>._configurationManager TelemetryCoreHost<TAuthenticationToken>.ConfigurationManager TelemetryCoreHost<TAuthenticationToken>.TelemetryClient TelemetryCoreHost<TAuthenticationToken>.ConfigureTelemetry() TelemetryCoreHost<TAuthenticationToken>.Run(Action) TelemetryCoreHost<TAuthenticationToken>.PrepareSecurityProtocol() TelemetryCoreHost<TAuthenticationToken>.Prepare() TelemetryCoreHost<TAuthenticationToken>.Start() CoreHost<TAuthenticationToken>.HandlerTypes CoreHost<TAuthenticationToken>.EventBus CoreHost<TAuthenticationToken>.CommandBus CoreHost<TAuthenticationToken>.TelemetryName CoreHost<TAuthenticationToken>.CorrelationIdHelper CoreHost<TAuthenticationToken>.Logger CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver() CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.StartBusRegistrar() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.Wcf Assembly : Cqrs.Ninject.Azure.Wcf.dll Syntax public class CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> : CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebHostModule> where TAuthenticationTokenHelper : class, IAuthenticationTokenHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TAuthenticationTokenHelper"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.Wcf.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.Wcf.Configuration Classes SimplifiedNinjectWcf A WebActivatorEx.PreApplicationStartMethodAttribute that calls Start() and WebActivatorEx.ApplicationShutdownMethodAttribute that calls Stop() configuring Simplified SQL by wiring up SimplifiedSqlModule<TAuthenticationToken> . WebHostModule The core Ninject.Modules.INinjectModule for use defining base level requirements."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.WebHostModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.WebHostModule.html",
    "title": "Class WebHostModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class WebHostModule The core Ninject.Modules.INinjectModule for use defining base level requirements. Inheritance System.Object ResolvableModule WebHostModule WebJobHostModule Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Azure.Wcf.Configuration Assembly : Cqrs.Ninject.Azure.Wcf.dll Syntax public class WebHostModule : ResolvableModule Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterAzureConfigurations() Register the all Azure configurations Declaration protected virtual void RegisterAzureConfigurations() RegisterBasicHelpers() Registers the basic helpers required. Declaration protected virtual void RegisterBasicHelpers() RegisterBasicSerives() Registers the basic services required. Declaration protected virtual void RegisterBasicSerives() RegisterContextItemCollectionFactory() Registers the cdmdotnet.StateManagement.IContextItemCollectionFactory required. Declaration protected virtual void RegisterContextItemCollectionFactory() RegisterWebBit() Registers some things Ninject likes. Declaration protected virtual void RegisterWebBit()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.SimplifiedNinjectWcf.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.Configuration.SimplifiedNinjectWcf.html",
    "title": "Class SimplifiedNinjectWcf | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimplifiedNinjectWcf A WebActivatorEx.PreApplicationStartMethodAttribute that calls Start() and WebActivatorEx.ApplicationShutdownMethodAttribute that calls Stop() configuring Simplified SQL by wiring up SimplifiedSqlModule<TAuthenticationToken> . Inheritance System.Object SimplifiedNinjectWcf Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.Wcf.Configuration Assembly : Cqrs.Ninject.Azure.Wcf.dll Syntax public static class SimplifiedNinjectWcf Methods Start() Starts the application Declaration public static void Start() Stop() Stops the application. Declaration public static void Stop()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration Classes AzureEventBusPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. AzureEventBusReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. AzureEventPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. AzureQueuedEventBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureQueuedEventBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureQueuedEventBusReceiverModule-1.html",
    "title": "Class AzureQueuedEventBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedEventBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventBusReceiverModule <TAuthenticationToken> AzureQueuedEventBusReceiverModule<TAuthenticationToken> Inherited Members AzureEventBusReceiverModule<TAuthenticationToken>.GetOrCreateBus<TBus>() AzureEventBusReceiverModule<TAuthenticationToken>.RegisterEventReceiver<TBus>(TBus) AzureEventBusReceiverModule<TAuthenticationToken>.RegisterEventHandlerRegistrar<TBus>(TBus) AzureEventBusReceiverModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.EventBus.dll Syntax public class AzureQueuedEventBusReceiverModule<TAuthenticationToken> : AzureEventBusReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventBusReceiverModule<TAuthenticationToken>.Load()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventPublisherModule-1.html",
    "title": "Class AzureEventPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureEventBusPublisherModule <TAuthenticationToken> AzureEventPublisherModule<TAuthenticationToken> Inherited Members AzureEventBusPublisherModule<TAuthenticationToken>.Load() AzureEventBusPublisherModule<TAuthenticationToken>.RegisterEventPublisher() AzureEventBusPublisherModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.EventBus.dll Syntax public class AzureEventPublisherModule<TAuthenticationToken> : AzureEventBusPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventBusReceiverModule-1.html",
    "title": "Class AzureEventBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventBusReceiverModule<TAuthenticationToken> AzureQueuedEventBusReceiverModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.EventBus.dll Syntax public class AzureEventBusReceiverModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods GetOrCreateBus<TBus>() Checks if an existing TBus has already been registered, if not it tries to instantiates a new instance via resolution and registers that instance. Declaration public virtual TBus GetOrCreateBus<TBus>()where TBus : IEventReceiver<TAuthenticationToken>, IEventHandlerRegistrar Returns Type Description TBus Type Parameters Name Description TBus The of bus to resolve. Best if a class not an interface. Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventHandlerRegistrar<TBus>(TBus) Register the CQRS event handler registrar Declaration public virtual void RegisterEventHandlerRegistrar<TBus>(TBus bus)where TBus : IEventReceiver<TAuthenticationToken>, IEventHandlerRegistrar Parameters Type Name Description TBus bus Type Parameters Name Description TBus RegisterEventMessageSerialiser() Register the CQRS event handler message serialiser Declaration public virtual void RegisterEventMessageSerialiser() RegisterEventReceiver<TBus>(TBus) Register the CQRS event receiver Declaration public virtual void RegisterEventReceiver<TBus>(TBus bus)where TBus : IEventReceiver<TAuthenticationToken>, IEventHandlerRegistrar Parameters Type Name Description TBus bus Type Parameters Name Description TBus"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventBusPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration.AzureEventBusPublisherModule-1.html",
    "title": "Class AzureEventBusPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureEventBusPublisherModule<TAuthenticationToken> AzureEventPublisherModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Azure.ServiceBus.EventBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.EventBus.dll Syntax public class AzureEventBusPublisherModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventMessageSerialiser() Register the CQRS event handler message serialiser Declaration public virtual void RegisterEventMessageSerialiser() RegisterEventPublisher() Register the CQRS event publisher Declaration public virtual void RegisterEventPublisher()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration Classes AzureCommandBusPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. AzureCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. AzureCommandBusSenderModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. AzureQueuedCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureQueuedCommandBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureQueuedCommandBusReceiverModule-1.html",
    "title": "Class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandBusReceiverModule <TAuthenticationToken> AzureQueuedCommandBusReceiverModule<TAuthenticationToken> Inherited Members AzureCommandBusReceiverModule<TAuthenticationToken>.GetOrCreateBus<TBus>() AzureCommandBusReceiverModule<TAuthenticationToken>.RegisterCommandReceiver<TBus>(TBus) AzureCommandBusReceiverModule<TAuthenticationToken>.RegisterCommandHandlerRegistrar<TBus>(TBus) AzureCommandBusReceiverModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.CommandBus.dll Syntax public class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> : AzureCommandBusReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusReceiverModule<TAuthenticationToken>.Load()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusSenderModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusSenderModule-1.html",
    "title": "Class AzureCommandBusSenderModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusSenderModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureCommandBusPublisherModule <TAuthenticationToken> AzureCommandBusSenderModule<TAuthenticationToken> Inherited Members AzureCommandBusPublisherModule<TAuthenticationToken>.Load() AzureCommandBusPublisherModule<TAuthenticationToken>.RegisterCommandSender() AzureCommandBusPublisherModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.CommandBus.dll Syntax public class AzureCommandBusSenderModule<TAuthenticationToken> : AzureCommandBusPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusReceiverModule-1.html",
    "title": "Class AzureCommandBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandBusReceiverModule<TAuthenticationToken> AzureQueuedCommandBusReceiverModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.CommandBus.dll Syntax public class AzureCommandBusReceiverModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods GetOrCreateBus<TBus>() Checks if an existing TBus has already been registered, if not it tries to instantiates a new instance via resolution and registers that instance. Declaration public virtual TBus GetOrCreateBus<TBus>()where TBus : ICommandReceiver<TAuthenticationToken>, ICommandHandlerRegistrar Returns Type Description TBus Type Parameters Name Description TBus The of bus to resolve. Best if a class not an interface. Load() Loads the module into the kernel. Declaration public override void Load() RegisterCommandHandlerRegistrar<TBus>(TBus) Register the CQRS command handler registrar Declaration public virtual void RegisterCommandHandlerRegistrar<TBus>(TBus bus)where TBus : ICommandReceiver<TAuthenticationToken>, ICommandHandlerRegistrar Parameters Type Name Description TBus bus Type Parameters Name Description TBus RegisterCommandMessageSerialiser() Register the CQRS command handler message serialiser Declaration public virtual void RegisterCommandMessageSerialiser() RegisterCommandReceiver<TBus>(TBus) Register the CQRS command receiver Declaration public virtual void RegisterCommandReceiver<TBus>(TBus bus)where TBus : ICommandReceiver<TAuthenticationToken>, ICommandHandlerRegistrar Parameters Type Name Description TBus bus Type Parameters Name Description TBus"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration.AzureCommandBusPublisherModule-1.html",
    "title": "Class AzureCommandBusPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureCommandBusPublisherModule<TAuthenticationToken> AzureCommandBusSenderModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Azure.ServiceBus.CommandBus.Configuration Assembly : Cqrs.Ninject.Azure.ServiceBus.CommandBus.dll Syntax public class AzureCommandBusPublisherModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCommandMessageSerialiser() Register the CQRS command handler message serialiser Declaration public virtual void RegisterCommandMessageSerialiser() RegisterCommandSender() Register the CQRS command publisher Declaration public virtual void RegisterCommandSender()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.MongoDbDataStoreFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.MongoDbDataStoreFactory.html",
    "title": "Class MongoDbDataStoreFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbDataStoreFactory A factory for obtaining IDataStore<TData> collections from MongoDB Inheritance System.Object MongoDbDataStoreFactory TestMongoDbDataStoreFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Factories Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbDataStoreFactory Constructors MongoDbDataStoreFactory(ILogger, IMongoDbDataStoreConnectionStringFactory) Instantiates a new instance of MongoDbDataStoreFactory . Declaration public MongoDbDataStoreFactory(ILogger logger, IMongoDbDataStoreConnectionStringFactory mongoDbDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IMongoDbDataStoreConnectionStringFactory mongoDbDataStoreConnectionStringFactory Properties Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger MongoDbDataStoreConnectionStringFactory Gets or sets the IMongoDbDataStoreConnectionStringFactory . Declaration protected IMongoDbDataStoreConnectionStringFactory MongoDbDataStoreConnectionStringFactory { get; } Property Value Type Description IMongoDbDataStoreConnectionStringFactory Methods GetCollection<TEntity>() Get a MongoDB.Driver.IMongoCollection<TDocument> Declaration protected virtual IMongoCollection<TEntity> GetCollection<TEntity>() Returns Type Description MongoDB.Driver.IMongoCollection <TEntity> Type Parameters Name Description TEntity VerifyIndexes<TEntity>(IMongoCollection<TEntity>) Verify all required MongoDbIndex<TEntity> are defined and ready to go. Declaration protected virtual void VerifyIndexes<TEntity>(IMongoCollection<TEntity> collection) Parameters Type Name Description MongoDB.Driver.IMongoCollection <TEntity> collection Type Parameters Name Description TEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.SqlEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.SqlEventStore-1.html",
    "title": "Class SqlEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SqlEventStore<TAuthenticationToken> A simplified SqlServer based EventStore<TAuthenticationToken> that uses LinqToSql and follows a rigid schema. Inheritance System.Object EventStore <TAuthenticationToken> SqlEventStore<TAuthenticationToken> ReplicatedSqlEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class SqlEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors SqlEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IConfigurationManager) Instantiate a new instance of the SqlEventStore<TAuthenticationToken> class. Declaration public SqlEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Methods Add(DataContext, EventData) Persist the provided data into SQL Server using the provided dbDataContext . Declaration protected virtual void Add(DataContext dbDataContext, EventData data) Parameters Type Name Description System.Data.Linq.DataContext dbDataContext EventData data CreateDbDataContext() Creates a new System.Data.Linq.DataContext using connection string settings from ConfigurationManager . Declaration protected virtual DataContext CreateDbDataContext() Returns Type Description System.Data.Linq.DataContext Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32) GetEventStoreTable(DataContext) Gets the System.Data.Linq.Table<TEntity> of EventData . Declaration protected virtual Table<EventData> GetEventStoreTable(DataContext dbDataContext) Parameters Type Name Description System.Data.Linq.DataContext dbDataContext The System.Data.Linq.DataContext to use. Returns Type Description System.Data.Linq.Table < EventData > PersistEvent(EventData) Persist the provided eventData into SQL Server. Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.SagaEvent-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.SagaEvent-1.html",
    "title": "Class SagaEvent<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SagaEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> used specifically by a ISaga<TAuthenticationToken> Inheritance System.Object SagaEvent<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class SagaEvent<TAuthenticationToken> : ISagaEvent<TAuthenticationToken>, IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors SagaEvent() Instantiates a new instance of SagaEvent<TAuthenticationToken> . Declaration public SagaEvent() SagaEvent(IEvent<TAuthenticationToken>) Instantiates a new instance of SagaEvent<TAuthenticationToken> with the provided event . Declaration public SagaEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Properties AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Event The IEvent<TAuthenticationToken> this ISagaEvent<TAuthenticationToken> encases. Declaration [DataMember] public IEvent<TAuthenticationToken> Event { get; set; } Property Value Type Description IEvent <TAuthenticationToken> Implements ISagaEvent<TAuthenticationToken>.Event Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.ReplicatedSqlEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.ReplicatedSqlEventStore-1.html",
    "title": "Class ReplicatedSqlEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ReplicatedSqlEventStore<TAuthenticationToken> A simplified SqlServer based EventStore<TAuthenticationToken> that uses LinqToSql and follows a rigid schema that also replicates to multiple connections, but only reads from one connection. Inheritance System.Object EventStore <TAuthenticationToken> SqlEventStore <TAuthenticationToken> ReplicatedSqlEventStore<TAuthenticationToken> Inherited Members SqlEventStore<TAuthenticationToken>.ConfigurationManager SqlEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) SqlEventStore<TAuthenticationToken>.Get(Guid) SqlEventStore<TAuthenticationToken>.CreateDbDataContext() SqlEventStore<TAuthenticationToken>.GetEventStoreTable(DataContext) SqlEventStore<TAuthenticationToken>.Add(DataContext, EventData) EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class ReplicatedSqlEventStore<TAuthenticationToken> : SqlEventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors ReplicatedSqlEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IConfigurationManager) Instantiates and Initialises a new instance of the ReplicatedSqlEventStore<TAuthenticationToken> class. Declaration public ReplicatedSqlEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager Properties WritableConnectionStrings A collection of connection strings that are used to write to the database. Declaration protected IEnumerable<string> WritableConnectionStrings { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods PersistEvent(EventData) Persist the provided eventData into each SQL Server in WritableConnectionStrings . A single System.Transactions.TransactionScope wraps all SQL servers, so all must complete successfully, or they will ALL roll back. Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Overrides Cqrs.Events.SqlEventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.PublicEventAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.PublicEventAttribute.html",
    "title": "Class PublicEventAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class PublicEventAttribute An IEvent<TAuthenticationToken> that should be sent via the public IEventPublisher<TAuthenticationToken> . Inheritance System.Object System.Attribute PublicEventAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Serializable] public class PublicEventAttribute : Attribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.PrivateEventAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.PrivateEventAttribute.html",
    "title": "Class PrivateEventAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class PrivateEventAttribute An IEvent<TAuthenticationToken> that should be sent via the private IEventPublisher<TAuthenticationToken> . Inheritance System.Object System.Attribute PrivateEventAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Serializable] public class PrivateEventAttribute : Attribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.NotifyEveryoneExceptCallerEventAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.NotifyEveryoneExceptCallerEventAttribute.html",
    "title": "Class NotifyEveryoneExceptCallerEventAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NotifyEveryoneExceptCallerEventAttribute An IEvent<TAuthenticationToken> that should be sent to all connected people except the person who was authenticated when sending the request via SignalR. Inheritance System.Object System.Attribute NotifyEveryoneExceptCallerEventAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Serializable] public class NotifyEveryoneExceptCallerEventAttribute : Attribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.NotifyEveryoneEventAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.NotifyEveryoneEventAttribute.html",
    "title": "Class NotifyEveryoneEventAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NotifyEveryoneEventAttribute An IEvent<TAuthenticationToken> that should be sent to all connected people via SignalR. Inheritance System.Object System.Attribute NotifyEveryoneEventAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Serializable] public class NotifyEveryoneEventAttribute : Attribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.NotifyCallerEventAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.NotifyCallerEventAttribute.html",
    "title": "Class NotifyCallerEventAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NotifyCallerEventAttribute An IEvent<TAuthenticationToken> that should be sent back to the person who was authenticated when sending the request via SignalR. Inheritance System.Object System.Attribute NotifyCallerEventAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Serializable] public class NotifyCallerEventAttribute : Attribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.MemoryCacheEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.MemoryCacheEventStore-1.html",
    "title": "Class MemoryCacheEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MemoryCacheEventStore<TAuthenticationToken> A, EventStore<TAuthenticationToken> that uses a System.Runtime.Caching.MemoryCache implementation, flushing out data (I.E. it's not persisted) Inheritance System.Object EventStore <TAuthenticationToken> MemoryCacheEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class MemoryCacheEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors MemoryCacheEventStore(IConfigurationManager, IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger) Instantiates a new instance of MemoryCacheEventStore<TAuthenticationToken> and calls StartRefreshSlidingExpirationValue() . Declaration public MemoryCacheEventStore(IConfigurationManager configurationManager, IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager EventStoreByCorrelationId Gets or sets the System.Runtime.Caching.MemoryCache of data grouped by event CorrelationId . Declaration protected MemoryCache EventStoreByCorrelationId { get; } Property Value Type Description System.Runtime.Caching.MemoryCache EventStoreByType Gets or sets the System.Runtime.Caching.MemoryCache of data grouped by event System.Type . Declaration protected MemoryCache EventStoreByType { get; } Property Value Type Description System.Runtime.Caching.MemoryCache SlidingExpiration Gets of sets the SlidingExpiration Declaration protected TimeSpan SlidingExpiration { get; set; } Property Value Type Description System.TimeSpan SlidingExpirationValue Gets of sets the SlidingExpirationValue, the value of \"Cqrs.EventStore.MemoryCacheEventStore.SlidingExpiration\" from ConfigurationManager . Declaration protected string SlidingExpirationValue { get; set; } Property Value Type Description System.String Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32) GetDetaultCacheItemPolicy() Get's a System.Runtime.Caching.CacheItemPolicy with the System.Runtime.Caching.CacheItemPolicy.SlidingExpiration set to 15 minutes Declaration protected virtual CacheItemPolicy GetDetaultCacheItemPolicy() Returns Type Description System.Runtime.Caching.CacheItemPolicy PersistEvent(EventData) Persist the provided eventData into storage. Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData) RefreshSlidingExpirationValue() Reads \"Cqrs.EventStore.MemoryCacheEventStore.SlidingExpiration\" from ConfigurationManager , checks if it has changed and then Update SlidingExpiration with the new value. Declaration protected virtual void RefreshSlidingExpirationValue() StartRefreshSlidingExpirationValue() Start a System.Threading.Tasks.Task that will call RefreshSlidingExpirationValue() in a loop with a 1 second wait time between loops. Declaration protected virtual void StartRefreshSlidingExpirationValue()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.InProcessEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.InProcessEventStore-1.html",
    "title": "Class InProcessEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventStore<TAuthenticationToken> An IEventStore<TAuthenticationToken> that uses a local (non-static) System.Collections.Generic.IDictionary<TKey, TValue> . This does not manage memory in any way and will continue to grow. Mostly suitable for running tests or short lived processes. Inheritance System.Object InProcessEventStore<TAuthenticationToken> InProcessEventStore<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class InProcessEventStore<TAuthenticationToken> : IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors InProcessEventStore() Instantiate a new instance of the InProcessEventStore<TAuthenticationToken> class. Declaration public InProcessEventStore() Properties InMemoryDb Gets or sets the in-memory storage System.Collections.Generic.IDictionary<TKey, TValue> . Declaration protected IDictionary<Guid, IList<IEvent<TAuthenticationToken>>> InMemoryDb { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Collections.Generic.IList < IEvent <TAuthenticationToken>>> Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateType with the ID matching the provided aggregateId . Declaration public IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Get<T>(Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the T with the ID matching the provided aggregateId . Declaration public IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) Save(Type, IEvent<TAuthenticationToken>) Saves the provided event . Declaration public void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<TAuthenticationToken>) Saves the provided event . Declaration public void Save<T>(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.ISagaEvent-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.ISagaEvent-1.html",
    "title": "Interface ISagaEvent<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISagaEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> used specifically by a ISaga<TAuthenticationToken> Inherited Members IEvent<TAuthenticationToken>.Id IEvent<TAuthenticationToken>.Version IEvent<TAuthenticationToken>.TimeStamp IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken IMessage.CorrelationId IMessage.OriginatingFramework IMessage.Frameworks Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface ISagaEvent<TAuthenticationToken> : IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties Event The IEvent<TAuthenticationToken> this ISagaEvent<TAuthenticationToken> encases. Declaration [DataMember] IEvent<TAuthenticationToken> Event { get; set; } Property Value Type Description IEvent <TAuthenticationToken>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventStore-1.html",
    "title": "Interface IEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventStore<TAuthenticationToken> Stores instances of IEvent<TAuthenticationToken> for replay, IAggregateRoot<TAuthenticationToken> and ISaga<TAuthenticationToken> rehydration. Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Get<T>(Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the T with the ID matching the provided aggregateId . Declaration IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Save(Type, IEvent<TAuthenticationToken>) Saves the provided event . Declaration void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Save<T>(IEvent<TAuthenticationToken>) Saves the provided event . Declaration void Save<T>(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventReceiver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventReceiver.html",
    "title": "Interface IEventReceiver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventReceiver Receives instances of a IEvent<TAuthenticationToken> from the event bus. Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventReceiver Methods Start() Starts listening and processing instances of IEvent<TAuthenticationToken> from the event bus. Declaration void Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventReceiver-1.html",
    "title": "Interface IEventReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventReceiver<TAuthenticationToken> Receives instances of a IEvent<TAuthenticationToken> from the event bus. Inherited Members IEventReceiver.Start() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventReceiver<TAuthenticationToken> : IEventReceiver Type Parameters Name Description TAuthenticationToken Methods ReceiveEvent(IEvent<TAuthenticationToken>) Receives a IEvent<TAuthenticationToken> from the event bus. Declaration bool ? ReceiveEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Returns Type Description System.Nullable < System.Boolean >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventPublisher-1.html",
    "title": "Interface IEventPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventPublisher<TAuthenticationToken> Publishes an IEvent<TAuthenticationToken> Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods Publish<TEvent>(TEvent) Publishes the provided event on the event bus. Declaration void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Publish<TEvent>(IEnumerable<TEvent>) Publishes the provided events on the event bus. Declaration void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.DefaultEventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.DefaultEventBuilder-1.html",
    "title": "Class DefaultEventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DefaultEventBuilder<TAuthenticationToken> Builds EventData from various input formats serialising as JSON. Inheritance System.Object EventBuilder <TAuthenticationToken> DefaultEventBuilder<TAuthenticationToken> AzureDocumentDbEventBuilder<TAuthenticationToken> MongoDbEventBuilder<TAuthenticationToken> Inherited Members EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>) EventBuilder<TAuthenticationToken>.SerialiseEventData(IEvent<TAuthenticationToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class DefaultEventBuilder<TAuthenticationToken> : EventBuilder<TAuthenticationToken>, IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties DefaultSettings The default Newtonsoft.Json.JsonSerializerSettings to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods GetSerialisationSettings() Returns DefaultSettings Declaration protected virtual JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings DefaultSettings SerialiseEventDataToString(IEvent<TAuthenticationToken>) Serialise the provided eventData into JSON a System.String . Declaration protected override string SerialiseEventDataToString(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to serialise. Returns Type Description System.String Overrides Cqrs.Events.EventBuilder<TAuthenticationToken>.SerialiseEventDataToString(Cqrs.Events.IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.ConfigurationManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.ConfigurationManager.html",
    "title": "Class ConfigurationManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConfigurationManager Provides access to configuration settings from the app settings of an app.config or web.config... i.e. System.Configuration.ConfigurationManager.AppSettings Inheritance System.Object ConfigurationManager CloudConfigurationManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public class ConfigurationManager : IConfigurationManager Methods GetSetting(String) Read the setting named key . Declaration public virtual string GetSetting(string key) Parameters Type Name Description System.String key The key (or name) of the setting to read. Returns Type Description System.String Implements IConfigurationManager.GetSetting(String) TryGetSetting(String, out Boolean) Read the setting named key . Declaration public virtual bool TryGetSetting(string key, out bool value) Parameters Type Name Description System.String key The key (or name) of the setting to read. System.Boolean value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the an element with the specified key exists; otherwise, false. Implements IConfigurationManager.TryGetSetting(String, out Boolean) TryGetSetting(String, out String) Read the setting named key . Declaration public virtual bool TryGetSetting(string key, out string value) Parameters Type Name Description System.String key The key (or name) of the setting to read. System.String value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the an element with the specified key exists; otherwise, false. Implements IConfigurationManager.TryGetSetting(String, out String) Extension Methods ConfigurationExtensions.CreateTelemetryHelper(IConfigurationManager, String, IDependencyResolver) ConfigurationExtensions.CreateTelemetryHelper(IConfigurationManager, String, ICorrelationIdHelper)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.ConfigurationExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConfigurationExtensions A collection of extension methods for IConfigurationManager . Inheritance System.Object ConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public static class ConfigurationExtensions Methods CreateTelemetryHelper(IConfigurationManager, String, ICorrelationIdHelper) Creates an instance of cdmdotnet.Logging.ITelemetryHelper if the value for configurationKey is true. Declaration public static ITelemetryHelper CreateTelemetryHelper(this IConfigurationManager configurationManager, string configurationKey, ICorrelationIdHelper correlationIdHelper) Parameters Type Name Description IConfigurationManager configurationManager System.String configurationKey cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper Returns Type Description cdmdotnet.Logging.ITelemetryHelper CreateTelemetryHelper(IConfigurationManager, String, IDependencyResolver) Creates an instance of cdmdotnet.Logging.ITelemetryHelper if the value for configurationKey is true. Declaration public static ITelemetryHelper CreateTelemetryHelper(this IConfigurationManager configurationManager, string configurationKey, IDependencyResolver dependencyResolver) Parameters Type Name Description IConfigurationManager configurationManager System.String configurationKey IDependencyResolver dependencyResolver Returns Type Description cdmdotnet.Logging.ITelemetryHelper"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.BusRegistrar.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.BusRegistrar.html",
    "title": "Class BusRegistrar | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BusRegistrar Triggers the IEventHandlerRegistrar and ICommandHandlerRegistrar if they are registered in the IDependencyResolver . Inheritance System.Object BusRegistrar AkkaBusRegistrar<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public class BusRegistrar Constructors BusRegistrar(IDependencyResolver) Instantiates a new instance of BusRegistrar . Declaration public BusRegistrar(IDependencyResolver dependencyResolver) Parameters Type Name Description IDependencyResolver dependencyResolver Properties DependencyResolver Gets or set the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver GetCommandHandlerRegistrar A System.Func<T1, T2, TResult> to use in-place of ICommandHandlerRegistrar Declaration public static Func<Type, Type, IHandlerRegistrar> GetCommandHandlerRegistrar { get; set; } Property Value Type Description System.Func < System.Type , System.Type , IHandlerRegistrar > GetEventHandlerRegistrar A System.Func<T1, T2, TResult> to use in-place of IEventHandlerRegistrar Declaration public static Func<Type, Type, IHandlerRegistrar> GetEventHandlerRegistrar { get; set; } Property Value Type Description System.Func < System.Type , System.Type , IHandlerRegistrar > Methods BuildDelegateAction(Type, Func<Type, IEnumerable<Type>>) Builds a HandlerDelegate that will resolve the provided executorType and invoke the Handle method, when executed. Declaration protected virtual HandlerDelegate BuildDelegateAction(Type executorType, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface) Parameters Type Name Description System.Type executorType The type of IHandler to resolve.> System.Func < System.Type , System.Collections.Generic.IEnumerable < System.Type >> resolveMessageHandlerInterface Not used. Returns Type Description HandlerDelegate BuildExecutorMethod(MethodInfo, Type, Type) Builds a method replacing the generic type with commandType . Declaration protected virtual MethodInfo BuildExecutorMethod(MethodInfo originalRegisterExecutorMethod, Type executorType, Type commandType) Parameters Type Name Description System.Reflection.MethodInfo originalRegisterExecutorMethod System.Type executorType System.Type commandType Returns Type Description System.Reflection.MethodInfo InvokeHandler(Type, Boolean, Func<Type, IEnumerable<Type>>, Type) Extract the RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) method of GetEventHandlerRegistrar or GetCommandHandlerRegistrar . Create an System.Action around the provided executorType Then register the created System.Action using the extracted RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) method Declaration protected virtual void InvokeHandler(Type interface, bool trueForEventsFalseForCommands, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface, Type executorType) Parameters Type Name Description System.Type interface The System.Type of IHandler System.Boolean trueForEventsFalseForCommands Indicates if this is registers IEventHandler or ICommandHandler<TAuthenticationToken, TCommand> . System.Func < System.Type , System.Collections.Generic.IEnumerable < System.Type >> resolveMessageHandlerInterface ResolveEventHandlerInterface(Type) or ResolveCommandHandlerInterface(Type) System.Type executorType The System.Type of the event handler that will do the handling InvokeHandlerDelegate(MethodInfo, Boolean, HandlerDelegate) Invokes handlerDelegate , fetching the corresponding \"HoldMessageLock\" configuration setting Declaration protected virtual void InvokeHandlerDelegate(MethodInfo registerExecutorMethod, bool trueForEventsFalseForCommands, HandlerDelegate handlerDelegate) Parameters Type Name Description System.Reflection.MethodInfo registerExecutorMethod The System.Reflection.MethodInfo to use to invoke handlerDelegate . System.Boolean trueForEventsFalseForCommands Indicates if this is registers IEventHandler or ICommandHandler<TAuthenticationToken, TCommand> . HandlerDelegate handlerDelegate The actual HandlerDelegate that gets executed. Register(Boolean, Func<Type, IEnumerable<Type>>, Boolean, Type[]) Registers all IHandler instances found in the System.Reflection.Assembly for each System.Type in typesFromAssemblyContainingMessages . Declaration public virtual void Register(bool trueForEventsFalseForCommands, Func<Type, IEnumerable<Type>> resolveMessageHandlerInterface, bool skipCommandHandlers, params Type[] typesFromAssemblyContainingMessages) Parameters Type Name Description System.Boolean trueForEventsFalseForCommands Indicates if this is registers IEventHandler or ICommandHandler<TAuthenticationToken, TCommand> . System.Func < System.Type , System.Collections.Generic.IEnumerable < System.Type >> resolveMessageHandlerInterface ResolveEventHandlerInterface(Type) or ResolveCommandHandlerInterface(Type) System.Boolean skipCommandHandlers Indicates if registering of ICommandHandler<TAuthenticationToken, TCommand> is enabled. System.Type [] typesFromAssemblyContainingMessages A collection of System.Type to track back to their containing System.Reflection.Assembly and scan. Register(Type[]) Registers all IEventHandler and ICommandHandler<TAuthenticationToken, TCommand> instances found in the System.Reflection.Assembly for each System.Type in typesFromAssemblyContainingMessages . Declaration public virtual void Register(params Type[] typesFromAssemblyContainingMessages) Parameters Type Name Description System.Type [] typesFromAssemblyContainingMessages A collection of System.Type to track back to their containing System.Reflection.Assembly and scan. ResolveCommandHandlerInterface(Type) Finds all System.Type that implement ICommandHandler<TAuthenticationToken, TCommand> that are implemented by type . Declaration protected virtual IEnumerable<Type> ResolveCommandHandlerInterface(Type type) Parameters Type Name Description System.Type type The System.Type to find all ICommandHandler<TAuthenticationToken, TCommand> of. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > ResolveEventHandlerInterface(Type) Finds all System.Type that implement IEventHandler<TAuthenticationToken, TEvent> that are implemented by type . Declaration protected virtual IEnumerable<Type> ResolveEventHandlerInterface(Type type) Parameters Type Name Description System.Type type The System.Type to find all IEventHandler<TAuthenticationToken, TEvent> of. Returns Type Description System.Collections.Generic.IEnumerable < System.Type >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.html",
    "title": "Namespace Cqrs.Commands | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Commands Classes DtoCommand<TAuthenticationToken, TDto> A ICommand<TAuthenticationToken> for IDto objects DtoCommandHandler<TAuthenticationToken, TDto> A ICommandHandle for working with DtoCommand<TAuthenticationToken, TDto> . Interfaces ICommand<TAuthenticationToken> People request changes to the domain by sending ICommand<TAuthenticationToken> s. They are named with a verb in the imperative mood plus and may include the IAggregateRoot<TAuthenticationToken> type, for example ConfirmOrder. Unlike an IEvent<TAuthenticationToken> , a ICommand<TAuthenticationToken> is not a statement of fact; it's only a request, and thus may be refused. (A typical way to convey refusal is to raise a specifically typed IEvent<TAuthenticationToken> stating the ICommand<TAuthenticationToken> didn't happen for a specific reason). ICommandHandle An ICommandHandler<TAuthenticationToken, TCommand> receives an ICommand<TAuthenticationToken> and brokers a result from the appropriate IAggregateRoot<TAuthenticationToken> . \"A result\" is either a successful application of the command, or an exception. This is the common sequence of steps an ICommandHandler<TAuthenticationToken, TCommand> might follow: Validate the ICommand<TAuthenticationToken> on its own merits. Ask an IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . If validation is successful, 0..n IEvent<TAuthenticationToken> artefacts (1 is common) are queued for publishing. Attempt to persist the new IEvent<TAuthenticationToken> artefacts. If there's a concurrency conflict during this step, either give up, or retry things. Dispatch the queued IEvent<TAuthenticationToken> artefacts. ICommandHandler<TAuthenticationToken, TCommand> An ICommandHandler<TAuthenticationToken, TCommand> receives an ICommand<TAuthenticationToken> and brokers a result from the appropriate IAggregateRoot<TAuthenticationToken> . \"A result\" is either a successful application of the command, or an exception. This is the common sequence of steps an ICommandHandler<TAuthenticationToken, TCommand> might follow: Validate the ICommand<TAuthenticationToken> on its own merits. Ask an IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . If validation is successful, 0..n IEvent<TAuthenticationToken> artefacts (1 is common) are queued for publishing. Attempt to persist the new IEvent<TAuthenticationToken> artefacts. If there's a concurrency conflict during this step, either give up, or retry things. Dispatch the queued IEvent<TAuthenticationToken> artefacts. ICommandPublisher<TAuthenticationToken> Publishes an ICommand<TAuthenticationToken> ICommandReceiver Receives instances of a ICommand<TAuthenticationToken> from the command bus. ICommandReceiver<TAuthenticationToken> Receives instances of a ICommand<TAuthenticationToken> from the command bus. ICommandSender<TAuthenticationToken> Sends an ICommand<TAuthenticationToken> ICommandValidator<TAuthenticationToken, TCommand> Validates an ICommand<TAuthenticationToken> on its own merits. IPublishAndWaitCommandPublisher<TAuthenticationToken> Publishes an ICommand<TAuthenticationToken> ISendAndWaitCommandSender<TAuthenticationToken> Sends an ICommand<TAuthenticationToken>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ISendAndWaitCommandSender-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ISendAndWaitCommandSender-1.html",
    "title": "Interface ISendAndWaitCommandSender<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISendAndWaitCommandSender<TAuthenticationToken> Sends an ICommand<TAuthenticationToken> Inherited Members ICommandSender<TAuthenticationToken>.Send<TCommand>(TCommand) ICommandSender<TAuthenticationToken>.Send<TCommand>(IEnumerable<TCommand>) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax [Obsolete(\"Use IPublishAndWaitCommandPublisher instead.\")] public interface ISendAndWaitCommandSender<TAuthenticationToken> : ICommandSender<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits until the specified condition is satisfied an event of TEvent Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent SendAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.IPublishAndWaitCommandPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.IPublishAndWaitCommandPublisher-1.html",
    "title": "Interface IPublishAndWaitCommandPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IPublishAndWaitCommandPublisher<TAuthenticationToken> Publishes an ICommand<TAuthenticationToken> Inherited Members ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface IPublishAndWaitCommandPublisher<TAuthenticationToken> : ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits until the specified condition is satisfied an event of TEvent Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandValidator-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandValidator-2.html",
    "title": "Interface ICommandValidator<TAuthenticationToken, TCommand> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandValidator<TAuthenticationToken, TCommand> Validates an ICommand<TAuthenticationToken> on its own merits. Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandValidator<TAuthenticationToken, in TCommand> where TCommand : ICommand<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TCommand Methods IsCommandValid(TCommand) Validates the provided on its own merits. Declaration bool IsCommandValid(TCommand command) Parameters Type Name Description TCommand command Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.DtoCommand-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.DtoCommand-2.html",
    "title": "Class DtoCommand<TAuthenticationToken, TDto> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DtoCommand<TAuthenticationToken, TDto> A ICommand<TAuthenticationToken> for IDto objects Inheritance System.Object DtoCommand<TAuthenticationToken, TDto> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class DtoCommand<TAuthenticationToken, TDto> : ICommand<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage where TDto : IDto Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. TDto The System.Type of IDto this command targets. Constructors DtoCommand(Guid, TDto, TDto) Instantiates a new instance of DtoCommand<TAuthenticationToken, TDto> Declaration public DtoCommand(Guid id, TDto original, TDto new) Parameters Type Name Description System.Guid id TDto original TDto new Properties AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id New Gets or sets the new version of the TDto . Declaration [DataMember] public TDto New { get; set; } Property Value Type Description TDto Original Gets or sets the original version of the TDto . Declaration [DataMember] public TDto Original { get; set; } Property Value Type Description TDto OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Cache.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Cache.html",
    "title": "Namespace Cqrs.Cache | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Cache Classes CacheRepository<TAuthenticationToken> Uses System.Runtime.Caching.MemoryCache.Default to provide a caching mechanism to improve performance of a IAggregateRepository<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Cache.CacheRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Cache.CacheRepository-1.html",
    "title": "Class CacheRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CacheRepository<TAuthenticationToken> Uses System.Runtime.Caching.MemoryCache.Default to provide a caching mechanism to improve performance of a IAggregateRepository<TAuthenticationToken> . Inheritance System.Object CacheRepository<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Cache Assembly : Cqrs.dll Syntax public class CacheRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors CacheRepository(IAggregateRepository<TAuthenticationToken>, IEventStore<TAuthenticationToken>) Instantiates a new instance of CacheRepository<TAuthenticationToken> . Declaration public CacheRepository(IAggregateRepository<TAuthenticationToken> repository, IEventStore<TAuthenticationToken> eventStore) Parameters Type Name Description IAggregateRepository <TAuthenticationToken> repository IEventStore <TAuthenticationToken> eventStore Methods Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Locks the cache, checks if the aggregate is tracked in the Cqrs.Cache.CacheRepository`1.Cache , if it is retrieves the aggregate from the Cqrs.Cache.CacheRepository`1.Cache and then uses either the provided events or makes a call Get(Type, Guid, Boolean, Int32) on the Cqrs.Cache.CacheRepository`1.EventStore and rehydrates the cached aggregate with any new events from it's cached version. If the aggregate is not in the Cqrs.Cache.CacheRepository`1.Cache Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) is called on the Cqrs.Cache.CacheRepository`1.Repository . Declaration public virtual TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid aggregateId The ID of the IAggregateRoot<TAuthenticationToken> to get. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) Locks the cache, adds the provided aggregate to the cache if not already in it, then calls Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) on Cqrs.Cache.CacheRepository`1.Repository . In the event of an System.Exception the aggregate is always ejected out of the Cqrs.Cache.CacheRepository`1.Cache . Declaration public virtual void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate The IAggregateRoot<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.html",
    "title": "Namespace Cqrs.Bus | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Bus Classes BusHelper A helper for command and event buses that also caches IConfigurationManager look ups. FileBasedLastEventProcessedStore Indicates the position in a store where the stream has been read up to by storing the value in a file. InProcessBus<TAuthenticationToken> An in process command bus ( ICommandPublisher<TAuthenticationToken> and ICommandReceiver<TAuthenticationToken> ) event bus ( IEventPublisher<TAuthenticationToken> and IEventHandler<TAuthenticationToken, TTarget, TEvent> ) as well as a IEventHandlerRegistrar and ICommandHandlerRegistrar that requires no networking. QueuedCommandBusReceiver<TAuthenticationToken> Receives instances of a ICommand<TAuthenticationToken> from the command bus, places them into one of several internal concurrent queues and then processes the commands one at a time per queue. Route A collection of RouteHandlerDelegate . RouteHandlerDelegate Information about a Route delegate. RouteManager Manages Route . Interfaces IBusHelper A helper for command and event buses. ICommandHandlerRegistrar Registers command handlers that listen and respond to commands. IEventHandlerRegistrar Registers event handlers that listen and respond to events. IHandlerRegistrar Registers event or command handlers that listen and respond to events or commands. IStoreLastEventProcessed Indicates the position in a store where the stream has been read up to."
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.RouteManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.RouteManager.html",
    "title": "Class RouteManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class RouteManager Manages Route . Inheritance System.Object RouteManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class RouteManager : IHandlerRegistrar Constructors RouteManager() Instantiates a new instance of RouteManager . Declaration public RouteManager() Properties GlobalEventRoute A Route to execute for all IEvent<TAuthenticationToken> Declaration public Route GlobalEventRoute { get; } Property Value Type Description Route Routes The Route to execute per System.Type Declaration protected IDictionary<Type, Route> Routes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , Route > Methods GetHandlers<TMessage>(TMessage, Boolean) Gets the collection RouteHandlerDelegate that are expected for handling TMessage . Declaration public IEnumerable<RouteHandlerDelegate> GetHandlers<TMessage>(TMessage message, bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage Parameters Type Name Description TMessage message The TMessage to find a RouteHandlerDelegate for. System.Boolean throwExceptionOnNoRouteHandlers If true will throw an System.Exception if no RouteHandlerDelegate found. Returns Type Description System.Collections.Generic.IEnumerable < RouteHandlerDelegate > Type Parameters Name Description TMessage The System.Type of IMessage to find a RouteHandlerDelegate for. Exceptions Type Condition NoCommandHandlerRegisteredException If no RouteHandlerDelegate is found and TMessage is an ICommand<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. NoEventHandlerRegisteredException If no RouteHandlerDelegate is found and TMessage is an IEvent<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. NoHandlerRegisteredException If no RouteHandlerDelegate is found and TMessage is not either an ICommand<TAuthenticationToken> or an IEvent<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. GetSingleHandler<TMessage>(TMessage, Boolean) Gets the single RouteHandlerDelegate expected for handling TMessage . Declaration public RouteHandlerDelegate GetSingleHandler<TMessage>(TMessage message, bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage Parameters Type Name Description TMessage message The TMessage to find a RouteHandlerDelegate for. System.Boolean throwExceptionOnNoRouteHandlers If true will throw an System.Exception if no RouteHandlerDelegate found. Returns Type Description RouteHandlerDelegate Type Parameters Name Description TMessage The System.Type of IMessage to find a RouteHandlerDelegate for. Exceptions Type Condition MultipleCommandHandlersRegisteredException If more than one RouteHandlerDelegate is found and TMessage is an ICommand<TAuthenticationToken> . NoCommandHandlerRegisteredException If no RouteHandlerDelegate is found and TMessage is an ICommand<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. System.InvalidOperationException If more than one RouteHandlerDelegate is found and TMessage is not an ICommand<TAuthenticationToken> OR If no RouteHandlerDelegate is found and TMessage is not an ICommand<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. GetSingleHandler<TMessage>(Boolean) Gets the single RouteHandlerDelegate expected for handling TMessage . Declaration public RouteHandlerDelegate GetSingleHandler<TMessage>(bool throwExceptionOnNoRouteHandlers = true)where TMessage : IMessage Parameters Type Name Description System.Boolean throwExceptionOnNoRouteHandlers If true will throw an System.Exception if no RouteHandlerDelegate found. Returns Type Description RouteHandlerDelegate Type Parameters Name Description TMessage The System.Type of IMessage to find a RouteHandlerDelegate for. Exceptions Type Condition MultipleCommandHandlersRegisteredException If more than one RouteHandlerDelegate is found and TMessage is an ICommand<TAuthenticationToken> . NoCommandHandlerRegisteredException If no RouteHandlerDelegate is found and TMessage is an ICommand<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. System.InvalidOperationException If more than one RouteHandlerDelegate is found and TMessage is not an ICommand<TAuthenticationToken> OR If no RouteHandlerDelegate is found and TMessage is not an ICommand<TAuthenticationToken> and throwExceptionOnNoRouteHandlers is true. IsACommand(Type) Checks if the provided messageType implements ICommand<TAuthenticationToken> . Declaration protected virtual bool IsACommand(Type messageType) Parameters Type Name Description System.Type messageType The System.Type of object to check. Returns Type Description System.Boolean true if messageType implements ICommand<TAuthenticationToken> . IsACommand<TMessage>(TMessage) Checks if the provided message is an ICommand<TAuthenticationToken> . Declaration protected virtual bool IsACommand<TMessage>(TMessage message) Parameters Type Name Description TMessage message The TMessage to check. Returns Type Description System.Boolean true if message is an ICommand<TAuthenticationToken> . Type Parameters Name Description TMessage The System.Type of IMessage to check. IsAnEvent(Type) Checks if the provided messageType implements IEvent<TAuthenticationToken> . Declaration protected virtual bool IsAnEvent(Type messageType) Parameters Type Name Description System.Type messageType The System.Type of object to check. Returns Type Description System.Boolean true if messageType implements IEvent<TAuthenticationToken> . IsAnEvent<TMessage>(TMessage) Checks if the provided message is an IEvent<TAuthenticationToken> . Declaration protected virtual bool IsAnEvent<TMessage>(TMessage message) Parameters Type Name Description TMessage message The TMessage to check. Returns Type Description System.Boolean true if message is an IEvent<TAuthenticationToken> . Type Parameters Name Description TMessage The System.Type of IMessage to check. RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.RouteHandlerDelegate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.RouteHandlerDelegate.html",
    "title": "Class RouteHandlerDelegate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class RouteHandlerDelegate Information about a Route delegate. Inheritance System.Object HandlerDelegate < IMessage > RouteHandlerDelegate Inherited Members HandlerDelegate<IMessage>.Delegate HandlerDelegate<IMessage>.TargetedType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class RouteHandlerDelegate : HandlerDelegate<IMessage> Remarks Remarkably similar to HandlerDelegate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.Route.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.Route.html",
    "title": "Class Route | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Route A collection of RouteHandlerDelegate . Inheritance System.Object Route Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class Route Properties Handlers Gets or sets the RouteHandlerDelegate . Declaration public IList<RouteHandlerDelegate> Handlers { get; set; } Property Value Type Description System.Collections.Generic.IList < RouteHandlerDelegate >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.QueuedCommandBusReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.QueuedCommandBusReceiver-1.html",
    "title": "Class QueuedCommandBusReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueuedCommandBusReceiver<TAuthenticationToken> Receives instances of a ICommand<TAuthenticationToken> from the command bus, places them into one of several internal concurrent queues and then processes the commands one at a time per queue. Inheritance System.Object QueuedCommandBusReceiver<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public abstract class QueuedCommandBusReceiver<TAuthenticationToken> : ICommandReceiver<TAuthenticationToken>, ICommandReceiver Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors QueuedCommandBusReceiver(IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IConfigurationManager, IBusHelper) Instantiates a new instance of QueuedCommandBusReceiver<TAuthenticationToken> . Declaration protected QueuedCommandBusReceiver(IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IConfigurationManager configurationManager, IBusHelper busHelper) Parameters Type Name Description IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager IBusHelper busHelper Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> BusHelper Gets or sets the IBusHelper Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper ConfigurationManager Gets or sets the IConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager CorrelationIdHelper Gets or sets the cdmdotnet.Logging.ICorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Logger Gets or sets the cdmdotnet.Logging.ILogger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger QueueCount The current number of queues in QueueTracker . Declaration public int QueueCount { get; } Property Value Type Description System.Int32 QueueNames Gets the names of all queues in QueueTracker . Declaration public ICollection<string> QueueNames { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > QueueTracker The queues keyed by an identifier. Declaration protected static ConcurrentDictionary<string, ConcurrentQueue<ICommand<TAuthenticationToken>>> QueueTracker { get; } Property Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.String , System.Collections.Concurrent.ConcurrentQueue < ICommand <TAuthenticationToken>>> QueueTrackerLock A System.Threading.ReaderWriterLockSlim for providing a lock mechanism around the main QueueTracker . Declaration protected ReaderWriterLockSlim QueueTrackerLock { get; } Property Value Type Description System.Threading.ReaderWriterLockSlim Routes Gets or sets the routes or handlers that will be executed as the commands arrive. Declaration protected abstract IDictionary<Type, IList<Action<IMessage>>> Routes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Collections.Generic.IList < System.Action < IMessage >>> Methods CreateQueueAndAttachListenerIfNotExist(String) Checks if the queue exists, if it doesn't it creates a new queue in QueueTracker and then starts a separate System.Threading.Thread running DequeuAndProcessCommand(String) . Declaration protected virtual void CreateQueueAndAttachListenerIfNotExist(string queueName) Parameters Type Name Description System.String queueName The name of the queue. DequeuAndProcessCommand(String) Infinitely runs a loop checking if the queue exists in QueueTracker and then dequeues ICommand<TAuthenticationToken> one at a time, pausing for 0.1 seconds between loops. Declaration protected virtual void DequeuAndProcessCommand(string queueName) Parameters Type Name Description System.String queueName The name of the queue. EnqueueCommand(String, ICommand<TAuthenticationToken>) Places the provided command into the appropriate queue in the QueueTracker . Declaration protected virtual void EnqueueCommand(string targetQueueName, ICommand<TAuthenticationToken> command) Parameters Type Name Description System.String targetQueueName The name of the target queue to place the command into ICommand <TAuthenticationToken> command The ICommand<TAuthenticationToken> to handle. ReceiveCommand(ICommand<TAuthenticationToken>) Receives a ICommand<TAuthenticationToken> from the command bus. Declaration public virtual bool ? ReceiveCommand(ICommand<TAuthenticationToken> command) Parameters Type Name Description ICommand <TAuthenticationToken> command Returns Type Description System.Nullable < System.Boolean > Implements ICommandReceiver<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>) Start() Starts listening and processing instances of ICommand<TAuthenticationToken> from the command bus. Declaration public abstract void Start() Implements ICommandReceiver.Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.WebJobs.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.WebJobs.html",
    "title": "Namespace Cqrs.Azure.WebJobs | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.WebJobs Classes CqrsJobHost<TAuthenticationToken> Execute command and event handlers in an Azure WebJob"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.WebJobs.CqrsJobHost-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.WebJobs.CqrsJobHost-1.html",
    "title": "Class CqrsJobHost<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsJobHost<TAuthenticationToken> Execute command and event handlers in an Azure WebJob Inheritance System.Object CoreHost <TAuthenticationToken> TelemetryCoreHost <TAuthenticationToken> CqrsJobHost<TAuthenticationToken> Inherited Members TelemetryCoreHost<TAuthenticationToken>._configurationManager TelemetryCoreHost<TAuthenticationToken>.ConfigurationManager TelemetryCoreHost<TAuthenticationToken>.TelemetryClient TelemetryCoreHost<TAuthenticationToken>.ConfigureTelemetry() TelemetryCoreHost<TAuthenticationToken>.Run(Action) TelemetryCoreHost<TAuthenticationToken>.PrepareSecurityProtocol() TelemetryCoreHost<TAuthenticationToken>.Prepare() TelemetryCoreHost<TAuthenticationToken>.Start() CoreHost<TAuthenticationToken>.HandlerTypes CoreHost<TAuthenticationToken>.EventBus CoreHost<TAuthenticationToken>.CommandBus CoreHost<TAuthenticationToken>.TelemetryName CoreHost<TAuthenticationToken>.CorrelationIdHelper CoreHost<TAuthenticationToken>.Logger CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver() CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.StartBusRegistrar() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.WebJobs Assembly : Cqrs.Azure.WebJobs.dll Syntax public abstract class CqrsJobHost<TAuthenticationToken> : TelemetryCoreHost<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Properties CoreHost The CoreHost that gets executed by the Azure WebJob. Declaration protected static CoreHost<TAuthenticationToken> CoreHost { get; set; } Property Value Type Description CoreHost <TAuthenticationToken> PreRunAndBlockAction An System.Action that is execute pre Microsoft.Azure.WebJobs.JobHost.RunAndBlock . Declaration protected static Action PreRunAndBlockAction { get; set; } Property Value Type Description System.Action Methods StartHost() Declaration protected static void StartHost() Remarks Please set the following connection strings in app.config for this WebJob to run: AzureWebJobsDashboard and AzureWebJobsStorage Better yet, add them to your Azure portal so they can be changed at runtime without re-deploying or re-compiling."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.html",
    "title": "Namespace Cqrs.Azure.Storage.Test.Integration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.Storage.Test.Integration Classes TableStorageDataStoreTests A series of tests on the TableStorageDataStore<TData> class TableStorageEventStoreTests A series of tests on the TableStorageEventStore<TAuthenticationToken> class"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.TableStorageEventStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.TableStorageEventStoreTests.html",
    "title": "Class TableStorageEventStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStoreTests A series of tests on the TableStorageEventStore<TAuthenticationToken> class Inheritance System.Object TableStorageEventStoreTests TableStorageEventStoreTests Inherited Members TableStorageEventStoreTests.Save_ValidEvent_EventCanBeRetreived() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.Test.Integration Assembly : Cqrs.Azure.Storage.Test.Integration.dll Syntax [TestFixture] public class TableStorageEventStoreTests : TableStorageEventStoreTests Methods CreateEventStore(IEventBuilder<Guid>, IEventDeserialiser<Guid>, ILogger, ITableStorageStoreConnectionStringFactory) Create a TableStorageEventStore<TAuthenticationToken> ready for testing. Declaration protected override TableStorageEventStore<Guid> CreateEventStore(IEventBuilder<Guid> eventBuilder, IEventDeserialiser<Guid> eventDeserialiser, ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory) Parameters Type Name Description IEventBuilder < System.Guid > eventBuilder IEventDeserialiser < System.Guid > eventDeserialiser cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory Returns Type Description TableStorageEventStore < System.Guid > Overrides TableStorageEventStoreTests.CreateEventStore(IEventBuilder<Guid>, IEventDeserialiser<Guid>, ILogger, ITableStorageStoreConnectionStringFactory)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.TableStorageDataStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Test.Integration.TableStorageDataStoreTests.html",
    "title": "Class TableStorageDataStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStoreTests A series of tests on the TableStorageDataStore<TData> class Inheritance System.Object TableStorageDataStoreTests TableStorageDataStoreTests Inherited Members TableStorageDataStoreTests.Add_ValidProjectionView_ProjectionViewCanBeRetreived() TableStorageDataStoreTests.Add_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived() TableStorageDataStoreTests.Update_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.Test.Integration Assembly : Cqrs.Azure.Storage.Test.Integration.dll Syntax [TestFixture] public class TableStorageDataStoreTests : TableStorageDataStoreTests Methods CreateDataStore<TData>(ILogger, IConfigurationManager) Create a TableStorageDataStore<TData> ready for testing. Declaration protected override TableStorageDataStore<TData> CreateDataStore<TData>(ILogger logger, IConfigurationManager configurationManager)where TData : Entity Parameters Type Name Description cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager Returns Type Description TableStorageDataStore <TData> Type Parameters Name Description TData Overrides TableStorageDataStoreTests.CreateDataStore<TData>(ILogger, IConfigurationManager)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.html",
    "title": "Namespace Cqrs.Azure.Storage.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.Storage.Events Classes TableStorageEventStore<TAuthenticationToken> An Azure Storage based EventStore<TAuthenticationToken> . TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStorer An Azure Storage based TableStorageStore<TData, TCollectionItemData> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.TableStorageEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.TableStorageEventStore-1.html",
    "title": "Class TableStorageEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStore<TAuthenticationToken> An Azure Storage based EventStore<TAuthenticationToken> . Inheritance System.Object EventStore <TAuthenticationToken> TableStorageEventStore <TAuthenticationToken> TableStorageEventStore<TAuthenticationToken> Inherited Members TableStorageEventStore<TAuthenticationToken>.TableCqrsEventStoreStreamNamePattern TableStorageEventStore<TAuthenticationToken>.TableStorageStore TableStorageEventStore<TAuthenticationToken>.CorrelationIdTableStorageStore TableStorageEventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) TableStorageEventStore<TAuthenticationToken>.PersistEvent(EventData) EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.Events Assembly : Cqrs.Azure.Storage.dll Syntax public class TableStorageEventStore<TAuthenticationToken> : TableStorageEventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors TableStorageEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, ITableStorageStoreConnectionStringFactory) Initializes a new instance of the TableStorageEventStore<TAuthenticationToken> class using the specified container. Declaration public TableStorageEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory Methods Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Azure.BlobStorage.Events.TableStorageEventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Azure.BlobStorage.Events.TableStorageEventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.TableStorageEventStore-1.RawTableStorageEventStorer.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.Events.TableStorageEventStore-1.RawTableStorageEventStorer.html",
    "title": "Class TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStorer | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStorer An Azure Storage based TableStorageStore<TData, TCollectionItemData> . Inheritance System.Object StorageStore < EventDataTableEntity < EventData >, Microsoft.WindowsAzure.Storage.Table.CloudTable > TableStorageStore < EventDataTableEntity < EventData >, EventData > TableStorageEventStore.RawTableStorageEventStore <> TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStorer Inherited Members TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.IsCorrelationIdTableStorageStore TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.Remove(EventData) TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.GetUpdatableTableEntity(EventData) TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.GetUpdatableTableEntity(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Collection TableStorageStore<EventDataTableEntity<EventData>, EventData>.Initialise(IStorageStoreConnectionStringFactory) TableStorageStore<EventDataTableEntity<EventData>, EventData>.IEnumerable<EventData>.GetEnumerator() TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetEnumerator() TableStorageStore<EventDataTableEntity<EventData>, EventData>.Expression TableStorageStore<EventDataTableEntity<EventData>, EventData>.ElementType TableStorageStore<EventDataTableEntity<EventData>, EventData>.Provider TableStorageStore<EventDataTableEntity<EventData>, EventData>.AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.CreateTableEntity(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(ITableEntity) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<EventDataTableEntity<EventData>>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<ITableEntity>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Destroy(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Remove(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Destroy(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.RemoveAll() TableStorageStore<EventDataTableEntity<EventData>, EventData>.Update(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Update(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetUpdatableTableEntity(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetUpdatableTableEntity(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.CreateSource(CloudStorageAccount, String, Boolean) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetByKeyAndRow(Guid) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetByKey() TableStorageStore<EventDataTableEntity<EventData>, EventData>.ReplaceValues(TableResult, EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetSafeSourceName(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.WritableCollection StorageStore<EventDataTableEntity<EventData>, CloudTable>.ReadableStorageAccount StorageStore<EventDataTableEntity<EventData>, CloudTable>.Logger StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetContainerName StorageStore<EventDataTableEntity<EventData>, CloudTable>.IsContainerPublic StorageStore<EventDataTableEntity<EventData>, CloudTable>.DefaultSettings StorageStore<EventDataTableEntity<EventData>, CloudTable>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetEnumerator() StorageStore<EventDataTableEntity<EventData>, CloudTable>.IEnumerable.GetEnumerator() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Expression StorageStore<EventDataTableEntity<EventData>, CloudTable>.ElementType StorageStore<EventDataTableEntity<EventData>, CloudTable>.Provider StorageStore<EventDataTableEntity<EventData>, CloudTable>.Dispose() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Add(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Add(IEnumerable<EventDataTableEntity<EventData>>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Destroy(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.RemoveAll() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Update(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSafeSourceName(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSafeSourceName(String, Boolean) StorageStore<EventDataTableEntity<EventData>, CloudTable>.AzureStorageRetryPolicy StorageStore<EventDataTableEntity<EventData>, CloudTable>.Deserialise(Stream) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Deserialise(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Serialise(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSerialisationSettings() StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.Events Assembly : Cqrs.Azure.Storage.dll Syntax public class RawTableStorageEventStorer : TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore, IEnumerable<EventDataTableEntity<EventData>>, IDataStore<EventData>, IOrderedQueryable<EventData>, IQueryable<EventData>, IEnumerable<EventData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable Constructors RawTableStorageEventStorer(ILogger, ITableStorageStoreConnectionStringFactory, Boolean) Initializes a new instance of the RawTableStorageEventStore class using the specified container. Declaration public RawTableStorageEventStorer(ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory, bool isCorrelationIdTableStorageStore = false) Parameters Type Name Description cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory System.Boolean isCorrelationIdTableStorageStore Methods CreateTableEntity(EventData) Creates a new Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity copying the provided data into Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties . Declaration protected override ITableEntity CreateTableEntity(EventData data) Parameters Type Name Description EventData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Overrides Cqrs.Azure.BlobStorage.Events.TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.CreateTableEntity(Cqrs.Events.EventData) GetSafeSourceName(String) The value differs from RawTableStorageEventStore.GetSafeSourceName(string) in that it appends \"V2\" to the end of the name. Declaration protected override string GetSafeSourceName(string sourceName) Parameters Type Name Description System.String sourceName Returns Type Description System.String Overrides Cqrs.Azure.BlobStorage.Events.TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore.GetSafeSourceName(System.String) Extension Methods BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.html",
    "title": "Namespace Cqrs.Azure.ServiceBus.Tests.Integration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.ServiceBus.Tests.Integration Classes GuidAuthenticationTokenHelper A test IAuthenticationTokenHelper<TAuthenticationToken> that always returns System.Guid.Empty RoundTripTests A series of tests publishing IEvent<TAuthenticationToken> . TestCommandSuccessHandler A Test IMessageHandler<TMessage> for handling TestCommand . TestEventSuccessHandler A Test IMessageHandler<TMessage> for handling TestEvent ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.TestEventSuccessHandler.html",
    "title": "Class TestEventSuccessHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEventSuccessHandler A Test IMessageHandler<TMessage> for handling TestEvent . Inheritance System.Object TestEventSuccessHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Integration Assembly : Cqrs.Azure.ServiceBus.Tests.Integration.dll Syntax public class TestEventSuccessHandler : IMessageHandler<TestEvent>, IHandler Constructors TestEventSuccessHandler(IDictionary<Guid, Tuple<Boolean, Exception>>) Instantiate and initialise a new TestEventSuccessHandler specifying the test flag container. Declaration public TestEventSuccessHandler(IDictionary<Guid, Tuple<bool, Exception>> testResponse) Parameters Type Name Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < System.Boolean , System.Exception >> testResponse The test flag container. Properties TestResponse A local reference to the test flag container. Declaration protected IDictionary<Guid, Tuple<bool, Exception>> TestResponse { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < System.Boolean , System.Exception >> Methods Handle(TestEvent) Sets a value into TestResponse so it can be reported back to the test class. Declaration public void Handle(TestEvent message) Parameters Type Name Description TestEvent message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.TestCommandSuccessHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.TestCommandSuccessHandler.html",
    "title": "Class TestCommandSuccessHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestCommandSuccessHandler A Test IMessageHandler<TMessage> for handling TestCommand . Inheritance System.Object TestCommandSuccessHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Integration Assembly : Cqrs.Azure.ServiceBus.Tests.Integration.dll Syntax public class TestCommandSuccessHandler : IMessageHandler<TestCommand>, IHandler Constructors TestCommandSuccessHandler(IDictionary<Guid, Tuple<Boolean, Exception>>) Instantiate and initialise a new TestCommandSuccessHandler specifying the test flag container. Declaration public TestCommandSuccessHandler(IDictionary<Guid, Tuple<bool, Exception>> testResponse) Parameters Type Name Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < System.Boolean , System.Exception >> testResponse The test flag container. Properties TestResponse A local reference to the test flag container. Declaration protected IDictionary<Guid, Tuple<bool, Exception>> TestResponse { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Tuple < System.Boolean , System.Exception >> Methods Handle(TestCommand) Sets a value into TestResponse so it can be reported back to the test class. Declaration public void Handle(TestCommand message) Parameters Type Name Description TestCommand message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.RoundTripTests.html",
    "title": "Class RoundTripTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class RoundTripTests A series of tests publishing IEvent<TAuthenticationToken> . Inheritance System.Object RoundTripTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Integration Assembly : Cqrs.Azure.ServiceBus.Tests.Integration.dll Syntax [TestFixture] public class RoundTripTests Methods Publish_TestCommand_NoExceptions() Tests a test ICommand<TAuthenticationToken> can be published via AzureCommandBusPublisher<TAuthenticationToken> and two IEventHandler Will fire updating test flags. Declaration [Test] public void Publish_TestCommand_NoExceptions() Publish_TestEvent_NoExceptions() Tests a test IEvent<TAuthenticationToken> can be published via AzureEventBusPublisher<TAuthenticationToken> and two IEventHandler Will fire updating test flags. Declaration [Test] public void Publish_TestEvent_NoExceptions()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.GuidAuthenticationTokenHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Integration.GuidAuthenticationTokenHelper.html",
    "title": "Class GuidAuthenticationTokenHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GuidAuthenticationTokenHelper A test IAuthenticationTokenHelper<TAuthenticationToken> that always returns System.Guid.Empty Inheritance System.Object GuidAuthenticationTokenHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Integration Assembly : Cqrs.Azure.ServiceBus.Tests.Integration.dll Syntax public class GuidAuthenticationTokenHelper : IAuthenticationTokenHelper<Guid> Methods GetAuthenticationToken() Gets System.Guid.Empty Declaration public Guid GetAuthenticationToken() Returns Type Description System.Guid System.Guid.Empty Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() SetAuthenticationToken(Guid) Does nothing Declaration public Guid SetAuthenticationToken(Guid permissionScope) Parameters Type Name Description System.Guid permissionScope Returns Type Description System.Guid System.Guid.Empty Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.MessageSerialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.MessageSerialiser-1.html",
    "title": "Class MessageSerialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MessageSerialiser<TAuthenticationToken> Serialises IEvent<TAuthenticationToken> and ICommand<TAuthenticationToken> . Inheritance System.Object MessageSerialiser<TAuthenticationToken> Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class MessageSerialiser<TAuthenticationToken> : object, IMessageSerialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Properties DefaultSettings The default to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description JsonSerializerSettings Methods DeserialiseCommand(String) Deserialise the provided command from its representation. Declaration public virtual ICommand<TAuthenticationToken> DeserialiseCommand(string command) Parameters Type Name Description System.String command A representation of an ICommand<TAuthenticationToken> to deserialise. Returns Type Description ICommand <TAuthenticationToken> Implements IMessageSerialiser<TAuthenticationToken>.DeserialiseCommand(String) DeserialiseEvent(String) Deserialise the provided event from its representation. Declaration public virtual IEvent<TAuthenticationToken> DeserialiseEvent(string event) Parameters Type Name Description System.String event A representation of an IEvent<TAuthenticationToken> to deserialise. Returns Type Description IEvent <TAuthenticationToken> Implements IMessageSerialiser<TAuthenticationToken>.DeserialiseEvent(String) GetSerialisationSettings() Returns DefaultSettings Declaration protected virtual JsonSerializerSettings GetSerialisationSettings() Returns Type Description JsonSerializerSettings DefaultSettings SerialiseCommand<TCommand>(TCommand) Serialise the provided command . Declaration public virtual string SerialiseCommand<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> being serialised. Returns Type Description System.String A representation of the provided command . Type Parameters Name Description TCommand The of the ICommand<TAuthenticationToken> being serialised. Implements IMessageSerialiser<TAuthenticationToken>.SerialiseCommand<TCommand>(TCommand) SerialiseEvent<TEvent>(TEvent) Serialise the provided event . Declaration public virtual string SerialiseEvent<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> being serialised. Returns Type Description System.String A representation of the provided event . Type Parameters Name Description TEvent The of the IEvent<TAuthenticationToken> being serialised. Implements IMessageSerialiser<TAuthenticationToken>.SerialiseEvent<TEvent>(TEvent)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.IMessageSerialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.IMessageSerialiser-1.html",
    "title": "Interface IMessageSerialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMessageSerialiser<TAuthenticationToken> Serialises IEvent<TAuthenticationToken> and ICommand<TAuthenticationToken> . Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public interface IMessageSerialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods DeserialiseCommand(String) Deserialise the provided command from its representation. Declaration ICommand<TAuthenticationToken> DeserialiseCommand(string command) Parameters Type Name Description System.String command A representation of an ICommand<TAuthenticationToken> to deserialise. Returns Type Description ICommand <TAuthenticationToken> DeserialiseEvent(String) Deserialise the provided event from its representation. Declaration IEvent<TAuthenticationToken> DeserialiseEvent(string event) Parameters Type Name Description System.String event A representation of an IEvent<TAuthenticationToken> to deserialise. Returns Type Description IEvent <TAuthenticationToken> SerialiseCommand<TCommand>(TCommand) Serialise the provided command . Declaration string SerialiseCommand<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> being serialised. Returns Type Description System.String A representation of the provided command . Type Parameters Name Description TCommand The of the ICommand<TAuthenticationToken> being serialised. SerialiseEvent<TEvent>(TEvent) Serialise the provided event . Declaration string SerialiseEvent<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> being serialised. Returns Type Description System.String A representation of the provided event . Type Parameters Name Description TEvent The of the IEvent<TAuthenticationToken> being serialised."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.IAzureBusHelper-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.IAzureBusHelper-1.html",
    "title": "Interface IAzureBusHelper<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAzureBusHelper<TAuthenticationToken> A helper for Azure Service Bus and Event Hub. Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public interface IAzureBusHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods DefaultReceiveCommand(ICommand<TAuthenticationToken>, RouteManager, String) The default command handler that check if the ICommand<TAuthenticationToken> has already been processed by this framework, checks if the ICommand<TAuthenticationToken> is required, finds the handler from the provided routeManager . Declaration bool ? DefaultReceiveCommand(ICommand<TAuthenticationToken> command, RouteManager routeManager, string framework) Parameters Type Name Description ICommand <TAuthenticationToken> command The ICommand<TAuthenticationToken> to process. RouteManager routeManager The RouteManager to get the ICommandHandler<TAuthenticationToken, TCommand> from. System.String framework The current framework. Returns Type Description System.Nullable < System.Boolean > True indicates the command was successfully handled by a handler. False indicates the command wasn't handled, but didn't throw an error, so by convention, that means it was skipped. Null indicates the command command wasn't handled as it was already handled. DefaultReceiveEvent(IEvent<TAuthenticationToken>, RouteManager, String) The default event handler that check if the IEvent<TAuthenticationToken> has already been processed by this framework, checks if the IEvent<TAuthenticationToken> is required, finds the handler from the provided routeManager . Declaration bool ? DefaultReceiveEvent(IEvent<TAuthenticationToken> event, RouteManager routeManager, string framework) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to process. RouteManager routeManager The RouteManager to get the IEventHandler<TAuthenticationToken, TEvent> from. System.String framework The current framework. Returns Type Description System.Nullable < System.Boolean > True indicates the event was successfully handled by a handler. False indicates the event wasn't handled, but didn't throw an error, so by convention, that means it was skipped. Null indicates the event wasn't handled as it was already handled. PrepareAndValidateCommand<TCommand>(TCommand, String) Prepares and validates a ICommand<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration bool PrepareAndValidateCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> to send. System.String framework The framework the command is being sent from. Returns Type Description System.Boolean Type Parameters Name Description TCommand The of ICommand<TAuthenticationToken> being sent. PrepareAndValidateEvent<TEvent>(TEvent, String) Prepares and validates an IEvent<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration bool PrepareAndValidateEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> to send. System.String framework The framework the event is being sent from. Returns Type Description System.Boolean Type Parameters Name Description TEvent The of IEvent<TAuthenticationToken> being sent. PrepareCommand<TCommand>(TCommand, String) Prepares a ICommand<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration void PrepareCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> to send. System.String framework The framework the command is being sent from. Type Parameters Name Description TCommand The of ICommand<TAuthenticationToken> being sent. PrepareEvent<TEvent>(TEvent, String) Prepares an IEvent<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration void PrepareEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> to send. System.String framework The framework the event is being sent from. Type Parameters Name Description TEvent The of IEvent<TAuthenticationToken> being sent. ReceiveCommand(String, Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) Deserialises and processes the messageBody received from the network through the provided receiveCommandHandler . Declaration ICommand<TAuthenticationToken> ReceiveCommand(string messageBody, Func<ICommand<TAuthenticationToken>, bool ? > receiveCommandHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null) Parameters Type Name Description System.String messageBody A serialised IMessage . Func < ICommand <TAuthenticationToken>, System.Nullable < System.Boolean >> receiveCommandHandler The handler method that will process the ICommand<TAuthenticationToken> . System.String messageId The network id of the IMessage . Action skippedAction The to call when the ICommand<TAuthenticationToken> is being skipped. Action lockRefreshAction The to call to refresh the network lock. Returns Type Description ICommand <TAuthenticationToken> The ICommand<TAuthenticationToken> that was processed. ReceiveEvent(String, Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) Deserialises and processes the messageBody received from the network through the provided receiveEventHandler . Declaration IEvent<TAuthenticationToken> ReceiveEvent(string messageBody, Func<IEvent<TAuthenticationToken>, bool ? > receiveEventHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null) Parameters Type Name Description System.String messageBody A serialised IMessage . Func < IEvent <TAuthenticationToken>, System.Nullable < System.Boolean >> receiveEventHandler The handler method that will process the IEvent<TAuthenticationToken> . System.String messageId The network id of the IMessage . Action skippedAction The to call when the IEvent<TAuthenticationToken> is being skipped. Action lockRefreshAction The to call to refresh the network lock. Returns Type Description IEvent <TAuthenticationToken> The IEvent<TAuthenticationToken> that was processed. RefreshLock(CancellationTokenSource, BrokeredMessage, String) Refreshes the network lock. Declaration void RefreshLock(CancellationTokenSource brokeredMessageRenewCancellationTokenSource, BrokeredMessage message, string type = \"message\") Parameters Type Name Description CancellationTokenSource brokeredMessageRenewCancellationTokenSource BrokeredMessage message System.String type RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration void RegisterGlobalEventHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description ITelemetryHelper telemetryHelper RouteManager routeManger Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Type, Boolean) Manually registers the provided handler on the provided routeManger Declaration void RegisterHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description ITelemetryHelper telemetryHelper RouteManager routeManger Action <TMessage> handler Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage The of IMessage the handler can handle."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureServiceBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureServiceBus-1.html",
    "title": "Class AzureServiceBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureServiceBus<TAuthenticationToken> An AzureBus<TAuthenticationToken> that uses Azure Service Bus. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus<TAuthenticationToken> AzureCommandBus<TAuthenticationToken> AzureEventBus<TAuthenticationToken> Inherited Members AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureServiceBus<TAuthenticationToken> : AzureBus<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureServiceBus(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper, Boolean) Instantiates a new instance of AzureServiceBus<TAuthenticationToken> Declaration protected AzureServiceBus(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper System.Boolean isAPublisher Fields DefaultPrivateTopicSubscriptionName The default name of the subscription in the private topic if no IConfigurationManager value is set. Declaration protected const string DefaultPrivateTopicSubscriptionName = null Field Value Type Description System.String DefaultPublicTopicSubscriptionName The default name of the subscription in the public topic if no IConfigurationManager value is set. Declaration protected const string DefaultPublicTopicSubscriptionName = null Field Value Type Description System.String Properties AzureBusHelper Gets the IAzureBusHelper<TAuthenticationToken> . Declaration protected IAzureBusHelper<TAuthenticationToken> AzureBusHelper { get; } Property Value Type Description IAzureBusHelper <TAuthenticationToken> BusHelper Gets the IBusHelper . Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper DefaultPrivateTopicName The default name of the private topic if no IConfigurationManager value is set. Declaration protected abstract string DefaultPrivateTopicName { get; } Property Value Type Description System.String DefaultPublicTopicName The default name of the public topic if no IConfigurationManager value is set. Declaration protected abstract string DefaultPublicTopicName { get; } Property Value Type Description System.String MessageBusConnectionStringConfigurationKey The configuration key for the message bus connection string as used by IConfigurationManager . Declaration protected abstract string MessageBusConnectionStringConfigurationKey { get; } Property Value Type Description System.String PrivateServiceBusPublisher Gets the private publisher. Declaration protected TopicClient PrivateServiceBusPublisher { get; } Property Value Type Description TopicClient PrivateServiceBusReceivers Gets the private receivers. Declaration protected IDictionary<int, SubscriptionClient> PrivateServiceBusReceivers { get; } Property Value Type Description IDictionary < System.Int32 , SubscriptionClient > PrivateTopicName The name of the private topic. Declaration protected string PrivateTopicName { get; } Property Value Type Description System.String PrivateTopicNameConfigurationKey The configuration key for the name of the private topic as used by IConfigurationManager . Declaration protected abstract string PrivateTopicNameConfigurationKey { get; } Property Value Type Description System.String PrivateTopicSubscriptionName The name of the subscription in the private topic. Declaration protected string PrivateTopicSubscriptionName { get; } Property Value Type Description System.String PrivateTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the private topic as used by IConfigurationManager . Declaration protected abstract string PrivateTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String PublicServiceBusPublisher Gets the public publisher. Declaration protected TopicClient PublicServiceBusPublisher { get; } Property Value Type Description TopicClient PublicServiceBusReceivers Gets the public receivers. Declaration protected IDictionary<int, SubscriptionClient> PublicServiceBusReceivers { get; } Property Value Type Description IDictionary < System.Int32 , SubscriptionClient > PublicTopicName The name of the public topic. Declaration protected string PublicTopicName { get; } Property Value Type Description System.String PublicTopicNameConfigurationKey The configuration key for the name of the public topic as used by IConfigurationManager . Declaration protected abstract string PublicTopicNameConfigurationKey { get; } Property Value Type Description System.String PublicTopicSubscriptionName The name of the subscription in the public topic. Declaration protected string PublicTopicSubscriptionName { get; } Property Value Type Description System.String PublicTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the public topic as used by IConfigurationManager . Declaration protected abstract string PublicTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String ReceiverMessageHandler The handler used for on each receiver. Declaration protected Action<BrokeredMessage> ReceiverMessageHandler { get; set; } Property Value Type Description Action < BrokeredMessage > ReceiverMessageHandlerOptions The used for on each receiver. Declaration protected OnMessageOptions ReceiverMessageHandlerOptions { get; set; } Property Value Type Description OnMessageOptions TelemetryHelper Gets the . Declaration protected ITelemetryHelper TelemetryHelper { get; set; } Property Value Type Description ITelemetryHelper ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete Specifies if an is thrown if the network lock is lost. Declaration protected bool ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete { get; } Property Value Type Description System.Boolean ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey The configuration key that specifies if an is thrown if the network lock is lost as used by IConfigurationManager . Declaration protected abstract string ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey { get; } Property Value Type Description System.String Methods ApplyReceiverMessageHandler() Applies the stored ReceiverMessageHandler and ReceiverMessageHandlerOptions to all receivers in PrivateServiceBusReceivers and PublicServiceBusReceivers . Declaration protected override void ApplyReceiverMessageHandler() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.ApplyReceiverMessageHandler() CheckPrivateTopicExists(NamespaceManager) Checks if the private topic and subscription name exists as per PrivateTopicName and PrivateTopicSubscriptionName . Declaration protected virtual void CheckPrivateTopicExists(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager The . CheckPublicTopicExists(NamespaceManager) Checks if the public topic and subscription name exists as per PublicTopicName and PublicTopicSubscriptionName . Declaration protected virtual void CheckPublicTopicExists(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager The . CheckTopicExists(NamespaceManager, String, String) Checks if a topic by the provided topicName exists and Checks if a subscription name by the provided subscriptionName exists. Declaration protected virtual void CheckTopicExists(NamespaceManager namespaceManager, string topicName, string subscriptionName) Parameters Type Name Description NamespaceManager namespaceManager System.String topicName System.String subscriptionName CleanUpDeadLetters(String, String) Using a , clears all dead letters from the topic and subscription of the provided topicName and topicSubscriptionName . Declaration protected virtual CancellationTokenSource CleanUpDeadLetters(string topicName, string topicSubscriptionName) Parameters Type Name Description System.String topicName The name of the topic. System.String topicSubscriptionName The name of the subscription. Returns Type Description CancellationTokenSource GetConnectionString() Gets the connection string for the bus from ConfigurationManager Declaration protected override string GetConnectionString() Returns Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetConnectionString() InstantiatePublishing() Instantiate publishing on this bus by calling CheckPrivateTopicExists(NamespaceManager) and CheckPublicTopicExists(NamespaceManager) then calling StartSettingsChecking() Declaration protected override void InstantiatePublishing() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.InstantiatePublishing() InstantiateReceiving() Instantiate receiving on this bus by calling CheckPrivateTopicExists(NamespaceManager) and CheckPublicTopicExists(NamespaceManager) then InstantiateReceiving for private and public topics, calls CleanUpDeadLetters(String, String) for the private and public topics, then calling StartSettingsChecking() Declaration protected override void InstantiateReceiving() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.InstantiateReceiving() InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) Creates NumberOfReceiversCount . If flushing is required, any flushed has called on it first. Declaration protected virtual void InstantiateReceiving(NamespaceManager namespaceManager, IDictionary<int, SubscriptionClient> serviceBusReceivers, string topicName, string topicSubscriptionName) Parameters Type Name Description NamespaceManager namespaceManager The . IDictionary < System.Int32 , SubscriptionClient > serviceBusReceivers The receivers collection to place instances into. System.String topicName The topic name. System.String topicSubscriptionName The topic subscription name. RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) Registers the provided receiverMessageHandler with the provided receiverMessageHandlerOptions . Declaration protected virtual void RegisterReceiverMessageHandler(Action<BrokeredMessage> receiverMessageHandler, OnMessageOptions receiverMessageHandlerOptions) Parameters Type Name Description Action < BrokeredMessage > receiverMessageHandler OnMessageOptions receiverMessageHandlerOptions StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) Stores the provided receiverMessageHandler and receiverMessageHandlerOptions . Declaration protected virtual void StoreReceiverMessageHandler(Action<BrokeredMessage> receiverMessageHandler, OnMessageOptions receiverMessageHandlerOptions) Parameters Type Name Description Action < BrokeredMessage > receiverMessageHandler OnMessageOptions receiverMessageHandlerOptions TriggerSettingsChecking() Triggers settings checking on both public and private publishers and receivers, then calls InstantiatePublishing() if PublicServiceBusPublisher is not null. Declaration protected override void TriggerSettingsChecking() Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.TriggerSettingsChecking() TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) Triggers settings checking on the provided serviceBusPublisher and serviceBusReceivers , then calls InstantiateReceiving() . Declaration protected virtual void TriggerSettingsChecking(TopicClient serviceBusPublisher, IDictionary<int, SubscriptionClient> serviceBusReceivers) Parameters Type Name Description TopicClient serviceBusPublisher IDictionary < System.Int32 , SubscriptionClient > serviceBusReceivers"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.AzureDocumentDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.AzureDocumentDbDataStoreConnectionStringFactory.html",
    "title": "Class AzureDocumentDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbDataStoreConnectionStringFactory Inheritance System.Object AzureDocumentDbDataStoreConnectionStringFactory TestAzureDocumentDbDataStoreConnectionStringFactory Namespace : Cqrs.Azure.DocumentDb.Factories Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbDataStoreConnectionStringFactory : object, IAzureDocumentDbDataStoreConnectionStringFactory Constructors AzureDocumentDbDataStoreConnectionStringFactory(ILogger, IConfigurationManager) Declaration public AzureDocumentDbDataStoreConnectionStringFactory(ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description ILogger logger IConfigurationManager configurationManager Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Declaration protected ILogger Logger { get; } Property Value Type Description ILogger Methods GetAzureDocumentDbAuthorisationKey() Declaration protected virtual string GetAzureDocumentDbAuthorisationKey() Returns Type Description System.String GetAzureDocumentDbCollectionName() Declaration public virtual string GetAzureDocumentDbCollectionName() Returns Type Description System.String Implements IAzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbCollectionName() GetAzureDocumentDbConnectionClient() Declaration public virtual DocumentClient GetAzureDocumentDbConnectionClient() Returns Type Description DocumentClient Implements IAzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbConnectionClient() GetAzureDocumentDbConnectionUrl() Declaration protected virtual Uri GetAzureDocumentDbConnectionUrl() Returns Type Description Uri GetAzureDocumentDbDatabaseName() Declaration public virtual string GetAzureDocumentDbDatabaseName() Returns Type Description System.String Implements IAzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbDatabaseName() UseSingleCollectionForAllDataStores() Indicates if a different collection should be used per IEntity / IDataStore<TData> or a single collection used for all instances of IDataStore<TData> and IDataStore<TData> . Setting this to true can become expensive as each IEntity will have it's own collection. Check the relevant SDK/pricing models. Declaration public virtual bool UseSingleCollectionForAllDataStores() Returns Type Description System.Boolean Implements IAzureDocumentDbDataStoreConnectionStringFactory.UseSingleCollectionForAllDataStores()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.Events Classes AzureDocumentDbEventBuilder<TAuthenticationToken> AzureDocumentDbEventDeserialiser<TAuthenticationToken> AzureDocumentDbEventStore<TAuthenticationToken> AzureDocumentDbEventStoreConnectionStringFactory Interfaces IAzureDocumentDbEventStoreConnectionStringFactory"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.IAzureDocumentDbEventStoreConnectionStringFactory.html",
    "title": "Interface IAzureDocumentDbEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAzureDocumentDbEventStoreConnectionStringFactory Namespace : Cqrs.Azure.DocumentDb.Events Assembly : Cqrs.Azure.DocumentDb.dll Syntax public interface IAzureDocumentDbEventStoreConnectionStringFactory Methods GetEventStoreConnectionClient() Declaration DocumentClient GetEventStoreConnectionClient() Returns Type Description DocumentClient GetEventStoreConnectionCollectionName() Declaration string GetEventStoreConnectionCollectionName() Returns Type Description System.String GetEventStoreConnectionDatabaseName() Declaration string GetEventStoreConnectionDatabaseName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStoreConnectionStringFactory.html",
    "title": "Class AzureDocumentDbEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEventStoreConnectionStringFactory Inheritance System.Object AzureDocumentDbEventStoreConnectionStringFactory TestAzureDocumentDbEventStoreConnectionStringFactory Namespace : Cqrs.Azure.DocumentDb.Events Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbEventStoreConnectionStringFactory : object, IAzureDocumentDbEventStoreConnectionStringFactory Constructors AzureDocumentDbEventStoreConnectionStringFactory(ILogger, IConfigurationManager) Declaration public AzureDocumentDbEventStoreConnectionStringFactory(ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description ILogger logger IConfigurationManager configurationManager Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Declaration protected ILogger Logger { get; } Property Value Type Description ILogger Methods GetEventStoreConnectionAuthorisationKey() Declaration protected virtual string GetEventStoreConnectionAuthorisationKey() Returns Type Description System.String GetEventStoreConnectionClient() Declaration public virtual DocumentClient GetEventStoreConnectionClient() Returns Type Description DocumentClient Implements IAzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionClient() GetEventStoreConnectionCollectionName() Declaration public string GetEventStoreConnectionCollectionName() Returns Type Description System.String Implements IAzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionCollectionName() GetEventStoreConnectionDatabaseName() Declaration public virtual string GetEventStoreConnectionDatabaseName() Returns Type Description System.String Implements IAzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionDatabaseName() GetEventStoreConnectionUrl() Declaration protected virtual Uri GetEventStoreConnectionUrl() Returns Type Description Uri"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventStore-1.html",
    "title": "Class AzureDocumentDbEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEventStore<TAuthenticationToken> Inheritance System.Object EventStore <TAuthenticationToken> AzureDocumentDbEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) EventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) EventStore<TAuthenticationToken>.Get(Guid) Namespace : Cqrs.Azure.DocumentDb.Events Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AzureDocumentDbEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IAzureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory) Declaration public AzureDocumentDbEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IAzureDocumentDbHelper azureDocumentDbHelper, IAzureDocumentDbEventStoreConnectionStringFactory azureDocumentDbEventStoreConnectionStringFactory) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser ILogger logger IAzureDocumentDbHelper azureDocumentDbHelper IAzureDocumentDbEventStoreConnectionStringFactory azureDocumentDbEventStoreConnectionStringFactory Fields UniqueIndexProperties Declaration protected readonly string[] UniqueIndexProperties Field Value Type Description System.String [] Properties AzureDocumentDbEventStoreConnectionStringFactory Declaration protected IAzureDocumentDbEventStoreConnectionStringFactory AzureDocumentDbEventStoreConnectionStringFactory { get; } Property Value Type Description IAzureDocumentDbEventStoreConnectionStringFactory AzureDocumentDbHelper Declaration protected IAzureDocumentDbHelper AzureDocumentDbHelper { get; } Property Value Type Description IAzureDocumentDbHelper Methods Get(Guid) Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description Guid correlationId Returns Type Description IEnumerable < EventData > Get(Type, Guid, Boolean, Int32) Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null) Parameters Type Name Description Type aggregateRootType Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description IEnumerable < IEvent <TAuthenticationToken>> GetAsync(Guid) Declaration protected Task<IEnumerable<EventData>> GetAsync(Guid correlationId) Parameters Type Name Description Guid correlationId Returns Type Description Task < IEnumerable < EventData >> GetAsync(Type, Guid, Boolean, Int32) Declaration protected Task<IEnumerable<IEvent<TAuthenticationToken>>> GetAsync(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null) Parameters Type Name Description Type aggregateRootType Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description Task < IEnumerable < IEvent <TAuthenticationToken>>> GetAsync<T>(Guid, Boolean, Int32) Declaration protected Task<IEnumerable<IEvent<TAuthenticationToken>>> GetAsync<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = null) Parameters Type Name Description Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description Task < IEnumerable < IEvent <TAuthenticationToken>>> Type Parameters Name Description T PersistEvent(EventData) Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventDeserialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventDeserialiser-1.html",
    "title": "Class AzureDocumentDbEventDeserialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEventDeserialiser<TAuthenticationToken> Inheritance System.Object EventDeserialiser <TAuthenticationToken> AzureDocumentDbEventDeserialiser<TAuthenticationToken> Inherited Members EventDeserialiser<TAuthenticationToken>.DefaultSettings EventDeserialiser<TAuthenticationToken>.Deserialise(EventData) EventDeserialiser<TAuthenticationToken>.GetSerialisationSettings() Namespace : Cqrs.Azure.DocumentDb.Events Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbEventDeserialiser<TAuthenticationToken> : EventDeserialiser<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Events.AzureDocumentDbEventBuilder-1.html",
    "title": "Class AzureDocumentDbEventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEventBuilder<TAuthenticationToken> Inheritance System.Object EventBuilder <TAuthenticationToken> DefaultEventBuilder <TAuthenticationToken> AzureDocumentDbEventBuilder<TAuthenticationToken> Inherited Members DefaultEventBuilder<TAuthenticationToken>.DefaultSettings DefaultEventBuilder<TAuthenticationToken>.SerialiseEventDataToString(IEvent<TAuthenticationToken>) DefaultEventBuilder<TAuthenticationToken>.GetSerialisationSettings() EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>) EventBuilder<TAuthenticationToken>.SerialiseEventData(IEvent<TAuthenticationToken>) Namespace : Cqrs.Azure.DocumentDb.Events Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbEventBuilder<TAuthenticationToken> : DefaultEventBuilder<TAuthenticationToken>, IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.CloudConfigurationManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.CloudConfigurationManager.html",
    "title": "Class CloudConfigurationManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CloudConfigurationManager Provides access to configuration settings from the Azure Portal application settings. If no value is stored there it falls back to reading app settings of an app.config or web.config... i.e. System.Configuration.ConfigurationManager.AppSettings Inheritance System.Object ConfigurationManager CloudConfigurationManager Inherited Members ConfigurationManager.TryGetSetting(String, String) ConfigurationManager.TryGetSetting(String, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ConfigurationManager Assembly : Cqrs.Azure.ConfigurationManager.dll Syntax public class CloudConfigurationManager : ConfigurationManager, IConfigurationManager Methods GetSetting(String) Read the setting named key . Declaration public override string GetSetting(string key) Parameters Type Name Description System.String key The key (or name) of the setting to read. Returns Type Description System.String Overrides ConfigurationManager.GetSetting(String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.html",
    "title": "Namespace Cqrs.Azure.BlobStorage | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage Classes BlobStorageStore<TData> BlobStorageStoreExtensions EntityTableEntity<TEntity> EventDataTableEntity<TEventData> StorageStore<TData, TSource> A System.Collections.Generic.IEnumerable<T> that uses Azure Storage for storage. TableEntity<TData> TableStorageStore<TData, TCollectionItemData> A IDataStore<TData> that uses Azure Storage for storage. TableStorageStoreExtensions Interfaces IBlobStorageStoreConnectionStringFactory IEntityTableEntity<TEntity> IEventDataTableEntity<TEventData> IStorageStoreConnectionStringFactory ITableStorageStoreConnectionStringFactory"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.Test.Integration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.Test.Integration Classes BlobStorageDataStoreTests A series of tests on the BlobStorageDataStore<TData> class BlobStorageEventStoreTests A series of tests on the BlobStorageEventStore<TAuthenticationToken> class TableStorageDataStoreTests A series of tests on the TableStorageDataStore<TData> class TableStorageEventStoreTests A series of tests on the TableStorageEventStore<TAuthenticationToken> class TestEntity A Test IEntity . TestQueryBuilder<TData> A test QueryBuilder<TQueryStrategy, TData> TestQueryStrategy A test IQueryStrategy ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy.html",
    "title": "Class TestQueryStrategy | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestQueryStrategy A test IQueryStrategy . Inheritance System.Object TestQueryStrategy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax public class TestQueryStrategy : IQueryStrategy Properties QueryPredicate The predicate that will be evaluated. Declaration public IQueryPredicate QueryPredicate { get; set; } Property Value Type Description IQueryPredicate Implements IQueryStrategy.QueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestQueryBuilder-1.html",
    "title": "Class TestQueryBuilder<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestQueryBuilder<TData> A test QueryBuilder<TQueryStrategy, TData> Inheritance System.Object QueryBuilder < TestQueryStrategy , TData> TestQueryBuilder<TData> Inherited Members QueryBuilder<TestQueryStrategy, TData>.DataStore QueryBuilder<TestQueryStrategy, TData>.DependencyResolver QueryBuilder<TestQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TestQueryStrategy, TData>) QueryBuilder<TestQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TestQueryStrategy, TData>) QueryBuilder<TestQueryStrategy, TData>.GetEmptyQueryPredicate() QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate(IQueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GeneratePredicate(QueryPredicate, IQueryable<TData>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<T>(Func<T>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1>(Func<TParameter1, TestQueryStrategy>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TestQueryStrategy>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TestQueryStrategy>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TestQueryStrategy>) QueryBuilder<TestQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TestQueryStrategy>) QueryBuilder<TestQueryStrategy, TData>.GetNullQueryStrategy() QueryBuilder<TestQueryStrategy, TData>.ApplySorting(TestQueryStrategy, IQueryable<TData>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax public class TestQueryBuilder<TData> : QueryBuilder<TestQueryStrategy, TData>, IQueryBuilder<TestQueryStrategy, TData> where TData : Entity Type Parameters Name Description TData Constructors TestQueryBuilder(IDataStore<TData>, IDependencyResolver) Instantiate a new instance of TestQueryBuilder<TData> . Declaration public TestQueryBuilder(IDataStore<TData> dataStore, IDependencyResolver dependencyResolver) Parameters Type Name Description IDataStore <TData> dataStore IDependencyResolver dependencyResolver Methods GeneratePredicate(QueryPredicate, IQueryable<TData>) Raises a System.NotImplementedException as it's currently not needed. Declaration protected override IQueryable<TData> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable = null) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Overrides Cqrs.Repositories.Queries.QueryBuilder<Cqrs.Azure.BlobStorage.Test.Integration.TestQueryStrategy, TData>.GeneratePredicate(Cqrs.Repositories.Queries.QueryPredicate, System.Linq.IQueryable<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TestEntity.html",
    "title": "Class TestEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEntity A Test IEntity . Inheritance System.Object Entity TestEntity Inherited Members Entity.Rsn Entity.SortingOrder Entity.IsLogicallyDeleted System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [Serializable] [DataContract] public class TestEntity : Entity, IEntity Properties Name A Name property. Declaration [DataMember] public string Name { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TableStorageEventStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TableStorageEventStoreTests.html",
    "title": "Class TableStorageEventStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStoreTests A series of tests on the TableStorageEventStore<TAuthenticationToken> class Inheritance System.Object TableStorageEventStoreTests TableStorageEventStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [TestFixture] public class TableStorageEventStoreTests Methods CreateEventStore(IEventBuilder<Guid>, IEventDeserialiser<Guid>, ILogger, ITableStorageStoreConnectionStringFactory) Create a TableStorageEventStore<TAuthenticationToken> ready for testing. Declaration protected virtual TableStorageEventStore<Guid> CreateEventStore(IEventBuilder<Guid> eventBuilder, IEventDeserialiser<Guid> eventDeserialiser, ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory) Parameters Type Name Description IEventBuilder < System.Guid > eventBuilder IEventDeserialiser < System.Guid > eventDeserialiser cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory Returns Type Description TableStorageEventStore < System.Guid > Save_ValidEvent_EventCanBeRetreived() Tests the Save(Type, IEvent<TAuthenticationToken>) method Passing a valid test IEvent<TAuthenticationToken> Expecting the test IEvent<TAuthenticationToken> is able to be read. Declaration [Test] public virtual void Save_ValidEvent_EventCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TableStorageDataStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.TableStorageDataStoreTests.html",
    "title": "Class TableStorageDataStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStoreTests A series of tests on the TableStorageDataStore<TData> class Inheritance System.Object TableStorageDataStoreTests TableStorageDataStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [TestFixture] public class TableStorageDataStoreTests Methods Add_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived() Tests the Add(TData) method Passing a valid test IEntity Expecting the test IEntity is able to be read. Declaration [Test] public virtual void Add_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived() Add_ValidProjectionView_ProjectionViewCanBeRetreived() Tests the Add(TData) method Passing a valid test IEntity Expecting the test IEntity is able to be read. Declaration [Test] public virtual void Add_ValidProjectionView_ProjectionViewCanBeRetreived() CreateDataStore<TData>(ILogger, IConfigurationManager) Create a TableStorageDataStore<TData> ready for testing. Declaration protected virtual TableStorageDataStore<TData> CreateDataStore<TData>(ILogger logger, IConfigurationManager configurationManager)where TData : Entity Parameters Type Name Description cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager Returns Type Description TableStorageDataStore <TData> Type Parameters Name Description TData Update_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived() Tests the Update(TData) method Passing a valid test IEntity Expecting the test IEntity is able to be read with updated properties. Declaration [Test] public virtual void Update_ValidProjectionEntityView_ProjectionEntityViewCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.Queries.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.Queries.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.Repositories.Queries | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.Repositories.Queries Classes BlobStorageQueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy for use with Azure Storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.Queries.BlobStorageQueryBuilder-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.Queries.BlobStorageQueryBuilder-2.html",
    "title": "Class BlobStorageQueryBuilder<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageQueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy for use with Azure Storage. Inheritance System.Object QueryBuilder <TQueryStrategy, TData> BlobStorageQueryBuilder<TQueryStrategy, TData> Inherited Members QueryBuilder<TQueryStrategy, TData>.DataStore QueryBuilder<TQueryStrategy, TData>.DependencyResolver QueryBuilder<TQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>) QueryBuilder<TQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>) QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate() QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(IQueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GeneratePredicate(QueryPredicate, IQueryable<TData>) QueryBuilder<TQueryStrategy, TData>.GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<T>(Func<T>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1>(Func<TParameter1, TQueryStrategy>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TQueryStrategy>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TQueryStrategy>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy>) QueryBuilder<TQueryStrategy, TData>.GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy>) QueryBuilder<TQueryStrategy, TData>.GetNullQueryStrategy() QueryBuilder<TQueryStrategy, TData>.ApplySorting(TQueryStrategy, IQueryable<TData>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Repositories.Queries Assembly : Cqrs.Azure.BlobStorage.dll Syntax public abstract class BlobStorageQueryBuilder<TQueryStrategy, TData> : QueryBuilder<TQueryStrategy, TData>, IQueryBuilder<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TData : Entity Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data to query. Constructors BlobStorageQueryBuilder(IDataStore<TData>, IDependencyResolver) Instantiates a new instance of BlobStorageQueryBuilder<TQueryStrategy, TData> . Declaration protected BlobStorageQueryBuilder(IDataStore<TData> dataStore, IDependencyResolver dependencyResolver) Parameters Type Name Description IDataStore <TData> dataStore IDependencyResolver dependencyResolver Methods GetEmptyQueryPredicate() Returns the folder from DataStore itself. Declaration protected override IQueryable<TData> GetEmptyQueryPredicate() Returns Type Description System.Linq.IQueryable <TData> Overrides Cqrs.Repositories.Queries.QueryBuilder<TQueryStrategy, TData>.GetEmptyQueryPredicate()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.BlobStorageRepository-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.BlobStorageRepository-3.html",
    "title": "Class BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure Blob Storage. Inheritance System.Object Repository <TQueryStrategy, TQueryBuilder, TData> BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> Inherited Members Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll() Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Repositories Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> : Repository<TQueryStrategy, TQueryBuilder, TData>, IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : Entity, new () Type Parameters Name Description TQueryStrategy The System.Type of IQueryStrategy . TQueryBuilder The System.Type of the QueryBuilder<TQueryStrategy, TData> that will be used to build queries. TData The System.Type of data held in storage. Constructors BlobStorageRepository(Func<IDataStore<TData>>, TQueryBuilder) Instantiates a new instance of BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> Declaration public BlobStorageRepository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder) Parameters Type Name Description System.Func < IDataStore <TData>> createDataStoreFunction TQueryBuilder queryBuilder Methods Load(Guid, Boolean) Load the TData from Azure Blob Storage identified by the provided rsn . Declaration public override TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true) Parameters Type Name Description System.Guid rsn The identifier if the TData to load. System.Boolean throwExceptionOnMissingEntity If true will throw an System.Exception if no data is found in storage. Returns Type Description TData Overrides Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.ITableStorageStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.ITableStorageStoreConnectionStringFactory.html",
    "title": "Interface ITableStorageStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ITableStorageStoreConnectionStringFactory Inherited Members IStorageStoreConnectionStringFactory.GetWritableConnectionStrings() IStorageStoreConnectionStringFactory.GetReadableConnectionString() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface ITableStorageStoreConnectionStringFactory : IStorageStoreConnectionStringFactory Methods GetBaseContainerName() Declaration string GetBaseContainerName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Factories.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.Factories Classes BlobStorageDataStoreFactory A factory for obtaining IDataStore<TData> collections from Azure Blob Storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Factories.BlobStorageDataStoreFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Factories.BlobStorageDataStoreFactory.html",
    "title": "Class BlobStorageDataStoreFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageDataStoreFactory A factory for obtaining IDataStore<TData> collections from Azure Blob Storage. Inheritance System.Object BlobStorageDataStoreFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Factories Assembly : Cqrs.Azure.BlobStorage.dll Syntax public abstract class BlobStorageDataStoreFactory Constructors BlobStorageDataStoreFactory(ILogger, IBlobStorageDataStoreConnectionStringFactory) Instantiates and Initialises a new instance of the BlobStorageDataStoreFactory class. Declaration protected BlobStorageDataStoreFactory(ILogger logger, IBlobStorageDataStoreConnectionStringFactory blobStorageDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IBlobStorageDataStoreConnectionStringFactory blobStorageDataStoreConnectionStringFactory Properties BlobStorageDataStoreConnectionStringFactory Declaration protected IBlobStorageDataStoreConnectionStringFactory BlobStorageDataStoreConnectionStringFactory { get; } Property Value Type Description IBlobStorageDataStoreConnectionStringFactory Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.Events Classes BlobStorageEventStore<TAuthenticationToken> BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore BlobStorageEventStoreConnectionStringFactory TableStorageEventStore<TAuthenticationToken> An Azure Storage based EventStore<TAuthenticationToken> . TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore An Azure Storage based TableStorageStore<TData, TCollectionItemData> . TableStorageEventStoreConnectionStringFactory"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStoreConnectionStringFactory.html",
    "title": "Class TableStorageEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStoreConnectionStringFactory Inheritance System.Object TableStorageEventStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class TableStorageEventStoreConnectionStringFactory : ITableStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Constructors TableStorageEventStoreConnectionStringFactory(IConfigurationManager, ILogger) Declaration public TableStorageEventStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields TableStorageBaseContainerNameKey Declaration public static string TableStorageBaseContainerNameKey Field Value Type Description System.String TableStorageEventStoreConnectionStringKey Declaration public static string TableStorageEventStoreConnectionStringKey Field Value Type Description System.String TableStorageReadableEventStoreConnectionStringKey Declaration public static string TableStorageReadableEventStoreConnectionStringKey Field Value Type Description System.String TableStorageWritableEventStoreConnectionStringKey Declaration public static string TableStorageWritableEventStoreConnectionStringKey Field Value Type Description System.String Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetBaseContainerName() Declaration public virtual string GetBaseContainerName() Returns Type Description System.String Implements ITableStorageStoreConnectionStringFactory.GetBaseContainerName() GetReadableConnectionString() Declaration public virtual string GetReadableConnectionString() Returns Type Description System.String Implements IStorageStoreConnectionStringFactory.GetReadableConnectionString() GetWritableConnectionStrings() Declaration public virtual IEnumerable<string> GetWritableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Implements IStorageStoreConnectionStringFactory.GetWritableConnectionStrings()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStore-1.RawBlobStorageEventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStore-1.RawBlobStorageEventStore.html",
    "title": "Class BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore Inheritance System.Object StorageStore < EventData , Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer > BlobStorageStore < EventData > BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore Inherited Members BlobStorageStore<EventData>.GetEnumerator() BlobStorageStore<EventData>.Expression BlobStorageStore<EventData>.ElementType BlobStorageStore<EventData>.Provider BlobStorageStore<EventData>.AsyncSaveData<TResult>(EventData, Func<EventData, CloudBlockBlob, TResult>, Func<EventData, String>) BlobStorageStore<EventData>.Add(EventData) BlobStorageStore<EventData>.Destroy(EventData) BlobStorageStore<EventData>.RemoveAll() BlobStorageStore<EventData>.Update(EventData) BlobStorageStore<EventData>.CreateSource(CloudStorageAccount, String, Boolean) BlobStorageStore<EventData>.OpenStreamsForReading(Func<CloudBlockBlob, Boolean>, String, String) BlobStorageStore<EventData>.GetBlobReference(CloudBlobContainer, String) BlobStorageStore<EventData>.GetByName(String) BlobStorageStore<EventData>.GetByFolder(String) StorageStore<EventData, CloudBlobContainer>.WritableCollection StorageStore<EventData, CloudBlobContainer>.ReadableStorageAccount StorageStore<EventData, CloudBlobContainer>.Logger StorageStore<EventData, CloudBlobContainer>.GetContainerName StorageStore<EventData, CloudBlobContainer>.IsContainerPublic StorageStore<EventData, CloudBlobContainer>.DefaultSettings StorageStore<EventData, CloudBlobContainer>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<EventData, CloudBlobContainer>.GetEnumerator() StorageStore<EventData, CloudBlobContainer>.IEnumerable.GetEnumerator() StorageStore<EventData, CloudBlobContainer>.Expression StorageStore<EventData, CloudBlobContainer>.ElementType StorageStore<EventData, CloudBlobContainer>.Provider StorageStore<EventData, CloudBlobContainer>.Dispose() StorageStore<EventData, CloudBlobContainer>.Add(EventData) StorageStore<EventData, CloudBlobContainer>.Add(IEnumerable<EventData>) StorageStore<EventData, CloudBlobContainer>.Destroy(EventData) StorageStore<EventData, CloudBlobContainer>.RemoveAll() StorageStore<EventData, CloudBlobContainer>.Update(EventData) StorageStore<EventData, CloudBlobContainer>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<EventData, CloudBlobContainer>.GetSafeSourceName(String) StorageStore<EventData, CloudBlobContainer>.GetSafeSourceName(String, Boolean) StorageStore<EventData, CloudBlobContainer>.AzureStorageRetryPolicy StorageStore<EventData, CloudBlobContainer>.Deserialise(Stream) StorageStore<EventData, CloudBlobContainer>.Deserialise(String) StorageStore<EventData, CloudBlobContainer>.Serialise(EventData) StorageStore<EventData, CloudBlobContainer>.GetSerialisationSettings() StorageStore<EventData, CloudBlobContainer>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class RawBlobStorageEventStore : BlobStorageStore<EventData>, IEnumerable<EventData>, IEnumerable Constructors RawBlobStorageEventStore(ILogger, IBlobStorageStoreConnectionStringFactory) Initializes a new instance of the BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore class using the specified container. Declaration public RawBlobStorageEventStore(ILogger logger, IBlobStorageStoreConnectionStringFactory blobStorageEventStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IBlobStorageStoreConnectionStringFactory blobStorageEventStoreConnectionStringFactory Methods AddToCorrelationFolder(EventData) Declaration public void AddToCorrelationFolder(EventData data) Parameters Type Name Description EventData data Extension Methods SqlDataStoreExtensions.Single<TEntity, TDbEntity>(IEnumerable<TEntity>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.EventDataTableEntity-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.EventDataTableEntity-1.html",
    "title": "Class EventDataTableEntity<TEventData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventDataTableEntity<TEventData> Inheritance System.Object Microsoft.WindowsAzure.Storage.Table.TableEntity TableEntity <TEventData> EventDataTableEntity<TEventData> Inherited Members TableEntity<TEventData>.DefaultSettings TableEntity<TEventData>.Deserialise(String) TableEntity<TEventData>.Serialise(TEventData) TableEntity<TEventData>.GetSerialisationSettings() TableEntity<TEventData>.GetSerialiser() Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadEntity(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadUserObject(System.Object, System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteUserObject(System.Object, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey Microsoft.WindowsAzure.Storage.Table.TableEntity.Timestamp Microsoft.WindowsAzure.Storage.Table.TableEntity.ETag Microsoft.WindowsAzure.Storage.Table.TableEntity.DisableCompiledSerializers Microsoft.WindowsAzure.Storage.Table.TableEntity.DisablePropertyResolverCache System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class EventDataTableEntity<TEventData> : TableEntity<TEventData>, ITableEntity, IEventDataTableEntity<TEventData> where TEventData : EventData Type Parameters Name Description TEventData Constructors EventDataTableEntity() Declaration public EventDataTableEntity() EventDataTableEntity(TEventData, Boolean) Declaration public EventDataTableEntity(TEventData eventData, bool isCorrelationIdTableStorageStore = false) Parameters Type Name Description TEventData eventData System.Boolean isCorrelationIdTableStorageStore Properties EventData Declaration [DataMember] public TEventData EventData { get; set; } Property Value Type Description TEventData Implements IEventDataTableEntity<TEventData>.EventData EventDataContent Declaration [DataMember] public string EventDataContent { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.EntityTableEntity-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.EntityTableEntity-1.html",
    "title": "Class EntityTableEntity<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EntityTableEntity<TEntity> Inheritance System.Object Microsoft.WindowsAzure.Storage.Table.TableEntity TableEntity <TEntity> EntityTableEntity<TEntity> Inherited Members TableEntity<TEntity>.DefaultSettings TableEntity<TEntity>.Deserialise(String) TableEntity<TEntity>.Serialise(TEntity) TableEntity<TEntity>.GetSerialisationSettings() TableEntity<TEntity>.GetSerialiser() Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadEntity(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadUserObject(System.Object, System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteUserObject(System.Object, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey Microsoft.WindowsAzure.Storage.Table.TableEntity.Timestamp Microsoft.WindowsAzure.Storage.Table.TableEntity.ETag Microsoft.WindowsAzure.Storage.Table.TableEntity.DisableCompiledSerializers Microsoft.WindowsAzure.Storage.Table.TableEntity.DisablePropertyResolverCache System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class EntityTableEntity<TEntity> : TableEntity<TEntity>, ITableEntity, IEntityTableEntity<TEntity> where TEntity : IEntity Type Parameters Name Description TEntity Constructors EntityTableEntity() Declaration public EntityTableEntity() EntityTableEntity(TEntity) Declaration public EntityTableEntity(TEntity entity) Parameters Type Name Description TEntity entity Properties Entity Declaration [DataMember] public TEntity Entity { get; set; } Property Value Type Description TEntity Implements IEntityTableEntity<TEntity>.Entity EntityContent Declaration [DataMember] public string EntityContent { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.DataStores Classes BlobStorageDataStore<TData> BlobStorageDataStoreConnectionStringFactory TableStorageDataStore<TData> A TableStorageStore<TData, TCollectionItemData> that uses Azure Storage for storage. TableStorageDataStoreConnectionStringFactory A factory for getting connection strings and container names for IDataStore<TData> access. This factory supports reading and writing from separate storage accounts. Specifically you can have as many different storage accounts as you want to configure when writing. This allows for manual mirroring of data while reading from the fastest/closest location possible. Interfaces IBlobStorageDataStoreConnectionStringFactory ITableStorageDataStoreConnectionStringFactory"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.BlobStorageDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.BlobStorageDataStoreConnectionStringFactory.html",
    "title": "Class BlobStorageDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageDataStoreConnectionStringFactory Inheritance System.Object BlobStorageDataStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageDataStoreConnectionStringFactory : IBlobStorageDataStoreConnectionStringFactory, IBlobStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Constructors BlobStorageDataStoreConnectionStringFactory(IConfigurationManager, ILogger) Declaration public BlobStorageDataStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields BlobStorageBaseContainerNameKey Declaration public static string BlobStorageBaseContainerNameKey Field Value Type Description System.String BlobStorageDataStoreConnectionStringKey Declaration public static string BlobStorageDataStoreConnectionStringKey Field Value Type Description System.String BlobStorageIsContainerPublicKey Declaration public static string BlobStorageIsContainerPublicKey Field Value Type Description System.String BlobStorageReadableDataStoreConnectionStringKey Declaration public static string BlobStorageReadableDataStoreConnectionStringKey Field Value Type Description System.String BlobStorageWritableDataStoreConnectionStringKey Declaration public static string BlobStorageWritableDataStoreConnectionStringKey Field Value Type Description System.String Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetBaseContainerName() Declaration public virtual string GetBaseContainerName() Returns Type Description System.String Implements IBlobStorageStoreConnectionStringFactory.GetBaseContainerName() GetContainerName<TData>() Declaration public virtual string GetContainerName<TData>()where TData : Entity Returns Type Description System.String Type Parameters Name Description TData Implements IBlobStorageDataStoreConnectionStringFactory.GetContainerName<TData>() GetEntityName<TData>() Declaration public virtual string GetEntityName<TData>()where TData : Entity Returns Type Description System.String Type Parameters Name Description TData Implements IBlobStorageDataStoreConnectionStringFactory.GetEntityName<TData>() GetReadableConnectionString() Declaration public virtual string GetReadableConnectionString() Returns Type Description System.String Implements IStorageStoreConnectionStringFactory.GetReadableConnectionString() GetWritableConnectionStrings() Declaration public virtual IEnumerable<string> GetWritableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Implements IStorageStoreConnectionStringFactory.GetWritableConnectionStrings() IsContainerPublic<TData>() Declaration public virtual bool IsContainerPublic<TData>()where TData : Entity Returns Type Description System.Boolean Type Parameters Name Description TData Implements IBlobStorageDataStoreConnectionStringFactory.IsContainerPublic<TData>()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.BlobStorageDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.BlobStorageDataStore-1.html",
    "title": "Class BlobStorageDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageDataStore<TData> Inheritance System.Object StorageStore <TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer > BlobStorageStore <TData> BlobStorageDataStore<TData> Inherited Members BlobStorageStore<TData>.GetEnumerator() BlobStorageStore<TData>.Expression BlobStorageStore<TData>.ElementType BlobStorageStore<TData>.Provider BlobStorageStore<TData>.AsyncSaveData<TResult>(TData, Func<TData, CloudBlockBlob, TResult>, Func<TData, String>) BlobStorageStore<TData>.Add(TData) BlobStorageStore<TData>.Destroy(TData) BlobStorageStore<TData>.RemoveAll() BlobStorageStore<TData>.Update(TData) BlobStorageStore<TData>.CreateSource(CloudStorageAccount, String, Boolean) BlobStorageStore<TData>.OpenStreamsForReading(Func<CloudBlockBlob, Boolean>, String, String) BlobStorageStore<TData>.GetBlobReference(CloudBlobContainer, String) BlobStorageStore<TData>.GetByName(String) BlobStorageStore<TData>.GetByFolder(String) StorageStore<TData, CloudBlobContainer>.WritableCollection StorageStore<TData, CloudBlobContainer>.ReadableStorageAccount StorageStore<TData, CloudBlobContainer>.Logger StorageStore<TData, CloudBlobContainer>.GetContainerName StorageStore<TData, CloudBlobContainer>.IsContainerPublic StorageStore<TData, CloudBlobContainer>.DefaultSettings StorageStore<TData, CloudBlobContainer>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<TData, CloudBlobContainer>.GetEnumerator() StorageStore<TData, CloudBlobContainer>.IEnumerable.GetEnumerator() StorageStore<TData, CloudBlobContainer>.Expression StorageStore<TData, CloudBlobContainer>.ElementType StorageStore<TData, CloudBlobContainer>.Provider StorageStore<TData, CloudBlobContainer>.Dispose() StorageStore<TData, CloudBlobContainer>.Add(TData) StorageStore<TData, CloudBlobContainer>.Add(IEnumerable<TData>) StorageStore<TData, CloudBlobContainer>.Destroy(TData) StorageStore<TData, CloudBlobContainer>.RemoveAll() StorageStore<TData, CloudBlobContainer>.Update(TData) StorageStore<TData, CloudBlobContainer>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<TData, CloudBlobContainer>.GetSafeSourceName(String) StorageStore<TData, CloudBlobContainer>.GetSafeSourceName(String, Boolean) StorageStore<TData, CloudBlobContainer>.AzureStorageRetryPolicy StorageStore<TData, CloudBlobContainer>.Deserialise(Stream) StorageStore<TData, CloudBlobContainer>.Deserialise(String) StorageStore<TData, CloudBlobContainer>.Serialise(TData) StorageStore<TData, CloudBlobContainer>.GetSerialisationSettings() StorageStore<TData, CloudBlobContainer>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageDataStore<TData> : BlobStorageStore<TData>, IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData Constructors BlobStorageDataStore(ILogger, IBlobStorageDataStoreConnectionStringFactory) Initializes a new instance of the Cqrs.Azure.BlobStorage class using the specified container. Declaration public BlobStorageDataStore(ILogger logger, IBlobStorageDataStoreConnectionStringFactory blobStorageDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IBlobStorageDataStoreConnectionStringFactory blobStorageDataStoreConnectionStringFactory Methods GetByFolder() Declaration public virtual IEnumerable<TData> GetByFolder() Returns Type Description System.Collections.Generic.IEnumerable <TData> Remove(TData) Will mark the data as logically (or soft). Declaration public void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.BlobStorageStoreExtensions.html",
    "title": "Class BlobStorageStoreExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageStoreExtensions Inheritance System.Object BlobStorageStoreExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public static class BlobStorageStoreExtensions Methods GetByFolder<TData>(IDataStore<TData>) Declaration public static IEnumerable<TData> GetByFolder<TData>(this IDataStore<TData> datastore)where TData : Entity Parameters Type Name Description IDataStore <TData> datastore Returns Type Description System.Collections.Generic.IEnumerable <TData> Type Parameters Name Description TData GetByFolder<TData>(IDataStore<TData>, String) Declaration public static IEnumerable<TData> GetByFolder<TData>(this IDataStore<TData> datastore, string folderName) Parameters Type Name Description IDataStore <TData> datastore System.String folderName Returns Type Description System.Collections.Generic.IEnumerable <TData> Type Parameters Name Description TData GetByName<TData>(IDataStore<TData>, Guid) Declaration public static TData GetByName<TData>(this IDataStore<TData> datastore, Guid id)where TData : Entity, new () Parameters Type Name Description IDataStore <TData> datastore System.Guid id Returns Type Description TData Type Parameters Name Description TData GetByName<TData>(IDataStore<TData>, String) Declaration public static TData GetByName<TData>(this IDataStore<TData> datastore, string name) Parameters Type Name Description IDataStore <TData> datastore System.String name Returns Type Description TData Type Parameters Name Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.BlobStorageStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.BlobStorageStore-1.html",
    "title": "Class BlobStorageStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageStore<TData> Inheritance System.Object StorageStore <TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer > BlobStorageStore<TData> BlobStorageDataStore<TData> BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore Inherited Members StorageStore<TData, CloudBlobContainer>.WritableCollection StorageStore<TData, CloudBlobContainer>.ReadableStorageAccount StorageStore<TData, CloudBlobContainer>.Logger StorageStore<TData, CloudBlobContainer>.GetContainerName StorageStore<TData, CloudBlobContainer>.IsContainerPublic StorageStore<TData, CloudBlobContainer>.DefaultSettings StorageStore<TData, CloudBlobContainer>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<TData, CloudBlobContainer>.GetEnumerator() StorageStore<TData, CloudBlobContainer>.IEnumerable.GetEnumerator() StorageStore<TData, CloudBlobContainer>.Expression StorageStore<TData, CloudBlobContainer>.ElementType StorageStore<TData, CloudBlobContainer>.Provider StorageStore<TData, CloudBlobContainer>.Dispose() StorageStore<TData, CloudBlobContainer>.Add(TData) StorageStore<TData, CloudBlobContainer>.Add(IEnumerable<TData>) StorageStore<TData, CloudBlobContainer>.Destroy(TData) StorageStore<TData, CloudBlobContainer>.RemoveAll() StorageStore<TData, CloudBlobContainer>.Update(TData) StorageStore<TData, CloudBlobContainer>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<TData, CloudBlobContainer>.GetSafeSourceName(String) StorageStore<TData, CloudBlobContainer>.GetSafeSourceName(String, Boolean) StorageStore<TData, CloudBlobContainer>.AzureStorageRetryPolicy StorageStore<TData, CloudBlobContainer>.Deserialise(Stream) StorageStore<TData, CloudBlobContainer>.Deserialise(String) StorageStore<TData, CloudBlobContainer>.Serialise(TData) StorageStore<TData, CloudBlobContainer>.GetSerialisationSettings() StorageStore<TData, CloudBlobContainer>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageStore<TData> : StorageStore<TData, CloudBlobContainer>, IEnumerable<TData>, IEnumerable Type Parameters Name Description TData Constructors BlobStorageStore(ILogger) Initializes a new instance of the BlobStorageStore<TData> class using the specified container. Declaration public BlobStorageStore(ILogger logger) Parameters Type Name Description cdmdotnet.Logging.ILogger logger Properties ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public override Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public override Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.Expression Provider Gets the query provider that is associated with this data source. Declaration public override IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.Provider Methods Add(TData) Declaration public override void Add(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.Add(TData) AsyncSaveData<TResult>(TData, Func<TData, CloudBlockBlob, TResult>, Func<TData, String>) Declaration protected virtual void AsyncSaveData<TResult>(TData data, Func<TData, CloudBlockBlob, TResult> function, Func<TData, string> customFilenameFunction = null) Parameters Type Name Description TData data System.Func <TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob , TResult> function System.Func <TData, System.String > customFilenameFunction Type Parameters Name Description TResult CreateSource(CloudStorageAccount, String, Boolean) Creates a Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer with the specified name containerName if it doesn't already exist. Declaration protected override CloudBlobContainer CreateSource(CloudStorageAccount storageAccount, string containerName, bool isPublic = true) Parameters Type Name Description Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount The storage account to create the Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer is System.String containerName The name of the Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer . System.Boolean isPublic Whether or not this Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer is publicly accessible. Returns Type Description Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean) Destroy(TData) Declaration public override void Destroy(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.Destroy(TData) GetBlobReference(CloudBlobContainer, String) Gets a reference to a block blob in the container. Declaration protected virtual CloudBlockBlob GetBlobReference(CloudBlobContainer container, string blobName) Parameters Type Name Description Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer container The container to get the reference from System.String blobName The name of the blob. Returns Type Description Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob A reference to a block blob. GetByFolder(String) Declaration public virtual IEnumerable<TData> GetByFolder(string folderName) Parameters Type Name Description System.String folderName Returns Type Description System.Collections.Generic.IEnumerable <TData> GetByName(String) Declaration public virtual TData GetByName(string name) Parameters Type Name Description System.String name Returns Type Description TData GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.GetEnumerator() OpenStreamsForReading(Func<CloudBlockBlob, Boolean>, String, String) Opens stream for reading from a block blob. Declaration protected virtual IEnumerable<Stream> OpenStreamsForReading(Func<CloudBlockBlob, bool> predicate = null, string blobPrefix = null, string folderName = null) Parameters Type Name Description System.Func < Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob , System.Boolean > predicate System.String blobPrefix System.String folderName Returns Type Description System.Collections.Generic.IEnumerable < System.IO.Stream > RemoveAll() Declaration public override void RemoveAll() Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.RemoveAll() Update(TData) Declaration public override void Update(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer>.Update(TData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenResolver.html",
    "title": "Class SingleSignOnTokenResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenResolver Resolves parameter types when serialising with WCF of System.Type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn and SingleSignOnTokenWithUserRsnAndCompanyRsn Inheritance System.Object SingleSignOnTokenResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class SingleSignOnTokenResolver : ISingleSignOnTokenResolver, IServiceParameterResolver Methods ResolveName(String, String, Type, DataContractResolver) Returns the System.Type if the typeName is resolvable or if it is of type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn and SingleSignOnTokenWithUserRsnAndCompanyRsn Declaration public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName System.String typeNamespace System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver Returns Type Description System.Type Implements IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) Indicates if the provided dataContractType is of type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn , SingleSignOnTokenWithUserRsnAndCompanyRsn OR if it is other resolvable. Declaration public virtual bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver System.Xml.XmlDictionaryString typeName System.Xml.XmlDictionaryString typeNamespace Returns Type Description System.Boolean Implements IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenFactory-1.html",
    "title": "Class SingleSignOnTokenFactory<TSingleSignOnToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenFactory<TSingleSignOnToken> A factory for creating new authentication tokens of type TSingleSignOnToken . Inheritance System.Object SingleSignOnTokenFactory<TSingleSignOnToken> DefaultSingleSignOnTokenFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class SingleSignOnTokenFactory<TSingleSignOnToken> : ISingleSignOnTokenFactory<TSingleSignOnToken> where TSingleSignOnToken : ISingleSignOnToken, new () Type Parameters Name Description TSingleSignOnToken The System.Type of ISingleSignOnToken . Methods CreateNew(Int32) Create a new TSingleSignOnToken . Declaration public virtual TSingleSignOnToken CreateNew(int timeoutInMinutes = 360) Parameters Type Name Description System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow Returns Type Description TSingleSignOnToken Implements ISingleSignOnTokenFactory<TSingleSignOnToken>.CreateNew(Int32) RenewTokenExpiry(TSingleSignOnToken, Int32) Renew the value of TimeOfExpiry . Declaration public virtual TSingleSignOnToken RenewTokenExpiry(TSingleSignOnToken token, int timeoutInMinutes = 360) Parameters Type Name Description TSingleSignOnToken token The ISingleSignOnToken to renew. System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow Returns Type Description TSingleSignOnToken Implements ISingleSignOnTokenFactory<TSingleSignOnToken>.RenewTokenExpiry(TSingleSignOnToken, Int32)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnToken.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnToken.html",
    "title": "Class SingleSignOnToken | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnToken An authentication token with expiry and an issue time information. Inheritance System.Object SingleSignOnToken SingleSignOnTokenWithCompanyRsn SingleSignOnTokenWithUserRsn SingleSignOnTokenWithUserRsnAndCompanyRsn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class SingleSignOnToken : ISingleSignOnToken Properties DateIssued The System.DateTime this token was issued. Declaration [Required] [DataMember] public DateTime DateIssued { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.DateIssued TimeOfExpiry The System.DateTime this token should expire. Declaration [Required] [DataMember] public DateTime TimeOfExpiry { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.TimeOfExpiry Token The authentication token. Declaration [Required] [DataMember] public string Token { get; set; } Property Value Type Description System.String Implements ISingleSignOnToken.Token Methods Serialise() Returns Token . Declaration public virtual string Serialise() Returns Type Description System.String Token . Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithUserRsnAndCompanyRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithUserRsnAndCompanyRsn.html",
    "title": "Interface ISingleSignOnTokenWithUserRsnAndCompanyRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenWithUserRsnAndCompanyRsn This is a ISingleSignOnTokenWithCompanyRsn and ISingleSignOnTokenWithUserRsn Inherited Members ISingleSignOnTokenWithCompanyRsn.CompanyRsn ISingleSignOnTokenWithUserRsn.UserRsn ISingleSignOnToken.Token ISingleSignOnToken.TimeOfExpiry ISingleSignOnToken.DateIssued ISingleSignOnToken.Serialise() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public interface ISingleSignOnTokenWithUserRsnAndCompanyRsn : ISingleSignOnTokenWithCompanyRsn, ISingleSignOnTokenWithUserRsn, ISingleSignOnToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.IDefaultSingleSignOnTokenFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.IDefaultSingleSignOnTokenFactory.html",
    "title": "Interface IDefaultSingleSignOnTokenFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IDefaultSingleSignOnTokenFactory A Factory for creating new authentication tokens of type SingleSignOnToken Inherited Members ISingleSignOnTokenFactory<SingleSignOnToken>.CreateNew(Int32) ISingleSignOnTokenFactory<SingleSignOnToken>.RenewTokenExpiry(SingleSignOnToken, Int32) Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/SingleSignOn/TokenFactory\")] public interface IDefaultSingleSignOnTokenFactory : ISingleSignOnTokenFactory<SingleSignOnToken> Methods RenewTokenExpiry(ISingleSignOnToken, Int32) Renew the value of TimeOfExpiry . Declaration [OperationContract] ISingleSignOnToken RenewTokenExpiry(ISingleSignOnToken token, int timeoutInMinutes = 360) Parameters Type Name Description ISingleSignOnToken token The ISingleSignOnToken to renew. System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow Returns Type Description ISingleSignOnToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.IAuthenticationTokenHelper-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.IAuthenticationTokenHelper-1.html",
    "title": "Interface IAuthenticationTokenHelper<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAuthenticationTokenHelper<TAuthenticationToken> A helper for setting and retrieving authentication tokens of type TAuthenticationToken . Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/SingleSignOn/TokenHelper\")] public interface IAuthenticationTokenHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Methods GetAuthenticationToken() Get the current TAuthenticationToken for the current context/request. Declaration [OperationContract] TAuthenticationToken GetAuthenticationToken() Returns Type Description TAuthenticationToken SetAuthenticationToken(TAuthenticationToken) Set the provided token for the current context/request. Declaration [OperationContract] TAuthenticationToken SetAuthenticationToken(TAuthenticationToken token) Parameters Type Name Description TAuthenticationToken token Returns Type Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.DefaultSingleSignOnTokenFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.DefaultSingleSignOnTokenFactory.html",
    "title": "Class DefaultSingleSignOnTokenFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DefaultSingleSignOnTokenFactory A Factory for creating new authentication tokens of type SingleSignOnToken Inheritance System.Object SingleSignOnTokenFactory < SingleSignOnToken > DefaultSingleSignOnTokenFactory Inherited Members SingleSignOnTokenFactory<SingleSignOnToken>.CreateNew(Int32) SingleSignOnTokenFactory<SingleSignOnToken>.RenewTokenExpiry(SingleSignOnToken, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class DefaultSingleSignOnTokenFactory : SingleSignOnTokenFactory<SingleSignOnToken>, IDefaultSingleSignOnTokenFactory, ISingleSignOnTokenFactory<SingleSignOnToken> Methods RenewTokenExpiry<TSingleSignOnToken>(TSingleSignOnToken, Int32) Renew the value of TimeOfExpiry . Declaration public virtual TSingleSignOnToken RenewTokenExpiry<TSingleSignOnToken>(TSingleSignOnToken token, int timeoutInMinutes = 360)where TSingleSignOnToken : ISingleSignOnToken Parameters Type Name Description TSingleSignOnToken token The ISingleSignOnToken to renew. System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow . Returns Type Description TSingleSignOnToken Type Parameters Name Description TSingleSignOnToken Explicit Interface Implementations IDefaultSingleSignOnTokenFactory.RenewTokenExpiry(ISingleSignOnToken, Int32) Renew the value of TimeOfExpiry . Declaration ISingleSignOnToken IDefaultSingleSignOnTokenFactory.RenewTokenExpiry(ISingleSignOnToken token, int timeoutInMinutes = 360) Parameters Type Name Description ISingleSignOnToken token The ISingleSignOnToken to renew. System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow . Returns Type Description ISingleSignOnToken Implements IDefaultSingleSignOnTokenFactory.RenewTokenExpiry(ISingleSignOnToken, Int32)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.DefaultAuthenticationTokenHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.DefaultAuthenticationTokenHelper.html",
    "title": "Class DefaultAuthenticationTokenHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DefaultAuthenticationTokenHelper A helper for setting and retrieving authentication tokens of type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn , SingleSignOnTokenWithUserRsnAndCompanyRsn System.Int32 , System.Guid or System.String . Inheritance System.Object AuthenticationTokenHelper < SingleSignOnToken > DefaultAuthenticationTokenHelper Inherited Members AuthenticationTokenHelper<SingleSignOnToken>.CacheKey AuthenticationTokenHelper<SingleSignOnToken>.Cache AuthenticationTokenHelper<SingleSignOnToken>.SetAuthenticationToken(SingleSignOnToken) AuthenticationTokenHelper<SingleSignOnToken>.GetAuthenticationToken() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class DefaultAuthenticationTokenHelper : AuthenticationTokenHelper<SingleSignOnToken>, IAuthenticationTokenHelper<SingleSignOnToken>, IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsn>, IAuthenticationTokenHelper<SingleSignOnTokenWithCompanyRsn>, IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsnAndCompanyRsn>, IAuthenticationTokenHelper<int>, IAuthenticationTokenHelper<Guid>, IAuthenticationTokenHelper<string> Constructors DefaultAuthenticationTokenHelper(IContextItemCollectionFactory) Instantiate a new instance of DefaultAuthenticationTokenHelper Declaration public DefaultAuthenticationTokenHelper(IContextItemCollectionFactory factory) Parameters Type Name Description cdmdotnet.StateManagement.IContextItemCollectionFactory factory Methods SetAuthenticationToken(SingleSignOnTokenWithCompanyRsn) Set the provided token for the current context/request. Declaration public SingleSignOnTokenWithCompanyRsn SetAuthenticationToken(SingleSignOnTokenWithCompanyRsn token) Parameters Type Name Description SingleSignOnTokenWithCompanyRsn token Returns Type Description SingleSignOnTokenWithCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(SingleSignOnTokenWithUserRsn) Set the provided token for the current context/request. Declaration public SingleSignOnTokenWithUserRsn SetAuthenticationToken(SingleSignOnTokenWithUserRsn token) Parameters Type Name Description SingleSignOnTokenWithUserRsn token Returns Type Description SingleSignOnTokenWithUserRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(SingleSignOnTokenWithUserRsnAndCompanyRsn) Set the provided token for the current context/request. Declaration public SingleSignOnTokenWithUserRsnAndCompanyRsn SetAuthenticationToken(SingleSignOnTokenWithUserRsnAndCompanyRsn token) Parameters Type Name Description SingleSignOnTokenWithUserRsnAndCompanyRsn token Returns Type Description SingleSignOnTokenWithUserRsnAndCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(Guid) Set the provided token for the current context/request. Declaration public Guid SetAuthenticationToken(Guid token) Parameters Type Name Description System.Guid token Returns Type Description System.Guid Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(Int32) Set the provided token for the current context/request. Declaration public int SetAuthenticationToken(int token) Parameters Type Name Description System.Int32 token Returns Type Description System.Int32 Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(String) Set the provided token for the current context/request. Declaration public string SetAuthenticationToken(string token) Parameters Type Name Description System.String token Returns Type Description System.String Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) Explicit Interface Implementations IAuthenticationTokenHelper<SingleSignOnTokenWithCompanyRsn>.GetAuthenticationToken() Get the current SingleSignOnTokenWithCompanyRsn for the current context/request. Declaration SingleSignOnTokenWithCompanyRsn IAuthenticationTokenHelper<SingleSignOnTokenWithCompanyRsn>.GetAuthenticationToken() Returns Type Description SingleSignOnTokenWithCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsn>.GetAuthenticationToken() Get the current SingleSignOnTokenWithUserRsn for the current context/request. Declaration SingleSignOnTokenWithUserRsn IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsn>.GetAuthenticationToken() Returns Type Description SingleSignOnTokenWithUserRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsnAndCompanyRsn>.GetAuthenticationToken() Get the current SingleSignOnTokenWithUserRsnAndCompanyRsn for the current context/request. Declaration SingleSignOnTokenWithUserRsnAndCompanyRsn IAuthenticationTokenHelper<SingleSignOnTokenWithUserRsnAndCompanyRsn>.GetAuthenticationToken() Returns Type Description SingleSignOnTokenWithUserRsnAndCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<Guid>.GetAuthenticationToken() Get the current System.Guid for the current context/request. Declaration Guid IAuthenticationTokenHelper<Guid>.GetAuthenticationToken() Returns Type Description System.Guid Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<Int32>.GetAuthenticationToken() Get the current System.Int32 for the current context/request. Declaration int IAuthenticationTokenHelper<int>.GetAuthenticationToken() Returns Type Description System.Int32 Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<String>.GetAuthenticationToken() Get the current System.String for the current context/request. Declaration string IAuthenticationTokenHelper<string>.GetAuthenticationToken() Returns Type Description System.String Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Sagas | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Sagas Classes ConversationReportProcessManager A ISaga<TAuthenticationToken> that acts as a process manager responding to several events and raising a command when a certain criteria is met. ConversationReportProcessManagerEventHandlers An IEventHandler that passes the IEvent<TAuthenticationToken> instances it receives to ConversationReportProcessManager"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.ConversationReportProcessManagerEventHandlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.ConversationReportProcessManagerEventHandlers.html",
    "title": "Class ConversationReportProcessManagerEventHandlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConversationReportProcessManagerEventHandlers An IEventHandler that passes the IEvent<TAuthenticationToken> instances it receives to ConversationReportProcessManager Inheritance System.Object ConversationReportProcessManagerEventHandlers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Sagas Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class ConversationReportProcessManagerEventHandlers : IEventHandler<Guid, HelloWorldSaid>, IMessageHandler<HelloWorldSaid>, IEventHandler<Guid, HelloWorldRepliedTo>, IMessageHandler<HelloWorldRepliedTo>, IEventHandler<Guid, ConversationEnded>, IMessageHandler<ConversationEnded>, IEventHandler, IHandler Constructors ConversationReportProcessManagerEventHandlers(IAkkaSagaResolver) Instantiates the ConversationReportProcessManagerEventHandlers class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public ConversationReportProcessManagerEventHandlers(IAkkaSagaResolver sagaResolver) Parameters Type Name Description IAkkaSagaResolver sagaResolver Properties SagaResolver Resolves Akka.Net actor based ISaga<TAuthenticationToken> Declaration protected IAkkaSagaResolver SagaResolver { get; } Property Value Type Description IAkkaSagaResolver Methods Handle(ConversationEnded) Responds to the provided message . Declaration public void Handle(ConversationEnded message) Parameters Type Name Description ConversationEnded message The ConversationEnded to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage) Handle(HelloWorldRepliedTo) Responds to the provided message . Declaration public void Handle(HelloWorldRepliedTo message) Parameters Type Name Description HelloWorldRepliedTo message The HelloWorldRepliedTo to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage) Handle(HelloWorldSaid) Responds to the provided message . Declaration public void Handle(HelloWorldSaid message) Parameters Type Name Description HelloWorldSaid message The HelloWorldSaid to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage) HandleEvent(IEvent<Guid>) Responds to the provided message . Declaration protected virtual void HandleEvent(IEvent<Guid> message) Parameters Type Name Description IEvent < System.Guid > message The IEvent<TAuthenticationToken> to respond to or \"handle\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.ConversationReportProcessManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Sagas.ConversationReportProcessManager.html",
    "title": "Class ConversationReportProcessManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConversationReportProcessManager A ISaga<TAuthenticationToken> that acts as a process manager responding to several events and raising a command when a certain criteria is met. Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaSaga < System.Guid > ConversationReportProcessManager Inherited Members AkkaSaga<Guid>.UnitOfWork AkkaSaga<Guid>.Repository AkkaSaga<Guid>.Logger AkkaSaga<Guid>.CorrelationIdHelper AkkaSaga<Guid>.AuthenticationTokenHelper AkkaSaga<Guid>.Id AkkaSaga<Guid>.Version AkkaSaga<Guid>.CommandPublisher AkkaSaga<Guid>.PreStart() AkkaSaga<Guid>.Execute<TEvent>(Action<TEvent>, TEvent) AkkaSaga<Guid>.GetUncommittedChanges() AkkaSaga<Guid>.MarkChangesAsCommitted() AkkaSaga<Guid>.LoadFromHistory(IEnumerable<ISagaEvent<Guid>>) AkkaSaga<Guid>.ApplyChange(ISagaEvent<Guid>) AkkaSaga<Guid>.ApplyChange(IEvent<Guid>) AkkaSaga<Guid>.SetId(ISagaEvent<Guid>) AkkaSaga<Guid>.Apply(ISagaEvent<Guid>) Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Sagas Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class ConversationReportProcessManager : AkkaSaga<Guid>, IInternalActor, IInitializableActor, ISaga<Guid> Constructors ConversationReportProcessManager(IDependencyResolver, ILogger, Guid) Instantiates a new instance of ConversationReportProcessManager . Declaration public ConversationReportProcessManager(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger System.Guid rsn Properties DependencyResolver The IDependencyResolver that resolves things. Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver IsLogicallyDeleted Indicates if this ISaga<TAuthenticationToken> has been deleted. Declaration public bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Rsn The Id Declaration public Guid Rsn { get; } Property Value Type Description System.Guid Methods Apply(ConversationEnded) Applies the event to itself. Declaration public virtual void Apply(ConversationEnded event) Parameters Type Name Description ConversationEnded event The ConversationEnded to apply Apply(HelloWorldRepliedTo) Applies the event to itself. Declaration public virtual void Apply(HelloWorldRepliedTo event) Parameters Type Name Description HelloWorldRepliedTo event The HelloWorldRepliedTo to apply Apply(HelloWorldSaid) Applies the event to itself. Declaration public virtual void Apply(HelloWorldSaid event) Parameters Type Name Description HelloWorldSaid event The HelloWorldSaid to apply GenerateCommand() Generates and publishes a ICommand<TAuthenticationToken> . Declaration protected virtual void GenerateCommand() Handle(ConversationEnded) Responds to the provided event . Declaration public virtual void Handle(ConversationEnded event) Parameters Type Name Description ConversationEnded event The ConversationEnded to respond to or \"handle\" Handle(HelloWorldRepliedTo) Responds to the provided event . Declaration public virtual void Handle(HelloWorldRepliedTo event) Parameters Type Name Description HelloWorldRepliedTo event The HelloWorldRepliedTo to respond to or \"handle\" Handle(HelloWorldSaid) Responds to the provided event . Declaration public virtual void Handle(HelloWorldSaid event) Parameters Type Name Description HelloWorldSaid event The HelloWorldSaid to respond to or \"handle\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Events Classes ConversationEnded The conversation has ended. HelloWorldRepliedTo Someone replied to someone saying \"HelloWorld\" HelloWorldSaid Someone said \"HelloWorld\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToSendEndConversationCommandEventHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToSendEndConversationCommandEventHandler.html",
    "title": "Class HelloWorldRepliedToSendEndConversationCommandEventHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldRepliedToSendEndConversationCommandEventHandler Handles the HelloWorldRepliedTo and sends a EndConversationCommand . Inheritance System.Object HelloWorldRepliedToSendEndConversationCommandEventHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class HelloWorldRepliedToSendEndConversationCommandEventHandler : IEventHandler<Guid, HelloWorldRepliedTo>, IMessageHandler<HelloWorldRepliedTo>, IEventHandler, IHandler Constructors HelloWorldRepliedToSendEndConversationCommandEventHandler(IAkkaAggregateResolver) Instantiates the HelloWorldRepliedToSendEndConversationCommandEventHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public HelloWorldRepliedToSendEndConversationCommandEventHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(HelloWorldRepliedTo) Responds to the provided event passing the event to an Akka.Net actor. Declaration public void Handle(HelloWorldRepliedTo event) Parameters Type Name Description HelloWorldRepliedTo event The HelloWorldRepliedTo to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor.html",
    "title": "Class HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor An Akka.Net based IEventHandler that handles the HelloWorldRepliedTo . Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaEventHandler < System.Guid > HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor Inherited Members AkkaEventHandler<Guid>.Logger AkkaEventHandler<Guid>.CorrelationIdHelper AkkaEventHandler<Guid>.AuthenticationTokenHelper AkkaEventHandler<Guid>.Execute<TEvent>(Action<TEvent>, TEvent) Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class Actor : AkkaEventHandler<Guid>, IInternalActor, IInitializableActor Constructors Actor(ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<Guid>, IAkkaCommandPublisher<Guid>) Instantiates a new instance of HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor . Declaration public Actor(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<Guid> authenticationTokenHelper, IAkkaCommandPublisher<Guid> commandBus) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper < System.Guid > authenticationTokenHelper IAkkaCommandPublisher < System.Guid > commandBus Properties CommandBus Publish any ICommand<TAuthenticationToken> instances that you want to send with this. Declaration protected ICommandPublisher<Guid> CommandBus { get; } Property Value Type Description ICommandPublisher < System.Guid > Methods Handle(HelloWorldRepliedTo) Responds to the provided message . Declaration public void Handle(HelloWorldRepliedTo message) Parameters Type Name Description HelloWorldRepliedTo message The HelloWorldRepliedTo to respond to or \"handle\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToEventHandlerActor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToEventHandlerActor.html",
    "title": "Class HelloWorldRepliedToEventHandlerActor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldRepliedToEventHandlerActor An Akka.Net based IEventHandler that handles the HelloWorldRepliedTo . Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaEventHandler < System.Guid > HelloWorldRepliedToEventHandlerActor Inherited Members AkkaEventHandler<Guid>.Logger AkkaEventHandler<Guid>.CorrelationIdHelper AkkaEventHandler<Guid>.AuthenticationTokenHelper AkkaEventHandler<Guid>.Execute<TEvent>(Action<TEvent>, TEvent) Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class HelloWorldRepliedToEventHandlerActor : AkkaEventHandler<Guid>, IInternalActor, IInitializableActor Constructors HelloWorldRepliedToEventHandlerActor(ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<Guid>) Instantiates a new instance of HelloWorldRepliedToEventHandlerActor . Declaration public HelloWorldRepliedToEventHandlerActor(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<Guid> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper < System.Guid > authenticationTokenHelper Methods Handle(HelloWorldRepliedTo) Responds to the provided message . Declaration public void Handle(HelloWorldRepliedTo message) Parameters Type Name Description HelloWorldRepliedTo message The HelloWorldRepliedTo to respond to or \"handle\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToEventHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldRepliedToEventHandler.html",
    "title": "Class HelloWorldRepliedToEventHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldRepliedToEventHandler Handles the HelloWorldRepliedTo . Inheritance System.Object HelloWorldRepliedToEventHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class HelloWorldRepliedToEventHandler : IEventHandler<Guid, HelloWorldRepliedTo>, IMessageHandler<HelloWorldRepliedTo>, IEventHandler, IHandler Constructors HelloWorldRepliedToEventHandler(IAkkaAggregateResolver) Instantiates the HelloWorldRepliedToEventHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public HelloWorldRepliedToEventHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(HelloWorldRepliedTo) Responds to the provided message passing the message to an Akka.Net actor. Declaration public void Handle(HelloWorldRepliedTo message) Parameters Type Name Description HelloWorldRepliedTo message The HelloWorldRepliedTo to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.SayHelloWorldCommand.html",
    "title": "Class SayHelloWorldCommand | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SayHelloWorldCommand Someone wants to say \"Hello World\". Inheritance System.Object SayHelloWorldCommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class SayHelloWorldCommand : ICommand<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.HelpPageConfig-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.HelpPageConfig-1.html",
    "title": "Class HelpPageConfig<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelpPageConfig<TAuthenticationToken> A start-up configuration class for the auto documenting features. Inheritance System.Object HelpPageConfig<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public static class HelpPageConfig<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties AssemblyXmlFileNames The list of relevant XML files to use with the auto documenting feature. Declaration public static IList<string> AssemblyXmlFileNames { get; set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods CreateXmlDocumentation() Generate the relevant XML file used by the auto documenting feature. Declaration public static void CreateXmlDocumentation() GenerateAssemblyXmlFileNames() Generate a list of relevant XML files to use with the auto documenting feature. Declaration public static void GenerateAssemblyXmlFileNames() GetBasicSampleObjects() Get a collection of sample objects for the auto documenting features to use. Declaration public static IDictionary<Type, object> GetBasicSampleObjects() Returns Type Description System.Collections.Generic.IDictionary < System.Type , System.Object >"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.HelpPageConfig-1.UserCreatedEvent.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.HelpPageConfig-1.UserCreatedEvent.html",
    "title": "Class HelpPageConfig<TAuthenticationToken>.UserCreatedEvent | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelpPageConfig<TAuthenticationToken>.UserCreatedEvent A sample IEvent<TAuthenticationToken> used for API documentation generation. Inheritance System.Object HelpPageConfig<TAuthenticationToken>.UserCreatedEvent Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax [Serializable] [DataContract] public class UserCreatedEvent : IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId EmailAddress The email address of the User to create. Declaration public string EmailAddress { get; set; } Property Value Type Description System.String Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id Name The name os the USer to create. Declaration public string Name { get; set; } Property Value Type Description System.String OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework Rsn The identifier of the User to create. Declaration public Guid Rsn { get; set; } Property Value Type Description System.Guid TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The new version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> that raised this. Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.html",
    "title": "Namespace Cqrs.WebApi.Formatters.FormMultipart | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Formatters.FormMultipart Classes FormMultipartEncodedMediaTypeFormatter Represents the System.Net.Http.Formatting.MediaTypeFormatter class to handle multi-part form-data."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.html",
    "title": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Classes FormData Provides access to all fields and files in a multi-part form-data request. FormData.ValueFile A file value. FormData.ValueString A string value. HttpFile Represents a file. MultipartFormatterSettings Settings for use during multi-part form-data formatting."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.html",
    "title": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger Classes FormDataConverterLogger Provide a mechanism to log issues and System.Exception data during conversions. FormDataConverterLogger.LogErrorInfo An error, issue or Exception . FormDataConverterLogger.LogItem Errors for a given path. Interfaces IFormDataConverterLogger Provide a mechanism to log issues and System.Exception data during conversions."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.IFormDataConverterLogger.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.IFormDataConverterLogger.html",
    "title": "Interface IFormDataConverterLogger | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IFormDataConverterLogger Provide a mechanism to log issues and System.Exception data during conversions. Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger Assembly : Cqrs.WebApi.dll Syntax public interface IFormDataConverterLogger Methods EnsureNoErrors() Throw exception if errors found Declaration void EnsureNoErrors() LogError(String, Exception) Logs an error. Declaration void LogError(string errorPath, Exception exception) Parameters Type Name Description System.String errorPath The path to the member for which the error is being logged. System.Exception exception The exception to be logged. LogError(String, String) Logs an error. Declaration void LogError(string errorPath, string errorMessage) Parameters Type Name Description System.String errorPath The path to the member for which the error is being logged. System.String errorMessage The error message to be logged."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.html",
    "title": "Class FormDataConverterLogger | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormDataConverterLogger Provide a mechanism to log issues and System.Exception data during conversions. Inheritance System.Object FormDataConverterLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger Assembly : Cqrs.WebApi.dll Syntax public class FormDataConverterLogger : IFormDataConverterLogger Constructors FormDataConverterLogger() Instantiates a new instance of FormDataConverterLogger . Declaration public FormDataConverterLogger() Methods EnsureNoErrors() Throw exception if errors found Declaration public void EnsureNoErrors() Implements IFormDataConverterLogger.EnsureNoErrors() GetErrors() Get all errors recorded. Declaration public List<FormDataConverterLogger.LogItem> GetErrors() Returns Type Description System.Collections.Generic.List < FormDataConverterLogger.LogItem > LogError(String, Exception) Logs an error. Declaration public void LogError(string errorPath, Exception exception) Parameters Type Name Description System.String errorPath The path to the member for which the error is being logged. System.Exception exception The exception to be logged. Implements IFormDataConverterLogger.LogError(String, Exception) LogError(String, String) Logs an error. Declaration public void LogError(string errorPath, string errorMessage) Parameters Type Name Description System.String errorPath The path to the member for which the error is being logged. System.String errorMessage The error message to be logged. Implements IFormDataConverterLogger.LogError(String, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.LogItem.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.LogItem.html",
    "title": "Class FormDataConverterLogger.LogItem | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormDataConverterLogger.LogItem Errors for a given path. Inheritance System.Object FormDataConverterLogger.LogItem Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger Assembly : Cqrs.WebApi.dll Syntax public class LogItem Properties ErrorPath The path identifying where the System.Exception or issue occurred. Declaration public string ErrorPath { get; set; } Property Value Type Description System.String Errors All System.Exception or issues that occurred for the ErrorPath . Declaration public List<FormDataConverterLogger.LogErrorInfo> Errors { get; set; } Property Value Type Description System.Collections.Generic.List < FormDataConverterLogger.LogErrorInfo >"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.LogErrorInfo.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger.FormDataConverterLogger.LogErrorInfo.html",
    "title": "Class FormDataConverterLogger.LogErrorInfo | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormDataConverterLogger.LogErrorInfo An error, issue or Exception . Inheritance System.Object FormDataConverterLogger.LogErrorInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.Logger Assembly : Cqrs.WebApi.dll Syntax public class LogErrorInfo Constructors LogErrorInfo(Exception) Instantiates a new instance of FormDataConverterLogger with the specified exception Declaration public LogErrorInfo(Exception exception) Parameters Type Name Description System.Exception exception LogErrorInfo(String) Instantiates a new instance of FormDataConverterLogger with the specified errorMessage . Declaration public LogErrorInfo(string errorMessage) Parameters Type Name Description System.String errorMessage Properties ErrorMessage The details of the error, issue or Exception . Declaration public string ErrorMessage { get; } Property Value Type Description System.String Exception The Exception if IsException is true. Declaration public Exception Exception { get; } Property Value Type Description System.Exception IsException Indicates of the error or issue was an exception. Declaration public bool IsException { get; } Property Value Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.HttpFile.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.HttpFile.html",
    "title": "Class HttpFile | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HttpFile Represents a file. Inheritance System.Object HttpFile Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Assembly : Cqrs.WebApi.dll Syntax public class HttpFile Constructors HttpFile() Instantiate and initialise a new instance of HttpFile Declaration public HttpFile() HttpFile(String, String, Byte[]) Instantiate and initialise a new instance of HttpFile Declaration public HttpFile(string fileName, string mediaType, byte[] buffer) Parameters Type Name Description System.String fileName System.String mediaType System.Byte [] buffer Properties Buffer The content of the file Declaration public byte[] Buffer { get; set; } Property Value Type Description System.Byte [] FileName The name of the file. Declaration public string FileName { get; set; } Property Value Type Description System.String MediaType The media type of the file. Declaration public string MediaType { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.html",
    "title": "Class FormData | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormData Provides access to all fields and files in a multi-part form-data request. Inheritance System.Object FormData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Assembly : Cqrs.WebApi.dll Syntax public class FormData Properties Fields All FormData.ValueString in the request. Declaration public List<FormData.ValueString> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < FormData.ValueString > Files All FormData.ValueFile in the request. Declaration public List<FormData.ValueFile> Files { get; set; } Property Value Type Description System.Collections.Generic.List < FormData.ValueFile > Methods Add(String, HttpFile) Adds a new FormData.ValueFile to Files . Declaration public void Add(string name, HttpFile value) Parameters Type Name Description System.String name The Name . HttpFile value The Value . Add(String, String) Adds a new FormData.ValueString to Fields . Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The Name . System.String value The Value . Contains(String, CultureInfo) Determines whether Files or Fields contains an item with the specific name. Declaration public bool Contains(string name, CultureInfo culture) Parameters Type Name Description System.String name The name of the item to locate. System.Globalization.CultureInfo culture The System.Globalization.CultureInfo to use in key evaluation. Returns Type Description System.Boolean true if an item is found; otherwise, false. GetAllKeys() Get's all keys from Fields and Files . Declaration public List<string> GetAllKeys() Returns Type Description System.Collections.Generic.List < System.String > GetFiles(String, CultureInfo) Get's all Value from Fields with a Name equal to name . Declaration public List<HttpFile> GetFiles(string name, CultureInfo culture) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.List < HttpFile > GetValues(String, CultureInfo) Get's all Value from Files with a Name equal to name . Declaration public List<string> GetValues(string name, CultureInfo culture) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.List < System.String > TryGetValue(String, CultureInfo, out HttpFile) Get's the first Value from Files with a Name equal to name . Declaration public bool TryGetValue(string name, CultureInfo culture, out HttpFile value) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture HttpFile value Returns Type Description System.Boolean TryGetValue(String, CultureInfo, out String) Get's the first Value from Fields with a Name equal to name . Declaration public bool TryGetValue(string name, CultureInfo culture, out string value) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture System.String value Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.ValueString.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.ValueString.html",
    "title": "Class FormData.ValueString | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormData.ValueString A string value. Inheritance System.Object FormData.ValueString Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Assembly : Cqrs.WebApi.dll Syntax public class ValueString Properties Name A name of the value. Declaration public string Name { get; set; } Property Value Type Description System.String Value The value itself. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.ValueFile.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Infrastructure.FormData.ValueFile.html",
    "title": "Class FormData.ValueFile | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormData.ValueFile A file value. Inheritance System.Object FormData.ValueFile Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Infrastructure Assembly : Cqrs.WebApi.dll Syntax public class ValueFile Properties Name A name of the value. Declaration public string Name { get; set; } Property Value Type Description System.String Value The file itself. Declaration public HttpFile Value { get; set; } Property Value Type Description HttpFile"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.FormMultipartEncodedMediaTypeFormatter.html",
    "title": "Class FormMultipartEncodedMediaTypeFormatter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormMultipartEncodedMediaTypeFormatter Represents the System.Net.Http.Formatting.MediaTypeFormatter class to handle multi-part form-data. Inheritance System.Object System.Net.Http.Formatting.MediaTypeFormatter FormMultipartEncodedMediaTypeFormatter Inherited Members System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type, System.IO.Stream, System.Net.Http.HttpContent, System.Net.Http.Formatting.IFormatterLogger, System.Threading.CancellationToken) System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type, System.Object, System.IO.Stream, System.Net.Http.HttpContent, System.Net.TransportContext, System.Threading.CancellationToken) System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders) System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type, System.Net.Http.HttpRequestMessage, System.Net.Http.Headers.MediaTypeHeaderValue) System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type) System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart Assembly : Cqrs.WebApi.dll Syntax public class FormMultipartEncodedMediaTypeFormatter : MediaTypeFormatter Constructors FormMultipartEncodedMediaTypeFormatter(MultipartFormatterSettings) Instantiate and initialise a new instance of FormMultipartEncodedMediaTypeFormatter Declaration public FormMultipartEncodedMediaTypeFormatter(MultipartFormatterSettings settings = null) Parameters Type Name Description MultipartFormatterSettings settings The MultipartFormatterSettings to use. Methods CanReadType(Type) Queries whether this System.Net.Http.Formatting.MediaTypeFormatter can deserialise an object of the specified type. Declaration public override bool CanReadType(Type type) Parameters Type Name Description System.Type type The System.Type to deserialise. Returns Type Description System.Boolean true if the System.Net.Http.Formatting.MediaTypeFormatter can deserialise the type ; otherwise, false. Overrides System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type) CanWriteType(Type) Queries whether this System.Net.Http.Formatting.MediaTypeFormatter can serialise an object of the specified type. Declaration public override bool CanWriteType(Type type) Parameters Type Name Description System.Type type The System.Type to serialise. Returns Type Description System.Boolean true if the System.Net.Http.Formatting.MediaTypeFormatter can serialise the type ; otherwise, false. Overrides System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type) ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger) Asynchronously deserialises an object of the specified type. Declaration public override Task<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger) Parameters Type Name Description System.Type type The System.Type of the object to deserialise. System.IO.Stream readStream The System.IO.Stream to read. System.Net.Http.HttpContent content The System.Net.Http.HttpContent , if available. It may be null. System.Net.Http.Formatting.IFormatterLogger formatterLogger The System.Net.Http.Formatting.IFormatterLogger to log events to. Returns Type Description System.Threading.Tasks.Task < System.Object > A System.Threading.Tasks.Task whose result will be an object of the given type. Overrides System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type, System.IO.Stream, System.Net.Http.HttpContent, System.Net.Http.Formatting.IFormatterLogger) SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue) Sets the default headers for content that will be formatted using this formatter. This method is called from the System.Net.Http.ObjectContent constructor.. This implementation sets the Content-Type header to the value of mediaType if it is not null. If it is null it sets the Content-Type to the default media type of this formatter. If the Content-Type does not specify a charset it will set it using this formatters configured System.Text.Encoding . Declaration public override void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType) Parameters Type Name Description System.Type type The System.Type of the object being serialized. See System.Net.Http.ObjectContent . System.Net.Http.Headers.HttpContentHeaders headers The content headers that should be configured. System.Net.Http.Headers.MediaTypeHeaderValue mediaType The authoritative media type. Can be null. Overrides System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type, System.Net.Http.Headers.HttpContentHeaders, System.Net.Http.Headers.MediaTypeHeaderValue) WriteToStreamAsync(Type, Object, Stream, HttpContent, TransportContext) Asynchronously writes an object of the specified type. Declaration public override Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext) Parameters Type Name Description System.Type type The System.Type of the object to write. System.Object value The object value to write. It may be null. System.IO.Stream writeStream The System.IO.Stream to write to. System.Net.Http.HttpContent content The System.Net.Http.HttpContent , if available. It may be null. System.Net.TransportContext transportContext The System.Net.TransportContext if available. It may be null. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that will perform the write. Overrides System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type, System.Object, System.IO.Stream, System.Net.Http.HttpContent, System.Net.TransportContext)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.html",
    "title": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Converters | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Formatters.FormMultipart.Converters Classes FormDataToObjectConverter Converts multi-part form-data to System.Object . HttpContentToFormDataConverter Converts content in a System.Net.Http.HttpContent to FormData . ObjectToMultipartDataByteArrayConverter Converts System.Object to multi-part form-data."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.ObjectToMultipartDataByteArrayConverter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.ObjectToMultipartDataByteArrayConverter.html",
    "title": "Class ObjectToMultipartDataByteArrayConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ObjectToMultipartDataByteArrayConverter Converts System.Object to multi-part form-data. Inheritance System.Object ObjectToMultipartDataByteArrayConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Converters Assembly : Cqrs.WebApi.dll Syntax public class ObjectToMultipartDataByteArrayConverter Constructors ObjectToMultipartDataByteArrayConverter(MultipartFormatterSettings) Instantiate and initialise a new instance of ObjectToMultipartDataByteArrayConverter Declaration public ObjectToMultipartDataByteArrayConverter(MultipartFormatterSettings settings) Parameters Type Name Description MultipartFormatterSettings settings The MultipartFormatterSettings to use. Methods Convert(Object, String) Converts the provided value to multi-part form-data using the provided boundary . Declaration public byte[] Convert(object value, string boundary) Parameters Type Name Description System.Object value System.String boundary Returns Type Description System.Byte []"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.HttpContentToFormDataConverter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.HttpContentToFormDataConverter.html",
    "title": "Class HttpContentToFormDataConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HttpContentToFormDataConverter Converts content in a System.Net.Http.HttpContent to FormData . Inheritance System.Object HttpContentToFormDataConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Converters Assembly : Cqrs.WebApi.dll Syntax public class HttpContentToFormDataConverter Methods Convert(HttpContent) Converts the provided content to multi-part form-data. Declaration public Task<FormData> Convert(HttpContent content) Parameters Type Name Description System.Net.Http.HttpContent content Returns Type Description System.Threading.Tasks.Task < FormData > Convert(MultipartMemoryStreamProvider) Converts the System.Net.Http.MultipartStreamProvider.Contents of the provided multipartProvider to multi-part form-data. Declaration public Task<FormData> Convert(MultipartMemoryStreamProvider multipartProvider) Parameters Type Name Description System.Net.Http.MultipartMemoryStreamProvider multipartProvider Returns Type Description System.Threading.Tasks.Task < FormData >"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.FormDataToObjectConverter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Formatters.FormMultipart.Converters.FormDataToObjectConverter.html",
    "title": "Class FormDataToObjectConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FormDataToObjectConverter Converts multi-part form-data to System.Object . Inheritance System.Object FormDataToObjectConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Formatters.FormMultipart.Converters Assembly : Cqrs.WebApi.dll Syntax public class FormDataToObjectConverter Constructors FormDataToObjectConverter(FormData, IFormDataConverterLogger, MultipartFormatterSettings) Instantiate and initialise a new instance of FormDataToObjectConverter Declaration public FormDataToObjectConverter(FormData sourceData, IFormDataConverterLogger logger, MultipartFormatterSettings settings) Parameters Type Name Description FormData sourceData The FormData to convert. IFormDataConverterLogger logger The System.Net.Http.Formatting.IFormatterLogger to log events to. MultipartFormatterSettings settings The MultipartFormatterSettings to use. Methods Convert(Type) Converts the multi-part form-data to the provided destinationType Declaration public object Convert(Type destinationType) Parameters Type Name Description System.Type destinationType The System.Type to convert the multi-part form-data to. Returns Type Description System.Object"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.html",
    "title": "Namespace Cqrs.WebApi.Events.Handlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.WebApi.Events.Handlers Classes EventToHubProxy<TAuthenticationToken> Proxies IEvent<TAuthenticationToken> from the event bus to the INotificationHub . This requires one or more IEventHandler implementations in order to be triggered. GlobalEventToHubProxy<TAuthenticationToken> Proxies ALL IEvent<TAuthenticationToken> received from the event bus to the INotificationHub . This gets registered as a global IEventHandler . SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> Proxies IEvent<TAuthenticationToken> from the event bus to the INotificationHub . This requires one or more IEventHandler implementations in order to be triggered."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.SingleSignOnTokenEventToHubProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.SingleSignOnTokenEventToHubProxy-1.html",
    "title": "Class SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> Proxies IEvent<TAuthenticationToken> from the event bus to the INotificationHub . This requires one or more IEventHandler implementations in order to be triggered. Inheritance System.Object SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Events.Handlers Assembly : Cqrs.WebApi.dll Syntax public abstract class SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> where TSingleSignOnToken : ISingleSignOnToken, new () Type Parameters Name Description TSingleSignOnToken The ISingleSignOnToken of the authentication token. Constructors SingleSignOnTokenEventToHubProxy(ILogger, INotificationHub, IAuthenticationTokenHelper<TSingleSignOnToken>) Instantiates a new instance of SingleSignOnTokenEventToHubProxy<TSingleSignOnToken> . Declaration protected SingleSignOnTokenEventToHubProxy(ILogger logger, INotificationHub notificationHub, IAuthenticationTokenHelper<TSingleSignOnToken> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger INotificationHub notificationHub IAuthenticationTokenHelper <TSingleSignOnToken> authenticationTokenHelper Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TSingleSignOnToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TSingleSignOnToken> Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger NotificationHub The INotificationHub to proxy IEvent<TAuthenticationToken> to. Declaration protected INotificationHub NotificationHub { get; } Property Value Type Description INotificationHub Methods HandleGenericEvent(IEvent<TSingleSignOnToken>) Get the authentication token of the entity that triggered the request generating the provided message Extract any proxy information attributes ( NotifyCallerEventAttribute , NotifyEveryoneEventAttribute and NotifyEveryoneExceptCallerEventAttribute ) then proxy the provided message to NotificationHub if an attribute is present. Declaration protected virtual void HandleGenericEvent(IEvent<TSingleSignOnToken> message) Parameters Type Name Description IEvent <TSingleSignOnToken> message The IEvent<TAuthenticationToken> to proxy."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.GlobalEventToHubProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.GlobalEventToHubProxy-1.html",
    "title": "Class GlobalEventToHubProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GlobalEventToHubProxy<TAuthenticationToken> Proxies ALL IEvent<TAuthenticationToken> received from the event bus to the INotificationHub . This gets registered as a global IEventHandler . Inheritance System.Object EventToHubProxy <TAuthenticationToken> GlobalEventToHubProxy<TAuthenticationToken> Inherited Members EventToHubProxy<TAuthenticationToken>.Logger EventToHubProxy<TAuthenticationToken>.NotificationHub EventToHubProxy<TAuthenticationToken>.AuthenticationTokenHelper EventToHubProxy<TAuthenticationToken>.HandleGenericEvent(IEvent<TAuthenticationToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Events.Handlers Assembly : Cqrs.WebApi.dll Syntax public class GlobalEventToHubProxy<TAuthenticationToken> : EventToHubProxy<TAuthenticationToken>, IEventHandler<TAuthenticationToken, IEvent<TAuthenticationToken>>, IMessageHandler<IEvent<TAuthenticationToken>>, IEventHandler, IHandler Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors GlobalEventToHubProxy(ILogger, INotificationHub, IAuthenticationTokenHelper<TAuthenticationToken>) Instantiates a new instance of GlobalEventToHubProxy<TAuthenticationToken> . Declaration public GlobalEventToHubProxy(ILogger logger, INotificationHub notificationHub, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger INotificationHub notificationHub IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Methods Handle(IEvent<TAuthenticationToken>) Calls HandleGenericEvent(IEvent<TAuthenticationToken>) . Declaration public void Handle(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to proxy. Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.EventToHubProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.Events.Handlers.EventToHubProxy-1.html",
    "title": "Class EventToHubProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventToHubProxy<TAuthenticationToken> Proxies IEvent<TAuthenticationToken> from the event bus to the INotificationHub . This requires one or more IEventHandler implementations in order to be triggered. Inheritance System.Object EventToHubProxy<TAuthenticationToken> GlobalEventToHubProxy<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi.Events.Handlers Assembly : Cqrs.WebApi.dll Syntax public abstract class EventToHubProxy<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors EventToHubProxy(ILogger, INotificationHub, IAuthenticationTokenHelper<TAuthenticationToken>) Instantiates a new instance of EventToHubProxy<TAuthenticationToken> . Declaration protected EventToHubProxy(ILogger logger, INotificationHub notificationHub, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger INotificationHub notificationHub IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger NotificationHub The INotificationHub to proxy IEvent<TAuthenticationToken> to. Declaration protected INotificationHub NotificationHub { get; } Property Value Type Description INotificationHub Methods HandleGenericEvent(IEvent<TAuthenticationToken>) Get the authentication token of the entity that triggered the request generating the provided message Extract any proxy information attributes ( NotifyCallerEventAttribute , NotifyEveryoneEventAttribute and NotifyEveryoneExceptCallerEventAttribute ) then proxy the provided message to NotificationHub if an attribute is present. Declaration protected virtual void HandleGenericEvent(IEvent<TAuthenticationToken> message) Parameters Type Name Description IEvent <TAuthenticationToken> message The IEvent<TAuthenticationToken> to proxy."
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsHttpApplicationWithSignalR-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsHttpApplicationWithSignalR-2.html",
    "title": "Class CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> A CqrsHttpApplication that allows you to specify how IEvent<TAuthenticationToken> are sent to SignalR. Inheritance System.Object System.Web.HttpApplication CqrsHttpApplication CqrsHttpApplication <TAuthenticationToken> CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> CqrsHttpApplicationWithSignalR<TAuthenticationToken> Inherited Members CqrsHttpApplication<TAuthenticationToken>.Application_AuthenticateRequest(Object, EventArgs) CqrsHttpApplication<TAuthenticationToken>.SetBuses() CqrsHttpApplication.HandlerTypes CqrsHttpApplication.EventBus CqrsHttpApplication.CommandBus CqrsHttpApplication.RegisterCommandAndEventHandlers() CqrsHttpApplication.RegisterServiceParameterResolver() CqrsHttpApplication.StartBuses() CqrsHttpApplication.LogApplicationStarted() CqrsHttpApplication.Application_End(Object, EventArgs) CqrsHttpApplication.Application_Error(Object, EventArgs) CqrsHttpApplication.Application_BeginRequest(Object, EventArgs) CqrsHttpApplication.Application_EndRequest(Object, EventArgs) CqrsHttpApplication.Session_Start(Object, EventArgs) CqrsHttpApplication.Session_End(Object, EventArgs) System.Web.HttpApplication.CompleteRequest() System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.Init() System.Web.HttpApplication.Dispose() System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext, System.String) System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext, System.AsyncCallback, System.Object) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult) System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext) System.Web.HttpApplication.RegisterModule(System.Type) System.Web.HttpApplication.Context System.Web.HttpApplication.Events System.Web.HttpApplication.Request System.Web.HttpApplication.Response System.Web.HttpApplication.Session System.Web.HttpApplication.Application System.Web.HttpApplication.Server System.Web.HttpApplication.User System.Web.HttpApplication.Modules System.Web.HttpApplication.Site System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable System.Web.HttpApplication.Disposed System.Web.HttpApplication.BeginRequest System.Web.HttpApplication.AuthenticateRequest System.Web.HttpApplication.PostAuthenticateRequest System.Web.HttpApplication.AuthorizeRequest System.Web.HttpApplication.PostAuthorizeRequest System.Web.HttpApplication.ResolveRequestCache System.Web.HttpApplication.PostResolveRequestCache System.Web.HttpApplication.MapRequestHandler System.Web.HttpApplication.PostMapRequestHandler System.Web.HttpApplication.AcquireRequestState System.Web.HttpApplication.PostAcquireRequestState System.Web.HttpApplication.PreRequestHandlerExecute System.Web.HttpApplication.PostRequestHandlerExecute System.Web.HttpApplication.ReleaseRequestState System.Web.HttpApplication.PostReleaseRequestState System.Web.HttpApplication.UpdateRequestCache System.Web.HttpApplication.PostUpdateRequestCache System.Web.HttpApplication.LogRequest System.Web.HttpApplication.PostLogRequest System.Web.HttpApplication.EndRequest System.Web.HttpApplication.Error System.Web.HttpApplication.RequestCompleted System.Web.HttpApplication.PreSendRequestHeaders System.Web.HttpApplication.PreSendRequestContent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public abstract class CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> : CqrsHttpApplication<TAuthenticationToken>, IComponent, IDisposable, IHttpAsyncHandler, IHttpHandler, IRequestCompletedNotifier, ISyncContext where TEventToHubProxy : EventToHubProxy<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. TEventToHubProxy The System.Type of the proxy class that specifies how IEvent<TAuthenticationToken> are sent to SignalR. Methods Application_Start(Object, EventArgs) Calls SetBuses() , RegisterDefaultRoutes() , RegisterServiceParameterResolver() , ConfigureMvcOrWebApi() , RegisterCommandAndEventHandlers() , RegisterSignalR(BusRegistrar) , StartBuses() and finally LogApplicationStarted() . Declaration protected override void Application_Start(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Overrides CqrsHttpApplication.Application_Start(Object, EventArgs) ConfigureMvcOrWebApi() Override to configure MVC or WebAPI components such as AreaRegistration.RegisterAllAreas(); Declaration protected virtual void ConfigureMvcOrWebApi() RegisterDefaultRoutes() Register default offered routes and controllers such as the Java-script Client Declaration protected virtual void RegisterDefaultRoutes() RegisterSignalR(BusRegistrar) Register SignalR to the path /signalr Declaration protected virtual void RegisterSignalR(BusRegistrar registrar) Parameters Type Name Description BusRegistrar registrar"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsHttpApplicationWithSignalR-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsHttpApplicationWithSignalR-1.html",
    "title": "Class CqrsHttpApplicationWithSignalR<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsHttpApplicationWithSignalR<TAuthenticationToken> A CqrsHttpApplication that uses the GlobalEventToHubProxy<TAuthenticationToken> to automatically proxy all IEvent<TAuthenticationToken> to SignalR Inheritance System.Object System.Web.HttpApplication CqrsHttpApplication CqrsHttpApplication <TAuthenticationToken> CqrsHttpApplicationWithSignalR <TAuthenticationToken, GlobalEventToHubProxy <TAuthenticationToken>> CqrsHttpApplicationWithSignalR<TAuthenticationToken> Inherited Members CqrsHttpApplicationWithSignalR<TAuthenticationToken, GlobalEventToHubProxy<TAuthenticationToken>>.Application_Start(Object, EventArgs) CqrsHttpApplicationWithSignalR<TAuthenticationToken, GlobalEventToHubProxy<TAuthenticationToken>>.RegisterSignalR(BusRegistrar) CqrsHttpApplicationWithSignalR<TAuthenticationToken, GlobalEventToHubProxy<TAuthenticationToken>>.RegisterDefaultRoutes() CqrsHttpApplicationWithSignalR<TAuthenticationToken, GlobalEventToHubProxy<TAuthenticationToken>>.ConfigureMvcOrWebApi() CqrsHttpApplication<TAuthenticationToken>.Application_AuthenticateRequest(Object, EventArgs) CqrsHttpApplication<TAuthenticationToken>.SetBuses() CqrsHttpApplication.HandlerTypes CqrsHttpApplication.EventBus CqrsHttpApplication.CommandBus CqrsHttpApplication.Application_Start(Object, EventArgs) CqrsHttpApplication.RegisterCommandAndEventHandlers() CqrsHttpApplication.RegisterServiceParameterResolver() CqrsHttpApplication.StartBuses() CqrsHttpApplication.LogApplicationStarted() CqrsHttpApplication.Application_End(Object, EventArgs) CqrsHttpApplication.Application_Error(Object, EventArgs) CqrsHttpApplication.Application_BeginRequest(Object, EventArgs) CqrsHttpApplication.Application_EndRequest(Object, EventArgs) CqrsHttpApplication.Session_Start(Object, EventArgs) CqrsHttpApplication.Session_End(Object, EventArgs) System.Web.HttpApplication.CompleteRequest() System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.Init() System.Web.HttpApplication.Dispose() System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext, System.String) System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext, System.AsyncCallback, System.Object) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult) System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext) System.Web.HttpApplication.RegisterModule(System.Type) System.Web.HttpApplication.Context System.Web.HttpApplication.Events System.Web.HttpApplication.Request System.Web.HttpApplication.Response System.Web.HttpApplication.Session System.Web.HttpApplication.Application System.Web.HttpApplication.Server System.Web.HttpApplication.User System.Web.HttpApplication.Modules System.Web.HttpApplication.Site System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable System.Web.HttpApplication.Disposed System.Web.HttpApplication.BeginRequest System.Web.HttpApplication.AuthenticateRequest System.Web.HttpApplication.PostAuthenticateRequest System.Web.HttpApplication.AuthorizeRequest System.Web.HttpApplication.PostAuthorizeRequest System.Web.HttpApplication.ResolveRequestCache System.Web.HttpApplication.PostResolveRequestCache System.Web.HttpApplication.MapRequestHandler System.Web.HttpApplication.PostMapRequestHandler System.Web.HttpApplication.AcquireRequestState System.Web.HttpApplication.PostAcquireRequestState System.Web.HttpApplication.PreRequestHandlerExecute System.Web.HttpApplication.PostRequestHandlerExecute System.Web.HttpApplication.ReleaseRequestState System.Web.HttpApplication.PostReleaseRequestState System.Web.HttpApplication.UpdateRequestCache System.Web.HttpApplication.PostUpdateRequestCache System.Web.HttpApplication.LogRequest System.Web.HttpApplication.PostLogRequest System.Web.HttpApplication.EndRequest System.Web.HttpApplication.Error System.Web.HttpApplication.RequestCompleted System.Web.HttpApplication.PreSendRequestHeaders System.Web.HttpApplication.PreSendRequestContent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public abstract class CqrsHttpApplicationWithSignalR<TAuthenticationToken> : CqrsHttpApplicationWithSignalR<TAuthenticationToken, GlobalEventToHubProxy<TAuthenticationToken>>, IComponent, IDisposable, IHttpAsyncHandler, IHttpHandler, IRequestCompletedNotifier, ISyncContext Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods RegisterSignalR(BusRegistrar) Register SignalR and auto wire-up GlobalEventToHubProxy<TAuthenticationToken> to automatically proxy all IEvent<TAuthenticationToken> to SignalR. Declaration protected override void RegisterSignalR(BusRegistrar registrar) Parameters Type Name Description BusRegistrar registrar Overrides Cqrs.WebApi.CqrsHttpApplicationWithSignalR<TAuthenticationToken, Cqrs.WebApi.Events.Handlers.GlobalEventToHubProxy<TAuthenticationToken>>.RegisterSignalR(Cqrs.Configuration.BusRegistrar)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsEventApiController-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsEventApiController-1.html",
    "title": "Class CqrsEventApiController<TSingleSignOnToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsEventApiController<TSingleSignOnToken> A CqrsApiController that includes an implementation of the GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>) method Inheritance System.Object System.Web.Http.ApiController CqrsApiController CqrsEventApiController<TSingleSignOnToken> Inherited Members CqrsApiController.CorrelationIdHelper CqrsApiController.Logger CqrsApiController.ConfigurationManager CqrsApiController.GetToken() CqrsApiController.CreateRequest<TSingleSignOnToken>() CqrsApiController.CreateRequestWithData<TSingleSignOnToken, TParameters>(Func<TParameters>) CqrsApiController.CreateAuthenticationToken<TSingleSignOnToken>() CqrsApiController.CreateParameter<TParameters>() CqrsApiController.GetDateTokenIssued() CqrsApiController.GetTokenTimeOfExpiry() CqrsApiController.CompleteResponse<TServiceResponse>(HttpResponseMessage, TServiceResponse) CqrsApiController.CompleteResponse<TServiceResponse>(TServiceResponse) CqrsApiController.CompleteResponseWithData<TServiceResponse>(TServiceResponse) System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext, System.Threading.CancellationToken) System.Web.Http.ApiController.Validate<TEntity>(TEntity) System.Web.Http.ApiController.Validate<TEntity>(TEntity, System.String) System.Web.Http.ApiController.BadRequest() System.Web.Http.ApiController.BadRequest(System.String) System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary) System.Web.Http.ApiController.Conflict() System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.String) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.Net.Http.Headers.MediaTypeHeaderValue) System.Web.Http.ApiController.Created<T>(System.String, T) System.Web.Http.ApiController.Created<T>(System.Uri, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Object, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>, T) System.Web.Http.ApiController.InternalServerError() System.Web.Http.ApiController.InternalServerError(System.Exception) System.Web.Http.ApiController.Json<T>(T) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings, System.Text.Encoding) System.Web.Http.ApiController.NotFound() System.Web.Http.ApiController.Ok() System.Web.Http.ApiController.Ok<T>(T) System.Web.Http.ApiController.Redirect(System.String) System.Web.Http.ApiController.Redirect(System.Uri) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Object) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>) System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage) System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode) System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[]) System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable<System.Net.Http.Headers.AuthenticationHeaderValue>) System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext) System.Web.Http.ApiController.Dispose() System.Web.Http.ApiController.Dispose(System.Boolean) System.Web.Http.ApiController.Configuration System.Web.Http.ApiController.ControllerContext System.Web.Http.ApiController.ActionContext System.Web.Http.ApiController.ModelState System.Web.Http.ApiController.Request System.Web.Http.ApiController.RequestContext System.Web.Http.ApiController.Url System.Web.Http.ApiController.User System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public abstract class CqrsEventApiController<TSingleSignOnToken> : CqrsApiController, IHttpController, IDisposable, IEventService<TSingleSignOnToken> where TSingleSignOnToken : ISingleSignOnToken, new () Type Parameters Name Description TSingleSignOnToken Constructors CqrsEventApiController(ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<TSingleSignOnToken>, IEventStore<TSingleSignOnToken>, IConfigurationManager) Instantiates a new instance of CqrsEventApiController<TSingleSignOnToken> . Declaration protected CqrsEventApiController(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TSingleSignOnToken> authenticationTokenHelper, IEventStore<TSingleSignOnToken> eventStore, IConfigurationManager configurationManager) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TSingleSignOnToken> authenticationTokenHelper IEventStore <TSingleSignOnToken> eventStore IConfigurationManager configurationManager Properties AuthenticationTokenHelper Gets or set the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TSingleSignOnToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TSingleSignOnToken> EventStore Gets or set the IEventStore<TAuthenticationToken> . Declaration protected virtual IEventStore<TSingleSignOnToken> EventStore { get; } Property Value Type Description IEventStore <TSingleSignOnToken> Methods GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>) Get all IEvent<TAuthenticationToken> raised with the same CorrelationId . Declaration protected virtual IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TSingleSignOnToken, System.Guid > serviceRequest The CorrelationId of the IEvent<TAuthenticationToken> to find. Returns Type Description IServiceResponseWithResultData < System.Collections.Generic.IEnumerable < EventData >> A collection of EventData OnGetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>) Executed before calling the Get(Type, Guid, Boolean, Int32) method on EventStore in GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>) . Declaration protected virtual void OnGetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TSingleSignOnToken, System.Guid > serviceRequest The original IServiceRequestWithData<TAuthenticationToken, TData> . OnGotEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>, IEnumerable<EventData>) Executed after calling the Get(Type, Guid, Boolean, Int32) method on EventStore in GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>) . Declaration protected virtual IEnumerable<EventData> OnGotEventData(IServiceRequestWithData<TSingleSignOnToken, Guid> serviceRequest, IEnumerable<EventData> results) Parameters Type Name Description IServiceRequestWithData <TSingleSignOnToken, System.Guid > serviceRequest The original IServiceRequestWithData<TAuthenticationToken, TData> . System.Collections.Generic.IEnumerable < EventData > results The collection of IEvent<TAuthenticationToken> from the EventStore . Returns Type Description System.Collections.Generic.IEnumerable < EventData > Explicit Interface Implementations IEventService<TSingleSignOnToken>.GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid>) Get all IEvent<TAuthenticationToken> raised with the same CorrelationId . Declaration IServiceResponseWithResultData<IEnumerable<EventData>> IEventService<TSingleSignOnToken>.GetEventData(IServiceRequestWithData<TSingleSignOnToken, Guid> serviceRequest) Parameters Type Name Description IServiceRequestWithData <TSingleSignOnToken, System.Guid > serviceRequest The CorrelationId of the IEvent<TAuthenticationToken> to find. Returns Type Description IServiceResponseWithResultData < System.Collections.Generic.IEnumerable < EventData >> A collection of EventData Implements IEventService<TAuthenticationToken>.GetEventData(IServiceRequestWithData<TAuthenticationToken, Guid>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsApiController.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsApiController.html",
    "title": "Class CqrsApiController | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsApiController A System.Web.Http.ApiController that expects the Token to be sent as a System.Net.Http.Headers.HttpHeaders with a key whose name is defined by the System.Configuration.ConfigurationManager.AppSettings \"Cqrs.Web.AuthenticationTokenName\", in accordance with OAuth specifications Inheritance System.Object System.Web.Http.ApiController CqrsApiController CqrsApiController<TAuthenticationToken> CqrsEventApiController<TSingleSignOnToken> Inherited Members System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext, System.Threading.CancellationToken) System.Web.Http.ApiController.Validate<TEntity>(TEntity) System.Web.Http.ApiController.Validate<TEntity>(TEntity, System.String) System.Web.Http.ApiController.BadRequest() System.Web.Http.ApiController.BadRequest(System.String) System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary) System.Web.Http.ApiController.Conflict() System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.String) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.Net.Http.Headers.MediaTypeHeaderValue) System.Web.Http.ApiController.Created<T>(System.String, T) System.Web.Http.ApiController.Created<T>(System.Uri, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Object, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>, T) System.Web.Http.ApiController.InternalServerError() System.Web.Http.ApiController.InternalServerError(System.Exception) System.Web.Http.ApiController.Json<T>(T) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings, System.Text.Encoding) System.Web.Http.ApiController.NotFound() System.Web.Http.ApiController.Ok() System.Web.Http.ApiController.Ok<T>(T) System.Web.Http.ApiController.Redirect(System.String) System.Web.Http.ApiController.Redirect(System.Uri) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Object) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>) System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage) System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode) System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[]) System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable<System.Net.Http.Headers.AuthenticationHeaderValue>) System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext) System.Web.Http.ApiController.Dispose() System.Web.Http.ApiController.Dispose(System.Boolean) System.Web.Http.ApiController.Configuration System.Web.Http.ApiController.ControllerContext System.Web.Http.ApiController.ActionContext System.Web.Http.ApiController.ModelState System.Web.Http.ApiController.Request System.Web.Http.ApiController.RequestContext System.Web.Http.ApiController.Url System.Web.Http.ApiController.User System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public abstract class CqrsApiController : ApiController, IHttpController, IDisposable Remarks See https://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/creating-api-help-pages for details on adding WebApi Help Pages. Constructors CqrsApiController(ILogger, ICorrelationIdHelper, IConfigurationManager) Instantiates a new instance of CqrsApiController . Declaration protected CqrsApiController(ILogger logger, ICorrelationIdHelper correlationIdHelper, IConfigurationManager configurationManager) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IConfigurationManager configurationManager Properties ConfigurationManager Gets or set the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager CorrelationIdHelper Gets or set the cdmdotnet.Logging.ICorrelationIdHelper . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Logger Gets or set the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods CompleteResponse<TServiceResponse>(TServiceResponse) Creates a new System.Net.Http.HttpResponseMessage and completes the response by setting the appropriate System.Net.Http.HttpResponseMessage.StatusCode and populating System.Net.Http.HttpResponseMessage.Content with serviceResponse . Declaration protected virtual HttpResponseMessage CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)where TServiceResponse : IServiceResponse Parameters Type Name Description TServiceResponse serviceResponse Returns Type Description System.Net.Http.HttpResponseMessage Type Parameters Name Description TServiceResponse CompleteResponse<TServiceResponse>(HttpResponseMessage, TServiceResponse) Completes the provided response by setting the appropriate System.Net.Http.HttpResponseMessage.StatusCode and populating System.Net.Http.HttpResponseMessage.Content with serviceResponse . Declaration protected virtual HttpResponseMessage CompleteResponse<TServiceResponse>(HttpResponseMessage response, TServiceResponse serviceResponse)where TServiceResponse : IServiceResponse Parameters Type Name Description System.Net.Http.HttpResponseMessage response TServiceResponse serviceResponse Returns Type Description System.Net.Http.HttpResponseMessage Type Parameters Name Description TServiceResponse CompleteResponseWithData<TServiceResponse>(TServiceResponse) Creates a new System.Net.Http.HttpResponseMessage and completes the response by setting the appropriate System.Net.Http.HttpResponseMessage.StatusCode and populating System.Net.Http.HttpResponseMessage.Content with serviceResponse . Declaration protected virtual HttpResponseMessage<TServiceResponse> CompleteResponseWithData<TServiceResponse>(TServiceResponse serviceResponse)where TServiceResponse : IServiceResponse Parameters Type Name Description TServiceResponse serviceResponse Returns Type Description HttpResponseMessage <TServiceResponse> Type Parameters Name Description TServiceResponse CreateAuthenticationToken<TSingleSignOnToken>() Create an TSingleSignOnToken . Declaration protected virtual TSingleSignOnToken CreateAuthenticationToken<TSingleSignOnToken>()where TSingleSignOnToken : ISingleSignOnToken, new () Returns Type Description TSingleSignOnToken Type Parameters Name Description TSingleSignOnToken Th System.Type of ISingleSignOnToken . CreateParameter<TParameters>() Creates a blank TParameters Declaration protected virtual TParameters CreateParameter<TParameters>()where TParameters : new () Returns Type Description TParameters Type Parameters Name Description TParameters CreateRequest<TSingleSignOnToken>() Create a IServiceRequest<TAuthenticationToken> setting header information. Declaration protected virtual IServiceRequest<TSingleSignOnToken> CreateRequest<TSingleSignOnToken>()where TSingleSignOnToken : ISingleSignOnToken, new () Returns Type Description IServiceRequest <TSingleSignOnToken> Type Parameters Name Description TSingleSignOnToken CreateRequestWithData<TSingleSignOnToken, TParameters>(Func<TParameters>) Create a IServiceRequestWithData<TAuthenticationToken, TData> setting header information. If createParameterDelegate is not null, it is used to populate Data otherwise CreateParameter<TParameters>() is used. Declaration protected virtual IServiceRequestWithData<TSingleSignOnToken, TParameters> CreateRequestWithData<TSingleSignOnToken, TParameters>(Func<TParameters> createParameterDelegate = null)where TSingleSignOnToken : ISingleSignOnToken, new ()where TParameters : new () Parameters Type Name Description System.Func <TParameters> createParameterDelegate Returns Type Description IServiceRequestWithData <TSingleSignOnToken, TParameters> Type Parameters Name Description TSingleSignOnToken TParameters GetDateTokenIssued() Get the System.DateTime the current authentication token was issued. Declaration protected virtual DateTime GetDateTokenIssued() Returns Type Description System.DateTime default(DateTime) GetToken() Extracts the authentication token looking for a System.Collections.Generic.KeyValuePair<TKey, TValue> where the key as defined by the System.Configuration.ConfigurationManager.AppSettings \"Cqrs.Web.AuthenticationTokenName\", from the System.Web.HttpRequest.Headers , if one isn't found we then try the System.Web.HttpRequest.Cookies Declaration protected virtual string GetToken() Returns Type Description System.String GetTokenTimeOfExpiry() Get the System.DateTime the current authentication token will expire. Declaration protected virtual DateTime GetTokenTimeOfExpiry() Returns Type Description System.DateTime default(DateTime)"
  },
  "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsApiController-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.WebApi.CqrsApiController-1.html",
    "title": "Class CqrsApiController<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsApiController<TAuthenticationToken> A System.Web.Http.ApiController that expects the Token to be sent as a System.Net.Http.Headers.HttpHeaders with a key of \"X-Token\", in accordance with OAuth specifications Inheritance System.Object System.Web.Http.ApiController CqrsApiController CqrsApiController<TAuthenticationToken> Inherited Members CqrsApiController.CorrelationIdHelper CqrsApiController.Logger CqrsApiController.ConfigurationManager CqrsApiController.CreateRequest<TSingleSignOnToken>() CqrsApiController.CreateRequestWithData<TSingleSignOnToken, TParameters>(Func<TParameters>) CqrsApiController.CreateAuthenticationToken<TSingleSignOnToken>() CqrsApiController.CreateParameter<TParameters>() CqrsApiController.GetDateTokenIssued() CqrsApiController.GetTokenTimeOfExpiry() CqrsApiController.CompleteResponse<TServiceResponse>(HttpResponseMessage, TServiceResponse) CqrsApiController.CompleteResponse<TServiceResponse>(TServiceResponse) CqrsApiController.CompleteResponseWithData<TServiceResponse>(TServiceResponse) System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext, System.Threading.CancellationToken) System.Web.Http.ApiController.Validate<TEntity>(TEntity) System.Web.Http.ApiController.Validate<TEntity>(TEntity, System.String) System.Web.Http.ApiController.BadRequest() System.Web.Http.ApiController.BadRequest(System.String) System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary) System.Web.Http.ApiController.Conflict() System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.String) System.Web.Http.ApiController.Content<T>(System.Net.HttpStatusCode, T, System.Net.Http.Formatting.MediaTypeFormatter, System.Net.Http.Headers.MediaTypeHeaderValue) System.Web.Http.ApiController.Created<T>(System.String, T) System.Web.Http.ApiController.Created<T>(System.Uri, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Object, T) System.Web.Http.ApiController.CreatedAtRoute<T>(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>, T) System.Web.Http.ApiController.InternalServerError() System.Web.Http.ApiController.InternalServerError(System.Exception) System.Web.Http.ApiController.Json<T>(T) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings) System.Web.Http.ApiController.Json<T>(T, Newtonsoft.Json.JsonSerializerSettings, System.Text.Encoding) System.Web.Http.ApiController.NotFound() System.Web.Http.ApiController.Ok() System.Web.Http.ApiController.Ok<T>(T) System.Web.Http.ApiController.Redirect(System.String) System.Web.Http.ApiController.Redirect(System.Uri) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Object) System.Web.Http.ApiController.RedirectToRoute(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>) System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage) System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode) System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[]) System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable<System.Net.Http.Headers.AuthenticationHeaderValue>) System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext) System.Web.Http.ApiController.Dispose() System.Web.Http.ApiController.Dispose(System.Boolean) System.Web.Http.ApiController.Configuration System.Web.Http.ApiController.ControllerContext System.Web.Http.ApiController.ActionContext System.Web.Http.ApiController.ModelState System.Web.Http.ApiController.Request System.Web.Http.ApiController.RequestContext System.Web.Http.ApiController.Url System.Web.Http.ApiController.User System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.WebApi Assembly : Cqrs.WebApi.dll Syntax public abstract class CqrsApiController<TAuthenticationToken> : CqrsApiController, IHttpController, IDisposable Type Parameters Name Description TAuthenticationToken Remarks See https://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/creating-api-help-pages for details on adding WebApi Help Pages. Constructors CqrsApiController(ILogger, ICorrelationIdHelper, IConfigurationManager, IAuthenticationTokenHelper<TAuthenticationToken>) Instantiates a new instance of CqrsApiController . Declaration protected CqrsApiController(ILogger logger, ICorrelationIdHelper correlationIdHelper, IConfigurationManager configurationManager, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IConfigurationManager configurationManager IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Gets or set the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> Methods CreateRequest() Create a IServiceRequest<TAuthenticationToken> setting header information. Declaration protected virtual IServiceRequest<TAuthenticationToken> CreateRequest() Returns Type Description IServiceRequest <TAuthenticationToken> CreateRequestWithData<TParameters>(Func<TParameters>) Create a IServiceRequestWithData<TAuthenticationToken, TData> setting header information. If createParameterDelegate is not null, it is used to populate Data otherwise CreateParameter<TParameters>() is used. Declaration protected virtual IServiceRequestWithData<TAuthenticationToken, TParameters> CreateRequestWithData<TParameters>(Func<TParameters> createParameterDelegate = null)where TParameters : new () Parameters Type Name Description System.Func <TParameters> createParameterDelegate Returns Type Description IServiceRequestWithData <TAuthenticationToken, TParameters> Type Parameters Name Description TParameters GetToken() Reads the current authentication token for the request from AuthenticationTokenHelper . Declaration protected override string GetToken() Returns Type Description System.String Overrides CqrsApiController.GetToken()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingHandler.html",
    "title": "Class TestAggregateDidSomethingHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDidSomethingHandler Inheritance System.Object TestAggregateDidSomethingHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDidSomethingHandler : IEventHandler<ISingleSignOnToken, TestAggregateDidSomething>, IMessageHandler<TestAggregateDidSomething>, IEventHandler, IHandler Properties TimesRun Declaration public int TimesRun { get; } Property Value Type Description System.Int32 Methods Handle(TestAggregateDidSomething) Declaration public void Handle(TestAggregateDidSomething message) Parameters Type Name Description TestAggregateDidSomething message Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse2.html",
    "title": "Class TestAggregateDidSomethingElse2 | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDidSomethingElse2 Inheritance System.Object TestAggregateDidSomethingElse TestAggregateDidSomethingElse2 Inherited Members TestAggregateDidSomethingElse.Id TestAggregateDidSomethingElse.Version TestAggregateDidSomethingElse.TimeStamp TestAggregateDidSomethingElse.AuthenticationToken TestAggregateDidSomethingElse.CorrelationId TestAggregateDidSomethingElse.Framework TestAggregateDidSomethingElse.OriginatingFramework TestAggregateDidSomethingElse.Frameworks TestAggregateDidSomethingElse.CorrolationId System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDidSomethingElse2 : TestAggregateDidSomethingElse, IEvent<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomethingElse.html",
    "title": "Class TestAggregateDidSomethingElse | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDidSomethingElse Inheritance System.Object TestAggregateDidSomethingElse TestAggregateDidSomethingElse2 Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDidSomethingElse : IEvent<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage Properties AuthenticationToken Declaration public ISingleSignOnToken AuthenticationToken { get; set; } Property Value Type Description ISingleSignOnToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId CorrolationId Declaration [Obsolete(\"Use CorrelationId\")] [DataMember] public Guid CorrolationId { get; set; } Property Value Type Description System.Guid Framework Declaration [DataMember] [Obsolete(\"Use Frameworks, It's far more flexible and OriginatingFramework\")] public FrameworkType Framework { get; set; } Property Value Type Description FrameworkType Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id Declaration public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp Declaration public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version Declaration public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomething.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateDidSomething.html",
    "title": "Class TestAggregateDidSomething | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateDidSomething Inheritance System.Object TestAggregateDidSomething Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateDidSomething : IEvent<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage Properties AuthenticationToken Declaration public ISingleSignOnToken AuthenticationToken { get; set; } Property Value Type Description ISingleSignOnToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId CorrolationId Declaration [Obsolete(\"Use CorrelationId\")] [DataMember] public Guid CorrolationId { get; set; } Property Value Type Description System.Guid Framework Declaration [DataMember] [Obsolete(\"Use Frameworks, It's far more flexible and OriginatingFramework\")] public FrameworkType Framework { get; set; } Property Value Type Description FrameworkType Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id Declaration public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp Declaration public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version Declaration public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateCreated.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregateCreated.html",
    "title": "Class TestAggregateCreated | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregateCreated Inheritance System.Object TestAggregateCreated Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregateCreated : IEvent<ISingleSignOnToken>, IMessageWithAuthenticationToken<ISingleSignOnToken>, IMessage Properties AuthenticationToken Declaration public ISingleSignOnToken AuthenticationToken { get; set; } Property Value Type Description ISingleSignOnToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId CorrolationId Declaration [Obsolete(\"Use CorrelationId\")] [DataMember] public Guid CorrolationId { get; set; } Property Value Type Description System.Guid Framework Declaration [DataMember] [Obsolete(\"Use Frameworks, It's far more flexible and OriginatingFramework\")] public FrameworkType Framework { get; set; } Property Value Type Description FrameworkType Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id Declaration public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp Declaration public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version Declaration public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.TestAggregate.html",
    "title": "Class TestAggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAggregate Inheritance System.Object AggregateRoot < ISingleSignOnToken > TestAggregate Inherited Members AggregateRoot<ISingleSignOnToken>.Id AggregateRoot<ISingleSignOnToken>.Version AggregateRoot<ISingleSignOnToken>.GetUncommittedChanges() AggregateRoot<ISingleSignOnToken>.MarkChangesAsCommitted() AggregateRoot<ISingleSignOnToken>.LoadFromHistory(IEnumerable<IEvent<ISingleSignOnToken>>) AggregateRoot<ISingleSignOnToken>.ApplyChange(IEvent<ISingleSignOnToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax public class TestAggregate : AggregateRoot<ISingleSignOnToken>, IAggregateRoot<ISingleSignOnToken> Constructors TestAggregate(Guid) Declaration public TestAggregate(Guid id) Parameters Type Name Description System.Guid id Fields DidSomethingCount Declaration public int DidSomethingCount Field Value Type Description System.Int32 Methods Apply(TestAggregateDidSomething) Declaration public void Apply(TestAggregateDidSomething e) Parameters Type Name Description TestAggregateDidSomething e DoSomething() Declaration public void DoSomething() DoSomethingElse() Declaration public void DoSomethingElse()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.OrderEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Substitutes.OrderEntity.html",
    "title": "Class OrderEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class OrderEntity Inheritance System.Object Entity OrderEntity Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Substitutes Assembly : Cqrs.Tests.dll Syntax [Serializable] [DataContract] [Table(Name = \"Orders\")] public class OrderEntity : Entity, IEntity Properties CustomerId Declaration [DataMember] [Column(Name = \"CustomerID\")] public virtual string CustomerId { get; set; } Property Value Type Description System.String EmployeeId Declaration [DataMember] [Column(Name = \"EmployeeID\")] public virtual int ? EmployeeId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Freight Declaration [DataMember] [Column] public virtual decimal ? Freight { get; set; } Property Value Type Description System.Nullable < System.Decimal > IsLogicallyDeleted Declaration [DataMember] [Column] public override bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Overrides Entity.IsLogicallyDeleted OrderDate Declaration [DataMember] [Column] public virtual DateTime? OrderDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > OrderId Declaration [DataMember] [Column(Name = \"OrderID\", IsPrimaryKey = true, IsDbGenerated = true)] public virtual int OrderId { get; set; } Property Value Type Description System.Int32 RequiredDate Declaration [DataMember] [Column] public virtual DateTime? RequiredDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > Rsn Declaration [DataMember] [Column] public override Guid Rsn { get; set; } Property Value Type Description System.Guid Overrides Entity.Rsn ShipAddress Declaration [DataMember] [Column] public virtual string ShipAddress { get; set; } Property Value Type Description System.String ShipCity Declaration [DataMember] [Column] public virtual string ShipCity { get; set; } Property Value Type Description System.String ShipCountry Declaration [DataMember] [Column] public virtual string ShipCountry { get; set; } Property Value Type Description System.String ShipName Declaration [DataMember] [Column] public virtual string ShipName { get; set; } Property Value Type Description System.String ShippedDate Declaration [DataMember] [Column] public virtual DateTime? ShippedDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > ShipPostalCode Declaration [DataMember] [Column] public virtual string ShipPostalCode { get; set; } Property Value Type Description System.String ShipRegion Declaration [DataMember] [Column] public virtual string ShipRegion { get; set; } Property Value Type Description System.String ShipViaId Declaration [DataMember] [Column(Name = \"ShipVia\")] public virtual int ? ShipViaId { get; set; } Property Value Type Description System.Nullable < System.Int32 > SortingOrder Declaration [DataMember] [Column] public override int SortingOrder { get; set; } Property Value Type Description System.Int32 Overrides Entity.SortingOrder"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.html",
    "title": "Namespace Cqrs.Tests.Snapshots | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Snapshots Classes When_getting_a_snapshot_aggregate_with_no_snapshot When_getting_an_aggregate_with_snapshot When_getting_snapshotable_aggreate When_saving_a_snapshotable_aggregate When_saving_a_snapshotable_aggregate_for_each_change"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_saving_a_snapshotable_aggregate_for_each_change.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_saving_a_snapshotable_aggregate_for_each_change.html",
    "title": "Class When_saving_a_snapshotable_aggregate_for_each_change | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_a_snapshotable_aggregate_for_each_change Inheritance System.Object When_saving_a_snapshotable_aggregate_for_each_change Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Snapshots Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_a_snapshotable_aggregate_for_each_change Methods Setup() Declaration [SetUp] public void Setup() Should_get_aggregate_back_correct() Declaration [Test] public void Should_get_aggregate_back_correct() Should_not_snapshot_first_event() Declaration [Test] public void Should_not_snapshot_first_event() Should_snapshot_15th_change() Declaration [Test] public void Should_snapshot_15th_change()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_saving_a_snapshotable_aggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_saving_a_snapshotable_aggregate.html",
    "title": "Class When_saving_a_snapshotable_aggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_a_snapshotable_aggregate Inheritance System.Object When_saving_a_snapshotable_aggregate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Snapshots Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_a_snapshotable_aggregate Methods Setup() Declaration [SetUp] public void Setup() Should_save_last_version_number() Declaration [Test] public void Should_save_last_version_number() Should_save_snapshot() Declaration [Test] public void Should_save_snapshot()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_snapshotable_aggreate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_snapshotable_aggreate.html",
    "title": "Class When_getting_snapshotable_aggreate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_snapshotable_aggreate Inheritance System.Object When_getting_snapshotable_aggreate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Snapshots Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_snapshotable_aggreate Methods Setup() Declaration [SetUp] public void Setup() Should_ask_for_snapshot() Declaration [Test] public void Should_ask_for_snapshot() Should_run_restore_method() Declaration [Test] public void Should_run_restore_method()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_an_aggregate_with_snapshot.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_an_aggregate_with_snapshot.html",
    "title": "Class When_getting_an_aggregate_with_snapshot | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_an_aggregate_with_snapshot Inheritance System.Object When_getting_an_aggregate_with_snapshot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Snapshots Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_an_aggregate_with_snapshot Methods Setup() Declaration [SetUp] public void Setup() Should_restore() Declaration [Test] public void Should_restore()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_a_snapshot_aggregate_with_no_snapshot.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Snapshots.When_getting_a_snapshot_aggregate_with_no_snapshot.html",
    "title": "Class When_getting_a_snapshot_aggregate_with_no_snapshot | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_a_snapshot_aggregate_with_no_snapshot Inheritance System.Object When_getting_a_snapshot_aggregate_with_no_snapshot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Snapshots Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_a_snapshot_aggregate_with_no_snapshot Methods Setup() Declaration [SetUp] public void Setup() Should_load_events() Declaration [Test] public void Should_load_events() Should_not_load_snapshot() Declaration [Test] public void Should_not_load_snapshot()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.html",
    "title": "Namespace Cqrs.Tests.Extensions.TestHelpers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Extensions.TestHelpers Classes Specification<TAggregate, THandler, TCommand> ThenAttribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.ThenAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.ThenAttribute.html",
    "title": "Class ThenAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ThenAttribute Inheritance System.Object System.Attribute NUnit.Framework.TestAttribute ThenAttribute Inherited Members NUnit.Framework.TestAttribute.Description System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Extensions.TestHelpers Assembly : Cqrs.Tests.Extensions.dll Syntax public class ThenAttribute : TestAttribute, _Attribute"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.Specification-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Extensions.TestHelpers.Specification-3.html",
    "title": "Class Specification<TAggregate, THandler, TCommand> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Specification<TAggregate, THandler, TCommand> Inheritance System.Object Specification<TAggregate, THandler, TCommand> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Extensions.TestHelpers Assembly : Cqrs.Tests.Extensions.dll Syntax [TestFixture] public abstract class Specification<TAggregate, THandler, TCommand> where TAggregate : AggregateRoot<ISingleSignOnToken> where THandler : class, ICommandHandler<ISingleSignOnToken, TCommand> where TCommand : ICommand<ISingleSignOnToken> Type Parameters Name Description TAggregate THandler TCommand Properties Aggregate Declaration protected TAggregate Aggregate { get; set; } Property Value Type Description TAggregate EventDescriptors Declaration protected IList<IEvent<ISingleSignOnToken>> EventDescriptors { get; set; } Property Value Type Description System.Collections.Generic.IList < IEvent < ISingleSignOnToken >> PublishedEvents Declaration protected IList<IEvent<ISingleSignOnToken>> PublishedEvents { get; set; } Property Value Type Description System.Collections.Generic.IList < IEvent < ISingleSignOnToken >> Snapshot Declaration protected Snapshot Snapshot { get; set; } Property Value Type Description Snapshot UnitOfWork Declaration protected IUnitOfWork<ISingleSignOnToken> UnitOfWork { get; set; } Property Value Type Description IUnitOfWork < ISingleSignOnToken > Methods BuildHandler() Declaration protected abstract THandler BuildHandler() Returns Type Description THandler Given() Declaration protected abstract IEnumerable<IEvent<ISingleSignOnToken>> Given() Returns Type Description System.Collections.Generic.IEnumerable < IEvent < ISingleSignOnToken >> Run() Declaration [SetUp] public void Run() When() Declaration protected abstract TCommand When() Returns Type Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.html",
    "title": "Namespace Cqrs.Tests.Domain | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Domain Classes When_adding_aggregates_to_repository When_getting_aggregate_without_contructor When_getting_an_aggregate When_replaying_events When_saving When_saving_events_without_id When_saving_stale_data"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving_stale_data.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving_stale_data.html",
    "title": "Class When_saving_stale_data | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_stale_data Inheritance System.Object When_saving_stale_data Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_stale_data Methods Setup() Declaration [SetUp] public void Setup() Should_throw_concurrency_exception_from_repository() Declaration [Test] public void Should_throw_concurrency_exception_from_repository() Should_throw_concurrency_exception_from_session() Declaration [Test] public void Should_throw_concurrency_exception_from_session()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving_events_without_id.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving_events_without_id.html",
    "title": "Class When_saving_events_without_id | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_events_without_id Inheritance System.Object When_saving_events_without_id Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_events_without_id Methods Setup() Declaration [SetUp] public void Setup() Should_throw_aggregate_or_event_missing_id_exception_from_repository() Declaration [Test] public void Should_throw_aggregate_or_event_missing_id_exception_from_repository()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_saving.html",
    "title": "Class When_saving | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving Inheritance System.Object When_saving Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving Methods Setup() Declaration [SetUp] public void Setup() Should_add_new_aggregate() Declaration [Test] public void Should_add_new_aggregate() Should_clear_tracked_aggregates() Declaration [Test] public void Should_clear_tracked_aggregates() Should_mark_commited_after_commit() Declaration [Test] public void Should_mark_commited_after_commit() Should_publish_events() Declaration [Test] public void Should_publish_events() Should_save_uncommited_changes() Declaration [Test] public void Should_save_uncommited_changes() Should_set_date() Declaration [Test] public void Should_set_date() Should_set_id() Declaration [Test] public void Should_set_id() Should_set_version() Declaration [Test] public void Should_set_version()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_replaying_events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_replaying_events.html",
    "title": "Class When_replaying_events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_replaying_events Inheritance System.Object When_replaying_events Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_replaying_events Methods Setup() Declaration [SetUp] public void Setup() Should_call_apply_if_exist() Declaration [Test] public void Should_call_apply_if_exist() Should_not_fail_apply_if_dont_exist() Declaration [Test] public void Should_not_fail_apply_if_dont_exist()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_getting_an_aggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_getting_an_aggregate.html",
    "title": "Class When_getting_an_aggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_an_aggregate Inheritance System.Object When_getting_an_aggregate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_an_aggregate Methods Setup() Declaration [SetUp] public void Setup() Should_apply_events() Declaration [Test] public void Should_apply_events() Should_fail_if_aggregate_do_not_exist() Declaration [Test] public void Should_fail_if_aggregate_do_not_exist() Should_get_aggregate_from_eventstore() Declaration [Test] public void Should_get_aggregate_from_eventstore() Should_get_correct_version() Declaration [Test] public void Should_get_correct_version() Should_get_from_session_if_tracked() Declaration [Test] public void Should_get_from_session_if_tracked() Should_throw_concurrency_exception() Declaration [Test] public void Should_throw_concurrency_exception() Should_throw_concurrency_exception_if_tracked() Declaration [Test] public void Should_throw_concurrency_exception_if_tracked() Should_track_changes() Declaration [Test] public void Should_track_changes()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_getting_aggregate_without_contructor.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_getting_aggregate_without_contructor.html",
    "title": "Class When_getting_aggregate_without_contructor | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_aggregate_without_contructor Inheritance System.Object When_getting_aggregate_without_contructor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_aggregate_without_contructor Methods Setup() Declaration [SetUp] public void Setup()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_adding_aggregates_to_repository.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.When_adding_aggregates_to_repository.html",
    "title": "Class When_adding_aggregates_to_repository | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_adding_aggregates_to_repository Inheritance System.Object When_adding_aggregates_to_repository Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_adding_aggregates_to_repository Methods SetUp() Declaration [SetUp] public void SetUp() Should_not_throw_if_object_already_tracked() Declaration [Test] public void Should_not_throw_if_object_already_tracked() Should_throw_if_different_object_with_tracked_guid_is_added() Declaration [Test] public void Should_throw_if_different_object_with_tracked_guid_is_added()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.Saga.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.Saga.html",
    "title": "Namespace Cqrs.Tests.Domain.Saga | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Domain.Saga Classes When_getting_a_saga"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.Saga.When_getting_a_saga.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Domain.Saga.When_getting_a_saga.html",
    "title": "Class When_getting_a_saga | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_a_saga Inheritance System.Object When_getting_a_saga Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Domain.Saga Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_a_saga Methods Setup() Declaration [SetUp] public void Setup() Should_apply_events() Declaration [Test] public void Should_apply_events() Should_fail_if_saga_do_not_exist() Declaration [Test] public void Should_fail_if_saga_do_not_exist() Should_get_correct_version() Declaration [Test] public void Should_get_correct_version() Should_get_from_session_if_tracked() Declaration [Test] public void Should_get_from_session_if_tracked() Should_get_saga_from_eventstore() Declaration [Test] public void Should_get_saga_from_eventstore() Should_not_send_command() Declaration [Test] public void Should_not_send_command() Should_send_command_on_new_event() Declaration [Test] public void Should_send_command_on_new_event() Should_throw_concurrency_exception() Declaration [Test] public void Should_throw_concurrency_exception() Should_throw_concurrency_exception_if_tracked() Declaration [Test] public void Should_throw_concurrency_exception_if_tracked() Should_track_changes() Declaration [Test] public void Should_track_changes()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.DataStores.html",
    "title": "Namespace Cqrs.Tests.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.DataStores Classes CRUD_operations"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.DataStores.CRUD_operations.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.DataStores.CRUD_operations.html",
    "title": "Class CRUD_operations | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CRUD_operations Inheritance System.Object CRUD_operations Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.DataStores Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class CRUD_operations Methods AddSingleItem() Declaration [Test] public void AddSingleItem() AddTwoItems() Declaration [Test] public void AddTwoItems() GetAllItems() Declaration [Test] public void GetAllItems() RemoveSingleItem() Declaration [Test] public void RemoveSingleItem() Setup() Declaration [SetUp] public void Setup() UpdateSingleItem() Declaration [Test] public void UpdateSingleItem()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.html",
    "title": "Namespace Cqrs.Tests.Cache | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Cache Classes When_getting_aggregate When_getting_earlier_than_expected_events_from_event_store When_saving_aggregate When_saving_fails When_saving_same_aggregate_in_parallel All these tests just test, test code. When_saving_two_aggregates_in_parallel"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_two_aggregates_in_parallel.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_two_aggregates_in_parallel.html",
    "title": "Class When_saving_two_aggregates_in_parallel | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_two_aggregates_in_parallel Inheritance System.Object When_saving_two_aggregates_in_parallel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax public class When_saving_two_aggregates_in_parallel Methods Setup() Declaration [SetUp] public void Setup() Should_distibute_events_correct() Declaration [Test] public void Should_distibute_events_correct() Should_not_get_more_than_one_event_with_same_id() Declaration [Test] public void Should_not_get_more_than_one_event_with_same_id() Should_save_all_events() Declaration [Test] public void Should_save_all_events()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_same_aggregate_in_parallel.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_same_aggregate_in_parallel.html",
    "title": "Class When_saving_same_aggregate_in_parallel | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_same_aggregate_in_parallel All these tests just test, test code. Inheritance System.Object When_saving_same_aggregate_in_parallel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax public class When_saving_same_aggregate_in_parallel Methods Setup() Declaration [SetUp] public void Setup() Should_not_get_more_than_one_event_with_same_id() Declaration public void Should_not_get_more_than_one_event_with_same_id() Should_save_all_events() Declaration public void Should_save_all_events()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_fails.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_saving_fails.html",
    "title": "Class When_saving_fails | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_saving_fails Inheritance System.Object When_saving_fails Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_saving_fails Methods Setup() Declaration [SetUp] public void Setup() Should_evict_old_object_from_cache() Declaration [Test] public void Should_evict_old_object_from_cache()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SortParameter-1.SortParameterDirectionType.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SortParameter-1.SortParameterDirectionType.html",
    "title": "Enum SortParameter<TSortBy>.SortParameterDirectionType | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Enum SortParameter<TSortBy>.SortParameterDirectionType Sort direction. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public enum SortParameterDirectionType Fields Name Description Ascending Sort Ascending. Descending Sort Descending."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SingleResultQuery-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.SingleResultQuery-2.html",
    "title": "Class SingleResultQuery<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleResultQuery<TQueryStrategy, TData> A query that will produce a result that is a single TData item. Inheritance System.Object ResultQuery <TQueryStrategy, TData> SingleResultQuery<TQueryStrategy, TData> Inherited Members ResultQuery<TQueryStrategy, TData>.QueryStrategy ResultQuery<TQueryStrategy, TData>.Result System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class SingleResultQuery<TQueryStrategy, TData> : ResultQuery<TQueryStrategy, TData>, ISingleResultQuery<TQueryStrategy, TData>, IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<TData> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of result data."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ResultQuery-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ResultQuery-2.html",
    "title": "Class ResultQuery<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ResultQuery<TQueryStrategy, TData> A query that will produce a result Inheritance System.Object ResultQuery<TQueryStrategy, TData> CollectionResultQuery<TQueryStrategy, TData> SingleResultQuery<TQueryStrategy, TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class ResultQuery<TQueryStrategy, TData> : IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<TData> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data in the result collection. Properties QueryStrategy The TQueryStrategy to be executed and produce a result. Declaration public TQueryStrategy QueryStrategy { get; set; } Property Value Type Description TQueryStrategy Implements IQueryWithStrategy<TQueryStrategy>.QueryStrategy Result The resulting of executing the QueryStrategy . Declaration public TData Result { get; set; } Property Value Type Description TData Implements IQueryWithResults<TResult>.Result"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryStrategy.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryStrategy.html",
    "title": "Class QueryStrategy | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryStrategy A specification for a query to execute. Inheritance System.Object QueryStrategy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public abstract class QueryStrategy : IQueryStrategy Properties QueryPredicate The predicate that will be evaluated. Declaration public IQueryPredicate QueryPredicate { get; protected set; } Property Value Type Description IQueryPredicate Implements IQueryStrategy.QueryPredicate Methods And(IQueryPredicate) Builds an IAndQueryPredicate between QueryPredicate and the provided queryPredicate Declaration protected virtual IQueryPredicate And(IQueryPredicate queryPredicate) Parameters Type Name Description IQueryPredicate queryPredicate Returns Type Description IQueryPredicate BuildQueryPredicate<TData>(Func<TData>) Builds a IQueryPredicate from the provided func . Declaration protected virtual IQueryPredicate BuildQueryPredicate<TData>(Func<TData> func) Parameters Type Name Description System.Func <TData> func Returns Type Description IQueryPredicate Type Parameters Name Description TData BuildQueryPredicate<TParameter1, TData>(Func<TParameter1, TData>, TParameter1) Builds a IQueryPredicate from the provided func storing the provided parameter1 . Declaration protected virtual IQueryPredicate BuildQueryPredicate<TParameter1, TData>(Func<TParameter1, TData> func, TParameter1 parameter1) Parameters Type Name Description System.Func <TParameter1, TData> func TParameter1 parameter1 Returns Type Description IQueryPredicate Type Parameters Name Description TParameter1 TData BuildQueryPredicate<TParameter1, TParameter2, TData>(Func<TParameter1, TParameter2, TData>, TParameter1, TParameter2) Builds a IQueryPredicate from the provided func storing the provided parameter1 and parameter2 . Declaration protected virtual IQueryPredicate BuildQueryPredicate<TParameter1, TParameter2, TData>(Func<TParameter1, TParameter2, TData> func, TParameter1 parameter1, TParameter2 parameter2) Parameters Type Name Description System.Func <TParameter1, TParameter2, TData> func TParameter1 parameter1 TParameter2 parameter2 Returns Type Description IQueryPredicate Type Parameters Name Description TParameter1 TParameter2 TData IsNotLogicallyDeleted() Filter to all items not logically deleted. Declaration public virtual IQueryPredicate IsNotLogicallyDeleted() Returns Type Description IQueryPredicate Or(IQueryPredicate) Builds an IOrQueryPredicate between QueryPredicate and the provided queryPredicate Declaration protected virtual IQueryPredicate Or(IQueryPredicate queryPredicate) Parameters Type Name Description IQueryPredicate queryPredicate Returns Type Description IQueryPredicate WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken) Filter to all items with any permission scope. Declaration public virtual IQueryPredicate WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken authenticationToken) Parameters Type Name Description TAuthenticationToken authenticationToken Returns Type Description IQueryPredicate Type Parameters Name Description TAuthenticationToken WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken) Filter to any items the company the authenticated user can view. Declaration public virtual IQueryPredicate WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken authenticationToken) Parameters Type Name Description TAuthenticationToken authenticationToken Returns Type Description IQueryPredicate Type Parameters Name Description TAuthenticationToken WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken) Filter to any items the company the authenticated user can view and then filter the results to any items the authenticated user can see. Declaration public virtual IQueryPredicate WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken authenticationToken) Parameters Type Name Description TAuthenticationToken authenticationToken Returns Type Description IQueryPredicate Type Parameters Name Description TAuthenticationToken WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken) Filter to any items the authenticated user can view. Declaration public virtual IQueryPredicate WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken authenticationToken) Parameters Type Name Description TAuthenticationToken authenticationToken Returns Type Description IQueryPredicate Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryPredicateExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryPredicateExtensions.html",
    "title": "Class QueryPredicateExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryPredicateExtensions A collection of extension methods for working with queries. Inheritance System.Object QueryPredicateExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public static class QueryPredicateExtensions Methods GetValue<TResult>(QueryParameter) Gets the value from the provided queryParameter cast to TResult . Declaration public static TResult GetValue<TResult>(this QueryParameter queryParameter) Parameters Type Name Description QueryParameter queryParameter Returns Type Description TResult Type Parameters Name Description TResult Remarks Gets the ParameterValue cast to TResult . GetValue<TResult>(ISet<QueryParameter>, String) Gets the value from the provided collection cast to TResult . Declaration public static TResult GetValue<TResult>(this ISet<QueryParameter> collection, string parameterName) Parameters Type Name Description System.Collections.Generic.ISet < QueryParameter > collection System.String parameterName Returns Type Description TResult Type Parameters Name Description TResult Remarks Filters the provided collection where the ParameterName equals the provided parameterName then gets the ParameterValue cast to TResult . GetValue<TResult>(ISet<KeyValuePair<String, Object>>, String) Gets the value from the provided collection cast to TResult . Declaration public static TResult GetValue<TResult>(this ISet<KeyValuePair<string, object>> collection, string key) Parameters Type Name Description System.Collections.Generic.ISet < System.Collections.Generic.KeyValuePair < System.String , System.Object >> collection System.String key Returns Type Description TResult Type Parameters Name Description TResult Remarks Filters the provided collection where the System.Collections.Generic.KeyValuePair`2.Key equals the provided key then gets the System.Collections.Generic.KeyValuePair`2.Value cast to TResult . GetValue<TResult>(KeyValuePair<String, Object>) Gets the value from the provided keyValuePair cast to TResult . Declaration public static TResult GetValue<TResult>(this KeyValuePair<string, object> keyValuePair) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > keyValuePair Returns Type Description TResult Type Parameters Name Description TResult Remarks Gets the System.Collections.Generic.KeyValuePair`2.Value from the provided keyValuePair cast to TResult . GetValue<TResult>(SortedSet<QueryParameter>, Int32) Gets the value from the provided collection cast to TResult . Declaration public static TResult GetValue<TResult>(this SortedSet<QueryParameter> collection, int index) Parameters Type Name Description System.Collections.Generic.SortedSet < QueryParameter > collection System.Int32 index Returns Type Description TResult Type Parameters Name Description TResult Remarks Gets the QueryParameter at index index from the provided collection then gets the ParameterValue cast to TResult . GetValue<TResult>(SortedSet<QueryParameter>, String) Gets the value from the provided collection cast to TResult . Declaration public static TResult GetValue<TResult>(this SortedSet<QueryParameter> collection, string parameterName) Parameters Type Name Description System.Collections.Generic.SortedSet < QueryParameter > collection System.String parameterName Returns Type Description TResult Type Parameters Name Description TResult Remarks Filters the provided collection where the ParameterName equals the provided parameterName then gets the ParameterValue cast to TResult . GetValue<TResult>(SortedSet<KeyValuePair<String, Object>>, Int32) Gets the value from the provided collection cast to TResult . Declaration public static TResult GetValue<TResult>(this SortedSet<KeyValuePair<string, object>> collection, int index) Parameters Type Name Description System.Collections.Generic.SortedSet < System.Collections.Generic.KeyValuePair < System.String , System.Object >> collection System.Int32 index Returns Type Description TResult Type Parameters Name Description TResult Remarks Gets the System.Collections.Generic.KeyValuePair<TKey, TValue> at index index from the provided collection then gets the System.Collections.Generic.KeyValuePair`2.Value cast to TResult ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryPredicate.html",
    "title": "Class QueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryPredicate Information about a query. Inheritance System.Object QueryPredicate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class QueryPredicate : IQueryPredicateData, IQueryPredicate Constructors QueryPredicate() Instantiates a new instance of QueryPredicate . Declaration public QueryPredicate() Properties Name The Name of the function in the IQueryStrategy . Declaration public string Name { get; } Property Value Type Description System.String Implements IQueryPredicateData.Name Parameters The parameters passed to function in the IQueryStrategy . Declaration public SortedSet<QueryParameter> Parameters { get; } Property Value Type Description System.Collections.Generic.SortedSet < QueryParameter > Implements IQueryPredicateData.Parameters"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryParameter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryParameter.html",
    "title": "Class QueryParameter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryParameter Information about a parameter pass to a function in a IQueryStrategy . Inheritance System.Object QueryParameter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class QueryParameter : IComparable<QueryParameter> Constructors QueryParameter() Instantiates a new instance of QueryParameter Declaration public QueryParameter() QueryParameter(String, Object) Instantiates a new instance of QueryParameter Declaration public QueryParameter(string parameterName, object parameterValue) Parameters Type Name Description System.String parameterName System.Object parameterValue Properties ParameterName The name of the parameter. Declaration public string ParameterName { get; set; } Property Value Type Description System.String ParameterValue The value of the parameter. Declaration public object ParameterValue { get; set; } Property Value Type Description System.Object Methods CompareTo(QueryParameter) Compares the current object with another object of the same type. Declaration public int CompareTo(QueryParameter other) Parameters Type Name Description QueryParameter other An object to compare with this object. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj . Zero This instance is equal to obj . Greater than zero This instance is greater than obj . Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. GetParameterValue<T>() Returns ParameterValue cast to T . Declaration public T GetParameterValue<T>() Returns Type Description T Type Parameters Name Description T Extension Methods QueryPredicateExtensions.GetValue<TResult>(QueryParameter)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryFactory.html",
    "title": "Class QueryFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryFactory A factory to create new instances of ResultQuery<TQueryStrategy, TData> . Inheritance System.Object QueryFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class QueryFactory : IQueryFactory Constructors QueryFactory(IDependencyResolver) Instantiates a new instance of QueryFactory Declaration public QueryFactory(IDependencyResolver dependencyResolver) Parameters Type Name Description IDependencyResolver dependencyResolver Properties DependencyResolver Gets or sets the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Methods CreateNewCollectionResultQuery<TUserQueryStrategy, TData>() Creates a new ICollectionResultQuery<TQueryStrategy, TData> using DependencyResolver to create a new TUserQueryStrategy . Declaration public ICollectionResultQuery<TUserQueryStrategy, TData> CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy Returns Type Description ICollectionResultQuery <TUserQueryStrategy, TData> Type Parameters Name Description TUserQueryStrategy The System.Type of IQueryStrategy it will use. TData The System.Type of data the ISingleResultQuery<TQueryStrategy, TData> will operate on. Implements IQueryFactory.CreateNewCollectionResultQuery<TUserQueryStrategy, TData>() CreateNewSingleResultQuery<TUserQueryStrategy, TData>() Creates a new ISingleResultQuery<TQueryStrategy, TData> using DependencyResolver to create a new TUserQueryStrategy . Declaration public ISingleResultQuery<TUserQueryStrategy, TData> CreateNewSingleResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy Returns Type Description ISingleResultQuery <TUserQueryStrategy, TData> Type Parameters Name Description TUserQueryStrategy The System.Type of IQueryStrategy it will use. TData The System.Type of data the ISingleResultQuery<TQueryStrategy, TData> will operate on. Implements IQueryFactory.CreateNewSingleResultQuery<TUserQueryStrategy, TData>()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryBuilder-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.QueryBuilder-2.html",
    "title": "Class QueryBuilder<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class QueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy . Inheritance System.Object QueryBuilder<TQueryStrategy, TData> BlobStorageQueryBuilder<TQueryStrategy, TData> TestQueryBuilder<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public abstract class QueryBuilder<TQueryStrategy, TData> : IQueryBuilder<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TData : Entity Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data to query. Constructors QueryBuilder(IDataStore<TData>, IDependencyResolver) Instantiates a new instance of QueryBuilder<TQueryStrategy, TData> . Declaration protected QueryBuilder(IDataStore<TData> dataStore, IDependencyResolver dependencyResolver) Parameters Type Name Description IDataStore <TData> dataStore IDependencyResolver dependencyResolver Properties DataStore Gets or set the IDataStore<TData> to use. Declaration protected IDataStore<TData> DataStore { get; } Property Value Type Description IDataStore <TData> DependencyResolver Gets or set the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Methods ApplySorting(TQueryStrategy, ref IQueryable<TData>) Override to build or apply any sorting required to queryable Declaration protected virtual void ApplySorting(TQueryStrategy queryStrategy, ref IQueryable<TData> queryable) Parameters Type Name Description TQueryStrategy queryStrategy The TQueryStrategy with sorting information. System.Linq.IQueryable <TData> queryable The System.Linq.IQueryable to apply sorting to. CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>) Create an System.Linq.IQueryable of TData that expects a collection of TData items. Declaration public virtual IQueryable<TData> CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData> collectionResultQuery) Parameters Type Name Description ICollectionResultQuery <TQueryStrategy, TData> collectionResultQuery The query. Returns Type Description System.Linq.IQueryable <TData> Implements IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>) CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>) Create an System.Linq.IQueryable of TData that expects a single TData item. Declaration public virtual IQueryable<TData> CreateQueryable(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery) Parameters Type Name Description ISingleResultQuery <TQueryStrategy, TData> singleResultQuery The query. Returns Type Description System.Linq.IQueryable <TData> Implements IQueryBuilder<TQueryStrategy, TData>.CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>) GeneratePredicate(IQueryPredicate, IQueryable<TData>) Builds an System.Linq.IQueryable from the queryPredicate and an optional leftHandQueryable . This recursively calls itself and may call GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>) . Declaration protected virtual IQueryable<TData> GeneratePredicate(IQueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable = null) Parameters Type Name Description IQueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> GeneratePredicate(QueryPredicate, IQueryable<TData>) Override to build an System.Linq.IQueryable from the queryPredicate and an optional leftHandQueryable . Declaration protected abstract IQueryable<TData> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable = null) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> GeneratePredicateIsNotLogicallyDeleted(QueryPredicate, IQueryable<TData>) Builds the relevant System.Linq.IQueryable for IsNotLogicallyDeleted() . Declaration protected virtual IQueryable<TData> GeneratePredicateIsNotLogicallyDeleted(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable = null) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Builds the relevant System.Linq.IQueryable for WithPermissionScopeAny<TAuthenticationToken>(TAuthenticationToken) . Declaration protected virtual IQueryable<TData> GeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Builds the relevant System.Linq.IQueryable for WithPermissionScopeCompany<TAuthenticationToken>(TAuthenticationToken) . Declaration protected virtual IQueryable<TData> GeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Builds the relevant System.Linq.IQueryable for WithPermissionScopeCompanyAndUser<TAuthenticationToken>(TAuthenticationToken) . Declaration protected virtual IQueryable<TData> GeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Builds the relevant System.Linq.IQueryable for WithPermissionScopeUser<TAuthenticationToken>(TAuthenticationToken) . Declaration protected virtual IQueryable<TData> GeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken GetEmptyQueryPredicate() Returns the DataStore itself. Declaration protected virtual IQueryable<TData> GetEmptyQueryPredicate() Returns Type Description System.Linq.IQueryable <TData> GetFunctionName<TParameter1>(Func<TParameter1, TQueryStrategy>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<TParameter1>(Func<TParameter1, TQueryStrategy> expression) Parameters Type Name Description System.Func <TParameter1, TQueryStrategy> expression Returns Type Description System.String Type Parameters Name Description TParameter1 GetFunctionName<T>(Func<T>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<T>(Func<T> expression) Parameters Type Name Description System.Func <T> expression Returns Type Description System.String Type Parameters Name Description T GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TQueryStrategy>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<TParameter1, TParameter2>(Func<TParameter1, TParameter2, TQueryStrategy> expression) Parameters Type Name Description System.Func <TParameter1, TParameter2, TQueryStrategy> expression Returns Type Description System.String Type Parameters Name Description TParameter1 TParameter2 GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TQueryStrategy>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<TParameter1, TParameter2, TParameter3>(Func<TParameter1, TParameter2, TParameter3, TQueryStrategy> expression) Parameters Type Name Description System.Func <TParameter1, TParameter2, TParameter3, TQueryStrategy> expression Returns Type Description System.String Type Parameters Name Description TParameter1 TParameter2 TParameter3 GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy> expression) Parameters Type Name Description System.Func <TParameter1, TParameter2, TParameter3, TParameter4, TQueryStrategy> expression Returns Type Description System.String Type Parameters Name Description TParameter1 TParameter2 TParameter3 TParameter4 GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionName<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(Func<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy> expression) Parameters Type Name Description System.Func <TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TQueryStrategy> expression Returns Type Description System.String Type Parameters Name Description TParameter1 TParameter2 TParameter3 TParameter4 TParameter5 GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate>) Gets the Name of the method in expression Declaration protected virtual string GetFunctionNameOfType<TParameter1>(Func<TParameter1, IQueryPredicate> expression) Parameters Type Name Description System.Func <TParameter1, IQueryPredicate > expression Returns Type Description System.String Type Parameters Name Description TParameter1 GetNullQueryStrategy() Uses System.Activator.CreateInstance``1 to create a new instance of TQueryStrategy . Declaration protected virtual TQueryStrategy GetNullQueryStrategy() Returns Type Description TQueryStrategy OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Returns leftHandQueryable or calls GetEmptyQueryPredicate() if leftHandQueryable is null. Override to build the relevant permission scope System.Linq.IQueryable . Declaration protected virtual IQueryable<TData> OnGeneratePredicateWithPermissionScopeAny<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Returns leftHandQueryable or calls GetEmptyQueryPredicate() if leftHandQueryable is null. Override to build the relevant permission scope System.Linq.IQueryable . Declaration protected virtual IQueryable<TData> OnGeneratePredicateWithPermissionScopeCompany<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Returns leftHandQueryable or calls GetEmptyQueryPredicate() if leftHandQueryable is null. Override to build the relevant permission scope System.Linq.IQueryable . Declaration protected virtual IQueryable<TData> OnGeneratePredicateWithPermissionScopeCompanyAndUser<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate, IQueryable<TData>) Returns leftHandQueryable or calls GetEmptyQueryPredicate() if leftHandQueryable is null. Override to build the relevant permission scope System.Linq.IQueryable . Declaration protected virtual IQueryable<TData> OnGeneratePredicateWithPermissionScopeUser<TAuthenticationToken>(QueryPredicate queryPredicate, IQueryable<TData> leftHandQueryable) Parameters Type Name Description QueryPredicate queryPredicate System.Linq.IQueryable <TData> leftHandQueryable Returns Type Description System.Linq.IQueryable <TData> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.OrQueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.OrQueryPredicate.html",
    "title": "Class OrQueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class OrQueryPredicate An IQueryPredicate where either the LeftQueryPredicate or the RightQueryPredicate must evaluate to true. Inheritance System.Object OrQueryPredicate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class OrQueryPredicate : IAndQueryPredicate, IQueryPredicate Properties LeftQueryPredicate The left side IQueryPredicate . Declaration public IQueryPredicate LeftQueryPredicate { get; } Property Value Type Description IQueryPredicate Implements IAndQueryPredicate.LeftQueryPredicate RightQueryPredicate The right side IQueryPredicate . Declaration public IQueryPredicate RightQueryPredicate { get; } Property Value Type Description IQueryPredicate Implements IAndQueryPredicate.RightQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ISingleResultQuery-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ISingleResultQuery-2.html",
    "title": "Interface ISingleResultQuery<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleResultQuery<TQueryStrategy, TData> A query that will produce a result that is a single TData item. Inherited Members IQueryWithStrategy<TQueryStrategy>.QueryStrategy IQueryWithResults<TData>.Result Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface ISingleResultQuery<TQueryStrategy, out TData> : IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<TData> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of result data."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryWithStrategy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryWithStrategy-1.html",
    "title": "Interface IQueryWithStrategy<TQueryStrategy> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryWithStrategy<TQueryStrategy> A query that utilises a TQueryStrategy . Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryWithStrategy<TQueryStrategy> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy Properties QueryStrategy The TQueryStrategy to be executed and produce a result. Declaration TQueryStrategy QueryStrategy { get; set; } Property Value Type Description TQueryStrategy"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryWithResults-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryWithResults-1.html",
    "title": "Interface IQueryWithResults<TResult> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryWithResults<TResult> A query that will produce a result Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryWithResults<out TResult> Type Parameters Name Description TResult The System.Type of data in the result collection. Properties Result The resulting of executing the QueryStrategy . Declaration TResult Result { get; } Property Value Type Description TResult"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryStrategy.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryStrategy.html",
    "title": "Interface IQueryStrategy | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryStrategy A specification for a query to execute. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryStrategy Properties QueryPredicate The predicate that will be evaluated. Declaration IQueryPredicate QueryPredicate { get; } Property Value Type Description IQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryPredicateData.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryPredicateData.html",
    "title": "Interface IQueryPredicateData | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryPredicateData Information about a query. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryPredicateData : IQueryPredicate Properties Name The Name of the function in the IQueryStrategy . Declaration string Name { get; } Property Value Type Description System.String Parameters The parameters passed to the function in the IQueryStrategy . Declaration SortedSet<QueryParameter> Parameters { get; } Property Value Type Description System.Collections.Generic.SortedSet < QueryParameter >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryPredicate.html",
    "title": "Interface IQueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryPredicate A predicate used in queries, similar to a filter and/order statement. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryFactory.html",
    "title": "Interface IQueryFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryFactory A factory to create new instances of ResultQuery<TQueryStrategy, TData> . Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryFactory Methods CreateNewCollectionResultQuery<TUserQueryStrategy, TData>() Creates a new ICollectionResultQuery<TQueryStrategy, TData> Declaration ICollectionResultQuery<TUserQueryStrategy, TData> CreateNewCollectionResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy Returns Type Description ICollectionResultQuery <TUserQueryStrategy, TData> Type Parameters Name Description TUserQueryStrategy The System.Type of IQueryStrategy it will use. TData The System.Type of data the ISingleResultQuery<TQueryStrategy, TData> will operate on. CreateNewSingleResultQuery<TUserQueryStrategy, TData>() Creates a new ISingleResultQuery<TQueryStrategy, TData> Declaration ISingleResultQuery<TUserQueryStrategy, TData> CreateNewSingleResultQuery<TUserQueryStrategy, TData>()where TUserQueryStrategy : IQueryStrategy Returns Type Description ISingleResultQuery <TUserQueryStrategy, TData> Type Parameters Name Description TUserQueryStrategy The System.Type of IQueryStrategy it will use. TData The System.Type of data the ISingleResultQuery<TQueryStrategy, TData> will operate on."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryBuilder-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IQueryBuilder-2.html",
    "title": "Interface IQueryBuilder<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IQueryBuilder<TQueryStrategy, TData> Builds an System.Linq.IQueryable from a TQueryStrategy . Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IQueryBuilder<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data to query. Methods CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData>) Create an System.Linq.IQueryable of TData that expects a collection of TData items. Declaration IQueryable<TData> CreateQueryable(ICollectionResultQuery<TQueryStrategy, TData> collectionResultQuery) Parameters Type Name Description ICollectionResultQuery <TQueryStrategy, TData> collectionResultQuery The query. Returns Type Description System.Linq.IQueryable <TData> CreateQueryable(ISingleResultQuery<TQueryStrategy, TData>) Create an System.Linq.IQueryable of TData that expects a single TData item. Declaration IQueryable<TData> CreateQueryable(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery) Parameters Type Name Description ISingleResultQuery <TQueryStrategy, TData> singleResultQuery The query. Returns Type Description System.Linq.IQueryable <TData>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IOrQueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IOrQueryPredicate.html",
    "title": "Interface IOrQueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IOrQueryPredicate An IQueryPredicate where either the LeftQueryPredicate or the RightQueryPredicate must evaluate to true. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IOrQueryPredicate : IQueryPredicate Properties LeftQueryPredicate The left side IQueryPredicate . Declaration IQueryPredicate LeftQueryPredicate { get; } Property Value Type Description IQueryPredicate RightQueryPredicate The right side IQueryPredicate . Declaration IQueryPredicate RightQueryPredicate { get; } Property Value Type Description IQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ICollectionResultQuery-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.ICollectionResultQuery-2.html",
    "title": "Interface ICollectionResultQuery<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICollectionResultQuery<TQueryStrategy, TData> A query that will produce a result that contains a collection of TData items. Inherited Members IQueryWithStrategy<TQueryStrategy>.QueryStrategy IQueryWithResults<IEnumerable<TData>>.Result Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface ICollectionResultQuery<TQueryStrategy, out TData> : IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<IEnumerable<TData>> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data in the result collection."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IAndQueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.IAndQueryPredicate.html",
    "title": "Interface IAndQueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAndQueryPredicate An IQueryPredicate where both the LeftQueryPredicate and the RightQueryPredicate must evaluate to true. Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public interface IAndQueryPredicate : IQueryPredicate Properties LeftQueryPredicate The left side IQueryPredicate . Declaration IQueryPredicate LeftQueryPredicate { get; } Property Value Type Description IQueryPredicate RightQueryPredicate The right side IQueryPredicate . Declaration IQueryPredicate RightQueryPredicate { get; } Property Value Type Description IQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.CollectionResultQuery-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.CollectionResultQuery-2.html",
    "title": "Class CollectionResultQuery<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CollectionResultQuery<TQueryStrategy, TData> A query that will produce a result that contains a collection of TData items. Inheritance System.Object ResultQuery <TQueryStrategy, System.Collections.Generic.IEnumerable <TData>> CollectionResultQuery<TQueryStrategy, TData> Inherited Members ResultQuery<TQueryStrategy, IEnumerable<TData>>.QueryStrategy ResultQuery<TQueryStrategy, IEnumerable<TData>>.Result System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class CollectionResultQuery<TQueryStrategy, TData> : ResultQuery<TQueryStrategy, IEnumerable<TData>>, ICollectionResultQuery<TQueryStrategy, TData>, IQueryWithStrategy<TQueryStrategy>, IQueryWithResults<IEnumerable<TData>> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy The System.Type of the IQueryStrategy . TData The System.Type of data in the result collection."
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.AndQueryPredicate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.Queries.AndQueryPredicate.html",
    "title": "Class AndQueryPredicate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AndQueryPredicate An IQueryPredicate where both the LeftQueryPredicate and the RightQueryPredicate must evaluate to true. Inheritance System.Object AndQueryPredicate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories.Queries Assembly : Cqrs.dll Syntax public class AndQueryPredicate : IAndQueryPredicate, IQueryPredicate Properties LeftQueryPredicate The left side IQueryPredicate . Declaration public IQueryPredicate LeftQueryPredicate { get; } Property Value Type Description IQueryPredicate Implements IAndQueryPredicate.LeftQueryPredicate RightQueryPredicate The right side IQueryPredicate . Declaration public IQueryPredicate RightQueryPredicate { get; } Property Value Type Description IQueryPredicate Implements IAndQueryPredicate.RightQueryPredicate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.InMemoryDatabase.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.InMemoryDatabase.html",
    "title": "Class InMemoryDatabase | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InMemoryDatabase Uses a static System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> to store data accessible by all threads. Inheritance System.Object InMemoryDatabase Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Repositories Assembly : Cqrs.dll Syntax public class InMemoryDatabase Methods Get<TEntity>() Gets all instances of the specific TEntity grouped by their ID. Declaration public IDictionary<Guid, TEntity> Get<TEntity>()where TEntity : Entity Returns Type Description System.Collections.Generic.IDictionary < System.Guid , TEntity> Type Parameters Name Description TEntity GetAll<TEntity>() Gets all instances of the specific TEntity Declaration public IList<TEntity> GetAll<TEntity>()where TEntity : Entity Returns Type Description System.Collections.Generic.IList <TEntity> Type Parameters Name Description TEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Repositories.IRepository-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Repositories.IRepository-2.html",
    "title": "Interface IRepository<TQueryStrategy, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IRepository<TQueryStrategy, TData> Provides basic repository methods for operations with an IDataStore<TData> . Namespace : Cqrs.Repositories Assembly : Cqrs.dll Syntax public interface IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy Type Parameters Name Description TQueryStrategy TData Methods Create(TData) Create the newly provided data to storage. Declaration void Create(TData data) Parameters Type Name Description TData data Create(IEnumerable<TData>) Create the newly provided data to storage. Declaration void Create(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Delete(TData) Will mark the data as logically (or soft). Declaration void Delete(TData data) Parameters Type Name Description TData data DeleteAll() Delete all contents (normally by use of a truncate operation) in storage. Declaration void DeleteAll() Destroy(TData) Remove the provided data from storage. Declaration void Destroy(TData data) Parameters Type Name Description TData data Load(Guid, Boolean) Load the TData from storage identified by the provided rsn . Declaration TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true) Parameters Type Name Description System.Guid rsn The identifier if the TData to load. System.Boolean throwExceptionOnMissingEntity If true will throw an System.Exception if no data is found in storage. Returns Type Description TData Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Builds and executes the provided resultQuery . Declaration ICollectionResultQuery<TQueryStrategy, TData> Retrieve(ICollectionResultQuery<TQueryStrategy, TData> resultQuery) Parameters Type Name Description ICollectionResultQuery <TQueryStrategy, TData> resultQuery The ICollectionResultQuery<TQueryStrategy, TData> to build and execute. Returns Type Description ICollectionResultQuery <TQueryStrategy, TData> Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Builds and executes the provided singleResultQuery . Declaration ISingleResultQuery<TQueryStrategy, TData> Retrieve(ISingleResultQuery<TQueryStrategy, TData> singleResultQuery, bool throwExceptionWhenNoQueryResults = true) Parameters Type Name Description ISingleResultQuery <TQueryStrategy, TData> singleResultQuery The ISingleResultQuery<TQueryStrategy, TData> to build and execute. System.Boolean throwExceptionWhenNoQueryResults If true will throw an System.Exception if no data is found in storage. Returns Type Description ISingleResultQuery <TQueryStrategy, TData> Update(TData) Update the provided data in storage. Declaration void Update(TData data) Parameters Type Name Description TData data"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.html",
    "title": "Namespace Cqrs.Ninject.WebApi.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.WebApi.Configuration Classes SimplifiedNinjectWebApi A WebActivatorEx.PreApplicationStartMethodAttribute that calls Start() and WebActivatorEx.ApplicationShutdownMethodAttribute that calls Stop() configuring Simplified SQL by wiring up SimplifiedSqlModule<TAuthenticationToken> . WebApiModule A Ninject.Modules.INinjectModule that sets up default WebApi."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.WebApiModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.WebApiModule.html",
    "title": "Class WebApiModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class WebApiModule A Ninject.Modules.INinjectModule that sets up default WebApi. Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule WebApiModule Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.WebApi.Configuration Assembly : Cqrs.Ninject.WebApi.dll Syntax public class WebApiModule : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterWebApi() Register the some WebAPI and SignalR requirements Declaration protected virtual void RegisterWebApi()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.SimplifiedNinjectWebApi.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.WebApi.Configuration.SimplifiedNinjectWebApi.html",
    "title": "Class SimplifiedNinjectWebApi | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimplifiedNinjectWebApi A WebActivatorEx.PreApplicationStartMethodAttribute that calls Start() and WebActivatorEx.ApplicationShutdownMethodAttribute that calls Stop() configuring Simplified SQL by wiring up SimplifiedSqlModule<TAuthenticationToken> . Inheritance System.Object SimplifiedNinjectWebApi Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.WebApi.Configuration Assembly : Cqrs.Ninject.WebApi.dll Syntax public static class SimplifiedNinjectWebApi Methods Start() Starts the application. Declaration public static void Start() Stop() Stops the application. Declaration public static void Stop()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.ServiceHost.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.ServiceHost.html",
    "title": "Namespace Cqrs.Ninject.ServiceHost | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.ServiceHost Classes NinjectWcfServiceHostFactory<TServiceType> A Ninject.Extensions.Wcf.NinjectServiceHostFactory suitable for use with WCF."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.ServiceHost.NinjectWcfServiceHostFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.ServiceHost.NinjectWcfServiceHostFactory-1.html",
    "title": "Class NinjectWcfServiceHostFactory<TServiceType> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NinjectWcfServiceHostFactory<TServiceType> A Ninject.Extensions.Wcf.NinjectServiceHostFactory suitable for use with WCF. Inheritance System.Object System.ServiceModel.Activation.ServiceHostFactoryBase System.ServiceModel.Activation.ServiceHostFactory Ninject.Extensions.Wcf.BaseNinjectServiceHostFactory Ninject.Extensions.Wcf.NinjectServiceHostFactory NinjectWcfServiceHostFactory<TServiceType> Inherited Members Ninject.Extensions.Wcf.NinjectServiceHostFactory.ServiceHostType Ninject.Extensions.Wcf.BaseNinjectServiceHostFactory.SetKernel(Ninject.IKernel) System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.String, System.Uri[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.ServiceHost Assembly : Cqrs.Ninject.ServiceHost.dll Syntax public class NinjectWcfServiceHostFactory<TServiceType> : NinjectServiceHostFactory Type Parameters Name Description TServiceType The System.Type of the WCF service contract. Methods CreateServiceHost(Type, Uri[]) Creates a System.ServiceModel.ServiceHost for a specified type of service with a specific base address. Declaration protected override ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses) Parameters Type Name Description System.Type serviceType Specifies the System.Type of service to host. System.Uri [] baseAddresses The System.Array of type System.Uri that contains the base addresses for the service hosted. Returns Type Description System.ServiceModel.ServiceHost A System.ServiceModel.ServiceHost for the type of service specified with a specific base address. Overrides Ninject.Extensions.Wcf.BaseNinjectServiceHostFactory.CreateServiceHost(System.Type, System.Uri[])"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.html",
    "title": "Namespace Cqrs.Ninject.MongoDB | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.MongoDB Classes TestMongoDbDataStoreConnectionStringFactory A IMongoDbDataStoreConnectionStringFactory and IMongoDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Both IEventStore<TAuthenticationToken> and IDataStore<TData> use the same connection string and database name."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.TestMongoDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.TestMongoDbDataStoreConnectionStringFactory.html",
    "title": "Class TestMongoDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoDbDataStoreConnectionStringFactory A IMongoDbDataStoreConnectionStringFactory and IMongoDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Both IEventStore<TAuthenticationToken> and IDataStore<TData> use the same connection string and database name. Inheritance System.Object TestMongoDbDataStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.MongoDB Assembly : Cqrs.Ninject.MongoDB.dll Syntax public class TestMongoDbDataStoreConnectionStringFactory : IMongoDbDataStoreConnectionStringFactory, IMongoDbEventStoreConnectionStringFactory Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetDataStoreConnectionString() Gets the current connection string. Declaration public string GetDataStoreConnectionString() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreConnectionString() GetDataStoreDatabaseName() Gets the value of DatabaseName . Declaration public string GetDataStoreDatabaseName() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreDatabaseName() GetEventStoreConnectionString() Gets the current connection string. Declaration public string GetEventStoreConnectionString() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreConnectionString() GetEventStoreDatabaseName() Gets the value of DatabaseName . Declaration public string GetEventStoreDatabaseName() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.CommandBus.Configuration.InProcessCommandBusModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.CommandBus.Configuration.InProcessCommandBusModule-1.html",
    "title": "Class InProcessCommandBusModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessCommandBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a ICommandPublisher<TAuthenticationToken> and ICommandReceiver . Inheritance System.Object ResolvableModule InProcessCommandBusModule <TAuthenticationToken> InProcessCommandBusModule<TAuthenticationToken> Inherited Members InProcessCommandBusModule<TAuthenticationToken>.Load() InProcessCommandBusModule<TAuthenticationToken>.RegisterFactories() InProcessCommandBusModule<TAuthenticationToken>.RegisterServices() InProcessCommandBusModule<TAuthenticationToken>.RegisterCqrsRequirements() ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.InProcess.CommandBus.Configuration Assembly : Cqrs.Ninject.InProcess.CommandBus.dll Syntax public class InProcessCommandBusModule<TAuthenticationToken> : InProcessCommandBusModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Configuration Classes CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> The main for use with the CQRS package that wires up many of the prerequisites for running CQRS.NET. EventStoreModule<TAuthenticationToken> A that wires up EventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . InProcessCommandBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a ICommandPublisher<TAuthenticationToken> and ICommandReceiver . InProcessEventBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a IEventPublisher<TAuthenticationToken> and IEventReceiver . InProcessEventStoreModule<TAuthenticationToken> A that configures the InProcessEventStore<TAuthenticationToken> as a IEventStore<TAuthenticationToken> . MemoryCacheEventStoreModule<TAuthenticationToken> The for use with the Cqrs package. NinjectDependencyResolver Provides an ability to resolve instances of objects using Ninject ResolvableModule A that can resolve anything bound before being called. SimplifiedNinjectStartUp<THostModule> A start-up class. SimplifiedSqlModule<TAuthenticationToken> The to wireup IEvent<TAuthenticationToken> to SqlEventStore<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.SimplifiedSqlModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.SimplifiedSqlModule-1.html",
    "title": "Class SimplifiedSqlModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimplifiedSqlModule<TAuthenticationToken> The to wireup IEvent<TAuthenticationToken> to SqlEventStore<TAuthenticationToken> . Inheritance System.Object ResolvableModule SimplifiedSqlModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class SimplifiedSqlModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventSerialisationConfiguration() Register the all event serialisation configurations Declaration public virtual void RegisterEventSerialisationConfiguration() RegisterEventStore() Register the IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.SimplifiedNinjectStartUp-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.SimplifiedNinjectStartUp-1.html",
    "title": "Class SimplifiedNinjectStartUp<THostModule> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimplifiedNinjectStartUp<THostModule> A start-up class. Inheritance System.Object SimplifiedNinjectStartUp<THostModule> Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class SimplifiedNinjectStartUp<THostModule> : object where THostModule : INinjectModule, new () Type Parameters Name Description THostModule The base that is loaded first. Constructors SimplifiedNinjectStartUp(IConfigurationManager) Instantiates a new instance of SimplifiedNinjectStartUp<THostModule> Declaration public SimplifiedNinjectStartUp(IConfigurationManager configurationManager) Parameters Type Name Description IConfigurationManager configurationManager Properties ConfigurationManager The IConfigurationManager that will be used to resolve configuration settings in CreateKernel() . It is not used elsewhere. Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Methods AddSupplementryModules() When overridden allows for the addition of any additional modules required. Declaration protected virtual void AddSupplementryModules() CreateKernel() Creates the kernel that will manage your application. Declaration public virtual IKernel CreateKernel() Returns Type Description IKernel The created kernel. CreateNinjectKernel() Create a new Declaration protected virtual StandardKernel CreateNinjectKernel() Returns Type Description StandardKernel StartResolver(IKernel) Calls Start(IKernel, Boolean) Declaration protected virtual void StartResolver(IKernel kernel) Parameters Type Name Description IKernel kernel"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.ResolvableModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.ResolvableModule.html",
    "title": "Class ResolvableModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ResolvableModule A that can resolve anything bound before being called. Inheritance System.Object ResolvableModule AkkaModule<TAuthenticationToken> WebHostModule CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> InProcessCommandBusModule<TAuthenticationToken> InProcessEventBusModule<TAuthenticationToken> InProcessEventStoreModule<TAuthenticationToken> MemoryCacheEventStoreModule<TAuthenticationToken> SimplifiedSqlModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public abstract class ResolvableModule : NinjectModule Methods IsRegistered(Type) Indicates if the provided type is already registered or not. Declaration public bool IsRegistered(Type type) Parameters Type Name Description Type type The to check. Returns Type Description System.Boolean IsRegistered<T>() Indicates if the provided T is already registered or not. Declaration public bool IsRegistered<T>() Returns Type Description System.Boolean Type Parameters Name Description T The to check. Resolve(Type) Resolves instances for the specified type . Declaration protected virtual object Resolve(Type type) Parameters Type Name Description Type type The to resolve. Returns Type Description System.Object Null if no resolution is made. Resolve<T>() Resolves instances for the specified T . Declaration protected virtual T Resolve<T>() Returns Type Description T Null if no resolution is made. Type Parameters Name Description T The to resolve."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.NinjectDependencyResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.NinjectDependencyResolver.html",
    "title": "Class NinjectDependencyResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NinjectDependencyResolver Provides an ability to resolve instances of objects using Ninject Inheritance System.Object DependencyResolver NinjectDependencyResolver AkkaNinjectDependencyResolver Inherited Members DependencyResolver.Current DependencyResolver.Resolve(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class NinjectDependencyResolver : DependencyResolver, IDependencyResolver Constructors NinjectDependencyResolver(IKernel) Instantiates a new instance of NinjectDependencyResolver Declaration public NinjectDependencyResolver(IKernel kernel) Parameters Type Name Description IKernel kernel Fields ModulesToLoad A collection of instances to load when we call PrepareKernel(IKernel) Declaration public static IList<INinjectModule> ModulesToLoad Field Value Type Description IList < INinjectModule > Properties DependencyResolverCreator A user supplied that will be called during Start(IKernel, Boolean) to create and populate Current . Declaration public static Func<IKernel, NinjectDependencyResolver> DependencyResolverCreator { get; set; } Property Value Type Description Func < IKernel , NinjectDependencyResolver > Kernel The inner Ninject used by this instance. Declaration public IKernel Kernel { get; } Property Value Type Description IKernel Methods BindDependencyResolver() Checks if IDependencyResolver has already been registered and if not, registers this instance to it. Declaration protected virtual void BindDependencyResolver() PrepareKernel(IKernel) Calls passing in ModulesToLoad Declaration public static void PrepareKernel(IKernel kernel) Parameters Type Name Description IKernel kernel The the ModulesToLoad will be loaded into. Resolve(Type) Resolves a single instance for the specified type . by calling Declaration public override object Resolve(Type type) Parameters Type Name Description Type type Returns Type Description System.Object Resolve<T>() Resolves a single instance for the specified T . by calling Declaration public override T Resolve<T>() Returns Type Description T Type Parameters Name Description T Overrides DependencyResolver.Resolve<T>() Start(IKernel, Boolean) Starts the NinjectDependencyResolver Declaration public static void Start(IKernel kernel = null, bool prepareProvidedKernel = false) Parameters Type Name Description IKernel kernel System.Boolean prepareProvidedKernel Remarks this exists to the static constructor can be triggered."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.MemoryCacheEventStoreModule-1.html",
    "title": "Class MemoryCacheEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MemoryCacheEventStoreModule<TAuthenticationToken> The for use with the Cqrs package. Inheritance System.Object ResolvableModule MemoryCacheEventStoreModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class MemoryCacheEventStoreModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventSerialisationConfiguration() Register the all event serialisation configurations Declaration public virtual void RegisterEventSerialisationConfiguration() RegisterEventStore() Register the IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessEventStoreModule-1.html",
    "title": "Class InProcessEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventStoreModule<TAuthenticationToken> A that configures the InProcessEventStore<TAuthenticationToken> as a IEventStore<TAuthenticationToken> . Inheritance System.Object ResolvableModule InProcessEventStoreModule<TAuthenticationToken> InProcessEventStoreModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class InProcessEventStoreModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventStore() Register the InProcessEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessEventBusModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessEventBusModule-1.html",
    "title": "Class InProcessEventBusModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a IEventPublisher<TAuthenticationToken> and IEventReceiver . Inheritance System.Object ResolvableModule InProcessEventBusModule<TAuthenticationToken> InProcessEventBusModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class InProcessEventBusModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCqrsRequirements() Register the IEventPublisher<TAuthenticationToken> , IEventReceiver<TAuthenticationToken> and IEventHandlerRegistrar . Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessCommandBusModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.InProcessCommandBusModule-1.html",
    "title": "Class InProcessCommandBusModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessCommandBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a ICommandPublisher<TAuthenticationToken> and ICommandReceiver . Inheritance System.Object ResolvableModule InProcessCommandBusModule<TAuthenticationToken> InProcessCommandBusModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class InProcessCommandBusModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCqrsRequirements() Register the ICommandPublisher<TAuthenticationToken> , IPublishAndWaitCommandPublisher<TAuthenticationToken> , ICommandReceiver<TAuthenticationToken> and ICommandHandlerRegistrar Register (for backwards compatibility) ICommandSender<TAuthenticationToken> Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.EventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.EventStoreModule-1.html",
    "title": "Class EventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreModule<TAuthenticationToken> A that wires up EventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . Inheritance System.Object EventStoreModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.EventStore.dll Syntax public class EventStoreModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCqrsRequirements() Register the IEventStoreConnectionHelper and IEventStore<TAuthenticationToken> . Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.CqrsModule-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Configuration.CqrsModule-2.html",
    "title": "Class CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> The main for use with the CQRS package that wires up many of the prerequisites for running CQRS.NET. Inheritance System.Object ResolvableModule CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Configuration Assembly : Cqrs.Ninject.dll Syntax public class CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> : ResolvableModule where TAuthenticationTokenHelper : class, IAuthenticationTokenHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. TAuthenticationTokenHelper The of the authentication token helper. Constructors CqrsModule(IConfigurationManager) Instantiate a new instance of the CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> that uses the provided configurationManager to read the following configuration settings: \"Cqrs.SetupForWeb\": If set to true the system will be configured for hosting in IIS or some other web-server that provides access to System.Web.HttpContext.Current. \"Cqrs.SetupForSqlLogging\": If set to true the will be bootstrapped by default, otherwise the will be bootstrapped by default. \"Cqrs.RegisterDefaultConfigurationManager\": If set true the ConfigurationManager will be registered. If you want to use the Azure one leave this as false (the default) and register it yourself. Declaration public CqrsModule(IConfigurationManager configurationManager = null) Parameters Type Name Description IConfigurationManager configurationManager The IConfigurationManager to use, if one isn't provided then ConfigurationManager is instantiate, used and then disposed. CqrsModule(Boolean, Boolean, Boolean) Instantiate a new instance of the CqrsModule<TAuthenticationToken, TAuthenticationTokenHelper> . Declaration public CqrsModule(bool setupForWeb, bool setupForSqlLogging, bool registerDefaultConfigurationManager = false) Parameters Type Name Description System.Boolean setupForWeb Set this to true if you will host this in IIS or some other web-server that provides access to System.Web.HttpContext.Current. System.Boolean setupForSqlLogging Set this to true to use otherwise the will be bootstrapped by default. System.Boolean registerDefaultConfigurationManager Set this to true to use ConfigurationManager . If you want to use the Azure one leave this as false (the default) and register it yourself. Properties RegisterDefaultConfigurationManager Indicates that the ConfigurationManager should be registered automatically. Declaration protected bool RegisterDefaultConfigurationManager { get; } Property Value Type Description System.Boolean SetupForSqlLogging Indicates that logging should be configured for SQL Server rather than console. Declaration protected bool SetupForSqlLogging { get; } Property Value Type Description System.Boolean SetupForWeb Indicates that web based wire-up is required rather than console, WPF or winforms based wire-up.s Declaration protected bool SetupForWeb { get; } Property Value Type Description System.Boolean Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterAutomapperComponents() Register the all Declaration public virtual void RegisterAutomapperComponents() RegisterCaching() Register the all caching stuffs Declaration public virtual void RegisterCaching() RegisterCqrsRequirements() Register the all Cqrs requirements Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterLoggerComponents() Register the all components for the Declaration public virtual void RegisterLoggerComponents() RegisterQueryBuilders() Register the all query builders Declaration public virtual void RegisterQueryBuilders() RegisterRepositories() Register the all repositories Declaration public virtual void RegisterRepositories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.html",
    "title": "Namespace Cqrs.Ninject.Azure.WebJobs | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.WebJobs Classes CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> Execute command and event handlers in an Azure WebJob using Ninject"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.CqrsNinjectJobHost-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.CqrsNinjectJobHost-2.html",
    "title": "Class CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> Execute command and event handlers in an Azure WebJob using Ninject Inheritance System.Object CoreHost <TAuthenticationToken> TelemetryCoreHost <TAuthenticationToken> CqrsWebHost <TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule > CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> Inherited Members CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule>.ConfigureDefaultDependencyResolver() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule>.GetSupplementaryModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule>.GetCommandBusModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule>.GetEventBusModules() CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule>.GetEventStoreModules() TelemetryCoreHost<TAuthenticationToken>._configurationManager TelemetryCoreHost<TAuthenticationToken>.ConfigurationManager TelemetryCoreHost<TAuthenticationToken>.TelemetryClient TelemetryCoreHost<TAuthenticationToken>.ConfigureTelemetry() TelemetryCoreHost<TAuthenticationToken>.Run(Action) TelemetryCoreHost<TAuthenticationToken>.PrepareSecurityProtocol() TelemetryCoreHost<TAuthenticationToken>.Prepare() TelemetryCoreHost<TAuthenticationToken>.Start() CoreHost<TAuthenticationToken>.HandlerTypes CoreHost<TAuthenticationToken>.EventBus CoreHost<TAuthenticationToken>.CommandBus CoreHost<TAuthenticationToken>.TelemetryName CoreHost<TAuthenticationToken>.CorrelationIdHelper CoreHost<TAuthenticationToken>.Logger CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver() CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.StartBusRegistrar() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.WebJobs Assembly : Cqrs.Ninject.Azure.WebJobs.dll Syntax public class CqrsNinjectJobHost<TAuthenticationToken, TAuthenticationTokenHelper> : CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, WebJobHostModule> where TAuthenticationTokenHelper : class, IAuthenticationTokenHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TAuthenticationTokenHelper Properties CoreHost The CoreHost to run, WebJobs are console apps and console apps start via a static method, this is the instance that static method will actually run. Declaration protected static CoreHost<TAuthenticationToken> CoreHost { get; set; } Property Value Type Description CoreHost <TAuthenticationToken> PreRunAndBlockAction An System.Action to run just before Microsoft.Azure.WebJobs.JobHost.RunAndBlock . Declaration protected static Action PreRunAndBlockAction { get; set; } Property Value Type Description System.Action Methods StartHost() Declaration protected static void StartHost() Remarks Please set the following connection strings in app.config for this WebJob to run: AzureWebJobsDashboard and AzureWebJobsStorage Better yet, add them to your Azure portal so they can be changed at runtime without re-deploying or re-compiling."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.WebJobs.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.WebJobs.Configuration Classes WebJobHostModule The core Ninject.Modules.INinjectModule for use defining base level requirements."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.Configuration.WebJobHostModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.WebJobs.Configuration.WebJobHostModule.html",
    "title": "Class WebJobHostModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class WebJobHostModule The core Ninject.Modules.INinjectModule for use defining base level requirements. Inheritance System.Object ResolvableModule WebHostModule WebJobHostModule Inherited Members WebHostModule.Load() WebHostModule.RegisterAzureConfigurations() WebHostModule.RegisterBasicHelpers() WebHostModule.RegisterBasicSerives() WebHostModule.RegisterWebBit() ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Azure.WebJobs.Configuration Assembly : Cqrs.Ninject.Azure.WebJobs.dll Syntax public class WebJobHostModule : WebHostModule Methods RegisterContextItemCollectionFactory() Registers the cdmdotnet.StateManagement.IContextItemCollectionFactory required. Declaration protected override void RegisterContextItemCollectionFactory() Overrides WebHostModule.RegisterContextItemCollectionFactory()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Factories.html",
    "title": "Namespace Cqrs.Ninject.Azure.DocumentDb.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.DocumentDb.Factories Classes TestAzureDocumentDbDataStoreConnectionStringFactory A AzureDocumentDbDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Factories.TestAzureDocumentDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Factories.TestAzureDocumentDbDataStoreConnectionStringFactory.html",
    "title": "Class TestAzureDocumentDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAzureDocumentDbDataStoreConnectionStringFactory A AzureDocumentDbDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Inheritance System.Object AzureDocumentDbDataStoreConnectionStringFactory TestAzureDocumentDbDataStoreConnectionStringFactory Inherited Members AzureDocumentDbDataStoreConnectionStringFactory.Logger AzureDocumentDbDataStoreConnectionStringFactory.ConfigurationManager AzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbConnectionClient() AzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbCollectionName() AzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbConnectionUrl() AzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbAuthorisationKey() Namespace : Cqrs.Ninject.Azure.DocumentDb.Factories Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class TestAzureDocumentDbDataStoreConnectionStringFactory : AzureDocumentDbDataStoreConnectionStringFactory, IAzureDocumentDbDataStoreConnectionStringFactory Constructors TestAzureDocumentDbDataStoreConnectionStringFactory(ILogger) Instantiates a new instance of TestAzureDocumentDbDataStoreConnectionStringFactory defaulting to using ConfigurationManager Declaration public TestAzureDocumentDbDataStoreConnectionStringFactory(ILogger logger) Parameters Type Name Description ILogger logger Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetAzureDocumentDbDatabaseName() Gets the value of DatabaseName . Declaration public override string GetAzureDocumentDbDatabaseName() Returns Type Description System.String Overrides AzureDocumentDbDataStoreConnectionStringFactory.GetAzureDocumentDbDatabaseName() UseSingleCollectionForAllDataStores() Indicates if a different collection should be used per IEntity / IDataStore<TData> or a single collection used for all instances of IDataStore<TData> and IDataStore<TData> . Setting this to true can become expensive as each IEntity will have it's own collection. Check the relevant SDK/pricing models. Declaration public override bool UseSingleCollectionForAllDataStores() Returns Type Description System.Boolean Always returns true. Overrides AzureDocumentDbDataStoreConnectionStringFactory.UseSingleCollectionForAllDataStores()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Events.html",
    "title": "Namespace Cqrs.Ninject.Azure.DocumentDb.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.DocumentDb.Events Classes TestAzureDocumentDbEventStoreConnectionStringFactory A AzureDocumentDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Events.TestAzureDocumentDbEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Events.TestAzureDocumentDbEventStoreConnectionStringFactory.html",
    "title": "Class TestAzureDocumentDbEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAzureDocumentDbEventStoreConnectionStringFactory A AzureDocumentDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Inheritance System.Object AzureDocumentDbEventStoreConnectionStringFactory TestAzureDocumentDbEventStoreConnectionStringFactory Inherited Members AzureDocumentDbEventStoreConnectionStringFactory.Logger AzureDocumentDbEventStoreConnectionStringFactory.ConfigurationManager AzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionClient() AzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionCollectionName() AzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionUrl() AzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionAuthorisationKey() Namespace : Cqrs.Ninject.Azure.DocumentDb.Events Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class TestAzureDocumentDbEventStoreConnectionStringFactory : AzureDocumentDbEventStoreConnectionStringFactory, IAzureDocumentDbEventStoreConnectionStringFactory Constructors TestAzureDocumentDbEventStoreConnectionStringFactory(ILogger) Instantiates a new instance of TestAzureDocumentDbEventStoreConnectionStringFactory defaulting to using ConfigurationManager Declaration public TestAzureDocumentDbEventStoreConnectionStringFactory(ILogger logger) Parameters Type Name Description ILogger logger Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetEventStoreConnectionDatabaseName() Gets the value of DatabaseName . Declaration public override string GetEventStoreConnectionDatabaseName() Returns Type Description System.String Overrides AzureDocumentDbEventStoreConnectionStringFactory.GetEventStoreConnectionDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.DocumentDb.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.DocumentDb.Configuration Classes AzureDocumentDbEventStoreModule<TAuthenticationToken> A that wires up AzureDocumentDbEventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . AzureDocumentDbModule A that wires up AzureDocumentDbDataStoreConnectionStringFactory as the IAzureDocumentDbDataStoreConnectionStringFactory . TestAzureDocumentDbEventStoreModule<TAuthenticationToken> A that wires up AzureDocumentDbEventStoreConnectionStringFactory as the IAzureDocumentDbEventStoreConnectionStringFactory . TestAzureDocumentDbModule A that wires up TestAzureDocumentDbDataStoreConnectionStringFactory as the IAzureDocumentDbDataStoreConnectionStringFactory ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.TestAzureDocumentDbModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.TestAzureDocumentDbModule.html",
    "title": "Class TestAzureDocumentDbModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAzureDocumentDbModule A that wires up TestAzureDocumentDbDataStoreConnectionStringFactory as the IAzureDocumentDbDataStoreConnectionStringFactory . Inheritance System.Object AzureDocumentDbModule TestAzureDocumentDbModule Inherited Members AzureDocumentDbModule.Load() AzureDocumentDbModule.RegisterServices() AzureDocumentDbModule.RegisterCqrsRequirements() AzureDocumentDbModule.RegisterAzureHelpers() Namespace : Cqrs.Ninject.Azure.DocumentDb.Configuration Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class TestAzureDocumentDbModule : AzureDocumentDbModule Methods RegisterFactories() Register the all factories Declaration public override void RegisterFactories() Overrides AzureDocumentDbModule.RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.TestAzureDocumentDbEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.TestAzureDocumentDbEventStoreModule-1.html",
    "title": "Class TestAzureDocumentDbEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestAzureDocumentDbEventStoreModule<TAuthenticationToken> A that wires up AzureDocumentDbEventStoreConnectionStringFactory as the IAzureDocumentDbEventStoreConnectionStringFactory . Inheritance System.Object AzureDocumentDbEventStoreModule <TAuthenticationToken> TestAzureDocumentDbEventStoreModule<TAuthenticationToken> Inherited Members AzureDocumentDbEventStoreModule<TAuthenticationToken>.Load() AzureDocumentDbEventStoreModule<TAuthenticationToken>.RegisterFactories() AzureDocumentDbEventStoreModule<TAuthenticationToken>.RegisterServices() AzureDocumentDbEventStoreModule<TAuthenticationToken>.RegisterAzureHelpers() Namespace : Cqrs.Ninject.Azure.DocumentDb.Configuration Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class TestAzureDocumentDbEventStoreModule<TAuthenticationToken> : AzureDocumentDbEventStoreModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods RegisterEventStore() Register the IAzureDocumentDbEventStoreConnectionStringFactory and IEventStore<TAuthenticationToken> Declaration public override void RegisterEventStore() Overrides Cqrs.Ninject.Azure.DocumentDb.Configuration.AzureDocumentDbEventStoreModule<TAuthenticationToken>.RegisterEventStore()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.AzureDocumentDbModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.AzureDocumentDbModule.html",
    "title": "Class AzureDocumentDbModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbModule A that wires up AzureDocumentDbDataStoreConnectionStringFactory as the IAzureDocumentDbDataStoreConnectionStringFactory . Inheritance System.Object AzureDocumentDbModule TestAzureDocumentDbModule Namespace : Cqrs.Ninject.Azure.DocumentDb.Configuration Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class AzureDocumentDbModule : NinjectModule Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterAzureHelpers() Register IAzureDocumentDbHelper if it hasn't already been registered. Declaration public virtual void RegisterAzureHelpers() RegisterCqrsRequirements() Register any CQRS requirements. Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.AzureDocumentDbEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.DocumentDb.Configuration.AzureDocumentDbEventStoreModule-1.html",
    "title": "Class AzureDocumentDbEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEventStoreModule<TAuthenticationToken> A that wires up AzureDocumentDbEventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . Inheritance System.Object AzureDocumentDbEventStoreModule<TAuthenticationToken> TestAzureDocumentDbEventStoreModule<TAuthenticationToken> Namespace : Cqrs.Ninject.Azure.DocumentDb.Configuration Assembly : Cqrs.Ninject.Azure.DocumentDb.dll Syntax public class AzureDocumentDbEventStoreModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterAzureHelpers() Register IAzureDocumentDbHelper if it hasn't already been registered. Declaration public virtual void RegisterAzureHelpers() RegisterEventStore() Register the IAzureDocumentDbEventStoreConnectionStringFactory and IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Azure.BlobStorage.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.BlobStorage.Configuration Classes BlobStorageDataStoreModule A Ninject.Modules.INinjectModule that wires up BlobStorageDataStoreConnectionStringFactory as the IBlobStorageDataStoreConnectionStringFactory . BlobStoragEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up the prerequisites of IEventStore<TAuthenticationToken> with blob storage. TableStorageDataStoreModule A Ninject.Modules.INinjectModule that wires up TableStorageDataStoreConnectionStringFactory as the ITableStorageDataStoreConnectionStringFactory . TableStoragEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up the prerequisites of IEventStore<TAuthenticationToken> with table storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStorageDataStoreModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStorageDataStoreModule.html",
    "title": "Class TableStorageDataStoreModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStoreModule A Ninject.Modules.INinjectModule that wires up TableStorageDataStoreConnectionStringFactory as the ITableStorageDataStoreConnectionStringFactory . Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule TableStorageDataStoreModule Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.BlobStorage.Configuration Assembly : Cqrs.Ninject.Azure.BlobStorage.dll Syntax public class TableStorageDataStoreModule : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.TableStoragEventStoreModule-1.html",
    "title": "Class TableStoragEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStoragEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up the prerequisites of IEventStore<TAuthenticationToken> with table storage. Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule TableStoragEventStoreModule<TAuthenticationToken> Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.BlobStorage.Configuration Assembly : Cqrs.Ninject.Azure.BlobStorage.dll Syntax public class TableStoragEventStoreModule<TAuthenticationToken> : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterEventSerialisationConfiguration() Register the all event serialisation configurations Declaration public virtual void RegisterEventSerialisationConfiguration() RegisterEventStore() Register the IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.BlobStorageDataStoreModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.BlobStorageDataStoreModule.html",
    "title": "Class BlobStorageDataStoreModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageDataStoreModule A Ninject.Modules.INinjectModule that wires up BlobStorageDataStoreConnectionStringFactory as the IBlobStorageDataStoreConnectionStringFactory . Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule BlobStorageDataStoreModule Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.BlobStorage.Configuration Assembly : Cqrs.Ninject.Azure.BlobStorage.dll Syntax public class BlobStorageDataStoreModule : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterFactories() Register all the factories Declaration public virtual void RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.BlobStoragEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.BlobStorage.Configuration.BlobStoragEventStoreModule-1.html",
    "title": "Class BlobStoragEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStoragEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up the prerequisites of IEventStore<TAuthenticationToken> with blob storage. Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule BlobStoragEventStoreModule<TAuthenticationToken> Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Azure.BlobStorage.Configuration Assembly : Cqrs.Ninject.Azure.BlobStorage.dll Syntax public class BlobStoragEventStoreModule<TAuthenticationToken> : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterEventSerialisationConfiguration() Register the all event serialisation configurations Declaration public virtual void RegisterEventSerialisationConfiguration() RegisterEventStore() Register the IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.html",
    "title": "Namespace Cqrs.Ninject.Akka | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Akka Classes AkkaNinjectDependencyResolver Provides an ability to resolve instances of objects and Akka.NET objects using Ninject"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Akka.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Akka.Configuration Classes AkkaModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up many of the prerequisites for running CQRS.NET with Akka.NET"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.Configuration.AkkaModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.Configuration.AkkaModule-1.html",
    "title": "Class AkkaModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up many of the prerequisites for running CQRS.NET with Akka.NET Inheritance System.Object ResolvableModule AkkaModule<TAuthenticationToken> Inherited Members ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.Akka.Configuration Assembly : Cqrs.Ninject.Akka.dll Syntax public class AkkaModule<TAuthenticationToken> : ResolvableModule Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.AkkaNinjectDependencyResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Akka.AkkaNinjectDependencyResolver.html",
    "title": "Class AkkaNinjectDependencyResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaNinjectDependencyResolver Provides an ability to resolve instances of objects and Akka.NET objects using Ninject Inheritance System.Object DependencyResolver NinjectDependencyResolver AkkaNinjectDependencyResolver Inherited Members NinjectDependencyResolver.Kernel NinjectDependencyResolver.ModulesToLoad NinjectDependencyResolver.DependencyResolverCreator NinjectDependencyResolver.Start(IKernel, Boolean) NinjectDependencyResolver.PrepareKernel(IKernel) NinjectDependencyResolver.Resolve<T>() NinjectDependencyResolver.Resolve(Type) DependencyResolver.Current System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.Akka Assembly : Cqrs.Ninject.Akka.dll Syntax public class AkkaNinjectDependencyResolver : NinjectDependencyResolver, IDependencyResolver, IAkkaAggregateResolver, IAkkaSagaResolver, IHandlerResolver Constructors AkkaNinjectDependencyResolver(IKernel, ActorSystem) Instantiates a new instance of AkkaNinjectDependencyResolver Declaration public AkkaNinjectDependencyResolver(IKernel kernel, ActorSystem system) Parameters Type Name Description Ninject.IKernel kernel Akka.Actor.ActorSystem system Properties AggregateFactory The IAggregateFactory that will be used to create new instances of Akka.NET objects. Declaration protected IAggregateFactory AggregateFactory { get; } Property Value Type Description IAggregateFactory AkkaActors A generic type, quick reference, lookup for fast resolving of Akka.NET objects since the patterns calls for them to be treated like statics Declaration protected IDictionary<Type, IActorRef> AkkaActors { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , Akka.Actor.IActorRef > AkkaSystem The Akka.Actor.ActorSystem as part of Akka.NET. Declaration protected ActorSystem AkkaSystem { get; } Property Value Type Description Akka.Actor.ActorSystem RawAkkaNinjectDependencyResolver The inner resolver used by Akka.NET Declaration protected NinjectDependencyResolver RawAkkaNinjectDependencyResolver { get; set; } Property Value Type Description Akka.DI.Ninject.NinjectDependencyResolver Methods AkkaResolve(Type, Object, Boolean) Resolves instances of serviceType looking up AkkaActors , then Resolve<T>() and finally AggregateFactory . Declaration public virtual object AkkaResolve(Type serviceType, object rsn, bool isAForcedActorSearch = false) Parameters Type Name Description System.Type serviceType System.Object rsn System.Boolean isAForcedActorSearch Returns Type Description System.Object BindDependencyResolver() Checks if an instance of IDependencyResolver is already registered, if one is registered, it in unregistered and this instance is registered as the IDependencyResolver . It then checks if an instance of IAkkaAggregateResolver is already registered, if one is registered, it in unregistered and this instance is registered as the IAkkaAggregateResolver Declaration protected override void BindDependencyResolver() Overrides NinjectDependencyResolver.BindDependencyResolver() Resolve(Type) Resolves instances of serviceType using Resolve(Type, Object) . Declaration public override object Resolve(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object Overrides DependencyResolver.Resolve(Type) Resolve(Type, Object) Resolves instances of serviceType using AkkaResolve(Type, Object, Boolean) . Declaration public virtual object Resolve(Type serviceType, object rsn) Parameters Type Name Description System.Type serviceType System.Object rsn Returns Type Description System.Object Implements IHandlerResolver.Resolve(Type, Object) ResolveActor<T>() Resolves instances of T using AkkaResolve(Type, Object, Boolean) . Declaration public IActorRef ResolveActor<T>() Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description T Implements IAkkaAggregateResolver.ResolveActor<T>() IAkkaSagaResolver.ResolveActor<T>() ResolveActor<TAggregate, TAuthenticationToken>(Guid) Resolves instances of TAggregate using AkkaResolve(Type, Object, Boolean) . Declaration public virtual IActorRef ResolveActor<TAggregate, TAuthenticationToken>(Guid rsn)where TAggregate : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid rsn Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description TAggregate TAuthenticationToken Implements IAkkaAggregateResolver.ResolveActor<TAggregate, TAuthenticationToken>(Guid) ResolveSagaActor<TSaga, TAuthenticationToken>(Guid) Resolves instances of TSaga using AkkaResolve(Type, Object, Boolean) . Declaration public virtual IActorRef ResolveSagaActor<TSaga, TAuthenticationToken>(Guid rsn)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid rsn Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description TSaga TAuthenticationToken RootResolve(Type) Resolves instances of serviceType using Resolve<T>() . Declaration protected virtual object RootResolve(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object Start(IKernel, Boolean) Starts the AkkaNinjectDependencyResolver Declaration public static void Start(IKernel kernel = null, bool prepareProvidedKernel = false) Parameters Type Name Description Ninject.IKernel kernel System.Boolean prepareProvidedKernel Remarks This exists so the static constructor can be triggered. Stop() Calls Akka.Actor.ActorSystem.Shutdown Declaration public static void Stop() Explicit Interface Implementations IAkkaSagaResolver.ResolveActor<TSaga, TAuthenticationToken>(Guid) Resolves instances of TSaga using ResolveSagaActor<TSaga, TAuthenticationToken>(Guid) . Declaration IActorRef IAkkaSagaResolver.ResolveActor<TSaga, TAuthenticationToken>(Guid rsn)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid rsn Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description TSaga TAuthenticationToken Implements IAkkaSagaResolver.ResolveActor<TSaga, TAuthenticationToken>(Guid)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.html",
    "title": "Namespace Cqrs.MongoDB.Tests.Integration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Tests.Integration Classes MongoDbDataStoreTests A series of tests on the MongoDbDataStore<TData> class MongoDbEventStoreTests A series of tests on the MongoDbEventStore<TAuthenticationToken> class TestMongoDataStoreConnectionStringFactory A IMongoDbDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. TestMongoDbDataStoreFactory A MongoDbDataStoreFactory that provides a MongoDB.Driver.IMongoCollection<TDocument> or TestEvent . TestMongoEventStoreConnectionStringFactory A IMongoDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoEventStoreConnectionStringFactory.html",
    "title": "Class TestMongoEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoEventStoreConnectionStringFactory A IMongoDbEventStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Inheritance System.Object TestMongoEventStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Tests.Integration Assembly : Cqrs.MongoDB.Tests.Integration.dll Syntax public class TestMongoEventStoreConnectionStringFactory : IMongoDbEventStoreConnectionStringFactory Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetEventStoreConnectionString() Gets the current connection string named \"MongoDb-Test\" Declaration public string GetEventStoreConnectionString() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreConnectionString() GetEventStoreDatabaseName() Gets the value of DatabaseName . Declaration public string GetEventStoreDatabaseName() Returns Type Description System.String Implements IMongoDbEventStoreConnectionStringFactory.GetEventStoreDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoDbDataStoreFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoDbDataStoreFactory.html",
    "title": "Class TestMongoDbDataStoreFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoDbDataStoreFactory A MongoDbDataStoreFactory that provides a MongoDB.Driver.IMongoCollection<TDocument> or TestEvent . Inheritance System.Object MongoDbDataStoreFactory TestMongoDbDataStoreFactory Inherited Members MongoDbDataStoreFactory.Logger MongoDbDataStoreFactory.MongoDbDataStoreConnectionStringFactory MongoDbDataStoreFactory.GetCollection<TEntity>() MongoDbDataStoreFactory.VerifyIndexes<TEntity>(IMongoCollection<TEntity>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Tests.Integration Assembly : Cqrs.MongoDB.Tests.Integration.dll Syntax public class TestMongoDbDataStoreFactory : MongoDbDataStoreFactory Constructors TestMongoDbDataStoreFactory(ILogger, IMongoDbDataStoreConnectionStringFactory) Instantiates a new instance of TestMongoDbDataStoreFactory Declaration public TestMongoDbDataStoreFactory(ILogger logger, IMongoDbDataStoreConnectionStringFactory mongoDbDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IMongoDbDataStoreConnectionStringFactory mongoDbDataStoreConnectionStringFactory Methods GetTestEventCollection() Get a MongoDB.Driver.IMongoCollection<TDocument> of TestEvent Declaration public IMongoCollection<TestEvent> GetTestEventCollection() Returns Type Description MongoDB.Driver.IMongoCollection < TestEvent >"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.TestMongoDataStoreConnectionStringFactory.html",
    "title": "Class TestMongoDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoDataStoreConnectionStringFactory A IMongoDbDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Inheritance System.Object TestMongoDataStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Tests.Integration Assembly : Cqrs.MongoDB.Tests.Integration.dll Syntax public class TestMongoDataStoreConnectionStringFactory : IMongoDbDataStoreConnectionStringFactory Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetDataStoreConnectionString() Gets the current connection string named \"MongoDb-Test\" Declaration public string GetDataStoreConnectionString() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreConnectionString() GetDataStoreDatabaseName() Gets the value of DatabaseName . Declaration public string GetDataStoreDatabaseName() Returns Type Description System.String Implements IMongoDbDataStoreConnectionStringFactory.GetDataStoreDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.MongoDbEventStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.MongoDbEventStoreTests.html",
    "title": "Class MongoDbEventStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventStoreTests A series of tests on the MongoDbEventStore<TAuthenticationToken> class Inheritance System.Object MongoDbEventStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Tests.Integration Assembly : Cqrs.MongoDB.Tests.Integration.dll Syntax [TestFixture] public class MongoDbEventStoreTests Methods Save_ValidEvent_EventCanBeRetreived() Tests the Save(Type, IEvent<TAuthenticationToken>) method Passing a valid test IEvent<TAuthenticationToken> Expecting the test IEvent<TAuthenticationToken> is able to be read. Declaration [Test] public void Save_ValidEvent_EventCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.MongoDbDataStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Tests.Integration.MongoDbDataStoreTests.html",
    "title": "Class MongoDbDataStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbDataStoreTests A series of tests on the MongoDbDataStore<TData> class Inheritance System.Object MongoDbDataStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Tests.Integration Assembly : Cqrs.MongoDB.Tests.Integration.dll Syntax [TestFixture] public class MongoDbDataStoreTests Methods Add_ValidProjectionView_ProjectionViewCanBeRetreived() Tests the Add(TData) method Passing a valid test IEntity Expecting the test IEntity is able to be read. Declaration [Test] public void Add_ValidProjectionView_ProjectionViewCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.html",
    "title": "Namespace Cqrs.MongoDB.Serialisers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Serialisers Classes BasicStructSerialiser<TStruct> A MongoDB.Bson.Serialization.Serializers.StructSerializerBase<TValue> with reasonable level support for structs. MongoDbEventBuilder<TAuthenticationToken> Builds EventData from various input formats leaving the event data unserialised. MongoDbEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. TypeSerialiser A MongoDB.Bson.Serialization.IBsonSerializer that stores System.Type information as well."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.TypeSerialiser.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.TypeSerialiser.html",
    "title": "Class TypeSerialiser | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TypeSerialiser A MongoDB.Bson.Serialization.IBsonSerializer that stores System.Type information as well. Inheritance System.Object TypeSerialiser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Serialisers Assembly : Cqrs.MongoDB.dll Syntax public class TypeSerialiser : IBsonSerializer<Type>, IBsonSerializer Properties ValueType Gets the type of the value. Declaration public Type ValueType { get; protected set; } Property Value Type Description System.Type Implements MongoDB.Bson.Serialization.IBsonSerializer.ValueType Methods Deserialize(BsonDeserializationContext, BsonDeserializationArgs) Deserialises a value, first reading the System.Type information from the provide context . Declaration public object Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) Parameters Type Name Description MongoDB.Bson.Serialization.BsonDeserializationContext context The deserialisation context. MongoDB.Bson.Serialization.BsonDeserializationArgs args The deserialisation arguments. Returns Type Description System.Object A deserialised value. Implements MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs) Serialize(BsonSerializationContext, BsonSerializationArgs, Object) Serializes a value. Declaration public void Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value) Parameters Type Name Description MongoDB.Bson.Serialization.BsonSerializationContext context The serialization context. MongoDB.Bson.Serialization.BsonSerializationArgs args The serialization arguments. System.Object value The value. Implements MongoDB.Bson.Serialization.IBsonSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, System.Object) Serialize(BsonSerializationContext, BsonSerializationArgs, Type) Serializes a value. Declaration public void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Type value) Parameters Type Name Description MongoDB.Bson.Serialization.BsonSerializationContext context The serialisation context. MongoDB.Bson.Serialization.BsonSerializationArgs args The serialisation arguments. System.Type value The value. Implements MongoDB.Bson.Serialization.IBsonSerializer<TValue>.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, TValue) Explicit Interface Implementations IBsonSerializer<Type>.Deserialize(BsonDeserializationContext, BsonDeserializationArgs) Deserialises a value. Declaration Type IBsonSerializer<Type>.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) Parameters Type Name Description MongoDB.Bson.Serialization.BsonDeserializationContext context The deserialisation context. MongoDB.Bson.Serialization.BsonDeserializationArgs args The deserialisation arguments. Returns Type Description System.Type A deserialised value. Implements MongoDB.Bson.Serialization.IBsonSerializer<TValue>.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.MongoDbEventDeserialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.MongoDbEventDeserialiser-1.html",
    "title": "Class MongoDbEventDeserialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. Inheritance System.Object EventDeserialiser <TAuthenticationToken> MongoDbEventDeserialiser<TAuthenticationToken> Inherited Members EventDeserialiser<TAuthenticationToken>.DefaultSettings EventDeserialiser<TAuthenticationToken>.GetSerialisationSettings() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Serialisers Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbEventDeserialiser<TAuthenticationToken> : EventDeserialiser<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Deserialise(EventData) Deserialise the provided eventData into an IEvent<TAuthenticationToken> . Declaration public override IEvent<TAuthenticationToken> Deserialise(EventData eventData) Parameters Type Name Description EventData eventData The EventData to Deserialise. Returns Type Description IEvent <TAuthenticationToken> Overrides Cqrs.Events.EventDeserialiser<TAuthenticationToken>.Deserialise(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.MongoDbEventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.MongoDbEventBuilder-1.html",
    "title": "Class MongoDbEventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventBuilder<TAuthenticationToken> Builds EventData from various input formats leaving the event data unserialised. Inheritance System.Object EventBuilder <TAuthenticationToken> DefaultEventBuilder <TAuthenticationToken> MongoDbEventBuilder<TAuthenticationToken> Inherited Members DefaultEventBuilder<TAuthenticationToken>.DefaultSettings DefaultEventBuilder<TAuthenticationToken>.SerialiseEventDataToString(IEvent<TAuthenticationToken>) DefaultEventBuilder<TAuthenticationToken>.GetSerialisationSettings() EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>) EventBuilder<TAuthenticationToken>.SerialiseEventData(IEvent<TAuthenticationToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Serialisers Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbEventBuilder<TAuthenticationToken> : DefaultEventBuilder<TAuthenticationToken>, IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) Create an EventData with the provided eventData . Declaration public override EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventData . Returns Type Description EventData Overrides Cqrs.Events.EventBuilder<TAuthenticationToken>.CreateFrameworkEvent(System.String, Cqrs.Events.IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.BasicStructSerialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Serialisers.BasicStructSerialiser-1.html",
    "title": "Class BasicStructSerialiser<TStruct> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BasicStructSerialiser<TStruct> A MongoDB.Bson.Serialization.Serializers.StructSerializerBase<TValue> with reasonable level support for structs. Inheritance System.Object MongoDB.Bson.Serialization.Serializers.SerializerBase <TStruct> MongoDB.Bson.Serialization.Serializers.StructSerializerBase <TStruct> BasicStructSerialiser<TStruct> Inherited Members MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.CreateCannotBeDeserializedException() MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.CreateCannotBeSerializedException() MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.CreateCannotDeserializeFromBsonTypeException(MongoDB.Bson.BsonType) MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.EnsureBsonTypeEquals(MongoDB.Bson.IO.IBsonReader, MongoDB.Bson.BsonType) MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs) MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.MongoDB.Bson.Serialization.IBsonSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, System.Object) MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.ValueType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Serialisers Assembly : Cqrs.MongoDB.dll Syntax public class BasicStructSerialiser<TStruct> : StructSerializerBase<TStruct>, IBsonSerializer<TStruct>, IBsonSerializer where TStruct : struct Type Parameters Name Description TStruct The System.Type of struct. Methods Deserialize(BsonDeserializationContext, BsonDeserializationArgs) Deserialises a value from key/value pairs. Declaration public override TStruct Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) Parameters Type Name Description MongoDB.Bson.Serialization.BsonDeserializationContext context The deserialisation context. MongoDB.Bson.Serialization.BsonDeserializationArgs args The deserialisation arguments. Returns Type Description TStruct A deserialised value. Overrides MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs) Serialize(BsonSerializationContext, BsonSerializationArgs, TStruct) Serializes the provide value as a set of key/value pairs. Declaration public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TStruct value) Parameters Type Name Description MongoDB.Bson.Serialization.BsonSerializationContext context The serialisation context. MongoDB.Bson.Serialization.BsonSerializationArgs args The serialisation arguments. TStruct value The value. Overrides MongoDB.Bson.Serialization.Serializers.SerializerBase<TStruct>.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, TStruct)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Repositories.Authentication.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Repositories.Authentication.html",
    "title": "Namespace Cqrs.MongoDB.Repositories.Authentication | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Repositories.Authentication Classes SingleSignOnToken An ISingleSignOnToken designed to work with MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Repositories.Authentication.SingleSignOnToken.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Repositories.Authentication.SingleSignOnToken.html",
    "title": "Class SingleSignOnToken | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnToken An ISingleSignOnToken designed to work with MongoDB. Inheritance System.Object Entity MongoEntity SingleSignOnToken Inherited Members MongoEntity.Rsn MongoEntity.SortingOrder MongoEntity.IsLogicallyDeleted System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.Repositories.Authentication Assembly : Cqrs.MongoDB.dll Syntax [Serializable] [DataContract] public class SingleSignOnToken : MongoEntity, IEntity, ISingleSignOnToken Properties DateIssued The System.DateTime this token was issued. Declaration [Required] [DataMember] public DateTime DateIssued { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.DateIssued TimeOfExpiry The System.DateTime this token should expire. Declaration [Required] [DataMember] public DateTime TimeOfExpiry { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.TimeOfExpiry Token The authentication token. Declaration [Required] [DataMember] public string Token { get; set; } Property Value Type Description System.String Implements ISingleSignOnToken.Token Methods Serialise() Returns Token . Declaration public string Serialise() Returns Type Description System.String Token . Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.Factories.html",
    "title": "Namespace Cqrs.MongoDB.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.Factories Classes MongoDbDataStoreConnectionStringFactory A factory for getting connection strings and database names for IDataStore<TData> access. MongoDbDataStoreFactory A factory for obtaining IDataStore<TData> collections from MongoDB Interfaces IMongoDbDataStoreConnectionStringFactory A factory for getting connection strings and database names for IDataStore<TData> access."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.MongoDbDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.MongoDbDataStore-1.html",
    "title": "Class MongoDbDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbDataStore<TData> A IDataStore<TData> that uses MongoDB for storage. Inheritance System.Object MongoDbDataStore<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.DataStores Assembly : Cqrs.MongoDB.dll Syntax public class MongoDbDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData The System.Type of IEntity the IDataStore<TData> will contain. Constructors MongoDbDataStore(ILogger, IMongoCollection<TData>) Instantiates and Initialises a new instance of the MongoDbDataStore<TData> class. Declaration public MongoDbDataStore(ILogger logger, IMongoCollection<TData> mongoCollection) Parameters Type Name Description cdmdotnet.Logging.ILogger logger MongoDB.Driver.IMongoCollection <TData> mongoCollection Properties ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Implements System.Linq.IQueryable.Expression Logger Gets or sets the cdmdotnet.Logging.ILogger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger MongoCollection Gets or sets the MongoDB.Driver.IMongoCollection<TDocument> Declaration protected IMongoCollection<TData> MongoCollection { get; } Property Value Type Description MongoDB.Driver.IMongoCollection <TData> Provider Gets the singleResultQuery provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Implements System.Linq.IQueryable.Provider Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public virtual void Add(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public virtual void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Implements IDataStore<TData>.Add(IEnumerable<TData>) Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public virtual void Destroy(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public virtual void Dispose() Implements System.IDisposable.Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(TData) Will mark the data as logically (or soft) by setting IsLogicallyDeleted to true Declaration public virtual void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public virtual void RemoveAll() Implements IDataStore<TData>.RemoveAll() Repair() Executes the \"repairDatabase\" command on the current database. Declaration public void Repair() Update(TData) Update the provided data in the data store and persist the change. Declaration public virtual void Update(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.html",
    "title": "Namespace Cqrs.MongoDB.DataStores.Indexes | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.MongoDB.DataStores.Indexes Classes ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> A MongoDbIndex<TEntity> for IsLogicallyDeleted and Rsn ByRsnMongoDbIndex<TEntity> A MongoDbIndex<TEntity> for Rsn MongoDbIndex<TEntity> An index for MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.MongoDbIndex-1.html",
    "title": "Class MongoDbIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbIndex<TEntity> An index for MongoDB. Inheritance System.Object MongoDbIndex<TEntity> ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> ByRsnMongoDbIndex<TEntity> ByAggregateIdAndVersionMongoDbIndex ByCorrelationIdMongoDbIndex ByTimestampAndEventTypeMongoDbIndex ByTimestampMongoDbIndex Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.DataStores.Indexes Assembly : Cqrs.MongoDB.dll Syntax public abstract class MongoDbIndex<TEntity> Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors MongoDbIndex() Instantiate a new instance of MongoDbIndex<TEntity> . Declaration protected MongoDbIndex() Properties IsAcending Indicates if the index is in ascending order or descending. Defaults to true meaning ascending order. Declaration public bool IsAcending { get; protected set; } Property Value Type Description System.Boolean IsUnique Indicates if the index enforces unique values. Defaults to false. Declaration public bool IsUnique { get; protected set; } Property Value Type Description System.Boolean Name The name of the index. Default to the class name removing any instances of \"Index\" and \"MongoDbIndex\" from the name. Declaration public string Name { get; protected set; } Property Value Type Description System.String Selectors The selectors that the index is comprised of. Declaration public IEnumerable<Expression<Func<TEntity, object>>> Selectors { get; protected set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Linq.Expressions.Expression < System.Func <TEntity, System.Object >>>"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.ByRsnMongoDbIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.ByRsnMongoDbIndex-1.html",
    "title": "Class ByRsnMongoDbIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByRsnMongoDbIndex<TEntity> A MongoDbIndex<TEntity> for Rsn Inheritance System.Object MongoDbIndex <TEntity> ByRsnMongoDbIndex<TEntity> Inherited Members MongoDbIndex<TEntity>.IsUnique MongoDbIndex<TEntity>.IsAcending MongoDbIndex<TEntity>.Name MongoDbIndex<TEntity>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.DataStores.Indexes Assembly : Cqrs.MongoDB.dll Syntax public abstract class ByRsnMongoDbIndex<TEntity> : MongoDbIndex<TEntity> where TEntity : MongoEntity Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors ByRsnMongoDbIndex() Instantiate a new instance of ByRsnMongoDbIndex<TEntity> . Declaration protected ByRsnMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.ByIsLogicallyDeletedAndRsnMongoDbIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.MongoDB.DataStores.Indexes.ByIsLogicallyDeletedAndRsnMongoDbIndex-1.html",
    "title": "Class ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> A MongoDbIndex<TEntity> for IsLogicallyDeleted and Rsn Inheritance System.Object MongoDbIndex <TEntity> ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> Inherited Members MongoDbIndex<TEntity>.IsUnique MongoDbIndex<TEntity>.IsAcending MongoDbIndex<TEntity>.Name MongoDbIndex<TEntity>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.MongoDB.DataStores.Indexes Assembly : Cqrs.MongoDB.dll Syntax public abstract class ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> : MongoDbIndex<TEntity> where TEntity : MongoEntity Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors ByIsLogicallyDeletedAndRsnMongoDbIndex() Instantiate a new instance of ByIsLogicallyDeletedAndRsnMongoDbIndex<TEntity> . Declaration protected ByIsLogicallyDeletedAndRsnMongoDbIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Serialisers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Serialisers.html",
    "title": "Namespace Cqrs.Mongo.Serialisers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.Serialisers Classes TypeSerialiser A MongoDB.Bson.Serialization.IBsonSerializer that stores System.Type information as well."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Serialisers.TypeSerialiser.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Serialisers.TypeSerialiser.html",
    "title": "Class TypeSerialiser | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TypeSerialiser A MongoDB.Bson.Serialization.IBsonSerializer that stores System.Type information as well. Inheritance System.Object TypeSerialiser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Serialisers Assembly : Cqrs.Mongo.dll Syntax public class TypeSerialiser : IBsonSerializer Methods Deserialize(BsonReader, Type, IBsonSerializationOptions) Deserialises a System.Type value, first reading the System.Type information from the provide reader . Declaration public object Deserialize(BsonReader reader, Type nominalType, IBsonSerializationOptions options) Parameters Type Name Description MongoDB.Bson.IO.BsonReader reader System.Type nominalType MongoDB.Bson.Serialization.IBsonSerializationOptions options Returns Type Description System.Object Implements MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(MongoDB.Bson.IO.BsonReader, System.Type, MongoDB.Bson.Serialization.IBsonSerializationOptions) Deserialize(BsonReader, Type, Type, IBsonSerializationOptions) Deserialises a System.Type value, first reading the System.Type information from the provide reader . Declaration public object Deserialize(BsonReader reader, Type nominalType, Type actualType, IBsonSerializationOptions options) Parameters Type Name Description MongoDB.Bson.IO.BsonReader reader System.Type nominalType System.Type actualType MongoDB.Bson.Serialization.IBsonSerializationOptions options Returns Type Description System.Object Implements MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(MongoDB.Bson.IO.BsonReader, System.Type, System.Type, MongoDB.Bson.Serialization.IBsonSerializationOptions) GetDefaultSerializationOptions() Gets the default serialization options for this serializer. Declaration public IBsonSerializationOptions GetDefaultSerializationOptions() Returns Type Description MongoDB.Bson.Serialization.IBsonSerializationOptions The default serialization options for this serializer. Implements MongoDB.Bson.Serialization.IBsonSerializer.GetDefaultSerializationOptions() Serialize(BsonWriter, Type, Object, IBsonSerializationOptions) Serialises a System.Type value. Declaration public void Serialize(BsonWriter writer, Type nominalType, object value, IBsonSerializationOptions options) Parameters Type Name Description MongoDB.Bson.IO.BsonWriter writer System.Type nominalType System.Object value MongoDB.Bson.Serialization.IBsonSerializationOptions options Implements MongoDB.Bson.Serialization.IBsonSerializer.Serialize(MongoDB.Bson.IO.BsonWriter, System.Type, System.Object, MongoDB.Bson.Serialization.IBsonSerializationOptions)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Repositories.Authentication.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Repositories.Authentication.html",
    "title": "Namespace Cqrs.Mongo.Repositories.Authentication | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.Repositories.Authentication Classes SingleSignOnToken An ISingleSignOnToken designed to work with MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Repositories.Authentication.SingleSignOnToken.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Repositories.Authentication.SingleSignOnToken.html",
    "title": "Class SingleSignOnToken | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnToken An ISingleSignOnToken designed to work with MongoDB. Inheritance System.Object Entity MongoEntity SingleSignOnToken Inherited Members MongoEntity.Rsn MongoEntity.SortingOrder MongoEntity.IsLogicallyDeleted System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Repositories.Authentication Assembly : Cqrs.Mongo.dll Syntax [Serializable] [DataContract] public class SingleSignOnToken : MongoEntity, IEntity, ISingleSignOnToken Properties DateIssued The System.DateTime this token was issued. Declaration [Required] [DataMember] public DateTime DateIssued { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.DateIssued TimeOfExpiry The System.DateTime this token should expire. Declaration [Required] [DataMember] public DateTime TimeOfExpiry { get; set; } Property Value Type Description System.DateTime Implements ISingleSignOnToken.TimeOfExpiry Token The authentication token. Declaration [Required] [DataMember] public string Token { get; set; } Property Value Type Description System.String Implements ISingleSignOnToken.Token Methods Serialise() Returns Token . Declaration public string Serialise() Returns Type Description System.String Token . Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.html",
    "title": "Namespace Cqrs.Mongo.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.Factories Classes IndexKeysBuilderExtension A set of extension methods for MongoDB.Driver.Builders.IndexKeysBuilder . MongoDataStoreConnectionStringFactory A factory for MongoDb related connection string settings. MongoDataStoreFactory A factory for obtaining IDataStore<TData> collections from Mongo Interfaces IMongoDataStoreConnectionStringFactory A factory for MongoDb related connection string settings."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.MongoDataStoreFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.MongoDataStoreFactory.html",
    "title": "Class MongoDataStoreFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDataStoreFactory A factory for obtaining IDataStore<TData> collections from Mongo Inheritance System.Object MongoDataStoreFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Factories Assembly : Cqrs.Mongo.dll Syntax public class MongoDataStoreFactory Constructors MongoDataStoreFactory(ILogger, IMongoDataStoreConnectionStringFactory) Instantiate a new instance of MongoDataStoreFactory . Declaration public MongoDataStoreFactory(ILogger logger, IMongoDataStoreConnectionStringFactory mongoDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger IMongoDataStoreConnectionStringFactory mongoDataStoreConnectionStringFactory Properties Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger MongoDataStoreConnectionStringFactory Gets or sets the IMongoDataStoreConnectionStringFactory . Declaration protected IMongoDataStoreConnectionStringFactory MongoDataStoreConnectionStringFactory { get; } Property Value Type Description IMongoDataStoreConnectionStringFactory Methods GetCollection<TEntity>() Get a MongoDB.Driver.MongoCollection<TDefaultDocument> Declaration protected virtual MongoCollection<TEntity> GetCollection<TEntity>() Returns Type Description MongoDB.Driver.MongoCollection <TEntity> Type Parameters Name Description TEntity VerifyIndexes<TEntity>(MongoCollection<TEntity>) Verify all required MongoDB.Driver.IMongoIndexKeys are defined and ready to go. Declaration protected virtual void VerifyIndexes<TEntity>(MongoCollection<TEntity> collection) Parameters Type Name Description MongoDB.Driver.MongoCollection <TEntity> collection Type Parameters Name Description TEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.MongoDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.MongoDataStoreConnectionStringFactory.html",
    "title": "Class MongoDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDataStoreConnectionStringFactory A factory for MongoDb related connection string settings. Inheritance System.Object MongoDataStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Factories Assembly : Cqrs.Mongo.dll Syntax public class MongoDataStoreConnectionStringFactory : IMongoDataStoreConnectionStringFactory Constructors MongoDataStoreConnectionStringFactory(IConfigurationManager, ILogger) Instantiate a new instance of MongoDataStoreConnectionStringFactory . Declaration public MongoDataStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields MongoDbConnectionStringKey The name of the app setting in IConfigurationManager that will have the name of the connection string of the MongoDB server. Declaration public static string MongoDbConnectionStringKey Field Value Type Description System.String MongoDbDatabaseNameKey The name of the app setting in IConfigurationManager that will have the name of the database. Declaration public static string MongoDbDatabaseNameKey Field Value Type Description System.String OldMongoDbConnectionStringKey Backwards compatibility with version 1. Declaration public static string OldMongoDbConnectionStringKey Field Value Type Description System.String OldMongoDbDatabaseNameKey Backwards compatibility with version 1. Declaration public static string OldMongoDbDatabaseNameKey Field Value Type Description System.String Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetMongoConnectionString() Get the connection string for the MongoDB server. Declaration public string GetMongoConnectionString() Returns Type Description System.String Implements IMongoDataStoreConnectionStringFactory.GetMongoConnectionString() GetMongoDatabaseName() Get the name of database on the MongoDB server. Declaration public string GetMongoDatabaseName() Returns Type Description System.String Implements IMongoDataStoreConnectionStringFactory.GetMongoDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.IndexKeysBuilderExtension.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.IndexKeysBuilderExtension.html",
    "title": "Class IndexKeysBuilderExtension | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class IndexKeysBuilderExtension A set of extension methods for MongoDB.Driver.Builders.IndexKeysBuilder . Inheritance System.Object IndexKeysBuilderExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Factories Assembly : Cqrs.Mongo.dll Syntax public static class IndexKeysBuilderExtension Methods Ascending<T>(IndexKeysBuilder, Expression<Func<T, Object>>[]) Define the index as ascending. Declaration public static IndexKeysBuilder Ascending<T>(this IndexKeysBuilder mongoIndexKeys, params Expression<Func<T, object>>[] selectors) Parameters Type Name Description MongoDB.Driver.Builders.IndexKeysBuilder mongoIndexKeys System.Linq.Expressions.Expression < System.Func <T, System.Object >>[] selectors Returns Type Description MongoDB.Driver.Builders.IndexKeysBuilder Type Parameters Name Description T CheckForChildProperty(MemberExpression) Checks if the property name is a child and maps it appropriately. Declaration public static string CheckForChildProperty(MemberExpression selectorMemberExpression) Parameters Type Name Description System.Linq.Expressions.MemberExpression selectorMemberExpression Returns Type Description System.String Descending<T>(IndexKeysBuilder, Expression<Func<T, Object>>[]) Define the index as descending. Declaration public static IndexKeysBuilder Descending<T>(this IndexKeysBuilder mongoIndexKeys, params Expression<Func<T, object>>[] selectors) Parameters Type Name Description MongoDB.Driver.Builders.IndexKeysBuilder mongoIndexKeys System.Linq.Expressions.Expression < System.Func <T, System.Object >>[] selectors Returns Type Description MongoDB.Driver.Builders.IndexKeysBuilder Type Parameters Name Description T"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.IMongoDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Factories.IMongoDataStoreConnectionStringFactory.html",
    "title": "Interface IMongoDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMongoDataStoreConnectionStringFactory A factory for MongoDb related connection string settings. Namespace : Cqrs.Mongo.Factories Assembly : Cqrs.Mongo.dll Syntax public interface IMongoDataStoreConnectionStringFactory Methods GetMongoConnectionString() Get the connection string for the MongoDB server. Declaration string GetMongoConnectionString() Returns Type Description System.String GetMongoDatabaseName() Get the name of database on the MongoDB server. Declaration string GetMongoDatabaseName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Entities.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Entities.html",
    "title": "Namespace Cqrs.Mongo.Entities | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.Entities Classes MongoEntity A projection/entity especially designed to work with MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.Entities.MongoEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.Entities.MongoEntity.html",
    "title": "Class MongoEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoEntity A projection/entity especially designed to work with MongoDB. Inheritance System.Object Entity MongoEntity SingleSignOnToken Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.Entities Assembly : Cqrs.Mongo.dll Syntax [Serializable] [DataContract] public abstract class MongoEntity : Entity, IEntity Properties IsLogicallyDeleted Indicates if this IEntity has been deleted, but not removed from the IDataStore<TData> , this way entities can be retrieved so an un-deleted operation can be triggered. Declaration [Required] [DataMember] public override bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Overrides Entity.IsLogicallyDeleted Rsn The identifier of the IEntity . Declaration [Required] [BsonId] [DataMember] public override Guid Rsn { get; set; } Property Value Type Description System.Guid Overrides Entity.Rsn SortingOrder The order of this IEntity to sort by, by default. Declaration [DataMember] public override int SortingOrder { get; set; } Property Value Type Description System.Int32 Overrides Entity.SortingOrder"
  },
  "wiki/docs/api/2.2/html/Cqrs.Hosts.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Hosts.html",
    "title": "Namespace Cqrs.Hosts | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Hosts Classes CoreHost<TAuthenticationToken> Configure and start command and event handlers in a host CqrsHttpApplication An System.Web.HttpApplication that prepares and configures CQRS with use in IIS or other web server. CqrsHttpApplication<TAuthenticationToken> An System.Web.HttpApplication that prepares and configures CQRS with use in IIS or other web server with knowledge of a basic type authentication token being sent in System.Web.HttpRequest.Headers , System.Web.HttpRequest.Cookies , System.Web.HttpRequest.Form or System.Web.HttpRequest.QueryString . A basic type authentication token is System.Guid , System.String or System.Int32 . StartUp A startUp action for the CoreHost<TAuthenticationToken>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Hosts.StartUp.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Hosts.StartUp.html",
    "title": "Class StartUp | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class StartUp A startUp action for the CoreHost<TAuthenticationToken> Inheritance System.Object StartUp Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Hosts Assembly : Cqrs.dll Syntax public class StartUp Constructors StartUp(Action) Instantiate a new instance of a StartUp Declaration public StartUp(Action dependencyResolverConfigurationFunction) Parameters Type Name Description System.Action dependencyResolverConfigurationFunction Properties DependencyResolverConfigurationFunction The System.Action that will configure the DependencyResolver . Declaration protected Action DependencyResolverConfigurationFunction { get; set; } Property Value Type Description System.Action Methods Initialise() Initialise by calling the DependencyResolverConfigurationFunction . Declaration public virtual void Initialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Hosts.CqrsHttpApplication.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Hosts.CqrsHttpApplication.html",
    "title": "Class CqrsHttpApplication | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsHttpApplication An System.Web.HttpApplication that prepares and configures CQRS with use in IIS or other web server. Inheritance System.Object System.Web.HttpApplication CqrsHttpApplication CqrsHttpApplication<TAuthenticationToken> Inherited Members System.Web.HttpApplication.CompleteRequest() System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.Init() System.Web.HttpApplication.Dispose() System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext, System.String) System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext, System.AsyncCallback, System.Object) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult) System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext) System.Web.HttpApplication.Context System.Web.HttpApplication.Events System.Web.HttpApplication.Request System.Web.HttpApplication.Response System.Web.HttpApplication.Session System.Web.HttpApplication.Application System.Web.HttpApplication.Server System.Web.HttpApplication.User System.Web.HttpApplication.Modules System.Web.HttpApplication.Site System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable System.Web.HttpApplication.Disposed System.Web.HttpApplication.BeginRequest System.Web.HttpApplication.AuthenticateRequest System.Web.HttpApplication.PostAuthenticateRequest System.Web.HttpApplication.AuthorizeRequest System.Web.HttpApplication.PostAuthorizeRequest System.Web.HttpApplication.ResolveRequestCache System.Web.HttpApplication.PostResolveRequestCache System.Web.HttpApplication.MapRequestHandler System.Web.HttpApplication.PostMapRequestHandler System.Web.HttpApplication.AcquireRequestState System.Web.HttpApplication.PostAcquireRequestState System.Web.HttpApplication.PreRequestHandlerExecute System.Web.HttpApplication.PostRequestHandlerExecute System.Web.HttpApplication.ReleaseRequestState System.Web.HttpApplication.PostReleaseRequestState System.Web.HttpApplication.UpdateRequestCache System.Web.HttpApplication.PostUpdateRequestCache System.Web.HttpApplication.LogRequest System.Web.HttpApplication.PostLogRequest System.Web.HttpApplication.EndRequest System.Web.HttpApplication.Error System.Web.HttpApplication.PreSendRequestHeaders System.Web.HttpApplication.PreSendRequestContent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Hosts Assembly : Cqrs.dll Syntax public abstract class CqrsHttpApplication : HttpApplication, IHttpAsyncHandler, IHttpHandler, IComponent, IDisposable Constructors CqrsHttpApplication() Instantiate a new instance of a CqrsHttpApplication Declaration protected CqrsHttpApplication() Properties CommandBus The ICommandReceiver that will be configured to receive ICommand<TAuthenticationToken> . Declaration protected ICommandReceiver CommandBus { get; set; } Property Value Type Description ICommandReceiver EventBus The IEventReceiver that will be configured to receive IEvent<TAuthenticationToken> . Declaration protected IEventReceiver EventBus { get; set; } Property Value Type Description IEventReceiver HandlerTypes Each System.Type will be traced back to it's assembly, and that assembly will be scanned for other handlers to auto register. Declaration protected Type[] HandlerTypes { get; set; } Property Value Type Description System.Type [] Methods Application_AuthenticateRequest(Object, EventArgs) Gets executed after Application_BeginRequest(Object, EventArgs) . Override this method to extract any authentication token from the request and then call SetAuthenticationToken(TAuthenticationToken) . Declaration protected virtual void Application_AuthenticateRequest(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Application_BeginRequest(Object, EventArgs) Gets executed for each and every request which comes to the application to generate a new CorrelationId and then sets the generated CorrelationId via cdmdotnet.Logging.ICorrelationIdHelper.SetCorrelationId(System.Guid) . The generated CorrelationId is also set in the System.Web.HttpResponse.Headers . Declaration protected virtual void Application_BeginRequest(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Application_End(Object, EventArgs) Gets executed once during the life cycle of the application when it is unloaded. This is normally fired when the application is taken off-line or when the server is stopped. Declaration protected virtual void Application_End(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Application_EndRequest(Object, EventArgs) Gets executed after Application_BeginRequest(Object, EventArgs) and before the stream starts getting sent to the client. Declaration protected virtual void Application_EndRequest(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Application_Error(Object, EventArgs) Logs all error via cdmdotnet.Logging.ILogger.LogError(System.String,System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}) unless the execution is System.Security.SecurityException , in which case cdmdotnet.Logging.ILogger.LogWarning(System.String,System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}) is used. Gets executed when any un-handled System.Exception /error occurs anywhere in the application. Any un-handled System.Exception here means exception which are not caught using try catch block. Also if you have custom errors enabled in your application i.e. in web.config file then the configuration in web.config takes precedence and all errors will be directed to the file mentioned in the tag. Declaration protected virtual void Application_Error(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Application_Start(Object, EventArgs) Calls SetBuses() , RegisterCommandAndEventHandlers() , RegisterServiceParameterResolver() , StartBuses() and finally LogApplicationStarted() . Gets executed once during the life cycle of the application when the first request for any resource in the application is made. A resource can be a page or an image in the application. If the server where the application is hosted is restarted then this is fired once again upon the first request for any resource in the application. Declaration protected virtual void Application_Start(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e LogApplicationStarted() Log that the application has started Declaration protected virtual void LogApplicationStarted() RegisterCommandAndEventHandlers() Start the BusRegistrar by calling Register(Type[]) passing HandlerTypes Declaration protected virtual BusRegistrar RegisterCommandAndEventHandlers() Returns Type Description BusRegistrar RegisterServiceParameterResolver() Call the static \"RegisterDataContracts\" method on any IServiceParameterResolver we can find in the System.Reflection.Assembly of any System.Type in HandlerTypes Declaration protected virtual void RegisterServiceParameterResolver() Session_End(Object, EventArgs) Whenever a user's session in the application expires this gets executed. The session is no longer available or accessible. The session expiration time can be set in web.config file. By default session time out is set to 20 mins. Declaration protected virtual void Session_End(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Session_Start(Object, EventArgs) Makes a call to retrieve the System.Web.SessionState.HttpSessionState.SessionID . This is done so the session is generated at the beginning of the request. If this isn't called the session (when using WCF) is generated late in the pipeline, which can cause issues when trying to work with WCF. Gets executed after Application_AuthenticateRequest(Object, EventArgs) when a new session for a \"user\" starts such as a first request or after a session has expired. This event doesn't get triggered if you are not using sessions which can be disabled in the web.config. Declaration protected virtual void Session_Start(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e SetBuses() Set EventBus and CommandBus . Declaration protected abstract void SetBuses() StartBuses() Starts the command bus and event bus receivers depending on configuration settings Declaration protected virtual void StartBuses()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Hosts.CqrsHttpApplication-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Hosts.CqrsHttpApplication-1.html",
    "title": "Class CqrsHttpApplication<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CqrsHttpApplication<TAuthenticationToken> An System.Web.HttpApplication that prepares and configures CQRS with use in IIS or other web server with knowledge of a basic type authentication token being sent in System.Web.HttpRequest.Headers , System.Web.HttpRequest.Cookies , System.Web.HttpRequest.Form or System.Web.HttpRequest.QueryString . A basic type authentication token is System.Guid , System.String or System.Int32 . Inheritance System.Object System.Web.HttpApplication CqrsHttpApplication CqrsHttpApplication<TAuthenticationToken> CqrsHttpApplicationWithSignalR<TAuthenticationToken, TEventToHubProxy> Inherited Members CqrsHttpApplication.HandlerTypes CqrsHttpApplication.EventBus CqrsHttpApplication.CommandBus CqrsHttpApplication.Application_Start(Object, EventArgs) CqrsHttpApplication.RegisterCommandAndEventHandlers() CqrsHttpApplication.RegisterServiceParameterResolver() CqrsHttpApplication.StartBuses() CqrsHttpApplication.LogApplicationStarted() CqrsHttpApplication.Application_End(Object, EventArgs) CqrsHttpApplication.Application_Error(Object, EventArgs) CqrsHttpApplication.Application_BeginRequest(Object, EventArgs) CqrsHttpApplication.Application_EndRequest(Object, EventArgs) CqrsHttpApplication.Session_Start(Object, EventArgs) CqrsHttpApplication.Session_End(Object, EventArgs) System.Web.HttpApplication.CompleteRequest() System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler) System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler, System.Web.EndEventHandler, System.Object) System.Web.HttpApplication.Init() System.Web.HttpApplication.Dispose() System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext, System.String) System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext, System.AsyncCallback, System.Object) System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult) System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext) System.Web.HttpApplication.Context System.Web.HttpApplication.Events System.Web.HttpApplication.Request System.Web.HttpApplication.Response System.Web.HttpApplication.Session System.Web.HttpApplication.Application System.Web.HttpApplication.Server System.Web.HttpApplication.User System.Web.HttpApplication.Modules System.Web.HttpApplication.Site System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable System.Web.HttpApplication.Disposed System.Web.HttpApplication.BeginRequest System.Web.HttpApplication.AuthenticateRequest System.Web.HttpApplication.PostAuthenticateRequest System.Web.HttpApplication.AuthorizeRequest System.Web.HttpApplication.PostAuthorizeRequest System.Web.HttpApplication.ResolveRequestCache System.Web.HttpApplication.PostResolveRequestCache System.Web.HttpApplication.MapRequestHandler System.Web.HttpApplication.PostMapRequestHandler System.Web.HttpApplication.AcquireRequestState System.Web.HttpApplication.PostAcquireRequestState System.Web.HttpApplication.PreRequestHandlerExecute System.Web.HttpApplication.PostRequestHandlerExecute System.Web.HttpApplication.ReleaseRequestState System.Web.HttpApplication.PostReleaseRequestState System.Web.HttpApplication.UpdateRequestCache System.Web.HttpApplication.PostUpdateRequestCache System.Web.HttpApplication.LogRequest System.Web.HttpApplication.PostLogRequest System.Web.HttpApplication.EndRequest System.Web.HttpApplication.Error System.Web.HttpApplication.PreSendRequestHeaders System.Web.HttpApplication.PreSendRequestContent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Hosts Assembly : Cqrs.dll Syntax public abstract class CqrsHttpApplication<TAuthenticationToken> : CqrsHttpApplication, IHttpAsyncHandler, IHttpHandler, IComponent, IDisposable Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Application_AuthenticateRequest(Object, EventArgs) Gets executed after Application_BeginRequest(Object, EventArgs) . Extracts the authentication token looking for a System.Collections.Generic.KeyValuePair<TKey, TValue> where the key as defined by the System.Configuration.ConfigurationManager.AppSettings \"Cqrs.Web.AuthenticationTokenName\", from the System.Web.HttpRequest.Headers , if one isn't found we then try the following in order System.Web.HttpRequest.Cookies , System.Web.HttpRequest.Form or System.Web.HttpRequest.QueryString ; then calls SetAuthenticationToken(TAuthenticationToken) to make it accessible to others parts of the system if one is found. Declaration protected override void Application_AuthenticateRequest(object sender, EventArgs e) Parameters Type Name Description System.Object sender System.EventArgs e Overrides CqrsHttpApplication.Application_AuthenticateRequest(Object, EventArgs) SetBuses() Set EventBus and CommandBus . Declaration protected override void SetBuses() Overrides CqrsHttpApplication.SetBuses()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Hosts.CoreHost-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Hosts.CoreHost-1.html",
    "title": "Class CoreHost<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class CoreHost<TAuthenticationToken> Configure and start command and event handlers in a host Inheritance System.Object CoreHost<TAuthenticationToken> TelemetryCoreHost<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Hosts Assembly : Cqrs.dll Syntax public abstract class CoreHost<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors CoreHost() Instantiate a new instance of a CoreHost<TAuthenticationToken> Declaration protected CoreHost() Properties CommandBus The ICommandReceiver that will be configured to receive ICommand<TAuthenticationToken> . Declaration protected ICommandReceiver<TAuthenticationToken> CommandBus { get; } Property Value Type Description ICommandReceiver <TAuthenticationToken> ConfigurationManager The IConfigurationManager that can be use before the Current is set. Declaration protected abstract IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager CorrelationIdHelper The cdmdotnet.Logging.ICorrelationIdHelper that will be used when starting and stopping the host. Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventBus The IEventReceiver that will be configured to receive IEvent<TAuthenticationToken> . Declaration protected IEventReceiver<TAuthenticationToken> EventBus { get; } Property Value Type Description IEventReceiver <TAuthenticationToken> HandlerTypes Each System.Type will be traced back to it's assembly, and that assembly will be scanned for other handlers to auto register. Declaration protected Type[] HandlerTypes { get; set; } Property Value Type Description System.Type [] Logger The cdmdotnet.Logging.ILogger that will be used when starting and stopping the host. Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger TelemetryName The hosts telemetry name if telemetry is configured Declaration protected string TelemetryName { get; set; } Property Value Type Description System.String Methods ConfigureDefaultDependencyResolver() Configure the DependencyResolver . Declaration protected abstract void ConfigureDefaultDependencyResolver() ConfigureTelemetry() When overridden, allows you to configure Telemetry Declaration protected virtual void ConfigureTelemetry() ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) Register an command handler that will listen and respond to commands. Declaration protected virtual void ManuallyRegisterCommandHandler<TMessage>(Action<TMessage> commandHandler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> commandHandler The command handler to call System.Boolean holdMessageLock If false, this will spin off another thread. This is a bad performance impact. Strongly suggest you use lock renewing instead... which is configuration based... so even better. Type Parameters Name Description TMessage ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to events. Declaration protected virtual void ManuallyRegisterEventHandler<TMessage>(Action<TMessage> eventHandler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> eventHandler The event handler to call System.Boolean holdMessageLock If false, this will spin off another thread. This is a bad performance impact. Strongly suggest you use lock renewing instead... which is configuration based... so even better. Type Parameters Name Description TMessage Prepare() Prepare the host before registering handlers and starting the host. Declaration protected virtual void Prepare() PrepareSecurityProtocol() Sets the System.Net.ServicePointManager.SecurityProtocol to System.Net.SecurityProtocolType.Tls . You might want to override this to .net 4.5 and above to SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls Declaration protected virtual void PrepareSecurityProtocol() Run(Action) Calls Prepare() , handlerRegistation and then Start() Declaration public virtual void Run(Action handlerRegistation = null) Parameters Type Name Description System.Action handlerRegistation Start() Start the host post preparing and registering handlers. Declaration protected virtual void Start() StartBusRegistrar() Start the BusRegistrar by calling Register(Type[]) passing HandlerTypes Declaration protected virtual void StartBusRegistrar()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.html",
    "title": "Namespace Cqrs.Exceptions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Exceptions Classes InvalidConfigurationException A configuration caused an System.Exception . MissingApplicationSettingException An app setting is missing from System.Configuration.ConfigurationManager.AppSettings . MissingApplicationSettingForConnectionStringException An app setting is missing from System.Configuration.ConfigurationManager.AppSettings that points to a connection string. MissingConnectionStringException A System.Configuration.ConnectionStringSettings is missing from System.Configuration.ConfigurationManager.ConnectionStrings . MultipleCommandHandlersRegisteredException The System.Exception that is thrown when more than one ICommandHandler<TAuthenticationToken, TCommand> if found for a given ICommand<TAuthenticationToken> that only expects one. MultipleHandlersRegisteredException The System.Exception that is thrown when more than one IHandler if found for a given IMessage that only expects one. NoCommandHandlerRegisteredException The System.Exception that is thrown when no ICommandHandler<TAuthenticationToken, TCommand> if found for a given ICommand<TAuthenticationToken> . NoEventHandlerRegisteredException The System.Exception that is thrown when no IEventHandler if found for a given IEvent<TAuthenticationToken> . NoHandlerRegisteredException The System.Exception that is thrown when no IHandler if found for a given IMessage . NoHandlersRegisteredException The System.Exception that is thrown when no IHandler if found for a given IMessage , but more than one was expected."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoHandlersRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoHandlersRegisteredException.html",
    "title": "Class NoHandlersRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NoHandlersRegisteredException The System.Exception that is thrown when no IHandler if found for a given IMessage , but more than one was expected. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NoHandlersRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public abstract class NoHandlersRegisteredException : InvalidOperationException, ISerializable, _Exception Constructors NoHandlersRegisteredException(String) Instantiates a new instance of NoHandlersRegisteredException with a specified error message. Declaration protected NoHandlersRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. NoHandlersRegisteredException(Type) Instantiates a new instance of NoHandlersRegisteredException . Declaration protected NoHandlersRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of IMessage that expected more than one IHandler ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoHandlerRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoHandlerRegisteredException.html",
    "title": "Class NoHandlerRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NoHandlerRegisteredException The System.Exception that is thrown when no IHandler if found for a given IMessage . Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NoHandlerRegisteredException NoCommandHandlerRegisteredException NoEventHandlerRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class NoHandlerRegisteredException : InvalidOperationException, ISerializable, _Exception Constructors NoHandlerRegisteredException(String) Instantiates a new instance of NoHandlerRegisteredException with a specified error message. Declaration public NoHandlerRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. NoHandlerRegisteredException(Type) Instantiates a new instance of NoHandlerRegisteredException . Declaration public NoHandlerRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of IMessage that expected a IHandler ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoEventHandlerRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoEventHandlerRegisteredException.html",
    "title": "Class NoEventHandlerRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NoEventHandlerRegisteredException The System.Exception that is thrown when no IEventHandler if found for a given IEvent<TAuthenticationToken> . Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NoHandlerRegisteredException NoEventHandlerRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class NoEventHandlerRegisteredException : NoHandlerRegisteredException, ISerializable, _Exception Constructors NoEventHandlerRegisteredException(String) Instantiates a new instance of NoEventHandlerRegisteredException with a specified error message. Declaration protected NoEventHandlerRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. NoEventHandlerRegisteredException(Type) Instantiates a new instance of NoEventHandlerRegisteredException . Declaration public NoEventHandlerRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of IEvent<TAuthenticationToken> that expected an IEventHandler ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoCommandHandlerRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.NoCommandHandlerRegisteredException.html",
    "title": "Class NoCommandHandlerRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class NoCommandHandlerRegisteredException The System.Exception that is thrown when no ICommandHandler<TAuthenticationToken, TCommand> if found for a given ICommand<TAuthenticationToken> . Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NoHandlerRegisteredException NoCommandHandlerRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class NoCommandHandlerRegisteredException : NoHandlerRegisteredException, ISerializable, _Exception Constructors NoCommandHandlerRegisteredException(String) Instantiates a new instance of NoCommandHandlerRegisteredException with a specified error message. Declaration protected NoCommandHandlerRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. NoCommandHandlerRegisteredException(Type) Instantiates a new instance of NoCommandHandlerRegisteredException . Declaration public NoCommandHandlerRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of ICommand<TAuthenticationToken> that expected an ICommandHandler<TAuthenticationToken, TCommand> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.MultipleHandlersRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.MultipleHandlersRegisteredException.html",
    "title": "Class MultipleHandlersRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MultipleHandlersRegisteredException The System.Exception that is thrown when more than one IHandler if found for a given IMessage that only expects one. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException MultipleHandlersRegisteredException MultipleCommandHandlersRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public abstract class MultipleHandlersRegisteredException : InvalidOperationException, ISerializable, _Exception Constructors MultipleHandlersRegisteredException(String) Instantiates a new instance of MultipleHandlersRegisteredException with a specified error message. Declaration protected MultipleHandlersRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. MultipleHandlersRegisteredException(Type) Instantiates a new instance of MultipleHandlersRegisteredException . Declaration protected MultipleHandlersRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of IMessage that expected only one IHandler ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.MultipleCommandHandlersRegisteredException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.MultipleCommandHandlersRegisteredException.html",
    "title": "Class MultipleCommandHandlersRegisteredException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MultipleCommandHandlersRegisteredException The System.Exception that is thrown when more than one ICommandHandler<TAuthenticationToken, TCommand> if found for a given ICommand<TAuthenticationToken> that only expects one. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException MultipleHandlersRegisteredException MultipleCommandHandlersRegisteredException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class MultipleCommandHandlersRegisteredException : MultipleHandlersRegisteredException, ISerializable, _Exception Constructors MultipleCommandHandlersRegisteredException(String) Instantiates a new instance of MultipleCommandHandlersRegisteredException with a specified error message. Declaration public MultipleCommandHandlersRegisteredException(string message) Parameters Type Name Description System.String message The message that describes the error. MultipleCommandHandlersRegisteredException(Type) Instantiates a new instance of MultipleCommandHandlersRegisteredException . Declaration public MultipleCommandHandlersRegisteredException(Type type) Parameters Type Name Description System.Type type The System.Type of ICommand<TAuthenticationToken> that expected only one ICommandHandler<TAuthenticationToken, TCommand> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingConnectionStringException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingConnectionStringException.html",
    "title": "Class MissingConnectionStringException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MissingConnectionStringException A System.Configuration.ConnectionStringSettings is missing from System.Configuration.ConfigurationManager.ConnectionStrings . Inheritance System.Object System.Exception MissingConnectionStringException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class MissingConnectionStringException : Exception, ISerializable, _Exception Constructors MissingConnectionStringException(String) Instantiate a new instance of MissingConnectionStringException . Declaration public MissingConnectionStringException(string connectionStringName) Parameters Type Name Description System.String connectionStringName The System.Configuration.ConnectionStringSettings.Name of the System.Configuration.ConnectionStringSettings that is missing. MissingConnectionStringException(String, Exception) Instantiate a new instance of MissingConnectionStringException and a reference to the inner exception that is the cause of this System.Exception . Declaration public MissingConnectionStringException(string connectionStringName, Exception exception) Parameters Type Name Description System.String connectionStringName The System.Configuration.ConnectionStringSettings.Name of the System.Configuration.ConnectionStringSettings that is missing. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. Properties ConnectionStringName The System.Configuration.ConnectionStringSettings.Name of the System.Configuration.ConnectionStringSettings that is missing. Declaration [DataMember] public string ConnectionStringName { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingApplicationSettingForConnectionStringException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingApplicationSettingForConnectionStringException.html",
    "title": "Class MissingApplicationSettingForConnectionStringException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MissingApplicationSettingForConnectionStringException An app setting is missing from System.Configuration.ConfigurationManager.AppSettings that points to a connection string. Inheritance System.Object System.Exception MissingApplicationSettingException MissingApplicationSettingForConnectionStringException Inherited Members MissingApplicationSettingException.AppSettingKey System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class MissingApplicationSettingForConnectionStringException : MissingApplicationSettingException, ISerializable, _Exception Constructors MissingApplicationSettingForConnectionStringException(String) Instantiate a new instance of MissingApplicationSettingException . Declaration public MissingApplicationSettingForConnectionStringException(string appSettingKey) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. MissingApplicationSettingForConnectionStringException(String, Exception) Instantiate a new instance of MissingApplicationSettingException and a reference to the inner exception that is the cause of this System.Exception . Declaration public MissingApplicationSettingForConnectionStringException(string appSettingKey, Exception exception) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified."
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingApplicationSettingException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.MissingApplicationSettingException.html",
    "title": "Class MissingApplicationSettingException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MissingApplicationSettingException An app setting is missing from System.Configuration.ConfigurationManager.AppSettings . Inheritance System.Object System.Exception MissingApplicationSettingException MissingApplicationSettingForConnectionStringException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class MissingApplicationSettingException : Exception, ISerializable, _Exception Constructors MissingApplicationSettingException(String) Instantiate a new instance of MissingApplicationSettingException . Declaration public MissingApplicationSettingException(string appSettingKey) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. MissingApplicationSettingException(String, Boolean) Instantiate a new instance of MissingApplicationSettingException . Declaration protected MissingApplicationSettingException(string appSettingKey, bool settingLocatesConnectionString) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.Boolean settingLocatesConnectionString If true, this missing app setting points to a connection string. MissingApplicationSettingException(String, Boolean, Exception) Instantiate a new instance of MissingApplicationSettingException and a reference to the inner exception that is the cause of this System.Exception . Declaration protected MissingApplicationSettingException(string appSettingKey, bool settingLocatesConnectionString, Exception exception) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.Boolean settingLocatesConnectionString If true, this missing app setting points to a connection string. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. MissingApplicationSettingException(String, Exception) Instantiate a new instance of MissingApplicationSettingException and a reference to the inner exception that is the cause of this System.Exception . Declaration public MissingApplicationSettingException(string appSettingKey, Exception exception) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. MissingApplicationSettingException(String, String) Instantiate a new instance of MissingApplicationSettingException with a specified error message. Declaration public MissingApplicationSettingException(string appSettingKey, string message) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.String message The message that describes the error. MissingApplicationSettingException(String, String, Exception) Instantiate a new instance of MissingApplicationSettingException with a specified error message and and a reference to the inner exception that is the cause of this System.Exception Declaration public MissingApplicationSettingException(string appSettingKey, string message, Exception exception) Parameters Type Name Description System.String appSettingKey The key of the app setting that is missing. System.String message The message that describes the error. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified. Properties AppSettingKey The key of the app setting that is missing. Declaration [DataMember] public string AppSettingKey { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Exceptions.InvalidConfigurationException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Exceptions.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InvalidConfigurationException A configuration caused an System.Exception . Inheritance System.Object System.Exception InvalidConfigurationException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class InvalidConfigurationException : Exception, ISerializable, _Exception Constructors InvalidConfigurationException(String, Exception) Instantiate a new instance of InvalidConfigurationException with a specified error message and a reference to the inner exception that is the cause of this System.Exception . Declaration public InvalidConfigurationException(string message, Exception exception) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception exception The System.Exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner System.Exception is specified."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler.html",
    "title": "Interface IEventHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventHandler Responds to or \"Handles\" a IEvent<TAuthenticationToken> . Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventHandler : IHandler"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler-3.html",
    "title": "Interface IEventHandler<TAuthenticationToken, TTarget, TEvent> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventHandler<TAuthenticationToken, TTarget, TEvent> Responds to or \"Handles\" a TEvent . Inherited Members IMessageHandler<TEvent>.Handle(TEvent) Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventHandler<TAuthenticationToken, TTarget, in TEvent> : IEventHandler<TAuthenticationToken, TEvent>, IMessageHandler<TEvent>, IEventHandler, IHandler where TEvent : IEvent<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. TTarget The System.Type of the object that is targeted that needs concurrency. TEvent The System.Type of IEvent<TAuthenticationToken> that can be handled."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventHandler-2.html",
    "title": "Interface IEventHandler<TAuthenticationToken, TEvent> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventHandler<TAuthenticationToken, TEvent> Responds to or \"Handles\" a TEvent . Inherited Members IMessageHandler<TEvent>.Handle(TEvent) Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventHandler<TAuthenticationToken, in TEvent> : IMessageHandler<TEvent>, IEventHandler, IHandler where TEvent : IEvent<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. TEvent The System.Type of IEvent<TAuthenticationToken> that can be handled."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventDeserialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventDeserialiser-1.html",
    "title": "Interface IEventDeserialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Deserialise(EventData) Deserialise the provided eventData into an IEvent<TAuthenticationToken> . Declaration IEvent<TAuthenticationToken> Deserialise(EventData eventData) Parameters Type Name Description EventData eventData The EventData to Deserialise. Returns Type Description IEvent <TAuthenticationToken>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEventBuilder-1.html",
    "title": "Interface IEventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventBuilder<TAuthenticationToken> Builds EventData from various input formats. Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods CreateFrameworkEvent(IEvent<TAuthenticationToken>) Create an EventData with the provided eventData . Declaration EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventData . Returns Type Description EventData CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) Create an EventData with the provided eventData . Declaration EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventData . Returns Type Description EventData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.IEvent-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.IEvent-1.html",
    "title": "Interface IEvent<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> represents something that took place in the domain. They are always named with a past-participle verb, such as OrderConfirmed. It's not unusual, but not required, for an IEvent<TAuthenticationToken> to name an IAggregateRoot<TAuthenticationToken> or IEntity that it relates to; let the domain language be your guide. Since an IEvent<TAuthenticationToken> represents something in the past, it can be considered a statement of fact and used to take decisions in other parts of the system. Inherited Members IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken IMessage.CorrelationId IMessage.OriginatingFramework IMessage.Frameworks Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public interface IEvent<TAuthenticationToken> : IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken Remarks What does a ICommand<TAuthenticationToken> or an IEvent<TAuthenticationToken> look like? An ICommand<TAuthenticationToken> or IEvent<TAuthenticationToken> is simply a data structure that contain data for reading, and no behavior. We call such structures \"Data Transfer Objects\" (DTOs). The name indicates the purpose. In many languages they are represented as classes, but they are not true classes in the real OO sense. What is the difference between a ICommand<TAuthenticationToken> and an IEvent<TAuthenticationToken> ? Their intent. What is immutability? Why is a ICommand<TAuthenticationToken> or IEvent<TAuthenticationToken> immutable? For the purpose of this question, immutability is not having any setters, or other methods which change internal state. The System.String type in is a familiar example; you never actually change an existing System.String value, you just create new System.String values based on old ones. An ICommand<TAuthenticationToken> is immutable because their expected usage is to be sent directly to the domain model side for processing. They do not need to change during their projected lifetime in traveling from client to server. Sometimes however business logic dictates that a decision may be made to construct a ICommand<TAuthenticationToken> and local variables should be used. An IEvent<TAuthenticationToken> is immutable because they represent domain actions that took place in the past. Unless you're Marty McFly, you can't change the past, and sometimes not even then. What is command upgrading? Upgrading an ICommand<TAuthenticationToken> becomes necessary when new requirements cause an existing ICommand<TAuthenticationToken> not to be sufficient. Maybe a new field needs to be added, for example, or maybe an existing field should really have been split into several different ones. How do I upgrade my ICommand<TAuthenticationToken> s? How you do the upgrade depends how much control you have over your clients. If you can deploy your client updates and server updates together, just change things in both and deploy the updates. Job done. If not, it's usually best to have the updated ICommand<TAuthenticationToken> be a new type and have the ICommandHandler<TAuthenticationToken, TCommand> accept both for a while. Could you give an example of names of some versioned ICommand<TAuthenticationToken> ? Sure. UploadFile UploadFile_v2 UploadFile_v3 It's just a convention, but a sane one. Also see http://cqrs.nu/Faq/commands-and-events . Examples public class OrderConfirmed { public Guid OrderRsn; public DateTime ConfirmationDate; } Properties Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] Guid Id { get; set; } Property Value Type Description System.Guid TimeStamp The date and time the event was raised or published. Declaration [DataMember] DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] int Version { get; set; } Property Value Type Description System.Int32"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventStoreRetentionLevelAttribute.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventStoreRetentionLevelAttribute.html",
    "title": "Class EventStoreRetentionLevelAttribute | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStoreRetentionLevelAttribute Provides a mechanism to configure different IEventStore<TAuthenticationToken> instances to save the event to. This is useful if you have events that should be in hot storage with quick loads and events that should be in cold storage and are unlikely to be reloaded and use slower cheaper storage. Inheritance System.Object System.Attribute EventStoreRetentionLevelAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class EventStoreRetentionLevelAttribute : Attribute, _Attribute Properties RetentionLevel The level of retention required. By specifying a value we look for a matching configured IEventStore<TAuthenticationToken> with the same level defined. Declaration public short RetentionLevel { get; set; } Property Value Type Description System.Int16"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventStore-1.html",
    "title": "Class EventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventStore<TAuthenticationToken> Stores instances of IEvent<TAuthenticationToken> for replay, IAggregateRoot<TAuthenticationToken> and ISaga<TAuthenticationToken> rehydration. Inheritance System.Object EventStore<TAuthenticationToken> BlobStorageEventStore<TAuthenticationToken> TableStorageEventStore<TAuthenticationToken> AzureDocumentDbEventStore<TAuthenticationToken> MemoryCacheEventStore<TAuthenticationToken> SqlEventStore<TAuthenticationToken> MongoDbEventStore<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public abstract class EventStore<TAuthenticationToken> : IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors EventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger) Instantiates a new instance of EventStore<TAuthenticationToken> . Declaration protected EventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger Fields CqrsEventStoreStreamNamePattern The pattern used to generate the stream name. Declaration protected const string CqrsEventStoreStreamNamePattern = \"{0}/{1}\" Field Value Type Description System.String Properties EventBuilder The IEventBuilder<TAuthenticationToken> used to build events. Declaration protected IEventBuilder<TAuthenticationToken> EventBuilder { get; set; } Property Value Type Description IEventBuilder <TAuthenticationToken> EventDeserialiser The IEventDeserialiser<TAuthenticationToken> used to deserialise events. Declaration protected IEventDeserialiser<TAuthenticationToken> EventDeserialiser { get; set; } Property Value Type Description IEventDeserialiser <TAuthenticationToken> Logger The cdmdotnet.Logging.ILogger to use. Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger TelemetryHelper The cdmdotnet.Logging.ITelemetryHelper to use. Declaration protected ITelemetryHelper TelemetryHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ITelemetryHelper Methods GenerateStreamName(Type, IEvent<TAuthenticationToken>) Generate a unique stream name based on the provided aggregateRootType and the Id from the provided event . Declaration protected virtual string GenerateStreamName(Type aggregateRootType, IEvent<TAuthenticationToken> event) Parameters Type Name Description System.Type aggregateRootType The System.Type of the IAggregateRoot<TAuthenticationToken> . IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to extract information from. Returns Type Description System.String GenerateStreamName(Type, Guid) Generate a unique stream name based on the provided aggregateRootType and the aggregateId . Declaration protected virtual string GenerateStreamName(Type aggregateRootType, Guid aggregateId) Parameters Type Name Description System.Type aggregateRootType The System.Type of the IAggregateRoot<TAuthenticationToken> . System.Guid aggregateId The ID of the IAggregateRoot<TAuthenticationToken> . Returns Type Description System.String Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public abstract IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Implements IEventStore<TAuthenticationToken>.Get(Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public abstract IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) Get<T>(Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the T with the ID matching the provided aggregateId . Declaration public virtual IEnumerable<IEvent<TAuthenticationToken>> Get<T>(Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) PersistEvent(EventData) Persist the provided eventData into storage. Declaration protected abstract void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Save(Type, IEvent<TAuthenticationToken>) Saves the provided event . Declaration public virtual void Save(Type aggregateRootType, IEvent<TAuthenticationToken> event) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Implements IEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) Save<T>(IEvent<TAuthenticationToken>) Saves the provided event . Declaration public virtual void Save<T>(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to be saved. Type Parameters Name Description T The System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. Implements IEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventDeserialiser-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventDeserialiser-1.html",
    "title": "Class EventDeserialiser<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. Inheritance System.Object EventDeserialiser<TAuthenticationToken> AzureDocumentDbEventDeserialiser<TAuthenticationToken> MongoDbEventDeserialiser<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class EventDeserialiser<TAuthenticationToken> : IEventDeserialiser<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties DefaultSettings The default Newtonsoft.Json.JsonSerializerSettings to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods Deserialise(EventData) Deserialise the provided eventData into an IEvent<TAuthenticationToken> . Declaration public virtual IEvent<TAuthenticationToken> Deserialise(EventData eventData) Parameters Type Name Description EventData eventData The EventData to Deserialise. Returns Type Description IEvent <TAuthenticationToken> Implements IEventDeserialiser<TAuthenticationToken>.Deserialise(EventData) GetSerialisationSettings() Returns DefaultSettings Declaration protected virtual JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings DefaultSettings"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventDataResolver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventDataResolver-1.html",
    "title": "Class EventDataResolver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventDataResolver<TAuthenticationToken> Resolves EventData , ServiceRequestWithData<TAuthenticationToken, TData> and ServiceResponseWithResultData<TResultData> parameter types when serialising with WCF. Inheritance System.Object EventDataResolver<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class EventDataResolver<TAuthenticationToken> : IEventDataResolver, IServiceParameterResolver Type Parameters Name Description TAuthenticationToken Methods ResolveName(String, String, Type, DataContractResolver) Returns the System.Type if the typeName is resolvable or if it is of type typeName is of type EventData , ServiceRequestWithData<TAuthenticationToken, TData> , ServiceResponseWithResultData<TResultData> Declaration public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName System.String typeNamespace System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver Returns Type Description System.Type Implements IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) Indicates if the provided dataContractType is of type EventData , ServiceRequestWithData<TAuthenticationToken, TData> , ServiceResponseWithResultData<TResultData> 0 OR if it is other resolvable. Declaration public virtual bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver System.Xml.XmlDictionaryString typeName System.Xml.XmlDictionaryString typeNamespace Returns Type Description System.Boolean Implements IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventData.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventData.html",
    "title": "Class EventData | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventData Captures all the data relevant to an IEvent<TAuthenticationToken> for an IEventStore<TAuthenticationToken> to persist. Inheritance System.Object EventData MongoDbEventData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [Serializable] [DataContract] [Table(Name = \"EventStore\")] public class EventData Constructors EventData() Instantiates a new instance of EventData . Declaration public EventData() Properties AggregateId The globally identifier of the IAggregateRoot<TAuthenticationToken> , meaning it also includes System.Type information. Declaration [DataMember] [Column(CanBeNull = false)] public string AggregateId { get; set; } Property Value Type Description System.String AggregateRsn The identifier of the IAggregateRoot<TAuthenticationToken> . Declaration [DataMember] [Column(CanBeNull = false)] public Guid AggregateRsn { get; set; } Property Value Type Description System.Guid CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] [Column(CanBeNull = false)] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Data The data/content of the IEvent<TAuthenticationToken> . Declaration [DataMember] [Column(CanBeNull = false, DbType = \"text NOT NULL\")] public object Data { get; set; } Property Value Type Description System.Object EventId The identifier of the IEvent<TAuthenticationToken> . Declaration [DataMember] [Column(IsPrimaryKey = true)] public Guid EventId { get; set; } Property Value Type Description System.Guid EventType The System.Type of the IEvent<TAuthenticationToken> Declaration [DataMember] [Column(CanBeNull = false)] public string EventType { get; set; } Property Value Type Description System.String Timestamp The date and time the event was raised or published. Declaration [DataMember] [Column(CanBeNull = false)] public DateTime Timestamp { get; set; } Property Value Type Description System.DateTime Version The new version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> that raised this. Declaration [DataMember] [Column(CanBeNull = false)] public long Version { get; set; } Property Value Type Description System.Int64"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.EventBuilder-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.EventBuilder-1.html",
    "title": "Class EventBuilder<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EventBuilder<TAuthenticationToken> Builds EventData from various input formats. Inheritance System.Object EventBuilder<TAuthenticationToken> DefaultEventBuilder<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public abstract class EventBuilder<TAuthenticationToken> : IEventBuilder<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods CreateFrameworkEvent(IEvent<TAuthenticationToken>) Create an EventData with the provided eventData . Declaration public virtual EventData CreateFrameworkEvent(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventData . Returns Type Description EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(IEvent<TAuthenticationToken>) CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) Create an EventData with the provided eventData . Declaration public virtual EventData CreateFrameworkEvent(string type, IEvent<TAuthenticationToken> eventData) Parameters Type Name Description System.String type The name of the System.Type of the target object the serialised data is. IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to add to the EventData . Returns Type Description EventData Implements IEventBuilder<TAuthenticationToken>.CreateFrameworkEvent(String, IEvent<TAuthenticationToken>) SerialiseEventData(IEvent<TAuthenticationToken>) Serialise the provided eventData into a System.Byte System.Array . Declaration protected virtual byte[] SerialiseEventData(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to serialise. Returns Type Description System.Byte [] SerialiseEventDataToString(IEvent<TAuthenticationToken>) Serialise the provided eventData into a System.String . Declaration protected abstract string SerialiseEventDataToString(IEvent<TAuthenticationToken> eventData) Parameters Type Name Description IEvent <TAuthenticationToken> eventData The IEvent<TAuthenticationToken> to serialise. Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.DuplicateCreateCommandEvent-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.DuplicateCreateCommandEvent-1.html",
    "title": "Class DuplicateCreateCommandEvent<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DuplicateCreateCommandEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> that informs the system that an operation resulted in a duplicate. Inheritance System.Object DuplicateCreateCommandEvent<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class DuplicateCreateCommandEvent<TAuthenticationToken> : IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken Properties AggregateRsn The identifier of the IAggregateRoot<TAuthenticationToken> that already exists, but had another Created event raised. Declaration [DataMember] public Guid AggregateRsn { get; set; } Property Value Type Description System.Guid AggregateType The System.Type of IAggregateRoot<TAuthenticationToken> that already exists, but had another Created event raised. Declaration [DataMember] public Type AggregateType { get; set; } Property Value Type Description System.Type AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The new version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> that raised this. Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.DtoAggregateEventType.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.DtoAggregateEventType.html",
    "title": "Enum DtoAggregateEventType | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Enum DtoAggregateEventType The type of CRUD operation. Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public enum DtoAggregateEventType Fields Name Description Created The Create CRUD operations. Deleted The Delete CRUD operations. Unknown An unknown CRUD operations. Updated The Update CRUD operations."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.DtoAggregateEvent-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.DtoAggregateEvent-2.html",
    "title": "Class DtoAggregateEvent<TAuthenticationToken, TDto> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DtoAggregateEvent<TAuthenticationToken, TDto> A IEvent<TAuthenticationToken> for IDto objects Inheritance System.Object DtoAggregateEvent<TAuthenticationToken, TDto> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public class DtoAggregateEvent<TAuthenticationToken, TDto> : IEvent<TAuthenticationToken>, IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage where TDto : IDto Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. TDto The System.Type of IDto this command targets. Constructors DtoAggregateEvent(Guid, TDto, TDto) Instantiates a new instance of DtoAggregateEvent<TAuthenticationToken, TDto> Declaration public DtoAggregateEvent(Guid id, TDto original, TDto new) Parameters Type Name Description System.Guid id TDto original TDto new Properties AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration [DataMember] public TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the event itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id New Gets or sets the new version of the TDto . Declaration [DataMember] public TDto New { get; } Property Value Type Description TDto Original Gets or sets the original version of the TDto . Declaration [DataMember] public TDto Original { get; } Property Value Type Description TDto OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The new version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> that raised this. Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version Methods GetEventType() Determines the DtoAggregateEventType this IEvent<TAuthenticationToken> represents. Declaration public DtoAggregateEventType GetEventType() Returns Type Description DtoAggregateEventType"
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.DefaultJsonSerializerSettings.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.DefaultJsonSerializerSettings.html",
    "title": "Class DefaultJsonSerializerSettings | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DefaultJsonSerializerSettings Default settings for JSON serialisation and deserialisation. Inheritance System.Object DefaultJsonSerializerSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Events Assembly : Cqrs.dll Syntax public class DefaultJsonSerializerSettings Properties DefaultSettings System wide default Newtonsoft.Json.JsonSerializerSettings . Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.html",
    "title": "Namespace Cqrs.Entities | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Entities Classes DateRange A Range<TPrimitive> object for collecting a System.DateTime lower and upper limit. DecimalRange A Range<TPrimitive> object for collecting a System.Decimal lower and upper limit. Entity A projection/entity. IntegerRange A Range<TPrimitive> object for collecting a System.Int32 lower and upper limit. Range<TPrimitive> A range object for collecting a lower and upper limit, such as a number or date range. Interfaces IEntity A projection/entity."
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.Range-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.Range-1.html",
    "title": "Class Range<TPrimitive> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Range<TPrimitive> A range object for collecting a lower and upper limit, such as a number or date range. Inheritance System.Object Range<TPrimitive> DateRange DecimalRange IntegerRange Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax public class Range<TPrimitive> where TPrimitive : struct Type Parameters Name Description TPrimitive Properties From The lower limit such as a from System.DateTime . Declaration public TPrimitive? From { get; set; } Property Value Type Description System.Nullable <TPrimitive> IsFromInclusive Is the value of From inclusive or not. Defaults to true. Declaration public bool IsFromInclusive { get; set; } Property Value Type Description System.Boolean IsToInclusive Is the value of To inclusive or not. Defaults to true. Declaration public bool IsToInclusive { get; set; } Property Value Type Description System.Boolean To The upper limit such as a to System.DateTime . Declaration public TPrimitive? To { get; set; } Property Value Type Description System.Nullable <TPrimitive>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.IntegerRange.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.IntegerRange.html",
    "title": "Class IntegerRange | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class IntegerRange A Range<TPrimitive> object for collecting a System.Int32 lower and upper limit. Inheritance System.Object Range < System.Int32 > IntegerRange Inherited Members Range<Int32>.From Range<Int32>.To Range<Int32>.IsFromInclusive Range<Int32>.IsToInclusive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax public class IntegerRange : Range<int> Constructors IntegerRange() Instantiates and Initialises a new instance of the IntegerRange class. Declaration public IntegerRange()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.IEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.IEntity.html",
    "title": "Interface IEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEntity A projection/entity. Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax public interface IEntity Properties IsLogicallyDeleted Indicates if this IEntity has been deleted, but not removed from the IDataStore<TData> , this way entities can be retrieved so an un-deleted operation can be triggered. Declaration [Required] [DataMember] bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Rsn The identifier of the IEntity . Declaration [Required] [DataMember] Guid Rsn { get; set; } Property Value Type Description System.Guid SortingOrder The order of this IEntity to sort by, by default. Declaration [DataMember] int SortingOrder { get; set; } Property Value Type Description System.Int32"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.Entity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.Entity.html",
    "title": "Class Entity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Entity A projection/entity. Inheritance System.Object Entity TestEntity AzureDocumentDbEntity TestEvent MongoEntity MongoEntity OrderEntity Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax [Serializable] [DataContract] public abstract class Entity : IEntity Properties IsLogicallyDeleted Indicates if this IEntity has been deleted, but not removed from the IDataStore<TData> , this way entities can be retrieved so an un-deleted operation can be triggered. Declaration [Required] [DataMember] [Column] public virtual bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Implements IEntity.IsLogicallyDeleted Rsn The identifier of the IEntity . Declaration [Required] [DataMember] [Column(IsPrimaryKey = true)] public virtual Guid Rsn { get; set; } Property Value Type Description System.Guid Implements IEntity.Rsn SortingOrder The order of this IEntity to sort by, by default. Declaration [DataMember] [Column] public virtual int SortingOrder { get; set; } Property Value Type Description System.Int32 Implements IEntity.SortingOrder"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.DecimalRange.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.DecimalRange.html",
    "title": "Class DecimalRange | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DecimalRange A Range<TPrimitive> object for collecting a System.Decimal lower and upper limit. Inheritance System.Object Range < System.Decimal > DecimalRange Inherited Members Range<Decimal>.From Range<Decimal>.To Range<Decimal>.IsFromInclusive Range<Decimal>.IsToInclusive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax public class DecimalRange : Range<decimal> Constructors DecimalRange() Instantiates and Initialises a new instance of the DecimalRange class. Declaration public DecimalRange()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Entities.DateRange.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Entities.DateRange.html",
    "title": "Class DateRange | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DateRange A Range<TPrimitive> object for collecting a System.DateTime lower and upper limit. Inheritance System.Object Range < System.DateTime > DateRange Inherited Members Range<DateTime>.From Range<DateTime>.To Range<DateTime>.IsFromInclusive Range<DateTime>.IsToInclusive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Entities Assembly : Cqrs.dll Syntax public class DateRange : Range<DateTime> Constructors DateRange() Instantiates and Initialises a new instance of the DateRange class. Declaration public DateRange()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.html",
    "title": "Namespace Cqrs.Domain | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Domain Classes AggregateRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> using an IEventStore<TAuthenticationToken> that also publishes events once saved. AggregateRoot<TAuthenticationToken> A larger unit of encapsulation than just a class. Every transaction is scoped to a single aggregate. The lifetimes of the components of an aggregate are bounded by the lifetime of the entire aggregate. Concretely, an aggregate will handle commands, apply events, and have a state model encapsulated within it that allows it to implement the required command validation, thus upholding the invariants (business rules) of the aggregate. DtoAggregateRoot<TAuthenticationToken, TDto> An IAggregateRoot<TAuthenticationToken> for operating on IDto instances. Saga<TAuthenticationToken> An independent component that reacts to domain IEvent<TAuthenticationToken> in a cross- IAggregateRoot<TAuthenticationToken> , eventually consistent manner. Time can also be a trigger. A Saga<TAuthenticationToken> can sometimes be purely reactive, and sometimes represent workflows. From an implementation perspective, a Saga<TAuthenticationToken> is a state machine that is driven forward by incoming IEvent<TAuthenticationToken> (which may come from many AggregateRoot<TAuthenticationToken> or other Saga<TAuthenticationToken> ). Some states will have side effects, such as sending ICommand<TAuthenticationToken> , talking to external web services, or sending emails. SagaEventHandler<TAuthenticationToken, TSaga> A process manager that you can implement IEventHandler instances on top of. SagaRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of ISaga<TAuthenticationToken> . SagaUnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> . UnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> . Interfaces IAggregateRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> . IAggregateRoot<TAuthenticationToken> An IAggregateRoot<TAuthenticationToken> is a larger unit of encapsulation than just a class. Every transaction is scoped to a single aggregate. The lifetimes of the components of an IAggregateRoot<TAuthenticationToken> are bounded by the lifetime of the entire IAggregateRoot<TAuthenticationToken> . Concretely, an IAggregateRoot<TAuthenticationToken> will handle ICommand<TAuthenticationToken> s, apply IEvent<TAuthenticationToken> s, and have a state model encapsulated within it that allows it to implement the required command validation, thus upholding the invariants (business rules) of the IAggregateRoot<TAuthenticationToken> . IDto A basic data transfer object suitable for CRUD operations. ISaga<TAuthenticationToken> An independent component that reacts to domain IEvent<TAuthenticationToken> in a cross- IAggregateRoot<TAuthenticationToken> , eventually consistent manner. Time can also be a trigger. A Saga<TAuthenticationToken> can sometimes be purely reactive, and sometimes represent workflows. From an implementation perspective, a Saga<TAuthenticationToken> is a state machine that is driven forward by incoming IEvent<TAuthenticationToken> (which may come from many AggregateRoot<TAuthenticationToken> or other Saga<TAuthenticationToken> ). Some states will have side effects, such as sending ICommand<TAuthenticationToken> , talking to external web services, or sending emails. ISagaRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of ISaga<TAuthenticationToken> . ISagaUnitOfWork<TAuthenticationToken> This is a Unit of Work for sagas IUnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.UnitOfWork-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.UnitOfWork-1.html",
    "title": "Class UnitOfWork<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class UnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> . Inheritance System.Object UnitOfWork<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public class UnitOfWork<TAuthenticationToken> : IUnitOfWork<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks This shouldn't normally be used as a singleton. Constructors UnitOfWork(IAggregateRepository<TAuthenticationToken>) Instantiates a new instance of UnitOfWork<TAuthenticationToken> Declaration public UnitOfWork(IAggregateRepository<TAuthenticationToken> repository) Parameters Type Name Description IAggregateRepository <TAuthenticationToken> repository Methods Add<TAggregateRoot>(TAggregateRoot) Add an item into the IUnitOfWork<TAuthenticationToken> ready to be committed. Declaration public void Add<TAggregateRoot>(TAggregateRoot aggregate)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate Type Parameters Name Description TAggregateRoot Implements IUnitOfWork<TAuthenticationToken>.Add<TAggregateRoot>(TAggregateRoot) Commit() Commit any changed AggregateRoot<TAuthenticationToken> added to this IUnitOfWork<TAuthenticationToken> via Add<TAggregateRoot>(TAggregateRoot) into the IAggregateRepository<TAuthenticationToken> Declaration public void Commit() Implements IUnitOfWork<TAuthenticationToken>.Commit() Get<TAggregateRoot>(Guid, Nullable<Int32>) Get an item from the IUnitOfWork<TAuthenticationToken> if it has already been loaded or get it from the IAggregateRepository<TAuthenticationToken> . Declaration public TAggregateRoot Get<TAggregateRoot>(Guid id, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot Implements IUnitOfWork<TAuthenticationToken>.Get<TAggregateRoot>(Guid, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.SagaUnitOfWork-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.SagaUnitOfWork-1.html",
    "title": "Class SagaUnitOfWork<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SagaUnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> . Inheritance System.Object SagaUnitOfWork<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public class SagaUnitOfWork<TAuthenticationToken> : ISagaUnitOfWork<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks This shouldn't normally be used as a singleton. Constructors SagaUnitOfWork(ISagaRepository<TAuthenticationToken>) Instantiates a new instance of SagaUnitOfWork<TAuthenticationToken> Declaration public SagaUnitOfWork(ISagaRepository<TAuthenticationToken> repository) Parameters Type Name Description ISagaRepository <TAuthenticationToken> repository Methods Add<TSaga>(TSaga) Add an item into the IUnitOfWork<TAuthenticationToken> ready to be committed. Declaration public void Add<TSaga>(TSaga saga)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Add<TSaga>(TSaga) Commit() Commit any changed Saga<TAuthenticationToken> added to this IUnitOfWork<TAuthenticationToken> via Add<TSaga>(TSaga) into the ISagaRepository<TAuthenticationToken> Declaration public void Commit() Implements ISagaUnitOfWork<TAuthenticationToken>.Commit() Get<TSaga>(Guid, Nullable<Int32>) Get an item from the IUnitOfWork<TAuthenticationToken> if it has already been loaded or get it from the ISagaRepository<TAuthenticationToken> . Declaration public TSaga Get<TSaga>(Guid id, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TSaga Type Parameters Name Description TSaga Implements ISagaUnitOfWork<TAuthenticationToken>.Get<TSaga>(Guid, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.SagaRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.SagaRepository-1.html",
    "title": "Class SagaRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SagaRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of ISaga<TAuthenticationToken> . Inheritance System.Object SagaRepository<TAuthenticationToken> AkkaSagaRepository<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public class SagaRepository<TAuthenticationToken> : ISagaRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors SagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper) Instantiates a new instance of SagaRepository<TAuthenticationToken> Declaration public SagaRepository(IAggregateFactory sagaFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper) Parameters Type Name Description IAggregateFactory sagaFactory IEventStore <TAuthenticationToken> eventStore IEventPublisher <TAuthenticationToken> publisher cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper Properties CorrelationIdHelper Gets or set the cdmdotnet.Logging.ICorrelationIdHelper . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventStore Gets or sets the IEventStore<TAuthenticationToken> used to store and retrieve events from. Declaration protected IEventStore<TAuthenticationToken> EventStore { get; } Property Value Type Description IEventStore <TAuthenticationToken> Publisher Gets or sets the Publisher used to publish events on once saved into the EventStore . Declaration protected IEventPublisher<TAuthenticationToken> Publisher { get; } Property Value Type Description IEventPublisher <TAuthenticationToken> SagaFactory Gets or set the IAggregateFactory . Declaration protected IAggregateFactory SagaFactory { get; } Property Value Type Description IAggregateFactory Methods CreateSaga<TSaga>(Guid) Calls Create(Type, Nullable<Guid>, Boolean) to get a, TSaga . Declaration protected virtual TSaga CreateSaga<TSaga>(Guid id)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid id The id of the TSaga to create. Returns Type Description TSaga Type Parameters Name Description TSaga The System.Type of ISaga<TAuthenticationToken> . Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) Retrieves an ISaga<TAuthenticationToken> of type TSaga . Declaration public virtual TSaga Get<TSaga>(Guid sagaId, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid sagaId The identifier of the ISaga<TAuthenticationToken> to retrieve. System.Collections.Generic.IList < ISagaEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved ISaga<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TSaga Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> . Implements ISagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) Calls Create(Type, Nullable<Guid>, Boolean) to get a, TSaga and then calls LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean) . Declaration protected virtual TSaga LoadSaga<TSaga>(Guid id, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid id The id of the TSaga to create. System.Collections.Generic.IList < ISagaEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved ISaga<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TSaga Type Parameters Name Description TSaga The System.Type of ISaga<TAuthenticationToken> . LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean) If events is null, loads the events from EventStore , checks for duplicates and then rehydrates the saga with the events. Declaration public virtual void LoadSagaHistory<TSaga>(TSaga saga, IList<ISagaEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga The TSaga to rehydrate. System.Collections.Generic.IList < ISagaEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved ISaga<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. System.Boolean throwExceptionOnNoEvents If true will throw an instance of AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> if no aggregate events or provided or found in the EventStore . Type Parameters Name Description TSaga The System.Type of ISaga<TAuthenticationToken> . PublishEvent(ISagaEvent<TAuthenticationToken>) Publish the saved event . Declaration protected virtual void PublishEvent(ISagaEvent<TAuthenticationToken> event) Parameters Type Name Description ISagaEvent <TAuthenticationToken> event Save<TSaga>(TSaga, Nullable<Int32>) Save and persist the provided saga , optionally providing the version number the ISaga<TAuthenticationToken> is expected to be at. Declaration public virtual void Save<TSaga>(TSaga saga, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga The ISaga<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the ISaga<TAuthenticationToken> is expected to be at. Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> . Implements ISagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.SagaEventHandler-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.SagaEventHandler-2.html",
    "title": "Class SagaEventHandler<TAuthenticationToken, TSaga> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SagaEventHandler<TAuthenticationToken, TSaga> A process manager that you can implement IEventHandler instances on top of. Inheritance System.Object SagaEventHandler<TAuthenticationToken, TSaga> TestSagaEventHandlers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public abstract class SagaEventHandler<TAuthenticationToken, TSaga> where TSaga : ISaga<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. TSaga The System.Type of ISaga<TAuthenticationToken> . Constructors SagaEventHandler(IDependencyResolver, ILogger) A constructor for the IAggregateFactory Declaration protected SagaEventHandler(IDependencyResolver dependencyResolver, ILogger logger) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger SagaEventHandler(IDependencyResolver, ILogger, ISagaUnitOfWork<TAuthenticationToken>) Instantiate a new instance of SagaEventHandler<TAuthenticationToken, TSaga> Declaration protected SagaEventHandler(IDependencyResolver dependencyResolver, ILogger logger, ISagaUnitOfWork<TAuthenticationToken> sagaUnitOfWork) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger ISagaUnitOfWork <TAuthenticationToken> sagaUnitOfWork Properties DependencyResolver Gets or set the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Logger Gets or set the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger SagaUnitOfWork Gets or set the ISagaUnitOfWork<TAuthenticationToken> . Declaration protected ISagaUnitOfWork<TAuthenticationToken> SagaUnitOfWork { get; } Property Value Type Description ISagaUnitOfWork <TAuthenticationToken> Methods GetSaga(Guid) Gets the TSaga from the SagaUnitOfWork . Declaration protected virtual TSaga GetSaga(Guid id) Parameters Type Name Description System.Guid id The identifier of the TSaga to get. Returns Type Description TSaga"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Saga-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Saga-1.html",
    "title": "Class Saga<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Saga<TAuthenticationToken> An independent component that reacts to domain IEvent<TAuthenticationToken> in a cross- IAggregateRoot<TAuthenticationToken> , eventually consistent manner. Time can also be a trigger. A Saga<TAuthenticationToken> can sometimes be purely reactive, and sometimes represent workflows. From an implementation perspective, a Saga<TAuthenticationToken> is a state machine that is driven forward by incoming IEvent<TAuthenticationToken> (which may come from many AggregateRoot<TAuthenticationToken> or other Saga<TAuthenticationToken> ). Some states will have side effects, such as sending ICommand<TAuthenticationToken> , talking to external web services, or sending emails. Inheritance System.Object Saga<TAuthenticationToken> TestSaga Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public abstract class Saga<TAuthenticationToken> : ISaga<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks Isn't a Saga<TAuthenticationToken> just leaked domain logic? No. A Saga<TAuthenticationToken> can doing things that no individual AggregateRoot<TAuthenticationToken> can sensibly do. Thus, it's not a logic leak since the logic didn't belong in an AggregateRoot<TAuthenticationToken> anyway. Furthermore, we're not breaking encapsulation in any way, since Saga<TAuthenticationToken> operate with ICommand<TAuthenticationToken> and IEvent<TAuthenticationToken> , which are part of the public API. How can I make my Saga<TAuthenticationToken> react to an IEvent<TAuthenticationToken> that did not happen? The Saga<TAuthenticationToken> , besides reacting to domain IEvent<TAuthenticationToken> , can be \"woken up\" by recurrent internal alarms. Implementing such alarms is easy. See cron in Unix, or triggered WebJobs in Azure for examples. How does the Saga<TAuthenticationToken> interact with the write side? By sending an ICommand<TAuthenticationToken> to it. Constructors Saga() A constructor for the IAggregateFactory Declaration protected Saga() Saga(IDependencyResolver, ILogger) A constructor for the IAggregateFactory Declaration protected Saga(IDependencyResolver dependencyResolver, ILogger logger) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger Saga(IDependencyResolver, ILogger, Guid) A constructor for the IAggregateFactory Declaration protected Saga(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger System.Guid rsn Properties CommandPublisher Gets or set the ICommandPublisher<TAuthenticationToken> . Declaration protected ICommandPublisher<TAuthenticationToken> CommandPublisher { get; } Property Value Type Description ICommandPublisher <TAuthenticationToken> DependencyResolver Gets or set the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Id The identifier of this ISaga<TAuthenticationToken> . Declaration [DataMember] public Guid Id { get; protected set; } Property Value Type Description System.Guid Implements ISaga<TAuthenticationToken>.Id Logger Gets or set the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Rsn The identifier of this ISaga<TAuthenticationToken> . Declaration [DataMember] public Guid Rsn { get; } Property Value Type Description System.Guid Version The current version of this ISaga<TAuthenticationToken> . Declaration public int Version { get; protected set; } Property Value Type Description System.Int32 Implements ISaga<TAuthenticationToken>.Version Methods ApplyChange(IEvent<TAuthenticationToken>) Calls the \"SetId\" method dynamically if the method exists, then calls ApplyChange(ISagaEvent<TAuthenticationToken>) Declaration protected virtual void ApplyChange(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event ApplyChange(ISagaEvent<TAuthenticationToken>) Call the \"Apply\" method with a signature matching the provided event without using event replay to this instance. Declaration protected virtual void ApplyChange(ISagaEvent<TAuthenticationToken> event) Parameters Type Name Description ISagaEvent <TAuthenticationToken> event Remarks This means a method named \"Apply\", with return type void and one parameter must exist to be applied. If no method exists, nothing is applied The parameter type must match exactly the System.Type of the provided event . GetUncommittedChanges() Get all applied changes that haven't yet been committed. Declaration public virtual IEnumerable<ISagaEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> Implements ISaga<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) Apply all the IEvent<TAuthenticationToken> in history using event replay to this instance. Declaration public virtual void LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> history Implements ISaga<TAuthenticationToken>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Mark all applied changes as committed, increment Version and flush the Cqrs.Domain.Saga`1.Changes . Declaration public virtual void MarkChangesAsCommitted() Implements ISaga<TAuthenticationToken>.MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.IUnitOfWork-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.IUnitOfWork-1.html",
    "title": "Interface IUnitOfWork<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IUnitOfWork<TAuthenticationToken> Provides a basic container to control when IEvent<TAuthenticationToken> are store in an IEventStore<TAuthenticationToken> and then published on an IEventPublisher<TAuthenticationToken> . Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface IUnitOfWork<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods Add<TAggregateRoot>(TAggregateRoot) Add an item into the IUnitOfWork<TAuthenticationToken> ready to be committed. Declaration void Add<TAggregateRoot>(TAggregateRoot aggregate)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate Type Parameters Name Description TAggregateRoot Commit() Commit any changed AggregateRoot<TAuthenticationToken> added to this IUnitOfWork<TAuthenticationToken> via Add<TAggregateRoot>(TAggregateRoot) Declaration void Commit() Get<TAggregateRoot>(Guid, Nullable<Int32>) Get an item from the IUnitOfWork<TAuthenticationToken> if it has already been loaded. Declaration TAggregateRoot Get<TAggregateRoot>(Guid id, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.ISagaUnitOfWork-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.ISagaUnitOfWork-1.html",
    "title": "Interface ISagaUnitOfWork<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISagaUnitOfWork<TAuthenticationToken> This is a Unit of Work for sagas Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface ISagaUnitOfWork<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods Add<TSaga>(TSaga) Add an item into the ISagaUnitOfWork<TAuthenticationToken> ready to be committed. Declaration void Add<TSaga>(TSaga saga)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga Type Parameters Name Description TSaga Commit() Commit any changed Saga<TAuthenticationToken> added to this ISagaUnitOfWork<TAuthenticationToken> via Add<TSaga>(TSaga) Declaration void Commit() Get<TSaga>(Guid, Nullable<Int32>) Get an item from the ISagaUnitOfWork<TAuthenticationToken> if it has already been loaded. Declaration TSaga Get<TSaga>(Guid id, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid id System.Nullable < System.Int32 > expectedVersion Returns Type Description TSaga Type Parameters Name Description TSaga"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.ISagaRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.ISagaRepository-1.html",
    "title": "Interface ISagaRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISagaRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of ISaga<TAuthenticationToken> . Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public interface ISagaRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Methods Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) Retrieves an ISaga<TAuthenticationToken> of type TSaga . Declaration TSaga Get<TSaga>(Guid sagaId, IList<ISagaEvent<TAuthenticationToken>> events = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid sagaId The identifier of the ISaga<TAuthenticationToken> to retrieve. System.Collections.Generic.IList < ISagaEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved ISaga<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TSaga Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> . Save<TSaga>(TSaga, Nullable<Int32>) Save and persist the provided saga , optionally providing the version number the ISaga<TAuthenticationToken> is expected to be at. Declaration void Save<TSaga>(TSaga saga, int ? expectedVersion = null)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description TSaga saga The ISaga<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the ISaga<TAuthenticationToken> is expected to be at. Type Parameters Name Description TSaga The System.Type of the ISaga<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.AggregateOrEventMissingIdException.html",
    "title": "Class AggregateOrEventMissingIdException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AggregateOrEventMissingIdException The IEvent<TAuthenticationToken> had not Id set. Inheritance System.Object System.Exception AggregateOrEventMissingIdException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class AggregateOrEventMissingIdException : Exception, ISerializable, _Exception Constructors AggregateOrEventMissingIdException(Type, Type) Instantiate a new instance of AggregateOrEventMissingIdException with the System.Type of the IEvent<TAuthenticationToken> and IAggregateRoot<TAuthenticationToken> . The eventType that was trying to be saved on an aggregateType . Declaration public AggregateOrEventMissingIdException(Type aggregateType, Type eventType) Parameters Type Name Description System.Type aggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that the IEvent<TAuthenticationToken> was trying to be saved on. System.Type eventType The System.Type of the IEvent<TAuthenticationToken> that was trying to be saved. Properties AggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that the IEvent<TAuthenticationToken> was trying to be saved on. Declaration [DataMember] public Type AggregateType { get; set; } Property Value Type Description System.Type EventType The System.Type of the IEvent<TAuthenticationToken> that was trying to be saved. Declaration [DataMember] public Type EventType { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.AggregateNotFoundException-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.Exceptions.AggregateNotFoundException-2.html",
    "title": "Class AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> The IAggregateRoot<TAuthenticationToken> requested was not found. Inheritance System.Object System.Exception AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Cqrs.Domain.Exceptions Assembly : Cqrs.dll Syntax [Serializable] public class AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> : Exception, ISerializable, _Exception where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> that wasn't found. TAuthenticationToken The System.Type of the authentication token. Constructors AggregateNotFoundException(Guid) Instantiate a new instance of AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> with the provided identifier of the IAggregateRoot<TAuthenticationToken> that wasn't found. Declaration public AggregateNotFoundException(Guid id) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> that wasn't found. Properties AggregateType The System.Type of the IAggregateRoot<TAuthenticationToken> that wasn't found. Declaration [DataMember] public Type AggregateType { get; set; } Property Value Type Description System.Type Id The identifier of the IAggregateRoot<TAuthenticationToken> that wasn't found. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.DtoAggregateRoot-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.DtoAggregateRoot-2.html",
    "title": "Class DtoAggregateRoot<TAuthenticationToken, TDto> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DtoAggregateRoot<TAuthenticationToken, TDto> An IAggregateRoot<TAuthenticationToken> for operating on IDto instances. Inheritance System.Object AggregateRoot <TAuthenticationToken> DtoAggregateRoot<TAuthenticationToken, TDto> Inherited Members AggregateRoot<TAuthenticationToken>.Id AggregateRoot<TAuthenticationToken>.Version AggregateRoot<TAuthenticationToken>.GetUncommittedChanges() AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted() AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public class DtoAggregateRoot<TAuthenticationToken, TDto> : AggregateRoot<TAuthenticationToken>, IAggregateRoot<TAuthenticationToken> where TDto : IDto Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. TDto The System.Type of IDto . Constructors DtoAggregateRoot(Guid, TDto, TDto) Instantiate a new instance of DtoAggregateRoot<TAuthenticationToken, TDto> and instantly apply the change as n DtoAggregateEvent<TAuthenticationToken, TDto> Declaration public DtoAggregateRoot(Guid id, TDto original, TDto new) Parameters Type Name Description System.Guid id The identifier of the IDto . TDto original The original copy of the IDto . May be null for a Created operation. TDto new The new copy of the IDto . May be null for a Deleted operation."
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.AggregateRoot-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.AggregateRoot-1.html",
    "title": "Class AggregateRoot<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AggregateRoot<TAuthenticationToken> A larger unit of encapsulation than just a class. Every transaction is scoped to a single aggregate. The lifetimes of the components of an aggregate are bounded by the lifetime of the entire aggregate. Concretely, an aggregate will handle commands, apply events, and have a state model encapsulated within it that allows it to implement the required command validation, thus upholding the invariants (business rules) of the aggregate. Inheritance System.Object AggregateRoot<TAuthenticationToken> DtoAggregateRoot<TAuthenticationToken, TDto> SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> TestAggregate TestAggregateNoParameterLessConstructor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax [Serializable] public abstract class AggregateRoot<TAuthenticationToken> : IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Remarks Why is the use of GUID as IDs a good practice? Because they are (reasonably) globally unique, and can be generated either by the server or by the client. Constructors AggregateRoot() Instantiates a new instance of AggregateRoot<TAuthenticationToken> . Declaration protected AggregateRoot() Properties Id The identifier of this IAggregateRoot<TAuthenticationToken> . Declaration [DataMember] public Guid Id { get; protected set; } Property Value Type Description System.Guid Implements IAggregateRoot<TAuthenticationToken>.Id Version The current version of this IAggregateRoot<TAuthenticationToken> . Declaration [DataMember] public int Version { get; protected set; } Property Value Type Description System.Int32 Implements IAggregateRoot<TAuthenticationToken>.Version Methods ApplyChange(IEvent<TAuthenticationToken>) Call the \"Apply\" method with a signature matching the provided event without using event replay to this instance. Declaration protected virtual void ApplyChange(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Remarks This means a method named \"Apply\", with return type void and one parameter must exist to be applied. If no method exists, nothing is applied The parameter type must match exactly the System.Type of the provided event . GetUncommittedChanges() Get all applied changes that haven't yet been committed. Declaration public IEnumerable<IEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) Apply all the IEvent<TAuthenticationToken> in history using event replay to this instance. Declaration public virtual void LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> history Implements IAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Mark all applied changes as committed, increment Version and flush the Cqrs.Domain.AggregateRoot`1.Changes . Declaration public virtual void MarkChangesAsCommitted() Implements IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Domain.AggregateRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Domain.AggregateRepository-1.html",
    "title": "Class AggregateRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AggregateRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> using an IEventStore<TAuthenticationToken> that also publishes events once saved. Inheritance System.Object AggregateRepository<TAuthenticationToken> AkkaAggregateRepository<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Domain Assembly : Cqrs.dll Syntax public class AggregateRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors AggregateRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper) Instantiates a new instance of AggregateRepository<TAuthenticationToken> Declaration public AggregateRepository(IAggregateFactory aggregateFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper) Parameters Type Name Description IAggregateFactory aggregateFactory IEventStore <TAuthenticationToken> eventStore IEventPublisher <TAuthenticationToken> publisher cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper Properties AggregateFactory Gets or set the IAggregateFactory . Declaration protected IAggregateFactory AggregateFactory { get; } Property Value Type Description IAggregateFactory CorrelationIdHelper Gets or set the cdmdotnet.Logging.ICorrelationIdHelper . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventStore Gets or sets the IEventStore<TAuthenticationToken> used to store and retrieve events from. Declaration protected IEventStore<TAuthenticationToken> EventStore { get; } Property Value Type Description IEventStore <TAuthenticationToken> Publisher Gets or sets the Publisher used to publish events on once saved into the EventStore . Declaration protected IEventPublisher<TAuthenticationToken> Publisher { get; } Property Value Type Description IEventPublisher <TAuthenticationToken> Methods CreateAggregate<TAggregateRoot>(Guid) Calls Create(Type, Nullable<Guid>, Boolean) to get a, TAggregateRoot . Declaration protected virtual TAggregateRoot CreateAggregate<TAggregateRoot>(Guid id)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid id The id of the TAggregateRoot to create. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of IAggregateRoot<TAuthenticationToken> . Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Retrieves an IAggregateRoot<TAuthenticationToken> of type TAggregateRoot . Declaration public virtual TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid aggregateId The identifier of the IAggregateRoot<TAuthenticationToken> to retrieve. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) LoadAggregate<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Calls Create(Type, Nullable<Guid>, Boolean) to get a, TAggregateRoot and then calls LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean) . Declaration protected virtual TAggregateRoot LoadAggregate<TAggregateRoot>(Guid id, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid id The id of the TAggregateRoot to create. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of IAggregateRoot<TAuthenticationToken> . LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean) If events is null, loads the events from EventStore , checks for duplicates and then rehydrates the aggregate with the events. Declaration public virtual void LoadAggregateHistory<TAggregateRoot>(TAggregateRoot aggregate, IList<IEvent<TAuthenticationToken>> events = null, bool throwExceptionOnNoEvents = true)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate The TAggregateRoot to rehydrate. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. System.Boolean throwExceptionOnNoEvents If true will throw an instance of AggregateNotFoundException<TAggregateRoot, TAuthenticationToken> if no aggregate events or provided or found in the EventStore . Type Parameters Name Description TAggregateRoot The System.Type of IAggregateRoot<TAuthenticationToken> . PublishEvent(IEvent<TAuthenticationToken>) Publish the saved event . Declaration protected virtual void PublishEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) Save and persist the provided aggregate , optionally providing the version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Declaration public virtual void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate The IAggregateRoot<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.DataStores.html",
    "title": "Namespace Cqrs.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.DataStores Classes InProcessDataStore<TData> A IDataStore<TData> using an Cqrs.DataStores.InProcessDataStore`1.InMemoryDatabase . SqlDataStore<TData> A IDataStore<TData> using simplified SQL. SqlDataStoreExtension A collection of extension methods for System.Data.Linq.Table<TEntity> Interfaces IDataStore<TData> A data store capable of being queried and modified."
  },
  "wiki/docs/api/2.2/html/Cqrs.DataStores.SqlDataStoreExtension.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.DataStores.SqlDataStoreExtension.html",
    "title": "Class SqlDataStoreExtension | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SqlDataStoreExtension A collection of extension methods for System.Data.Linq.Table<TEntity> Inheritance System.Object SqlDataStoreExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.DataStores Assembly : Cqrs.dll Syntax public static class SqlDataStoreExtension Methods Truncate<TEntity>(Table<TEntity>) Calls the TRUNCATE SQL command on the System.Data.Linq.Table<TEntity> . Declaration public static void Truncate<TEntity>(this Table<TEntity> table)where TEntity : class Parameters Type Name Description System.Data.Linq.Table <TEntity> table The System.Data.Linq.Table<TEntity> to truncate all data of. Type Parameters Name Description TEntity The System.Type of IEntity to truncate all data of."
  },
  "wiki/docs/api/2.2/html/Cqrs.DataStores.SqlDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.DataStores.SqlDataStore-1.html",
    "title": "Class SqlDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SqlDataStore<TData> A IDataStore<TData> using simplified SQL. Inheritance System.Object SqlDataStore<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.DataStores Assembly : Cqrs.dll Syntax public class SqlDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData Constructors SqlDataStore(IConfigurationManager, ILogger) Instantiates a new instance of the SqlDataStore<TData> class Declaration public SqlDataStore(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager DbDataContext Gets or sets the DataContext. Declaration protected DataContext DbDataContext { get; } Property Value Type Description System.Data.Linq.DataContext ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Implements System.Linq.IQueryable.Expression Logger Gets or sets the Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Provider Gets the query provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Implements System.Linq.IQueryable.Provider Table Gets or sets the readable Table Declaration protected Table<TData> Table { get; } Property Value Type Description System.Data.Linq.Table <TData> WriteableConnections Gets or sets the list of writeable DataContexts for data mirroring Declaration protected IEnumerable<DataContext> WriteableConnections { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Data.Linq.DataContext > WriteableConnectionStrings Gets or sets the list of writeable connection strings for data mirroring Declaration protected IEnumerable<string> WriteableConnectionStrings { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public virtual void Add(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public virtual void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Implements IDataStore<TData>.Add(IEnumerable<TData>) CreateDbDataContext() Locate the connection settings and create a System.Data.Linq.DataContext . Declaration protected virtual DataContext CreateDbDataContext() Returns Type Description System.Data.Linq.DataContext Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public void Destroy(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetWriteableConnectionStrings() Locate the connection settings for persisting data. Declaration protected virtual IEnumerable<string> GetWriteableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Remove(TData) Will mark the data as logically (or soft) deleted by setting IsLogicallyDeleted to true in the data store and persist the change. Declaration public virtual void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public virtual void RemoveAll() Implements IDataStore<TData>.RemoveAll() Update(TData) Update the provided data in the data store and persist the change. Declaration public virtual void Update(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.DataStores.InProcessDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.DataStores.InProcessDataStore-1.html",
    "title": "Class InProcessDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessDataStore<TData> A IDataStore<TData> using an Cqrs.DataStores.InProcessDataStore`1.InMemoryDatabase . Inheritance System.Object InProcessDataStore<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.DataStores Assembly : Cqrs.dll Syntax public class InProcessDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData Constructors InProcessDataStore() Instantiates a new instance of the InProcessDataStore<TData> class Declaration public InProcessDataStore() Properties ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Implements System.Linq.IQueryable.Expression Provider Gets the singleResultQuery provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Implements System.Linq.IQueryable.Provider Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public void Add(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Implements IDataStore<TData>.Add(IEnumerable<TData>) Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public void Destroy(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(TData) Will mark the data as logically (or soft) deleted by setting IsLogicallyDeleted to true in the data store and persist the change. Declaration public void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public void RemoveAll() Implements IDataStore<TData>.RemoveAll() Update(TData) Update the provided data in the data store and persist the change. Declaration public void Update(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.DataStores.IDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.DataStores.IDataStore-1.html",
    "title": "Interface IDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IDataStore<TData> A data store capable of being queried and modified. Inherited Members System.Collections.Generic.IEnumerable<TData>.GetEnumerator() System.Linq.IQueryable.Expression System.Linq.IQueryable.ElementType System.Linq.IQueryable.Provider System.IDisposable.Dispose() Namespace : Cqrs.DataStores Assembly : Cqrs.dll Syntax public interface IDataStore<TData> : IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable Type Parameters Name Description TData Methods Add(TData) Add the provided data to the data store and persist the change. Declaration void Add(TData data) Parameters Type Name Description TData data Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration void Destroy(TData data) Parameters Type Name Description TData data Remove(TData) Will mark the data as logically (or soft) deleted by setting IsLogicallyDeleted to true in the data store and persist the change. Declaration void Remove(TData data) Parameters Type Name Description TData data RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration void RemoveAll() Update(TData) Update the provided data in the data store and persist the change. Declaration void Update(TData data) Parameters Type Name Description TData data Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.html",
    "title": "Namespace Cqrs.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Configuration Classes BusRegistrar Triggers the IEventHandlerRegistrar and ICommandHandlerRegistrar if they are registered in the IDependencyResolver . ConfigurationExtensions A collection of extension methods for IConfigurationManager . ConfigurationManager Provides access to configuration settings from the app settings of an app.config or web.config... i.e. System.Configuration.ConfigurationManager.AppSettings DependencyResolver Provides an ability to resolve instances of objects. HandlerDelegate Information about a IHandler delegate. HandlerDelegate<T> Information about a delegate. ITelemetryHelperExtensions A collection of extension methods for cdmdotnet.Logging.ITelemetryHelper . Interfaces IConfigurationManager Provides access to configuration settings. IDependencyResolver Provides an ability to resolve instances of objects."
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.ITelemetryHelperExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.ITelemetryHelperExtensions.html",
    "title": "Class ITelemetryHelperExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ITelemetryHelperExtensions A collection of extension methods for cdmdotnet.Logging.ITelemetryHelper . Inheritance System.Object ITelemetryHelperExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public static class ITelemetryHelperExtensions Methods TrackRequest(ITelemetryHelper, String, Nullable<Guid>, DateTimeOffset, TimeSpan, String, Boolean, IDictionary<String, String>) Send information about a request handled by the application. Declaration public static void TrackRequest(this ITelemetryHelper telemetryHelper, string name, Guid? token, DateTimeOffset startTime, TimeSpan duration, string responseCode, bool wasSuccessfull, IDictionary<string, string> properties = null) Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper The cdmdotnet.Logging.ITelemetryHelper being extended.s System.String name The request name. System.Nullable < System.Guid > token The token with user identifiable information. System.DateTimeOffset startTime The time when the page was requested. System.TimeSpan duration The time taken by the application to handle the request. System.String responseCode The response status code. System.Boolean wasSuccessfull True if the request was handled successfully by the application. System.Collections.Generic.IDictionary < System.String , System.String > properties Named string values you can use to search and classify events. TrackRequest(ITelemetryHelper, String, Nullable<Int32>, DateTimeOffset, TimeSpan, String, Boolean, IDictionary<String, String>) Send information about a request handled by the application. Declaration public static void TrackRequest(this ITelemetryHelper telemetryHelper, string name, int ? token, DateTimeOffset startTime, TimeSpan duration, string responseCode, bool wasSuccessfull, IDictionary<string, string> properties = null) Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper The cdmdotnet.Logging.ITelemetryHelper being extended.s System.String name The request name. System.Nullable < System.Int32 > token The token with user identifiable information. System.DateTimeOffset startTime The time when the page was requested. System.TimeSpan duration The time taken by the application to handle the request. System.String responseCode The response status code. System.Boolean wasSuccessfull True if the request was handled successfully by the application. System.Collections.Generic.IDictionary < System.String , System.String > properties Named string values you can use to search and classify events. TrackRequest(ITelemetryHelper, String, String, DateTimeOffset, TimeSpan, String, Boolean, IDictionary<String, String>) Send information about a request handled by the application. Declaration public static void TrackRequest(this ITelemetryHelper telemetryHelper, string name, string token, DateTimeOffset startTime, TimeSpan duration, string responseCode, bool wasSuccessfull, IDictionary<string, string> properties = null) Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper The cdmdotnet.Logging.ITelemetryHelper being extended.s System.String name The request name. System.String token The token with user identifiable information. System.DateTimeOffset startTime The time when the page was requested. System.TimeSpan duration The time taken by the application to handle the request. System.String responseCode The response status code. System.Boolean wasSuccessfull True if the request was handled successfully by the application. System.Collections.Generic.IDictionary < System.String , System.String > properties Named string values you can use to search and classify events. TrackRequest<TAuthenticationToken>(ITelemetryHelper, String, TAuthenticationToken, DateTimeOffset, TimeSpan, String, Boolean, IDictionary<String, String>) Send information about a request handled by the application. Declaration public static void TrackRequest<TAuthenticationToken>(this ITelemetryHelper telemetryHelper, string name, TAuthenticationToken token, DateTimeOffset startTime, TimeSpan duration, string responseCode, bool wasSuccessfull, IDictionary<string, string> properties = null)where TAuthenticationToken : ISingleSignOnToken Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper The cdmdotnet.Logging.ITelemetryHelper being extended.s System.String name The request name. TAuthenticationToken token The token with user identifiable information. System.DateTimeOffset startTime The time when the page was requested. System.TimeSpan duration The time taken by the application to handle the request. System.String responseCode The response status code. System.Boolean wasSuccessfull True if the request was handled successfully by the application. System.Collections.Generic.IDictionary < System.String , System.String > properties Named string values you can use to search and classify events. Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.IDependencyResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.IDependencyResolver.html",
    "title": "Interface IDependencyResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IDependencyResolver Provides an ability to resolve instances of objects. Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public interface IDependencyResolver Methods Resolve(Type) Resolves a single instance for the specified type . Different implementations may return the first or last instance found or may return an exception. Declaration object Resolve(Type type) Parameters Type Name Description System.Type type The System.Type of object you want to resolve. Returns Type Description System.Object An instance of type type . Resolve<T>() Resolves a single instance for the specified T . Different implementations may return the first or last instance found or may return an exception. Declaration T Resolve<T>() Returns Type Description T An instance of type T . Type Parameters Name Description T The System.Type of object you want to resolve."
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.IConfigurationManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.IConfigurationManager.html",
    "title": "Interface IConfigurationManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IConfigurationManager Provides access to configuration settings. Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public interface IConfigurationManager Methods GetSetting(String) Read the setting named key . Declaration string GetSetting(string key) Parameters Type Name Description System.String key The key (or name) of the setting to read. Returns Type Description System.String TryGetSetting(String, out Boolean) Read the setting named key . Declaration bool TryGetSetting(string key, out bool value) Parameters Type Name Description System.String key The key (or name) of the setting to read. System.Boolean value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the an element with the specified key exists; otherwise, false. TryGetSetting(String, out String) Read the setting named key . Declaration bool TryGetSetting(string key, out string value) Parameters Type Name Description System.String key The key (or name) of the setting to read. System.String value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the an element with the specified key exists; otherwise, false. Extension Methods ConfigurationExtensions.CreateTelemetryHelper(IConfigurationManager, String, IDependencyResolver) ConfigurationExtensions.CreateTelemetryHelper(IConfigurationManager, String, ICorrelationIdHelper)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.HandlerDelegate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.HandlerDelegate.html",
    "title": "Class HandlerDelegate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HandlerDelegate Information about a IHandler delegate. Inheritance System.Object HandlerDelegate < System.Object > HandlerDelegate Inherited Members HandlerDelegate<Object>.Delegate HandlerDelegate<Object>.TargetedType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public class HandlerDelegate : HandlerDelegate<dynamic>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Configuration.HandlerDelegate-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Configuration.HandlerDelegate-1.html",
    "title": "Class HandlerDelegate<T> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HandlerDelegate<T> Information about a delegate. Inheritance System.Object HandlerDelegate<T> RouteHandlerDelegate HandlerDelegate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Configuration Assembly : Cqrs.dll Syntax public class HandlerDelegate<T> Type Parameters Name Description T Properties Delegate The delegate that gets executed. Declaration public Action<T> Delegate { get; set; } Property Value Type Description System.Action <T> TargetedType The System.Type of the targeted object that Delegate operates on. Declaration public Type TargetedType { get; set; } Property Value Type Description System.Type"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandSender-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandSender-1.html",
    "title": "Interface ICommandSender<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandSender<TAuthenticationToken> Sends an ICommand<TAuthenticationToken> Inherited Members ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax [Obsolete(\"Replaced by ICommandPublisher<TAuthenticationToken>\")] public interface ICommandSender<TAuthenticationToken> : ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Send<TCommand>(TCommand) Publishes the provided command on the command bus. Declaration [Obsolete(\"Replaced by ICommandPublisher<TAuthenticationToken>.Publish(TCommand)\")] void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Send<TCommand>(IEnumerable<TCommand>) Publishes the provided commands on the command bus. Declaration [Obsolete(\"Replaced by ICommandPublisher<TAuthenticationToken>.Publish(IEnumerable<TCommand>)\")] void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandReceiver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandReceiver.html",
    "title": "Interface ICommandReceiver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandReceiver Receives instances of a ICommand<TAuthenticationToken> from the command bus. Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandReceiver Methods Start() Starts listening and processing instances of ICommand<TAuthenticationToken> from the command bus. Declaration void Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandReceiver-1.html",
    "title": "Interface ICommandReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandReceiver<TAuthenticationToken> Receives instances of a ICommand<TAuthenticationToken> from the command bus. Inherited Members ICommandReceiver.Start() Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandReceiver<TAuthenticationToken> : ICommandReceiver Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Methods ReceiveCommand(ICommand<TAuthenticationToken>) Receives a ICommand<TAuthenticationToken> from the command bus. Declaration bool ? ReceiveCommand(ICommand<TAuthenticationToken> command) Parameters Type Name Description ICommand <TAuthenticationToken> command Returns Type Description System.Nullable < System.Boolean >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandPublisher-1.html",
    "title": "Interface ICommandPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandPublisher<TAuthenticationToken> Publishes an ICommand<TAuthenticationToken> Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Methods Publish<TCommand>(TCommand) Publishes the provided command on the command bus. Declaration void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Publish<TCommand>(IEnumerable<TCommand>) Publishes the provided commands on the command bus. Declaration void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandHandler-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandHandler-2.html",
    "title": "Interface ICommandHandler<TAuthenticationToken, TCommand> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandHandler<TAuthenticationToken, TCommand> An ICommandHandler<TAuthenticationToken, TCommand> receives an ICommand<TAuthenticationToken> and brokers a result from the appropriate IAggregateRoot<TAuthenticationToken> . \"A result\" is either a successful application of the command, or an exception. This is the common sequence of steps an ICommandHandler<TAuthenticationToken, TCommand> might follow: Validate the ICommand<TAuthenticationToken> on its own merits. Ask an IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . If validation is successful, 0..n IEvent<TAuthenticationToken> artefacts (1 is common) are queued for publishing. Attempt to persist the new IEvent<TAuthenticationToken> artefacts. If there's a concurrency conflict during this step, either give up, or retry things. Dispatch the queued IEvent<TAuthenticationToken> artefacts. Inherited Members IMessageHandler<TCommand>.Handle(TCommand) Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandHandler<TAuthenticationToken, in TCommand> : IMessageHandler<TCommand>, ICommandHandle, IHandler where TCommand : ICommand<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TCommand Remarks Should a ICommandHandler<TAuthenticationToken, TCommand> affect one or several IAggregateRoot<TAuthenticationToken> s? Only one. Do I put logic in ICommandHandler<TAuthenticationToken, TCommand> ? Yes. Exactly what logic depends on your factoring. The logic for validating the ICommand<TAuthenticationToken> on its own merits always gets executed in the ICommandHandler<TAuthenticationToken, TCommand> , although we recommend refactoring these into an ICommandValidator<TAuthenticationToken, TCommand> . Provided validation is successful we recommend a more functional factoring, where the IAggregateRoot<TAuthenticationToken> exists independently of the ICommandHandler<TAuthenticationToken, TCommand> and the next step would be to load the IAggregateRoot<TAuthenticationToken> from the IUnitOfWork<TAuthenticationToken> and request the IAggregateRoot<TAuthenticationToken> handle the ICommand<TAuthenticationToken> itself. The IUnitOfWork<TAuthenticationToken> should then have uncommitted IEvent<TAuthenticationToken> artefacts as a results of asking the IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . Finally the ICommandHandler<TAuthenticationToken, TCommand> should instruct the IUnitOfWork<TAuthenticationToken> to Commit() all uncommited IEvent<TAuthenticationToken> artefacts. However you have it, the logic boils down to validation and some sequence of steps that lead to the ICommand<TAuthenticationToken> becoming an System.Exception or IEvent<TAuthenticationToken> (s). If you're tempted to go beyond this, see the rest of the remarks. Can I call a read side (such as a read store, data store or IAggregateRepository<TAuthenticationToken> ) from my ICommandHandler<TAuthenticationToken, TCommand> ? No. Can I do logging, security, or auditing in my ICommandHandler<TAuthenticationToken, TCommand> ? Yes. The decorator pattern comes in handy here to separate those concerns neatly. How are conflicts between concurrent ICommand<TAuthenticationToken> s handled in the ICommandHandler<TAuthenticationToken, TCommand> ? The place where the new IEvent<TAuthenticationToken> artefacts for the IAggregateRoot<TAuthenticationToken> are persisted is the only place in the system where we need to worry about concurrency conflicts. The IEventStore<TAuthenticationToken> knows the sequence number of the latest IEvent<TAuthenticationToken> applied on that IAggregateRoot<TAuthenticationToken> , and the ICommandHandler<TAuthenticationToken, TCommand> knows the sequence number of the last IEvent<TAuthenticationToken> it read. If these numbers do not agree, it means some other thread or process got there first. The ICommandHandler<TAuthenticationToken, TCommand> can then load up the events again and make a new attempt. Should I do things that have side-effects in the outside world (such as sending email) directly in a ICommandHandler<TAuthenticationToken, TCommand> ? No, since a concurrency conflict will mean the ICommandHandler<TAuthenticationToken, TCommand> logic will be run again. Do such things in an Apply IEvent<TAuthenticationToken> method in an IAggregateRoot<TAuthenticationToken> . Also see http://cqrs.nu/Faq/command-handlers ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandHandle.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommandHandle.html",
    "title": "Interface ICommandHandle | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandHandle An ICommandHandler<TAuthenticationToken, TCommand> receives an ICommand<TAuthenticationToken> and brokers a result from the appropriate IAggregateRoot<TAuthenticationToken> . \"A result\" is either a successful application of the command, or an exception. This is the common sequence of steps an ICommandHandler<TAuthenticationToken, TCommand> might follow: Validate the ICommand<TAuthenticationToken> on its own merits. Ask an IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . If validation is successful, 0..n IEvent<TAuthenticationToken> artefacts (1 is common) are queued for publishing. Attempt to persist the new IEvent<TAuthenticationToken> artefacts. If there's a concurrency conflict during this step, either give up, or retry things. Dispatch the queued IEvent<TAuthenticationToken> artefacts. Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommandHandle : IHandler Remarks Should a ICommandHandler<TAuthenticationToken, TCommand> affect one or several IAggregateRoot<TAuthenticationToken> s? Only one. Do I put logic in ICommandHandler<TAuthenticationToken, TCommand> ? Yes. Exactly what logic depends on your factoring. The logic for validating the ICommand<TAuthenticationToken> on its own merits always gets executed in the ICommandHandler<TAuthenticationToken, TCommand> , although we recommend refactoring these into an ICommandValidator<TAuthenticationToken, TCommand> . Provided validation is successful we recommend a more functional factoring, where the IAggregateRoot<TAuthenticationToken> exists independently of the ICommandHandler<TAuthenticationToken, TCommand> and the next step would be to load the IAggregateRoot<TAuthenticationToken> from the IUnitOfWork<TAuthenticationToken> and request the IAggregateRoot<TAuthenticationToken> handle the ICommand<TAuthenticationToken> itself. The IUnitOfWork<TAuthenticationToken> should then have uncommitted IEvent<TAuthenticationToken> artefacts as a results of asking the IAggregateRoot<TAuthenticationToken> to handle the ICommand<TAuthenticationToken> . Finally the ICommandHandler<TAuthenticationToken, TCommand> should instruct the IUnitOfWork<TAuthenticationToken> to Commit() all uncommited IEvent<TAuthenticationToken> artefacts. However you have it, the logic boils down to validation and some sequence of steps that lead to the ICommand<TAuthenticationToken> becoming an System.Exception or IEvent<TAuthenticationToken> (s). If you're tempted to go beyond this, see the rest of the remarks. Can I call a read side (such as a read store, data store or IAggregateRepository<TAuthenticationToken> ) from my ICommandHandler<TAuthenticationToken, TCommand> ? No. Can I do logging, security, or auditing in my ICommandHandler<TAuthenticationToken, TCommand> ? Yes. The decorator pattern comes in handy here to separate those concerns neatly. How are conflicts between concurrent ICommand<TAuthenticationToken> s handled in the ICommandHandler<TAuthenticationToken, TCommand> ? The place where the new IEvent<TAuthenticationToken> artefacts for the IAggregateRoot<TAuthenticationToken> are persisted is the only place in the system where we need to worry about concurrency conflicts. The IEventStore<TAuthenticationToken> knows the sequence number of the latest IEvent<TAuthenticationToken> applied on that IAggregateRoot<TAuthenticationToken> , and the ICommandHandler<TAuthenticationToken, TCommand> knows the sequence number of the last IEvent<TAuthenticationToken> it read. If these numbers do not agree, it means some other thread or process got there first. The ICommandHandler<TAuthenticationToken, TCommand> can then load up the events again and make a new attempt. Should I do things that have side-effects in the outside world (such as sending email) directly in a ICommandHandler<TAuthenticationToken, TCommand> ? No, since a concurrency conflict will mean the ICommandHandler<TAuthenticationToken, TCommand> logic will be run again. Do such things in an Apply IEvent<TAuthenticationToken> method in an IAggregateRoot<TAuthenticationToken> . Also see http://cqrs.nu/Faq/command-handlers ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.ICommand-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.ICommand-1.html",
    "title": "Interface ICommand<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommand<TAuthenticationToken> People request changes to the domain by sending ICommand<TAuthenticationToken> s. They are named with a verb in the imperative mood plus and may include the IAggregateRoot<TAuthenticationToken> type, for example ConfirmOrder. Unlike an IEvent<TAuthenticationToken> , a ICommand<TAuthenticationToken> is not a statement of fact; it's only a request, and thus may be refused. (A typical way to convey refusal is to raise a specifically typed IEvent<TAuthenticationToken> stating the ICommand<TAuthenticationToken> didn't happen for a specific reason). Inherited Members IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken IMessage.CorrelationId IMessage.OriginatingFramework IMessage.Frameworks Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public interface ICommand<TAuthenticationToken> : IMessageWithAuthenticationToken<TAuthenticationToken>, IMessage Type Parameters Name Description TAuthenticationToken Remarks What does a ICommand<TAuthenticationToken> or an IEvent<TAuthenticationToken> look like? An ICommand<TAuthenticationToken> or IEvent<TAuthenticationToken> is simply a data structure that contain data for reading, and no behavior. We call such structures \"Data Transfer Objects\" (DTOs). The name indicates the purpose. In many languages they are represented as classes, but they are not true classes in the real OO sense. What is the difference between a ICommand<TAuthenticationToken> and an IEvent<TAuthenticationToken> ? Their intent. What is immutability? Why is a ICommand<TAuthenticationToken> or IEvent<TAuthenticationToken> immutable? For the purpose of this question, immutability is not having any setters, or other methods which change internal state. The System.String type in is a familiar example; you never actually change an existing System.String value, you just create new System.String values based on old ones. An ICommand<TAuthenticationToken> is immutable because their expected usage is to be sent directly to the domain model side for processing. They do not need to change during their projected lifetime in traveling from client to server. Sometimes however business logic dictates that a decision may be made to construct a ICommand<TAuthenticationToken> and local variables should be used. An IEvent<TAuthenticationToken> is immutable because they represent domain actions that took place in the past. Unless you're Marty McFly, you can't change the past, and sometimes not even then. What is command upgrading? Upgrading an ICommand<TAuthenticationToken> becomes necessary when new requirements cause an existing ICommand<TAuthenticationToken> not to be sufficient. Maybe a new field needs to be added, for example, or maybe an existing field should really have been split into several different ones. How do I upgrade my ICommand<TAuthenticationToken> s? How you do the upgrade depends how much control you have over your clients. If you can deploy your client updates and server updates together, just change things in both and deploy the updates. Job done. If not, it's usually best to have the updated ICommand<TAuthenticationToken> be a new type and have the ICommandHandler<TAuthenticationToken, TCommand> accept both for a while. Could you give an example of names of some versioned ICommand<TAuthenticationToken> ? Sure. UploadFile UploadFile_v2 UploadFile_v3 It's just a convention, but a sane one. Also see http://cqrs.nu/Faq/commands-and-events . Examples public class ConfirmOrder { public Guid OrderRsn; } Properties ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration Guid Id { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Commands.DtoCommandHandler-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Commands.DtoCommandHandler-2.html",
    "title": "Class DtoCommandHandler<TAuthenticationToken, TDto> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DtoCommandHandler<TAuthenticationToken, TDto> A ICommandHandle for working with DtoCommand<TAuthenticationToken, TDto> . Inheritance System.Object DtoCommandHandler<TAuthenticationToken, TDto> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Commands Assembly : Cqrs.dll Syntax public class DtoCommandHandler<TAuthenticationToken, TDto> : ICommandHandler<TAuthenticationToken, DtoCommand<TAuthenticationToken, TDto>>, IMessageHandler<DtoCommand<TAuthenticationToken, TDto>>, ICommandHandle, IHandler where TDto : IDto Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. TDto The System.Type of IDto this command targets. Constructors DtoCommandHandler(IUnitOfWork<TAuthenticationToken>) Instantiates a new instance of DtoCommandHandler<TAuthenticationToken, TDto> Declaration public DtoCommandHandler(IUnitOfWork<TAuthenticationToken> unitOfWork) Parameters Type Name Description IUnitOfWork <TAuthenticationToken> unitOfWork Methods Handle(DtoCommand<TAuthenticationToken, TDto>) Responds to the provided message . Declaration public void Handle(DtoCommand<TAuthenticationToken, TDto> message) Parameters Type Name Description DtoCommand <TAuthenticationToken, TDto> message The DtoCommand<TAuthenticationToken, TDto> to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.InProcessBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.InProcessBus-1.html",
    "title": "Class InProcessBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessBus<TAuthenticationToken> An in process command bus ( ICommandPublisher<TAuthenticationToken> and ICommandReceiver<TAuthenticationToken> ) event bus ( IEventPublisher<TAuthenticationToken> and IEventHandler<TAuthenticationToken, TTarget, TEvent> ) as well as a IEventHandlerRegistrar and ICommandHandlerRegistrar that requires no networking. Inheritance System.Object InProcessBus<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class InProcessBus<TAuthenticationToken> : IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, IEventHandlerRegistrar, ICommandHandlerRegistrar, IHandlerRegistrar, ICommandReceiver<TAuthenticationToken>, ICommandReceiver, IEventReceiver<TAuthenticationToken>, IEventReceiver Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors InProcessBus(IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, IDependencyResolver, ILogger, IConfigurationManager, IBusHelper) Instantiates a new instance of the InProcessBus<TAuthenticationToken> class. Declaration public InProcessBus(IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, IDependencyResolver dependencyResolver, ILogger logger, IConfigurationManager configurationManager, IBusHelper busHelper) Parameters Type Name Description IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger IConfigurationManager configurationManager IBusHelper busHelper Properties AuthenticationTokenHelper Gets or sets the Authentication Token Helper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> BusHelper Gets or sets the Bus Helper Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper ConfigurationManager Gets or sets the Configuration Manager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager CorrelationIdHelper Gets or sets the CorrelationId Helper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper DependencyResolver Gets or sets the Dependency Resolver Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver EventWaits Gets or sets the current list of events waiting to be evaluated for PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Declaration protected IDictionary<Guid, IList<IEvent<TAuthenticationToken>>> EventWaits { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Collections.Generic.IList < IEvent <TAuthenticationToken>>> Logger Gets or sets the Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger TelemetryHelper Gets or sets the Telemetry Helper Declaration protected ITelemetryHelper TelemetryHelper { get; set; } Property Value Type Description cdmdotnet.Logging.ITelemetryHelper Methods PrepareAndValidateCommand<TCommand>(TCommand, out RouteHandlerDelegate) Locates a suitable ICommandValidator<TAuthenticationToken, TCommand> to validate the provided command and validates the provided command if one is located Calls PrepareCommand<TCommand>(TCommand) Checks if the provided command is required to be processed Locates a single RouteHandlerDelegate for the provided command Declaration protected virtual bool PrepareAndValidateCommand<TCommand>(TCommand command, out RouteHandlerDelegate commandHandler)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command RouteHandlerDelegate commandHandler Returns Type Description System.Boolean False if a suitable ICommandValidator<TAuthenticationToken, TCommand> is located and the provided command fails validation, False if no RouteHandlerDelegate is found but the command isn't required to be handled, True otherwise. Type Parameters Name Description TCommand PrepareCommand<TCommand>(TCommand) Sets the AuthenticationToken , CorrelationId , OriginatingFramework to \"Built-In\" and adds a value of \"Built-In\" to the Frameworks if not already done so Declaration protected virtual void PrepareCommand<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Publish<TEvent>(TEvent) Publishes the provided event on the event bus. Declaration public virtual void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Publishes the provided events on the event bus. Declaration public virtual void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>) PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits until the specified condition is satisfied an event of TEvent Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) ReceiveCommand(ICommand<TAuthenticationToken>) Receives a ICommand<TAuthenticationToken> from the command bus. Declaration public virtual bool ? ReceiveCommand(ICommand<TAuthenticationToken> command) Parameters Type Name Description ICommand <TAuthenticationToken> command Returns Type Description System.Nullable < System.Boolean > Implements ICommandReceiver<TAuthenticationToken>.ReceiveCommand(ICommand<TAuthenticationToken>) ReceiveEvent(IEvent<TAuthenticationToken>) Receives an IEvent<TAuthenticationToken> from the event bus. Declaration public virtual bool ? ReceiveEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Returns Type Description System.Nullable < System.Boolean > Implements IEventReceiver<TAuthenticationToken>.ReceiveEvent(IEvent<TAuthenticationToken>) RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IEventHandlerRegistrar.RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Send<TCommand>(TCommand) Publishes the provided command on the command bus. Declaration public virtual void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Send<TCommand>(IEnumerable<TCommand>) Publishes the provided commands on the command bus. Declaration public virtual void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand SendAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits until the specified condition is satisfied an event of TEvent Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent SendAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Sends the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent SendAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to send. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Explicit Interface Implementations ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publishes the provided command on the command bus. Declaration void ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Publishes the provided commands on the command bus. Declaration void ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) ICommandReceiver.Start() Declaration void ICommandReceiver.Start() Implements ICommandReceiver.Start() IEventReceiver.Start() Declaration void IEventReceiver.Start() Implements IEventReceiver.Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.IStoreLastEventProcessed.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.IStoreLastEventProcessed.html",
    "title": "Interface IStoreLastEventProcessed | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IStoreLastEventProcessed Indicates the position in a store where the stream has been read up to. Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/Bus/StoreLastEventProcessed\")] public interface IStoreLastEventProcessed Properties EventLocation The location within the store where the stream has been read up to. Declaration string EventLocation { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.IHandlerRegistrar.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.IHandlerRegistrar.html",
    "title": "Interface IHandlerRegistrar | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IHandlerRegistrar Registers event or command handlers that listen and respond to events or commands. Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/Bus/HandlerRegistrar\")] public interface IHandlerRegistrar Methods RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration [OperationContract] void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration [OperationContract] void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Remarks In many cases the targetedType will be the handler class itself, what you actually want is the target of what is being updated."
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.IEventHandlerRegistrar.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.IEventHandlerRegistrar.html",
    "title": "Interface IEventHandlerRegistrar | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventHandlerRegistrar Registers event handlers that listen and respond to events. Inherited Members IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/Bus/EventHandlerRegistrar\")] public interface IEventHandlerRegistrar : IHandlerRegistrar Methods RegisterGlobalEventHandler<TMessage>(Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration [OperationContract] void RegisterGlobalEventHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.ICommandHandlerRegistrar.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.ICommandHandlerRegistrar.html",
    "title": "Interface ICommandHandlerRegistrar | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ICommandHandlerRegistrar Registers command handlers that listen and respond to commands. Inherited Members IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/Bus/CommandHandlerRegistrar\")] public interface ICommandHandlerRegistrar : IHandlerRegistrar"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.IBusHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.IBusHelper.html",
    "title": "Interface IBusHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IBusHelper A helper for command and event buses. Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public interface IBusHelper Methods BuildActionHandler<TMessage>(Action<TMessage>, Boolean) Build a message handler that implements telemetry capturing as well as off thread handling. Declaration Action<TMessage> BuildActionHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Returns Type Description System.Action <TMessage> Type Parameters Name Description TMessage BuildTelemeteredActionHandler<TMessage, TAuthenticationToken>(ITelemetryHelper, Action<TMessage>, Boolean, String) Build a message handler that implements telemetry capturing as well as off thread handling. Declaration Action<TMessage> BuildTelemeteredActionHandler<TMessage, TAuthenticationToken>(ITelemetryHelper telemetryHelper, Action<TMessage> handler, bool holdMessageLock, string source)where TMessage : IMessage Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper System.Action <TMessage> handler System.Boolean holdMessageLock System.String source Returns Type Description System.Action <TMessage> Type Parameters Name Description TMessage TAuthenticationToken IsEventRequired(String) Checks if a white-list or black-list approach is taken, then checks the IConfigurationManager to see if a key exists defining if the event is required or not. If the event is required and it cannot be resolved, an error will be raised. Otherwise the event will be marked as processed. Declaration bool IsEventRequired(string configurationKey) Parameters Type Name Description System.String configurationKey The configuration key to check. Returns Type Description System.Boolean IsEventRequired(Type) Checks if a white-list or black-list approach is taken, then checks the IConfigurationManager to see if a key exists defining if the event is required or not. If the event is required and it cannot be resolved, an error will be raised. Otherwise the event will be marked as processed. Declaration bool IsEventRequired(Type messageType) Parameters Type Name Description System.Type messageType The System.Type of the message being processed. Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.FileBasedLastEventProcessedStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.FileBasedLastEventProcessedStore.html",
    "title": "Class FileBasedLastEventProcessedStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class FileBasedLastEventProcessedStore Indicates the position in a store where the stream has been read up to by storing the value in a file. Inheritance System.Object FileBasedLastEventProcessedStore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class FileBasedLastEventProcessedStore : IStoreLastEventProcessed Constructors FileBasedLastEventProcessedStore(IConfigurationManager) Instantiates a new instance of FileBasedLastEventProcessedStore . Declaration public FileBasedLastEventProcessedStore(IConfigurationManager configurationManager) Parameters Type Name Description IConfigurationManager configurationManager Fields AppSettingsDefaultValue The default location of the file to store position information in. Declaration public const string AppSettingsDefaultValue = \"%EVENTSTORE_HOME%\\\\LastEventProcessedLocation\" Field Value Type Description System.String AppSettingsKey The configuration setting that holds the location of file to store position information in. Declaration public const string AppSettingsKey = \"Cqrs.FileBasedLastEventProcessed.Location\" Field Value Type Description System.String Properties EventLocation Reads and writes the location within the store where the stream has been read up to FileName . Declaration public string EventLocation { get; set; } Property Value Type Description System.String Implements IStoreLastEventProcessed.EventLocation FileName The relative or absolute path of the file to store the current location in Declaration protected string FileName { get; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Bus.BusHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Bus.BusHelper.html",
    "title": "Class BusHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BusHelper A helper for command and event buses that also caches IConfigurationManager look ups. Inheritance System.Object BusHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Bus Assembly : Cqrs.dll Syntax public class BusHelper : IBusHelper Constructors BusHelper(IConfigurationManager) Instantiates a new instance of BusHelper Declaration public BusHelper(IConfigurationManager configurationManager) Parameters Type Name Description IConfigurationManager configurationManager Properties CachedChecks A collection of System.Tuple`2 holding the configurations value (always a System.Boolean ) and the System.DateTime The value was last checked, keyed by it's configuration key. Declaration protected IDictionary<string, Tuple<bool, DateTime>> CachedChecks { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Tuple < System.Boolean , System.DateTime >> ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager EventBlackListProcessing The current value of \"Cqrs.MessageBus.BlackListProcessing\" from ConfigurationManager . Declaration protected bool EventBlackListProcessing { get; } Property Value Type Description System.Boolean Methods BuildActionHandler<TMessage>(Action<TMessage>, Boolean) Build a message handler that implements telemetry capturing as well as off thread handling. Declaration public virtual Action<TMessage> BuildActionHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Returns Type Description System.Action <TMessage> Type Parameters Name Description TMessage Implements IBusHelper.BuildActionHandler<TMessage>(Action<TMessage>, Boolean) BuildTelemeteredActionHandler<TMessage, TAuthenticationToken>(ITelemetryHelper, Action<TMessage>, Boolean, String) Build a message handler that implements telemetry capturing as well as off thread handling. Declaration public virtual Action<TMessage> BuildTelemeteredActionHandler<TMessage, TAuthenticationToken>(ITelemetryHelper telemetryHelper, Action<TMessage> handler, bool holdMessageLock, string source)where TMessage : IMessage Parameters Type Name Description cdmdotnet.Logging.ITelemetryHelper telemetryHelper System.Action <TMessage> handler System.Boolean holdMessageLock System.String source Returns Type Description System.Action <TMessage> Type Parameters Name Description TMessage TAuthenticationToken Implements IBusHelper.BuildTelemeteredActionHandler<TMessage, TAuthenticationToken>(ITelemetryHelper, Action<TMessage>, Boolean, String) IsEventRequired(String) Checks if a white-list or black-list approach is taken, then checks the IConfigurationManager to see if a key exists defining if the event is required or not. If the event is required and it cannot be resolved, an error will be raised. Otherwise the event will be marked as processed. Declaration public virtual bool IsEventRequired(string configurationKey) Parameters Type Name Description System.String configurationKey The configuration key to check. Returns Type Description System.Boolean Implements IBusHelper.IsEventRequired(String) IsEventRequired(Type) Checks if a white-list or black-list approach is taken, then checks the IConfigurationManager to see if a key exists defining if the event is required or not. If the event is required and it cannot be resolved, an error will be raised. Otherwise the event will be marked as processed. Declaration public virtual bool IsEventRequired(Type messageType) Parameters Type Name Description System.Type messageType The System.Type of the message being processed. Returns Type Description System.Boolean Implements IBusHelper.IsEventRequired(Type) RefreshCachedChecks() Refreshes EventBlackListProcessing and every item currently in CachedChecks . Declaration protected virtual void RefreshCachedChecks() StartRefreshCachedChecks() Starts RefreshCachedChecks() in a System.Threading.Tasks.Task on a one second loop. Declaration protected virtual void StartRefreshCachedChecks()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.html",
    "title": "Namespace Cqrs.Azure.Storage.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.Storage.DataStores Classes TableStorageDataStore<TData> A TableStorageDataStore<TData> that uses Azure Storage for storage. TableStorageDataStoreConnectionStringFactory<TData> A factory for getting connection strings and container names for IDataStore<TData> access. This factory supports reading and writing from separate storage accounts. Specifically you can have as many different storage accounts as you want to configure when writing. This allows for manual mirroring of data while reading from the fastest/closest location possible."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.TableStorageDataStoreConnectionStringFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.TableStorageDataStoreConnectionStringFactory-1.html",
    "title": "Class TableStorageDataStoreConnectionStringFactory<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStoreConnectionStringFactory<TData> A factory for getting connection strings and container names for IDataStore<TData> access. This factory supports reading and writing from separate storage accounts. Specifically you can have as many different storage accounts as you want to configure when writing. This allows for manual mirroring of data while reading from the fastest/closest location possible. Inheritance System.Object TableStorageDataStoreConnectionStringFactory TableStorageDataStoreConnectionStringFactory<TData> Inherited Members TableStorageDataStoreConnectionStringFactory.TableStorageReadableDataStoreConnectionStringKey TableStorageDataStoreConnectionStringFactory.TableStorageWritableDataStoreConnectionStringKey TableStorageDataStoreConnectionStringFactory.TableStorageDataStoreConnectionStringKey TableStorageDataStoreConnectionStringFactory.TableStorageBaseContainerNameKey TableStorageDataStoreConnectionStringFactory.ConfigurationManager TableStorageDataStoreConnectionStringFactory.Logger TableStorageDataStoreConnectionStringFactory.GetWritableConnectionStrings() TableStorageDataStoreConnectionStringFactory.GetReadableConnectionString() TableStorageDataStoreConnectionStringFactory.GetBaseContainerName() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.DataStores Assembly : Cqrs.Azure.Storage.dll Syntax public class TableStorageDataStoreConnectionStringFactory<TData> : TableStorageDataStoreConnectionStringFactory, ITableStorageDataStoreConnectionStringFactory, ITableStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Type Parameters Name Description TData Constructors TableStorageDataStoreConnectionStringFactory(IConfigurationManager, ILogger) Instantiates a new instance of TableStorageDataStoreConnectionStringFactory<TData> . Declaration public TableStorageDataStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Methods GetContainerName() Returns GetTableName<TData1>() . Declaration public override string GetContainerName() Returns Type Description System.String GetTableName<TData1>() Overrides TableStorageDataStoreConnectionStringFactory.GetContainerName() GetTableName<TData1>() Generates the name of the table for TData1 that matches naming rules for Azure Storage. The value differs from GetTableName<TData>() in that it appends \"V2\" to the end of the table name. Declaration public override string GetTableName<TData1>() Returns Type Description System.String Type Parameters Name Description TData1 The System.Type of data to read or write. Overrides TableStorageDataStoreConnectionStringFactory.GetTableName<TData>() Remarks https://blogs.msdn.microsoft.com/jmstall/2014/06/12/azure-storage-naming-rules/"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.TableStorageDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.Storage.DataStores.TableStorageDataStore-1.html",
    "title": "Class TableStorageDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStore<TData> A TableStorageDataStore<TData> that uses Azure Storage for storage. Inheritance System.Object StorageStore < EntityTableEntity <TData>, Microsoft.WindowsAzure.Storage.Table.CloudTable > TableStorageStore < EntityTableEntity <TData>, TData> TableStorageDataStore <TData> TableStorageDataStore<TData> Inherited Members TableStorageDataStore<TData>.Remove(TData) TableStorageDataStore<TData>.GetUpdatableTableEntity(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Collection TableStorageStore<EntityTableEntity<TData>, TData>.Initialise(IStorageStoreConnectionStringFactory) TableStorageStore<EntityTableEntity<TData>, TData>.IEnumerable<TData>.GetEnumerator() TableStorageStore<EntityTableEntity<TData>, TData>.GetEnumerator() TableStorageStore<EntityTableEntity<TData>, TData>.Expression TableStorageStore<EntityTableEntity<TData>, TData>.ElementType TableStorageStore<EntityTableEntity<TData>, TData>.Provider TableStorageStore<EntityTableEntity<TData>, TData>.AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>) TableStorageStore<EntityTableEntity<TData>, TData>.CreateTableEntity(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Add(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(ITableEntity) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<EntityTableEntity<TData>>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<ITableEntity>) TableStorageStore<EntityTableEntity<TData>, TData>.Destroy(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Remove(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Destroy(TData) TableStorageStore<EntityTableEntity<TData>, TData>.RemoveAll() TableStorageStore<EntityTableEntity<TData>, TData>.Update(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Update(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(TData) TableStorageStore<EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.CreateSource(CloudStorageAccount, String, Boolean) TableStorageStore<EntityTableEntity<TData>, TData>.GetByKeyAndRow(Guid) TableStorageStore<EntityTableEntity<TData>, TData>.GetByKey() TableStorageStore<EntityTableEntity<TData>, TData>.ReplaceValues(TableResult, EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.GetSafeSourceName(String) StorageStore<EntityTableEntity<TData>, CloudTable>.WritableCollection StorageStore<EntityTableEntity<TData>, CloudTable>.ReadableStorageAccount StorageStore<EntityTableEntity<TData>, CloudTable>.Logger StorageStore<EntityTableEntity<TData>, CloudTable>.GetContainerName StorageStore<EntityTableEntity<TData>, CloudTable>.IsContainerPublic StorageStore<EntityTableEntity<TData>, CloudTable>.DefaultSettings StorageStore<EntityTableEntity<TData>, CloudTable>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<EntityTableEntity<TData>, CloudTable>.GetEnumerator() StorageStore<EntityTableEntity<TData>, CloudTable>.IEnumerable.GetEnumerator() StorageStore<EntityTableEntity<TData>, CloudTable>.Expression StorageStore<EntityTableEntity<TData>, CloudTable>.ElementType StorageStore<EntityTableEntity<TData>, CloudTable>.Provider StorageStore<EntityTableEntity<TData>, CloudTable>.Dispose() StorageStore<EntityTableEntity<TData>, CloudTable>.Add(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.Add(IEnumerable<EntityTableEntity<TData>>) StorageStore<EntityTableEntity<TData>, CloudTable>.Destroy(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.RemoveAll() StorageStore<EntityTableEntity<TData>, CloudTable>.Update(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSafeSourceName(String) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSafeSourceName(String, Boolean) StorageStore<EntityTableEntity<TData>, CloudTable>.AzureStorageRetryPolicy StorageStore<EntityTableEntity<TData>, CloudTable>.Deserialise(Stream) StorageStore<EntityTableEntity<TData>, CloudTable>.Deserialise(String) StorageStore<EntityTableEntity<TData>, CloudTable>.Serialise(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSerialisationSettings() StorageStore<EntityTableEntity<TData>, CloudTable>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.Storage.DataStores Assembly : Cqrs.Azure.Storage.dll Syntax public class TableStorageDataStore<TData> : TableStorageDataStore<TData>, IEnumerable<EntityTableEntity<TData>>, IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData The System.Type of Microsoft.WindowsAzure.Storage.Table.TableEntity Azure Table Storage will contain. Constructors TableStorageDataStore(ILogger, ITableStorageDataStoreConnectionStringFactory) Initializes a new instance of the Cqrs.Azure.BlobStorage class using the specified container. Declaration public TableStorageDataStore(ILogger logger, ITableStorageDataStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger ITableStorageDataStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory Methods CreateTableEntity(TData) Creates a new instance of Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity populating it with the provided data Declaration protected override ITableEntity CreateTableEntity(TData data) Parameters Type Name Description TData data The data to store in Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties . Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Overrides Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStore<TData>.CreateTableEntity(TData) GetByKey() Retrieves the data from Azure Storage using Collection . Declaration public override IEnumerable<EntityTableEntity<TData>> GetByKey() Returns Type Description System.Collections.Generic.IEnumerable < EntityTableEntity <TData>> Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.GetByKey() GetByKeyAndRow(Guid) Retrieves the data from Azure Storage If the data is NOT a Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity GetByKeyAndRow(Guid) is called. Otherwise Microsoft.WindowsAzure.Storage.Table.TableResult.Result is a Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity and Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties is converted back to EntityTableEntity<TEntity> . Declaration public override EntityTableEntity<TData> GetByKeyAndRow(Guid rsn) Parameters Type Name Description System.Guid rsn Returns Type Description EntityTableEntity <TData> Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.GetByKeyAndRow(System.Guid) GetUpdatableTableEntity(TData) Gets a Microsoft.WindowsAzure.Storage.Table.TableOperation that calls Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String}) read for updating. Declaration protected override TableOperation GetUpdatableTableEntity(TData data) Parameters Type Name Description TData data The data containing the Rsn property populated. Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Overrides Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStore<TData>.GetUpdatableTableEntity(TData) ReplaceValues(TableResult, EntityTableEntity<TData>) Extracts Microsoft.WindowsAzure.Storage.Table.TableResult.Result of the provided retrievedResult If Microsoft.WindowsAzure.Storage.Table.TableResult.Result is NOT a Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity ReplaceValues(TableResult, TData) is called. Otherwise Microsoft.WindowsAzure.Storage.Table.TableResult.Result is a Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity and Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties are replaced with values from data . Declaration protected override ITableEntity ReplaceValues(TableResult retrievedResult, EntityTableEntity<TData> data) Parameters Type Name Description Microsoft.WindowsAzure.Storage.Table.TableResult retrievedResult The existing data to update. EntityTableEntity <TData> data The new data to store. Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.ReplaceValues(Microsoft.WindowsAzure.Storage.Table.TableResult, Cqrs.Azure.BlobStorage.EntityTableEntity<TData>) Update(TData) Update the provided data in the data store and persist the change. Declaration public override void Update(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.Update(TData) Extension Methods TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.html",
    "title": "Namespace Cqrs.Azure.ServiceBus | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.ServiceBus Classes AzureBus<TAuthenticationToken> An Azure Bus such as a Service Bus or Event Hub. AzureBusHelper<TAuthenticationToken> A helper for Azure Service Bus and Event Hub. AzureCommandBus<TAuthenticationToken> A command bus based on AzureServiceBus<TAuthenticationToken> . AzureCommandBusPublisher<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that resolves handlers , executes the handler and then publishes the ICommand<TAuthenticationToken> on the private command bus. AzureCommandBusReceiver<TAuthenticationToken> A ICommandReceiver<TAuthenticationToken> that receives network messages, resolves handlers and executes the handler. AzureEventBus<TAuthenticationToken> A event bus based on AzureServiceBus<TAuthenticationToken> . AzureEventBusPublisher<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that resolves handlers and executes the handler. AzureEventBusReceiver<TAuthenticationToken> A IEventReceiver<TAuthenticationToken> that receives network messages, resolves handlers and executes the handler. AzureEventHub<TAuthenticationToken> An AzureBus<TAuthenticationToken> that uses Azure Service Event Hubs. AzureEventHubBus<TAuthenticationToken> A event bus based on AzureEventHub<TAuthenticationToken> . AzureQueuedCommandBusReceiver<TAuthenticationToken> A concurrent implementation of AzureCommandBusReceiver<TAuthenticationToken> that resides in memory. AzureQueuedEventBusReceiver<TAuthenticationToken> A concurrent implementation of AzureEventBusReceiver<TAuthenticationToken> that resides in memory. AzureServiceBus<TAuthenticationToken> An AzureBus<TAuthenticationToken> that uses Azure Service Bus. MessageSerialiser<TAuthenticationToken> Serialises IEvent<TAuthenticationToken> and ICommand<TAuthenticationToken> . Interfaces IAzureBusHelper<TAuthenticationToken> A helper for Azure Service Bus and Event Hub. IMessageSerialiser<TAuthenticationToken> Serialises IEvent<TAuthenticationToken> and ICommand<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.html",
    "title": "Namespace Cqrs.Azure.ServiceBus.Tests.Unit | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.ServiceBus.Tests.Unit Classes MessageSerialiserTests A series of tests on the MessageSerialiser<TAuthenticationToken> class TestCommand A Test ICommand<TAuthenticationToken> . TestEvent A Test IEvent<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.TestEvent.html",
    "title": "Class TestEvent | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestEvent A Test IEvent<TAuthenticationToken> . Inheritance System.Object Entity TestEvent Inherited Members Entity.Rsn Entity.SortingOrder Entity.IsLogicallyDeleted System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Unit Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [Serializable] [DataContract] public class TestEvent : Entity, IEntity, IEvent<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the event itself. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The new version number. Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.TestCommand.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.TestCommand.html",
    "title": "Class TestCommand | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestCommand A Test ICommand<TAuthenticationToken> . Inheritance System.Object TestCommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ServiceBus.Tests.Unit Assembly : Cqrs.Azure.ServiceBus.Tests.Integration.dll Syntax [Serializable] [DataContract] public class TestCommand : ICommand<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.MessageSerialiserTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.Tests.Unit.MessageSerialiserTests.html",
    "title": "Class MessageSerialiserTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MessageSerialiserTests A series of tests on the MessageSerialiser<TAuthenticationToken> class Inheritance System.Object MessageSerialiserTests Namespace : Cqrs.Azure.ServiceBus.Tests.Unit Assembly : Cqrs.Azure.ServiceBus.Tests.Unit.dll Syntax public class MessageSerialiserTests : object Methods DeserialiseCommand_TestCommandData_ExpectedCommand() Tests the DeserialiseCommand(String) method Passing a valid test string of JSON Expecting the data deserialised to the expected . Declaration public void DeserialiseCommand_TestCommandData_ExpectedCommand() DeserialiseEvent_TestEventData_ExpectedEvent() Tests the DeserialiseEvent(String) method Passing a valid test string of JSON Expecting the data deserialised to the expected . Declaration public void DeserialiseEvent_TestEventData_ExpectedEvent() SerialiseCommand_TestCommand_ExpectedSerialisedData() Tests the SerialiseCommand<TCommand>(TCommand) method Passing a valid test ICommand<TAuthenticationToken> Expecting the serialised data is as expected. Declaration public void SerialiseCommand_TestCommand_ExpectedSerialisedData() SerialiseEvent_TestEvent_ExpectedSerialisedData() Tests the SerialiseEvent<TEvent>(TEvent) method Passing a valid test IEvent<TAuthenticationToken> Expecting the serialised data is as expected. Declaration public void SerialiseEvent_TestEvent_ExpectedSerialisedData()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBusReceiver-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBusReceiver-1.html",
    "title": "Class AzureCommandBusReceiver<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusReceiver<TAuthenticationToken> A ICommandReceiver<TAuthenticationToken> that receives network messages, resolves handlers and executes the handler. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureCommandBus <TAuthenticationToken> AzureCommandBusReceiver<TAuthenticationToken> AzureQueuedCommandBusReceiver<TAuthenticationToken> Inherited Members AzureCommandBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.DefaultPrivateTopicName AzureCommandBus<TAuthenticationToken>.DefaultPublicTopicName AzureCommandBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureCommandBusReceiver<TAuthenticationToken> : AzureCommandBus<TAuthenticationToken>, ICommandHandlerRegistrar, IHandlerRegistrar, ICommandReceiver<TAuthenticationToken>, ICommandReceiver Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureCommandBusReceiver(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureCommandBusReceiver<TAuthenticationToken> . Declaration public AzureCommandBusReceiver(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Properties CurrentHandles The number of handles currently being executed. Declaration protected static long CurrentHandles { get; set; } Property Value Type Description System.Int64 FilterKey The that can be applied to the instances in the receivers Declaration protected string FilterKey { get; set; } Property Value Type Description System.String FilterKeyConfigurationKey The configuration key for the that can be applied to the instances in the receivers as used by IConfigurationManager . Declaration protected virtual string FilterKeyConfigurationKey { get; } Property Value Type Description System.String MaximumConcurrentReceiverProcessesCountConfigurationKey The configuration key for . as used by IConfigurationManager . Declaration protected virtual string MaximumConcurrentReceiverProcessesCountConfigurationKey { get; } Property Value Type Description System.String NumberOfReceiversCountConfigurationKey The configuration key for the number of receiver instances to create as used by IConfigurationManager . Declaration protected virtual string NumberOfReceiversCountConfigurationKey { get; } Property Value Type Description System.String Routes Gets the RouteManager . Declaration public static RouteManager Routes { get; } Property Value Type Description RouteManager Methods GetCurrentMaximumConcurrentReceiverProcessesCount() Returns MaximumConcurrentReceiverProcessesCountConfigurationKey from IConfigurationManager if no value is set, returns DefaultMaximumConcurrentReceiverProcessesCount . Declaration protected override int GetCurrentMaximumConcurrentReceiverProcessesCount() Returns Type Description System.Int32 Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() GetCurrentNumberOfReceiversCount() Returns NumberOfReceiversCountConfigurationKey from IConfigurationManager if no value is set, returns DefaultNumberOfReceiversCount . Declaration protected override int GetCurrentNumberOfReceiversCount() Returns Type Description System.Int32 Overrides Cqrs.Azure.ServiceBus.AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) Calls InstantiateReceiving() then uses a to apply the FilterKey as a to the instances in serviceBusReceivers . Declaration protected override void InstantiateReceiving(NamespaceManager namespaceManager, IDictionary<int, SubscriptionClient> serviceBusReceivers, string topicName, string topicSubscriptionName) Parameters Type Name Description NamespaceManager namespaceManager The . IDictionary < System.Int32 , SubscriptionClient > serviceBusReceivers The receivers collection to place instances into. System.String topicName The topic name. System.String topicSubscriptionName The topic subscription name. Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<System.Int32, SubscriptionClient>, System.String, System.String) ReceiveCommand(BrokeredMessage) Receives a from the command bus. Declaration protected virtual void ReceiveCommand(BrokeredMessage message) Parameters Type Name Description BrokeredMessage message ReceiveCommand(ICommand<TAuthenticationToken>) Receives a ICommand<TAuthenticationToken> from the command bus. Declaration public virtual bool ? ReceiveCommand(ICommand<TAuthenticationToken> command) Parameters Type Name Description ICommand <TAuthenticationToken> command Returns Type Description System.Nullable < System.Boolean > RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register a command handler that will listen and respond to commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register a command handler that will listen and respond to commands. Declaration public virtual void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description Action <TMessage> handler Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Remarks In many cases the targetedType will be the handler class itself, what you actually want is the target of what is being updated. Start() Starts listening and processing instances of ICommand<TAuthenticationToken> from the command bus. Declaration public void Start() Implements ICommandReceiver.Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBusPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBusPublisher-1.html",
    "title": "Class AzureCommandBusPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBusPublisher<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that resolves handlers , executes the handler and then publishes the ICommand<TAuthenticationToken> on the private command bus. Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureCommandBus <TAuthenticationToken> AzureCommandBusPublisher<TAuthenticationToken> Inherited Members AzureCommandBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey AzureCommandBus<TAuthenticationToken>.DefaultPrivateTopicName AzureCommandBus<TAuthenticationToken>.DefaultPublicTopicName AzureCommandBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureCommandBusPublisher<TAuthenticationToken> : AzureCommandBus<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureCommandBusPublisher(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper) Instantiates a new instance of AzureCommandBusPublisher<TAuthenticationToken> . Declaration public AzureCommandBusPublisher(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper Methods Publish<TCommand>(TCommand) Publishes the provided command on the command bus. Declaration public virtual void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publish<TCommand>(IEnumerable<TCommand>) Publishes the provided commands on the command bus. Declaration public virtual void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description IEnumerable <TCommand> commands Type Parameters Name Description TCommand PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits until the specified condition is satisfied an event of TEvent Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. Func < IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. Func < IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. Func < IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureCommandBus-1.html",
    "title": "Class AzureCommandBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureCommandBus<TAuthenticationToken> A command bus based on AzureServiceBus<TAuthenticationToken> . Inheritance System.Object AzureBus <TAuthenticationToken> AzureServiceBus <TAuthenticationToken> AzureCommandBus<TAuthenticationToken> AzureCommandBusPublisher<TAuthenticationToken> AzureCommandBusReceiver<TAuthenticationToken> Inherited Members AzureServiceBus<TAuthenticationToken>.PrivateServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PublicServiceBusPublisher AzureServiceBus<TAuthenticationToken>.PrivateServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PublicServiceBusReceivers AzureServiceBus<TAuthenticationToken>.PrivateTopicName AzureServiceBus<TAuthenticationToken>.PublicTopicName AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringComplete AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicSubscriptionName AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandler AzureServiceBus<TAuthenticationToken>.ReceiverMessageHandlerOptions AzureServiceBus<TAuthenticationToken>.BusHelper AzureServiceBus<TAuthenticationToken>.AzureBusHelper AzureServiceBus<TAuthenticationToken>.TelemetryHelper AzureServiceBus<TAuthenticationToken>.GetConnectionString() AzureServiceBus<TAuthenticationToken>.InstantiatePublishing() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving() AzureServiceBus<TAuthenticationToken>.InstantiateReceiving(NamespaceManager, IDictionary<Int32, SubscriptionClient>, String, String) AzureServiceBus<TAuthenticationToken>.CheckPrivateTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckPublicTopicExists(NamespaceManager) AzureServiceBus<TAuthenticationToken>.CheckTopicExists(NamespaceManager, String, String) AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking() AzureServiceBus<TAuthenticationToken>.TriggerSettingsChecking(TopicClient, IDictionary<Int32, SubscriptionClient>) AzureServiceBus<TAuthenticationToken>.RegisterReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.StoreReceiverMessageHandler(Action<BrokeredMessage>, OnMessageOptions) AzureServiceBus<TAuthenticationToken>.ApplyReceiverMessageHandler() AzureServiceBus<TAuthenticationToken>.CleanUpDeadLetters(String, String) AzureBus<TAuthenticationToken>.ConnectionString AzureBus<TAuthenticationToken>.MessageSerialiser AzureBus<TAuthenticationToken>.AuthenticationTokenHelper AzureBus<TAuthenticationToken>.CorrelationIdHelper AzureBus<TAuthenticationToken>.Logger AzureBus<TAuthenticationToken>.ConfigurationManager AzureBus<TAuthenticationToken>.EventWaits AzureBus<TAuthenticationToken>.DefaultNumberOfReceiversCount AzureBus<TAuthenticationToken>.NumberOfReceiversCount AzureBus<TAuthenticationToken>.DefaultMaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.MaximumConcurrentReceiverProcessesCount AzureBus<TAuthenticationToken>.SetConnectionStrings() AzureBus<TAuthenticationToken>.SetNumberOfReceiversCount() AzureBus<TAuthenticationToken>.SetMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetCurrentNumberOfReceiversCount() AzureBus<TAuthenticationToken>.GetCurrentMaximumConcurrentReceiverProcessesCount() AzureBus<TAuthenticationToken>.GetNamespaceManager() AzureBus<TAuthenticationToken>.AzureServiceBusRetryPolicy AzureBus<TAuthenticationToken>.StartSettingsChecking() AzureBus<TAuthenticationToken>.ValidateSettingsHaveChanged() AzureBus<TAuthenticationToken>.UpdateSettings() Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureCommandBus<TAuthenticationToken> : AzureServiceBus<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureCommandBus(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IAzureBusHelper<TAuthenticationToken>, IBusHelper, Boolean) Instantiate a new instance of AzureCommandBus<TAuthenticationToken> . Declaration protected AzureCommandBus(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IAzureBusHelper<TAuthenticationToken> azureBusHelper, IBusHelper busHelper, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IAzureBusHelper <TAuthenticationToken> azureBusHelper IBusHelper busHelper System.Boolean isAPublisher Properties DefaultPrivateTopicName The default name of the private topic if no IConfigurationManager value is set. Declaration protected override string DefaultPrivateTopicName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.DefaultPrivateTopicName DefaultPublicTopicName The default name of the public topic if no IConfigurationManager value is set. Declaration protected override string DefaultPublicTopicName { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.DefaultPublicTopicName MessageBusConnectionStringConfigurationKey The configuration key for the message bus connection string as used by IConfigurationManager . Declaration protected override string MessageBusConnectionStringConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.MessageBusConnectionStringConfigurationKey PrivateTopicNameConfigurationKey The configuration key for the name of the private topic as used by IConfigurationManager . Declaration protected override string PrivateTopicNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PrivateTopicNameConfigurationKey PrivateTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the private topic as used by IConfigurationManager . Declaration protected override string PrivateTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PrivateTopicSubscriptionNameConfigurationKey PublicTopicNameConfigurationKey The configuration key for the name of the public topic as used by IConfigurationManager . Declaration protected override string PublicTopicNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PublicTopicNameConfigurationKey PublicTopicSubscriptionNameConfigurationKey The configuration key for the name of the subscription in the public topic as used by IConfigurationManager . Declaration protected override string PublicTopicSubscriptionNameConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.PublicTopicSubscriptionNameConfigurationKey ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey The configuration key that specifies if an is thrown if the network lock is lost as used by IConfigurationManager . Declaration protected override string ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey { get; } Property Value Type Description System.String Overrides Cqrs.Azure.ServiceBus.AzureServiceBus<TAuthenticationToken>.ThrowExceptionOnReceiverMessageLockLostExceptionDuringCompleteConfigurationKey"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureBusHelper-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureBusHelper-1.html",
    "title": "Class AzureBusHelper<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureBusHelper<TAuthenticationToken> A helper for Azure Service Bus and Event Hub. Inheritance System.Object AzureBusHelper<TAuthenticationToken> Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public class AzureBusHelper<TAuthenticationToken> : object, IAzureBusHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureBusHelper(IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, IMessageSerialiser<TAuthenticationToken>, IBusHelper, IConfigurationManager, IDependencyResolver) Instantiates a new instance of AzureBusHelper<TAuthenticationToken> . Declaration public AzureBusHelper(IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IBusHelper busHelper, IConfigurationManager configurationManager, IDependencyResolver dependencyResolver) Parameters Type Name Description IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger IMessageSerialiser <TAuthenticationToken> messageSerialiser IBusHelper busHelper IConfigurationManager configurationManager IDependencyResolver dependencyResolver Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> BusHelper Gets or sets the IBusHelper . Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager CorrelationIdHelper Gets or sets the . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description ICorrelationIdHelper DependencyResolver Gets or sets the IDependencyResolver . Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver Logger Gets or sets the . Declaration protected ILogger Logger { get; } Property Value Type Description ILogger MessageSerialiser Gets or sets the IMessageSerialiser<TAuthenticationToken> . Declaration protected IMessageSerialiser<TAuthenticationToken> MessageSerialiser { get; } Property Value Type Description IMessageSerialiser <TAuthenticationToken> Methods DefaultReceiveCommand(ICommand<TAuthenticationToken>, RouteManager, String) The default command handler that check if the ICommand<TAuthenticationToken> has already been processed by this framework, checks if the ICommand<TAuthenticationToken> is required, finds the handler from the provided routeManager . Declaration public virtual bool ? DefaultReceiveCommand(ICommand<TAuthenticationToken> command, RouteManager routeManager, string framework) Parameters Type Name Description ICommand <TAuthenticationToken> command The ICommand<TAuthenticationToken> to process. RouteManager routeManager The RouteManager to get the ICommandHandler<TAuthenticationToken, TCommand> from. System.String framework The current framework. Returns Type Description System.Nullable < System.Boolean > True indicates the command was successfully handled by a handler. False indicates the command wasn't handled, but didn't throw an error, so by convention, that means it was skipped. Null indicates the command command wasn't handled as it was already handled. Implements IAzureBusHelper<TAuthenticationToken>.DefaultReceiveCommand(ICommand<TAuthenticationToken>, RouteManager, String) DefaultReceiveEvent(IEvent<TAuthenticationToken>, RouteManager, String) The default event handler that check if the IEvent<TAuthenticationToken> has already been processed by this framework, checks if the IEvent<TAuthenticationToken> is required, finds the handler from the provided routeManager . Declaration public virtual bool ? DefaultReceiveEvent(IEvent<TAuthenticationToken> event, RouteManager routeManager, string framework) Parameters Type Name Description IEvent <TAuthenticationToken> event The IEvent<TAuthenticationToken> to process. RouteManager routeManager The RouteManager to get the IEventHandler<TAuthenticationToken, TEvent> from. System.String framework The current framework. Returns Type Description System.Nullable < System.Boolean > True indicates the event was successfully handled by a handler. False indicates the event wasn't handled, but didn't throw an error, so by convention, that means it was skipped. Null indicates the event wasn't handled as it was already handled. Implements IAzureBusHelper<TAuthenticationToken>.DefaultReceiveEvent(IEvent<TAuthenticationToken>, RouteManager, String) PrepareAndValidateCommand<TCommand>(TCommand, String) Prepares and validates a ICommand<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration public virtual bool PrepareAndValidateCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> to send. System.String framework The framework the command is being sent from. Returns Type Description System.Boolean Type Parameters Name Description TCommand The of ICommand<TAuthenticationToken> being sent. Implements IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateCommand<TCommand>(TCommand, String) PrepareAndValidateEvent<TEvent>(TEvent, String) Prepares and validates an IEvent<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration public virtual bool PrepareAndValidateEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> to send. System.String framework The framework the event is being sent from. Returns Type Description System.Boolean Type Parameters Name Description TEvent The of IEvent<TAuthenticationToken> being sent. Implements IAzureBusHelper<TAuthenticationToken>.PrepareAndValidateEvent<TEvent>(TEvent, String) PrepareCommand<TCommand>(TCommand, String) Prepares a ICommand<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration public virtual void PrepareCommand<TCommand>(TCommand command, string framework)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The ICommand<TAuthenticationToken> to send. System.String framework The framework the command is being sent from. Type Parameters Name Description TCommand The of ICommand<TAuthenticationToken> being sent. Implements IAzureBusHelper<TAuthenticationToken>.PrepareCommand<TCommand>(TCommand, String) PrepareEvent<TEvent>(TEvent, String) Prepares an IEvent<TAuthenticationToken> to be sent specifying the framework it is sent via. Declaration public virtual void PrepareEvent<TEvent>(TEvent event, string framework)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event The IEvent<TAuthenticationToken> to send. System.String framework The framework the event is being sent from. Type Parameters Name Description TEvent The of IEvent<TAuthenticationToken> being sent. Implements IAzureBusHelper<TAuthenticationToken>.PrepareEvent<TEvent>(TEvent, String) ReceiveCommand(String, Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) Deserialises and processes the messageBody received from the network through the provided receiveCommandHandler . Declaration public virtual ICommand<TAuthenticationToken> ReceiveCommand(string messageBody, Func<ICommand<TAuthenticationToken>, bool ? > receiveCommandHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null) Parameters Type Name Description System.String messageBody A serialised IMessage . Func < ICommand <TAuthenticationToken>, System.Nullable < System.Boolean >> receiveCommandHandler The handler method that will process the ICommand<TAuthenticationToken> . System.String messageId The network id of the IMessage . Action skippedAction The to call when the ICommand<TAuthenticationToken> is being skipped. Action lockRefreshAction The to call to refresh the network lock. Returns Type Description ICommand <TAuthenticationToken> The ICommand<TAuthenticationToken> that was processed. Implements IAzureBusHelper<TAuthenticationToken>.ReceiveCommand(String, Func<ICommand<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) ReceiveEvent(String, Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) Deserialises and processes the messageBody received from the network through the provided receiveEventHandler . Declaration public virtual IEvent<TAuthenticationToken> ReceiveEvent(string messageBody, Func<IEvent<TAuthenticationToken>, bool ? > receiveEventHandler, string messageId, Action skippedAction = null, Action lockRefreshAction = null) Parameters Type Name Description System.String messageBody A serialised IMessage . Func < IEvent <TAuthenticationToken>, System.Nullable < System.Boolean >> receiveEventHandler The handler method that will process the IEvent<TAuthenticationToken> . System.String messageId The network id of the IMessage . Action skippedAction The to call when the IEvent<TAuthenticationToken> is being skipped. Action lockRefreshAction The to call to refresh the network lock. Returns Type Description IEvent <TAuthenticationToken> The IEvent<TAuthenticationToken> that was processed. Implements IAzureBusHelper<TAuthenticationToken>.ReceiveEvent(String, Func<IEvent<TAuthenticationToken>, Nullable<Boolean>>, String, Action, Action) RefreshLock(CancellationTokenSource, BrokeredMessage, String) Refreshes the network lock. Declaration public virtual void RefreshLock(CancellationTokenSource brokeredMessageRenewCancellationTokenSource, BrokeredMessage message, string type = \"message\") Parameters Type Name Description CancellationTokenSource brokeredMessageRenewCancellationTokenSource BrokeredMessage message System.String type Implements IAzureBusHelper<TAuthenticationToken>.RefreshLock(CancellationTokenSource, BrokeredMessage, String) RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Boolean) Register an event handler that will listen and respond to all events. Declaration public void RegisterGlobalEventHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description ITelemetryHelper telemetryHelper RouteManager routeManger Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IAzureBusHelper<TAuthenticationToken>.RegisterGlobalEventHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Boolean) RegisterHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Type, Boolean) Manually registers the provided handler on the provided routeManger Declaration public virtual void RegisterHandler<TMessage>(ITelemetryHelper telemetryHelper, RouteManager routeManger, Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description ITelemetryHelper telemetryHelper RouteManager routeManger Action <TMessage> handler Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage The of IMessage the handler can handle. Implements IAzureBusHelper<TAuthenticationToken>.RegisterHandler<TMessage>(ITelemetryHelper, RouteManager, Action<TMessage>, Type, Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ServiceBus.AzureBus-1.html",
    "title": "Class AzureBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureBus<TAuthenticationToken> An Azure Bus such as a Service Bus or Event Hub. Inheritance System.Object AzureBus<TAuthenticationToken> AzureEventHub<TAuthenticationToken> AzureServiceBus<TAuthenticationToken> Namespace : Cqrs.Azure.ServiceBus Assembly : Cqrs.Azure.ServiceBus.dll Syntax public abstract class AzureBus<TAuthenticationToken> : object Type Parameters Name Description TAuthenticationToken The of the authentication token. Constructors AzureBus(IConfigurationManager, IMessageSerialiser<TAuthenticationToken>, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, ILogger, Boolean) Instantiates a new instance of AzureBus<TAuthenticationToken> Declaration protected AzureBus(IConfigurationManager configurationManager, IMessageSerialiser<TAuthenticationToken> messageSerialiser, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, bool isAPublisher) Parameters Type Name Description IConfigurationManager configurationManager IMessageSerialiser <TAuthenticationToken> messageSerialiser IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper ICorrelationIdHelper correlationIdHelper ILogger logger System.Boolean isAPublisher Fields DefaultMaximumConcurrentReceiverProcessesCount The default number for MaximumConcurrentReceiverProcessesCount . Declaration protected const int DefaultMaximumConcurrentReceiverProcessesCount = null Field Value Type Description System.Int32 DefaultNumberOfReceiversCount The default number of receivers to start and run. Declaration protected const int DefaultNumberOfReceiversCount = null Field Value Type Description System.Int32 Properties AuthenticationTokenHelper Gets or sets the IAuthenticationTokenHelper<TAuthenticationToken> . Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> AzureServiceBusRetryPolicy Gets the default retry policy dedicated to handling transient conditions with Windows Azure Service Bus. Declaration protected virtual Microsoft.Practices.TransientFaultHandling.RetryPolicy AzureServiceBusRetryPolicy { get; } Property Value Type Description Microsoft.Practices.TransientFaultHandling.RetryPolicy ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager ConnectionString Gets or sets the connection string to the bus. Declaration protected string ConnectionString { get; set; } Property Value Type Description System.String CorrelationIdHelper Gets or sets the . Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description ICorrelationIdHelper EventWaits Gets or sets the IEvent<TAuthenticationToken> to wait for before responding to the caller keyed by the Id Declaration protected IDictionary<Guid, IList<IEvent<TAuthenticationToken>>> EventWaits { get; } Property Value Type Description IDictionary < Guid , IList < IEvent <TAuthenticationToken>>> Logger Gets or sets the . Declaration protected ILogger Logger { get; } Property Value Type Description ILogger MaximumConcurrentReceiverProcessesCount The value. Declaration protected int MaximumConcurrentReceiverProcessesCount { get; set; } Property Value Type Description System.Int32 MessageSerialiser Gets or sets the IMessageSerialiser<TAuthenticationToken> . Declaration protected IMessageSerialiser<TAuthenticationToken> MessageSerialiser { get; } Property Value Type Description IMessageSerialiser <TAuthenticationToken> NumberOfReceiversCount The number of receivers to start and run. Declaration protected int NumberOfReceiversCount { get; set; } Property Value Type Description System.Int32 Methods ApplyReceiverMessageHandler() Sets the handler on . Declaration protected abstract void ApplyReceiverMessageHandler() GetConnectionString() Gets the connection string for the bus. Declaration protected abstract string GetConnectionString() Returns Type Description System.String GetCurrentMaximumConcurrentReceiverProcessesCount() Returns DefaultMaximumConcurrentReceiverProcessesCount . Declaration protected virtual int GetCurrentMaximumConcurrentReceiverProcessesCount() Returns Type Description System.Int32 DefaultMaximumConcurrentReceiverProcessesCount . GetCurrentNumberOfReceiversCount() Returns DefaultNumberOfReceiversCount . Declaration protected virtual int GetCurrentNumberOfReceiversCount() Returns Type Description System.Int32 DefaultNumberOfReceiversCount . GetNamespaceManager() Creates a new instance of with the ConnectionString . Declaration protected virtual NamespaceManager GetNamespaceManager() Returns Type Description NamespaceManager InstantiatePublishing() Instantiate publishing on this bus. Declaration protected abstract void InstantiatePublishing() InstantiateReceiving() Instantiate receiving on this bus. Declaration protected abstract void InstantiateReceiving() SetConnectionStrings() Sets ConnectionString from GetConnectionString() . Declaration protected virtual void SetConnectionStrings() SetMaximumConcurrentReceiverProcessesCount() Sets MaximumConcurrentReceiverProcessesCount from GetCurrentMaximumConcurrentReceiverProcessesCount() . Declaration protected virtual void SetMaximumConcurrentReceiverProcessesCount() SetNumberOfReceiversCount() Sets NumberOfReceiversCount from GetCurrentNumberOfReceiversCount() . Declaration protected virtual void SetNumberOfReceiversCount() StartSettingsChecking() Starts a new that periodically calls ValidateSettingsHaveChanged() and if there is a change, calls TriggerSettingsChecking() . Declaration protected virtual void StartSettingsChecking() TriggerSettingsChecking() Change the settings used by this bus. Declaration protected abstract void TriggerSettingsChecking() UpdateSettings() Calls SetConnectionStrings() SetNumberOfReceiversCount() and SetMaximumConcurrentReceiverProcessesCount() Declaration protected virtual void UpdateSettings() ValidateSettingsHaveChanged() Checks if the settings for ConnectionString , NumberOfReceiversCount or MaximumConcurrentReceiverProcessesCount have changed. Declaration protected virtual bool ValidateSettingsHaveChanged() Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.html",
    "title": "Namespace Cqrs.Azure.EventHub.EventBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.EventHub.EventBus.Configuration Classes AzureEventBusPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. AzureEventBusReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. AzureEventHubPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. AzureEventHubReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. AzureEventPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. AzureQueuedEventBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. AzureQueuedEventHubReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureQueuedEventHubReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureQueuedEventHubReceiverModule-1.html",
    "title": "Class AzureQueuedEventHubReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedEventHubReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventHubReceiverModule <TAuthenticationToken> AzureQueuedEventHubReceiverModule<TAuthenticationToken> AzureQueuedEventBusReceiverModule<TAuthenticationToken> Inherited Members AzureEventHubReceiverModule<TAuthenticationToken>.Load() AzureEventHubReceiverModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureQueuedEventHubReceiverModule<TAuthenticationToken> : AzureEventHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods RegisterEventHandlerRegistrar() Register the CQRS event handler registrar Declaration public override void RegisterEventHandlerRegistrar() Overrides Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventHubReceiverModule<TAuthenticationToken>.RegisterEventHandlerRegistrar()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureQueuedEventBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureQueuedEventBusReceiverModule-1.html",
    "title": "Class AzureQueuedEventBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedEventBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventHubReceiverModule <TAuthenticationToken> AzureQueuedEventHubReceiverModule <TAuthenticationToken> AzureQueuedEventBusReceiverModule<TAuthenticationToken> Inherited Members AzureQueuedEventHubReceiverModule<TAuthenticationToken>.RegisterEventHandlerRegistrar() AzureEventHubReceiverModule<TAuthenticationToken>.Load() AzureEventHubReceiverModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureQueuedEventBusReceiverModule<TAuthenticationToken> : AzureQueuedEventHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventPublisherModule-1.html",
    "title": "Class AzureEventPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureEventHubPublisherModule <TAuthenticationToken> AzureEventPublisherModule<TAuthenticationToken> Inherited Members AzureEventHubPublisherModule<TAuthenticationToken>.Load() AzureEventHubPublisherModule<TAuthenticationToken>.RegisterEventPublisher() AzureEventHubPublisherModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureEventPublisherModule<TAuthenticationToken> : AzureEventHubPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventHubReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventHubReceiverModule-1.html",
    "title": "Class AzureEventHubReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventHubReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventHubReceiverModule<TAuthenticationToken> AzureEventBusReceiverModule<TAuthenticationToken> AzureQueuedEventHubReceiverModule<TAuthenticationToken> Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureEventHubReceiverModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventHandlerRegistrar() Register the CQRS event handler registrar Declaration public virtual void RegisterEventHandlerRegistrar() RegisterEventMessageSerialiser() Register the CQRS event handler message serialiser Declaration public virtual void RegisterEventMessageSerialiser()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventHubPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventHubPublisherModule-1.html",
    "title": "Class AzureEventHubPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventHubPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureEventHubPublisherModule<TAuthenticationToken> AzureEventBusPublisherModule<TAuthenticationToken> AzureEventPublisherModule<TAuthenticationToken> Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureEventHubPublisherModule<TAuthenticationToken> : NinjectModule Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterEventMessageSerialiser() Register the CQRS event handler message serialiser Declaration public virtual void RegisterEventMessageSerialiser() RegisterEventPublisher() Register the CQRS event publisher Declaration public virtual void RegisterEventPublisher()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventBusReceiverModule-1.html",
    "title": "Class AzureEventBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusReceiverModule<TAuthenticationToken> A that wires up AzureEventBusReceiver<TAuthenticationToken> as the IEventReceiver and other require components. Inheritance System.Object AzureEventHubReceiverModule <TAuthenticationToken> AzureEventBusReceiverModule<TAuthenticationToken> Inherited Members AzureEventHubReceiverModule<TAuthenticationToken>.Load() AzureEventHubReceiverModule<TAuthenticationToken>.RegisterEventHandlerRegistrar() AzureEventHubReceiverModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureEventBusReceiverModule<TAuthenticationToken> : AzureEventHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventBusPublisherModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.EventBus.Configuration.AzureEventBusPublisherModule-1.html",
    "title": "Class AzureEventBusPublisherModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureEventBusPublisherModule<TAuthenticationToken> A that wires up AzureEventBusPublisher<TAuthenticationToken> as the IEventPublisher<TAuthenticationToken> and other require components. Inheritance System.Object AzureEventHubPublisherModule <TAuthenticationToken> AzureEventBusPublisherModule<TAuthenticationToken> Inherited Members AzureEventHubPublisherModule<TAuthenticationToken>.Load() AzureEventHubPublisherModule<TAuthenticationToken>.RegisterEventPublisher() AzureEventHubPublisherModule<TAuthenticationToken>.RegisterEventMessageSerialiser() Namespace : Cqrs.Azure.EventHub.EventBus.Configuration Assembly : Cqrs.Azure.EventHub.EventBus.dll Syntax public class AzureEventBusPublisherModule<TAuthenticationToken> : AzureEventHubPublisherModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.html",
    "title": "Namespace Cqrs.Azure.EventHub.CommandBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.EventHub.CommandBus.Configuration Classes AzureCommandBusPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. AzureCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. AzureCommandBusSenderModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. AzureCommandHubPublisherModule<TAuthenticationToken> A that wires up AzureCommandBusPublisher<TAuthenticationToken> as the ICommandPublisher<TAuthenticationToken> and other require components. AzureCommandHubReceiverModule<TAuthenticationToken> A that wires up AzureCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. AzureQueuedCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. AzureQueuedCommandHubReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureQueuedCommandHubReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureQueuedCommandHubReceiverModule-1.html",
    "title": "Class AzureQueuedCommandHubReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedCommandHubReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandHubReceiverModule <TAuthenticationToken> AzureQueuedCommandHubReceiverModule<TAuthenticationToken> AzureQueuedCommandBusReceiverModule<TAuthenticationToken> Inherited Members AzureCommandHubReceiverModule<TAuthenticationToken>.Load() AzureCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureQueuedCommandHubReceiverModule<TAuthenticationToken> : AzureCommandHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token. Methods RegisterCommandHandlerRegistrar() Register the CQRS command handler registrar Declaration public override void RegisterCommandHandlerRegistrar() Overrides Cqrs.Azure.EventHub.CommandBus.Configuration.AzureCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandHandlerRegistrar()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureQueuedCommandBusReceiverModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.EventHub.CommandBus.Configuration.AzureQueuedCommandBusReceiverModule-1.html",
    "title": "Class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> A that wires up AzureQueuedCommandBusReceiver<TAuthenticationToken> as the ICommandReceiver and other require components. Inheritance System.Object AzureCommandHubReceiverModule <TAuthenticationToken> AzureQueuedCommandHubReceiverModule <TAuthenticationToken> AzureQueuedCommandBusReceiverModule<TAuthenticationToken> Inherited Members AzureQueuedCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandHandlerRegistrar() AzureCommandHubReceiverModule<TAuthenticationToken>.Load() AzureCommandHubReceiverModule<TAuthenticationToken>.RegisterCommandMessageSerialiser() Namespace : Cqrs.Azure.EventHub.CommandBus.Configuration Assembly : Cqrs.Azure.EventHub.CommandBus.dll Syntax public class AzureQueuedCommandBusReceiverModule<TAuthenticationToken> : AzureQueuedCommandHubReceiverModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.AzureRepository-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.AzureRepository-3.html",
    "title": "Class AzureRepository<TQueryStrategy, TQueryBuilder, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure DocumentDB (CosmosDB). Inheritance System.Object Repository <TQueryStrategy, TQueryBuilder, TData> AzureRepository<TQueryStrategy, TQueryBuilder, TData> Inherited Members Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll() Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>) Namespace : Cqrs.Azure.DocumentDb.Repositories Assembly : Cqrs.Azure.DocumentDb.dll Syntax public abstract class AzureRepository<TQueryStrategy, TQueryBuilder, TData> : Repository<TQueryStrategy, TQueryBuilder, TData>, IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : AzureDocumentDbEntity Type Parameters Name Description TQueryStrategy The of IQueryStrategy . TQueryBuilder The of the QueryBuilder<TQueryStrategy, TData> that will be used to build queries. TData The of data held in storage. Constructors AzureRepository(Func<IDataStore<TData>>, TQueryBuilder) Instantiates a new instance of AzureRepository<TQueryStrategy, TQueryBuilder, TData> Declaration protected AzureRepository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder) Parameters Type Name Description Func < IDataStore <TData>> createDataStoreFunction TQueryBuilder queryBuilder Methods CreateQueryable(Expression<Func<TData, Boolean>>) Calls CreateDataStoreFunction passing the predicate . Declaration protected override IQueryable<TData> CreateQueryable(Expression<Func<TData, bool>> predicate) Parameters Type Name Description Expression < Func <TData, System.Boolean >> predicate A function defining a filter if required. Returns Type Description IQueryable <TData> Load(Guid, Boolean) Load the TData from Azure DocumentDB (CosmosDB) identified by the provided rsn . Declaration public override TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true) Parameters Type Name Description Guid rsn The identifier if the TData to load. System.Boolean throwExceptionOnMissingEntity If true will throw an if no data is found in storage. Returns Type Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.Authentication.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.Authentication.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.Repositories.Authentication | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.Repositories.Authentication Classes AzureSingleSignOnToken An ISingleSignOnToken designed to work with Azure DocumentDB (CosmosDB)."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.Authentication.AzureSingleSignOnToken.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Repositories.Authentication.AzureSingleSignOnToken.html",
    "title": "Class AzureSingleSignOnToken | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureSingleSignOnToken An ISingleSignOnToken designed to work with Azure DocumentDB (CosmosDB). Inheritance System.Object Entity AzureDocumentDbEntity AzureSingleSignOnToken Inherited Members AzureDocumentDbEntity.Rsn AzureDocumentDbEntity.id AzureDocumentDbEntity.type AzureDocumentDbEntity.SortingOrder AzureDocumentDbEntity.IsLogicallyDeleted Namespace : Cqrs.Azure.DocumentDb.Repositories.Authentication Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureSingleSignOnToken : AzureDocumentDbEntity, IEntity, ISingleSignOnToken Properties DateIssued The this token was issued. Declaration public DateTime DateIssued { get; set; } Property Value Type Description DateTime TimeOfExpiry The this token should expire. Declaration public DateTime TimeOfExpiry { get; set; } Property Value Type Description DateTime Token The authentication token. Declaration public string Token { get; set; } Property Value Type Description System.String Implements ISingleSignOnToken.Token Methods Serialise() Returns Token . Declaration public string Serialise() Returns Type Description System.String Token . Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.IAzureDocumentDbHelper.html",
    "title": "Interface IAzureDocumentDbHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAzureDocumentDbHelper Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public interface IAzureDocumentDbHelper Methods CreateOrReadCollection(DocumentClient, Database, String, String[]) Declaration Task<DocumentCollection> CreateOrReadCollection(DocumentClient client, Database database, string collectionName, string[] uniqiueIndexPropertyNames = null) Parameters Type Name Description DocumentClient client Database database System.String collectionName System.String [] uniqiueIndexPropertyNames Returns Type Description Task < DocumentCollection > CreateOrReadDatabase(DocumentClient, String) Declaration Task<Database> CreateOrReadDatabase(DocumentClient client, string databaseName) Parameters Type Name Description DocumentClient client System.String databaseName Returns Type Description Task < Database > ExecuteFaultTollerantFunction(Action) Declaration void ExecuteFaultTollerantFunction(Action func) Parameters Type Name Description Action func ExecuteFaultTollerantFunction<T>(Func<T>) Declaration T ExecuteFaultTollerantFunction<T>(Func<T> func) Parameters Type Name Description Func <T> func Returns Type Description T Type Parameters Name Description T"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.IAzureDocumentDbConnectionCache.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.IAzureDocumentDbConnectionCache.html",
    "title": "Interface IAzureDocumentDbConnectionCache | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAzureDocumentDbConnectionCache Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public interface IAzureDocumentDbConnectionCache Methods SetClient(String, DocumentClient) Declaration void SetClient(string key, DocumentClient client) Parameters Type Name Description System.String key DocumentClient client SetDatabase(String, Database) Declaration void SetDatabase(string key, Database database) Parameters Type Name Description System.String key Database database SetDocumentCollection(String, DocumentCollection) Declaration void SetDocumentCollection(string key, DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection TryGetClient(String, out DocumentClient) Declaration bool TryGetClient(string key, out DocumentClient client) Parameters Type Name Description System.String key DocumentClient client Returns Type Description System.Boolean TryGetDatabase(String, out Database) Declaration bool TryGetDatabase(string key, out Database database) Parameters Type Name Description System.String key Database database Returns Type Description System.Boolean TryGetDocumentCollection(String, out DocumentCollection) Declaration bool TryGetDocumentCollection(string key, out DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.GlobalAzureDocumentDbConnectionCache.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.GlobalAzureDocumentDbConnectionCache.html",
    "title": "Class GlobalAzureDocumentDbConnectionCache | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GlobalAzureDocumentDbConnectionCache Inheritance System.Object GlobalAzureDocumentDbConnectionCache Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class GlobalAzureDocumentDbConnectionCache : object, IAzureDocumentDbConnectionCache Properties Cache Declaration protected static IDictionary<string, object> Cache { get; } Property Value Type Description IDictionary < System.String , System.Object > Methods SetClient(String, DocumentClient) Declaration public void SetClient(string key, DocumentClient client) Parameters Type Name Description System.String key DocumentClient client Implements IAzureDocumentDbConnectionCache.SetClient(String, DocumentClient) SetDatabase(String, Database) Declaration public void SetDatabase(string key, Database database) Parameters Type Name Description System.String key Database database Implements IAzureDocumentDbConnectionCache.SetDatabase(String, Database) SetDocumentCollection(String, DocumentCollection) Declaration public void SetDocumentCollection(string key, DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection Implements IAzureDocumentDbConnectionCache.SetDocumentCollection(String, DocumentCollection) TryGetClient(String, out DocumentClient) Declaration public bool TryGetClient(string key, out DocumentClient client) Parameters Type Name Description System.String key DocumentClient client Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetClient(String, out DocumentClient) TryGetDatabase(String, out Database) Declaration public bool TryGetDatabase(string key, out Database database) Parameters Type Name Description System.String key Database database Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetDatabase(String, out Database) TryGetDocumentCollection(String, out DocumentCollection) Declaration public bool TryGetDocumentCollection(string key, out DocumentCollection documentCollection) Parameters Type Name Description System.String key DocumentCollection documentCollection Returns Type Description System.Boolean Implements IAzureDocumentDbConnectionCache.TryGetDocumentCollection(String, out DocumentCollection)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.Factories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.Factories Classes AzureDocumentDbDataStoreConnectionStringFactory AzureDocumentDbDataStoreFactory A factory for obtaining DataStore collections from Azure DocumentDB Interfaces IAzureDocumentDbDataStoreConnectionStringFactory"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.IAzureDocumentDbDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Factories.IAzureDocumentDbDataStoreConnectionStringFactory.html",
    "title": "Interface IAzureDocumentDbDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAzureDocumentDbDataStoreConnectionStringFactory Namespace : Cqrs.Azure.DocumentDb.Factories Assembly : Cqrs.Azure.DocumentDb.dll Syntax public interface IAzureDocumentDbDataStoreConnectionStringFactory Methods GetAzureDocumentDbCollectionName() Declaration string GetAzureDocumentDbCollectionName() Returns Type Description System.String GetAzureDocumentDbConnectionClient() Declaration DocumentClient GetAzureDocumentDbConnectionClient() Returns Type Description DocumentClient GetAzureDocumentDbDatabaseName() Declaration string GetAzureDocumentDbDatabaseName() Returns Type Description System.String UseSingleCollectionForAllDataStores() Indicates if a different collection should be used per IEntity / IDataStore<TData> or a single collection used for all instances of IDataStore<TData> and IDataStore<TData> . Setting this to true can become expensive as each IEntity will have it's own collection. Check the relevant SDK/pricing models. Declaration bool UseSingleCollectionForAllDataStores() Returns Type Description System.Boolean"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Entities.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Entities.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.Entities | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.Entities Classes AzureDocumentDbEntity A projection/entity especially designed to work with Azure DocumentDB (CosmosDB)."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Entities.AzureDocumentDbEntity.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.Entities.AzureDocumentDbEntity.html",
    "title": "Class AzureDocumentDbEntity | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbEntity A projection/entity especially designed to work with Azure DocumentDB (CosmosDB). Inheritance System.Object Entity AzureDocumentDbEntity AzureSingleSignOnToken Namespace : Cqrs.Azure.DocumentDb.Entities Assembly : Cqrs.Azure.DocumentDb.dll Syntax public abstract class AzureDocumentDbEntity : Entity, IEntity Properties id The internal identifier of the IEntity used within Azure DocumentDB (CosmosDB). Declaration public virtual string id { get; set; } Property Value Type Description System.String IsLogicallyDeleted Indicates if this IEntity has been deleted, but not removed from the IDataStore<TData> , this way entities can be retrieved so an un-deleted operation can be triggered. Declaration public override bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Overrides Entity.IsLogicallyDeleted Rsn The identifier of the IEntity . Declaration public override Guid Rsn { get; set; } Property Value Type Description Guid Overrides Entity.Rsn SortingOrder The order of this IEntity to sort by, by default. Declaration public override int SortingOrder { get; set; } Property Value Type Description System.Int32 Overrides Entity.SortingOrder type The name of the of this IEntity . Declaration public virtual string type { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DocumentDbException.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DocumentDbException.html",
    "title": "Class DocumentDbException | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DocumentDbException Inheritance System.Object DocumentDbException Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class DocumentDbException : Exception Constructors DocumentDbException(String, Exception) Declaration public DocumentDbException(string message, Exception exception) Parameters Type Name Description System.String message Exception exception"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DataStores.html",
    "title": "Namespace Cqrs.Azure.DocumentDb.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.DocumentDb.DataStores Classes AzureDocumentDbDataStore<TData> A IDataStore<TData> that uses Azure DocumentDB (CosmosDB) for storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.DataStores.AzureDocumentDbDataStore-1.html",
    "title": "Class AzureDocumentDbDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbDataStore<TData> A IDataStore<TData> that uses Azure DocumentDB (CosmosDB) for storage. Inheritance System.Object AzureDocumentDbDataStore<TData> Namespace : Cqrs.Azure.DocumentDb.DataStores Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbDataStore<TData> : object, IDataStore<TData>, IOrderedQueryable<TData>, IDisposable where TData : AzureDocumentDbEntity Type Parameters Name Description TData The of IEntity the IDataStore<TData> will contain. Constructors AzureDocumentDbDataStore(ILogger, DocumentClient, Database, DocumentCollection, IOrderedQueryable<TData>, IAzureDocumentDbHelper) Instantiates and Initialises a new instance of the AzureDocumentDbDataStore<TData> class. Declaration public AzureDocumentDbDataStore(ILogger logger, DocumentClient azureDocumentDbClient, Database azureDocumentDbDatabase, DocumentCollection azureDocumentDbCollection, IOrderedQueryable<TData> azureDocumentDbQuery, IAzureDocumentDbHelper azureDocumentDbHelper) Parameters Type Name Description ILogger logger DocumentClient azureDocumentDbClient Database azureDocumentDbDatabase DocumentCollection azureDocumentDbCollection IOrderedQueryable <TData> azureDocumentDbQuery IAzureDocumentDbHelper azureDocumentDbHelper Properties AzureDocumentDbClient Gets or sets the Declaration protected DocumentClient AzureDocumentDbClient { get; } Property Value Type Description DocumentClient AzureDocumentDbCollection Gets or sets the Declaration protected DocumentCollection AzureDocumentDbCollection { get; } Property Value Type Description DocumentCollection AzureDocumentDbDatabase Gets or sets the Declaration protected Database AzureDocumentDbDatabase { get; } Property Value Type Description Database AzureDocumentDbHelper Gets or sets the IAzureDocumentDbHelper Declaration protected IAzureDocumentDbHelper AzureDocumentDbHelper { get; } Property Value Type Description IAzureDocumentDbHelper AzureDocumentDbQuery Gets or sets the Declaration protected IOrderedQueryable<TData> AzureDocumentDbQuery { get; } Property Value Type Description IOrderedQueryable <TData> ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Logger Gets or sets the Declaration protected ILogger Logger { get; } Property Value Type Description ILogger Provider Gets the singleResultQuery provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public void Add(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public void Add(IEnumerable<TData> data) Parameters Type Name Description IEnumerable <TData> data AsEnumerable() Returns the instance as an . Declaration public IEnumerable<TData> AsEnumerable() Returns Type Description IEnumerable <TData> Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public void Destroy(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TData> GetEnumerator() Returns Type Description IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Remove(TData) Will mark the data as logically (or soft) by setting IsLogicallyDeleted to true Declaration public void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public void RemoveAll() Implements IDataStore<TData>.RemoveAll() Update(TData) Update the provided data in the data store and persist the change. Declaration public void Update(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Update(TData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.AzureDocumentDbHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.DocumentDb.AzureDocumentDbHelper.html",
    "title": "Class AzureDocumentDbHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AzureDocumentDbHelper Inheritance System.Object AzureDocumentDbHelper Namespace : Cqrs.Azure.DocumentDb Assembly : Cqrs.Azure.DocumentDb.dll Syntax public class AzureDocumentDbHelper : object, IAzureDocumentDbHelper Constructors AzureDocumentDbHelper(ILogger, IAzureDocumentDbConnectionCache) Declaration public AzureDocumentDbHelper(ILogger logger, IAzureDocumentDbConnectionCache azureDocumentDbConnectionCache) Parameters Type Name Description ILogger logger IAzureDocumentDbConnectionCache azureDocumentDbConnectionCache Properties AzureDocumentDbConnectionCache Declaration protected IAzureDocumentDbConnectionCache AzureDocumentDbConnectionCache { get; } Property Value Type Description IAzureDocumentDbConnectionCache Logger Declaration protected ILogger Logger { get; } Property Value Type Description ILogger Methods CreateOrReadCollection(DocumentClient, Database, String, String[]) Declaration public Task<DocumentCollection> CreateOrReadCollection(DocumentClient client, Database database, string collectionName, string[] uniqiueIndexPropertyNames = null) Parameters Type Name Description DocumentClient client Database database System.String collectionName System.String [] uniqiueIndexPropertyNames Returns Type Description Task < DocumentCollection > Implements IAzureDocumentDbHelper.CreateOrReadCollection(DocumentClient, Database, String, String[]) CreateOrReadDatabase(DocumentClient, String) Declaration public Task<Database> CreateOrReadDatabase(DocumentClient client, string databaseName) Parameters Type Name Description DocumentClient client System.String databaseName Returns Type Description Task < Database > Implements IAzureDocumentDbHelper.CreateOrReadDatabase(DocumentClient, String) ExecuteFaultTollerantFunction(Action) Declaration public virtual void ExecuteFaultTollerantFunction(Action func) Parameters Type Name Description Action func Implements IAzureDocumentDbHelper.ExecuteFaultTollerantFunction(Action) ExecuteFaultTollerantFunction<T>(Func<T>) Declaration public virtual T ExecuteFaultTollerantFunction<T>(Func<T> func) Parameters Type Name Description Func <T> func Returns Type Description T Type Parameters Name Description T Implements IAzureDocumentDbHelper.ExecuteFaultTollerantFunction<T>(Func<T>) ProcessFaultTollerantExceptions(DocumentClientException) Declaration protected virtual void ProcessFaultTollerantExceptions(DocumentClientException documentClientException) Parameters Type Name Description DocumentClientException documentClientException"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.html",
    "title": "Namespace Cqrs.Azure.ConfigurationManager | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.ConfigurationManager Classes CloudConfigurationManager Provides access to configuration settings from the Azure Portal application settings. If no value is stored there it falls back to reading app settings of an app.config or web.config... i.e. System.Configuration.ConfigurationManager.AppSettings TelemetryCoreHost<TAuthenticationToken> Configure and start command and event handlers in a host with telemetry"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.TelemetryCoreHost-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.ConfigurationManager.TelemetryCoreHost-1.html",
    "title": "Class TelemetryCoreHost<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TelemetryCoreHost<TAuthenticationToken> Configure and start command and event handlers in a host with telemetry Inheritance System.Object CoreHost <TAuthenticationToken> TelemetryCoreHost<TAuthenticationToken> CqrsJobHost<TAuthenticationToken> CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> Inherited Members CoreHost<TAuthenticationToken>.HandlerTypes CoreHost<TAuthenticationToken>.EventBus CoreHost<TAuthenticationToken>.CommandBus CoreHost<TAuthenticationToken>.TelemetryName CoreHost<TAuthenticationToken>.CorrelationIdHelper CoreHost<TAuthenticationToken>.Logger CoreHost<TAuthenticationToken>.ConfigureDefaultDependencyResolver() CoreHost<TAuthenticationToken>.ManuallyRegisterEventHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.ManuallyRegisterCommandHandler<TMessage>(Action<TMessage>, Boolean) CoreHost<TAuthenticationToken>.StartBusRegistrar() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.ConfigurationManager Assembly : Cqrs.Azure.ConfigurationManager.dll Syntax public abstract class TelemetryCoreHost<TAuthenticationToken> : CoreHost<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Fields _configurationManager Gets or sets the IConfigurationManager . Declaration protected static readonly IConfigurationManager _configurationManager Field Value Type Description IConfigurationManager Properties ConfigurationManager The IConfigurationManager that can be use before the Current is set. Declaration protected override IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigurationManager TelemetryClient Gets or sets the TelemetryClient . Declaration public TelemetryClient TelemetryClient { get; } Property Value Type Description Microsoft.ApplicationInsights.TelemetryClient Methods ConfigureTelemetry() When overridden, allows you to configure Telemetry Declaration protected override void ConfigureTelemetry() Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.ConfigureTelemetry() Prepare() Prepare the host before registering handlers and starting the host. Declaration protected override void Prepare() Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.Prepare() PrepareSecurityProtocol() Sets the System.Net.ServicePointManager.SecurityProtocol to System.Net.SecurityProtocolType.Tls12 | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls . Declaration protected override void PrepareSecurityProtocol() Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.PrepareSecurityProtocol() Run(Action) Calls Prepare() , handlerRegistation and then Start() Declaration public override void Run(Action handlerRegistation = null) Parameters Type Name Description System.Action handlerRegistation Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.Run(System.Action) Start() Start the host post preparing and registering handlers. Declaration protected override void Start() Overrides Cqrs.Hosts.CoreHost<TAuthenticationToken>.Start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.BlobStorageEventStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.BlobStorageEventStoreTests.html",
    "title": "Class BlobStorageEventStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageEventStoreTests A series of tests on the BlobStorageEventStore<TAuthenticationToken> class Inheritance System.Object BlobStorageEventStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [TestFixture] public class BlobStorageEventStoreTests Methods Save_ValidEvent_EventCanBeRetreived() Tests the Save(Type, IEvent<TAuthenticationToken>) method Passing a valid test IEvent<TAuthenticationToken> Expecting the test IEvent<TAuthenticationToken> is able to be read. Declaration [Test] public virtual void Save_ValidEvent_EventCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.BlobStorageDataStoreTests.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Test.Integration.BlobStorageDataStoreTests.html",
    "title": "Class BlobStorageDataStoreTests | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageDataStoreTests A series of tests on the BlobStorageDataStore<TData> class Inheritance System.Object BlobStorageDataStoreTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Test.Integration Assembly : Cqrs.Azure.BlobStorage.Test.Integration.dll Syntax [TestFixture] public class BlobStorageDataStoreTests Methods Save_ValidProjectionView_ProjectionViewCanBeRetreived() Tests the Add(TData) method Passing a valid test IEntity Expecting the test IEntity is able to be read. Declaration [Test] public virtual void Save_ValidProjectionView_ProjectionViewCanBeRetreived()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableStorageStoreExtensions.html",
    "title": "Class TableStorageStoreExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageStoreExtensions Inheritance System.Object TableStorageStoreExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public static class TableStorageStoreExtensions Methods GetByKey<TData>(IDataStore<TData>) Declaration public static IEnumerable<TData> GetByKey<TData>(this IDataStore<TData> datastore)where TData : IEntity Parameters Type Name Description IDataStore <TData> datastore Returns Type Description System.Collections.Generic.IEnumerable <TData> Type Parameters Name Description TData GetByKeyAndRow<TData>(IDataStore<TData>, Guid) Declaration public static TData GetByKeyAndRow<TData>(this IDataStore<TData> datastore, Guid rsn)where TData : IEntity Parameters Type Name Description IDataStore <TData> datastore System.Guid rsn Returns Type Description TData Type Parameters Name Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableStorageStore-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableStorageStore-2.html",
    "title": "Class TableStorageStore<TData, TCollectionItemData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageStore<TData, TCollectionItemData> A IDataStore<TData> that uses Azure Storage for storage. Inheritance System.Object StorageStore <TData, Microsoft.WindowsAzure.Storage.Table.CloudTable > TableStorageStore<TData, TCollectionItemData> TableStorageDataStore<TData> TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore Inherited Members StorageStore<TData, CloudTable>.WritableCollection StorageStore<TData, CloudTable>.ReadableStorageAccount StorageStore<TData, CloudTable>.Logger StorageStore<TData, CloudTable>.GetContainerName StorageStore<TData, CloudTable>.IsContainerPublic StorageStore<TData, CloudTable>.DefaultSettings StorageStore<TData, CloudTable>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<TData, CloudTable>.GetEnumerator() StorageStore<TData, CloudTable>.IEnumerable.GetEnumerator() StorageStore<TData, CloudTable>.Expression StorageStore<TData, CloudTable>.ElementType StorageStore<TData, CloudTable>.Provider StorageStore<TData, CloudTable>.Dispose() StorageStore<TData, CloudTable>.Add(TData) StorageStore<TData, CloudTable>.Add(IEnumerable<TData>) StorageStore<TData, CloudTable>.Destroy(TData) StorageStore<TData, CloudTable>.RemoveAll() StorageStore<TData, CloudTable>.Update(TData) StorageStore<TData, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<TData, CloudTable>.GetSafeSourceName(String) StorageStore<TData, CloudTable>.GetSafeSourceName(String, Boolean) StorageStore<TData, CloudTable>.AzureStorageRetryPolicy StorageStore<TData, CloudTable>.Deserialise(Stream) StorageStore<TData, CloudTable>.Deserialise(String) StorageStore<TData, CloudTable>.Serialise(TData) StorageStore<TData, CloudTable>.GetSerialisationSettings() StorageStore<TData, CloudTable>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public abstract class TableStorageStore<TData, TCollectionItemData> : StorageStore<TData, CloudTable>, IEnumerable<TData>, IDataStore<TCollectionItemData>, IOrderedQueryable<TCollectionItemData>, IQueryable<TCollectionItemData>, IEnumerable<TCollectionItemData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : TableEntity, new () Type Parameters Name Description TData The System.Type of Microsoft.WindowsAzure.Storage.Table.TableEntity Azure Table Storage will contain. TCollectionItemData The System.Type of IEntity the IDataStore<TData> will contain. Constructors TableStorageStore(ILogger) Initializes a new instance of the TableStorageStore<TData, TCollectionItemData> class using the specified container. Declaration protected TableStorageStore(ILogger logger) Parameters Type Name Description cdmdotnet.Logging.ILogger logger Properties Collection Gets or set the Microsoft.WindowsAzure.Storage.Table.TableQuery . Declaration public TableQuery<TData> Collection { get; } Property Value Type Description Microsoft.WindowsAzure.Storage.Table.TableQuery <TData> ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public override Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.ElementType Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public override Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Expression Implements System.Linq.IQueryable.Expression Provider Gets the query provider that is associated with this data source. Declaration public override IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Provider Implements System.Linq.IQueryable.Provider Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public override void Add(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add(TData) Add(TCollectionItemData) Declaration public virtual void Add(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Implements IDataStore<TData>.Add(TData) Add(ITableEntity) Declaration public virtual void Add(ITableEntity data) Parameters Type Name Description Microsoft.WindowsAzure.Storage.Table.ITableEntity data Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public override void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Add(System.Collections.Generic.IEnumerable<TData>) Add(IEnumerable<TCollectionItemData>) Declaration public virtual void Add(IEnumerable<TCollectionItemData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TCollectionItemData> data Implements IDataStore<TData>.Add(IEnumerable<TData>) Add(IEnumerable<ITableEntity>) Declaration public virtual void Add(IEnumerable<ITableEntity> data) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.WindowsAzure.Storage.Table.ITableEntity > data AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>) Declaration protected virtual void AsyncSaveData<TSaveData, TResult>(TSaveData data, Func<TSaveData, CloudTable, TResult> function, Func<TSaveData, string> customFilenameFunction = null) Parameters Type Name Description TSaveData data System.Func <TSaveData, Microsoft.WindowsAzure.Storage.Table.CloudTable , TResult> function System.Func <TSaveData, System.String > customFilenameFunction Type Parameters Name Description TSaveData TResult CreateSource(CloudStorageAccount, String, Boolean) Creates a Microsoft.WindowsAzure.Storage.Table.CloudTable with the specified name sourceName if it doesn't already exist. Declaration protected override CloudTable CreateSource(CloudStorageAccount storageAccount, string sourceName, bool isPublic = true) Parameters Type Name Description Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount The storage account to create the Microsoft.WindowsAzure.Storage.Table.CloudTable is System.String sourceName The name of the Microsoft.WindowsAzure.Storage.Table.CloudTable . System.Boolean isPublic Whether or not this Microsoft.WindowsAzure.Storage.Table.CloudTable is publicly accessible. Returns Type Description Microsoft.WindowsAzure.Storage.Table.CloudTable Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.CreateSource(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.Boolean) CreateTableEntity(TCollectionItemData) Declaration protected abstract ITableEntity CreateTableEntity(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public override void Destroy(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Destroy(TData) Destroy(TCollectionItemData) Declaration public virtual void Destroy(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Implements IDataStore<TData>.Destroy(TData) GetByKey() Retrieves the data from Azure Storage using Collection . Declaration public virtual IEnumerable<TData> GetByKey() Returns Type Description System.Collections.Generic.IEnumerable <TData> GetByKeyAndRow(Guid) Retrieves the data from Azure Storage using Collection . Declaration public virtual TData GetByKeyAndRow(Guid rsn) Parameters Type Name Description System.Guid rsn Returns Type Description TData GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetEnumerator() GetSafeSourceName(String) Declaration protected override string GetSafeSourceName(string sourceName) Parameters Type Name Description System.String sourceName Returns Type Description System.String Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.GetSafeSourceName(System.String) GetUpdatableTableEntity(TData) Declaration protected abstract TableOperation GetUpdatableTableEntity(TData data) Parameters Type Name Description TData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation GetUpdatableTableEntity(TCollectionItemData) Declaration protected abstract TableOperation GetUpdatableTableEntity(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Initialise(IStorageStoreConnectionStringFactory) Declaration protected override void Initialise(IStorageStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory) Parameters Type Name Description IStorageStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Initialise(Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory) Remove(TCollectionItemData) Will mark the data as logically (or soft). Declaration public abstract void Remove(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public override void RemoveAll() Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.RemoveAll() Implements IDataStore<TData>.RemoveAll() ReplaceValues(TableResult, TData) Extracts Microsoft.WindowsAzure.Storage.Table.TableResult.Result of the provided retrievedResult If Microsoft.WindowsAzure.Storage.Table.TableResult.Result is a IEventDataTableEntity<TEventData> then EventData is replaced with data . Otherwise Microsoft.WindowsAzure.Storage.Table.TableResult.Result is a IEntityTableEntity<TEntity> and Entity is replaced with data . Declaration protected virtual ITableEntity ReplaceValues(TableResult retrievedResult, TData data) Parameters Type Name Description Microsoft.WindowsAzure.Storage.Table.TableResult retrievedResult The existing data to update. TData data The new data to store. Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Update(TData) Update the provided data in the data store and persist the change. Declaration public override void Update(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.StorageStore<TData, Microsoft.WindowsAzure.Storage.Table.CloudTable>.Update(TData) Update(TCollectionItemData) Declaration public virtual void Update(TCollectionItemData data) Parameters Type Name Description TCollectionItemData data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable<TCollectionItemData>.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator<TCollectionItemData> IEnumerable<TCollectionItemData>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TCollectionItemData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableEntity-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.TableEntity-1.html",
    "title": "Class TableEntity<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableEntity<TData> Inheritance System.Object Microsoft.WindowsAzure.Storage.Table.TableEntity TableEntity<TData> EntityTableEntity<TEntity> EventDataTableEntity<TEventData> Inherited Members Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadEntity(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.ReadUserObject(System.Object, System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.WriteUserObject(System.Object, Microsoft.WindowsAzure.Storage.OperationContext) Microsoft.WindowsAzure.Storage.Table.TableEntity.PartitionKey Microsoft.WindowsAzure.Storage.Table.TableEntity.RowKey Microsoft.WindowsAzure.Storage.Table.TableEntity.Timestamp Microsoft.WindowsAzure.Storage.Table.TableEntity.ETag Microsoft.WindowsAzure.Storage.Table.TableEntity.DisableCompiledSerializers Microsoft.WindowsAzure.Storage.Table.TableEntity.DisablePropertyResolverCache System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public abstract class TableEntity<TData> : TableEntity, ITableEntity Type Parameters Name Description TData Properties DefaultSettings The default Newtonsoft.Json.JsonSerializerSettings to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods Deserialise(String) Deserialise the provided json from its System.String representation. Declaration protected virtual TData Deserialise(string json) Parameters Type Name Description System.String json A System.String representation of an to deserialise. Returns Type Description TData GetSerialisationSettings() Returns DefaultSettings Declaration protected virtual JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings DefaultSettings GetSerialiser() Creates a new Newtonsoft.Json.JsonSerializer using the settings from GetSerialisationSettings() . Declaration protected virtual JsonSerializer GetSerialiser() Returns Type Description Newtonsoft.Json.JsonSerializer A new instance of Newtonsoft.Json.JsonSerializer . Serialise(TData) Serialise the provided data . Declaration protected virtual string Serialise(TData data) Parameters Type Name Description TData data The being serialised. Returns Type Description System.String A System.String representation of the provided data ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.StorageStore-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.StorageStore-2.html",
    "title": "Class StorageStore<TData, TSource> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class StorageStore<TData, TSource> A System.Collections.Generic.IEnumerable<T> that uses Azure Storage for storage. Inheritance System.Object StorageStore<TData, TSource> BlobStorageStore<TData> TableStorageStore<TData, TCollectionItemData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public abstract class StorageStore<TData, TSource> : IEnumerable<TData>, IEnumerable Type Parameters Name Description TData TSource Constructors StorageStore(ILogger) Initializes a new instance of the StorageStore<TData, TSource> class using the specified container. Declaration protected StorageStore(ILogger logger) Parameters Type Name Description cdmdotnet.Logging.ILogger logger Properties AzureStorageRetryPolicy Gets the default retry policy dedicated to handling transient conditions with Windows Azure Storage. Declaration protected virtual RetryPolicy AzureStorageRetryPolicy { get; } Property Value Type Description Microsoft.Practices.TransientFaultHandling.RetryPolicy DefaultSettings The default Newtonsoft.Json.JsonSerializerSettings to use. Declaration public static JsonSerializerSettings DefaultSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public abstract Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public abstract Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . GetContainerName Declaration protected Func<string> GetContainerName { get; set; } Property Value Type Description System.Func < System.String > IsContainerPublic Declaration protected Func<bool> IsContainerPublic { get; set; } Property Value Type Description System.Func < System.Boolean > Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Provider Gets the query provider that is associated with this data source. Declaration public abstract IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. ReadableStorageAccount Declaration protected CloudStorageAccount ReadableStorageAccount { get; } Property Value Type Description Microsoft.WindowsAzure.Storage.CloudStorageAccount WritableCollection Declaration protected IList<Tuple<CloudStorageAccount, TSource>> WritableCollection { get; } Property Value Type Description System.Collections.Generic.IList < System.Tuple < Microsoft.WindowsAzure.Storage.CloudStorageAccount , TSource>> Methods Add(TData) Declaration public abstract void Add(TData data) Parameters Type Name Description TData data Add(IEnumerable<TData>) Declaration public virtual void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data CreateSource(CloudStorageAccount, String, Boolean) Creates a with the specified name sourceName if it doesn't already exist. Declaration protected abstract TSource CreateSource(CloudStorageAccount storageAccount, string sourceName, bool isPublic = true) Parameters Type Name Description Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount The storage account to create the container is System.String sourceName The name of the source. System.Boolean isPublic Whether or not this source is publicly accessible. Returns Type Description TSource Deserialise(Stream) Deserialise the provided dataStream from its System.IO.Stream representation. Declaration protected virtual TData Deserialise(Stream dataStream) Parameters Type Name Description System.IO.Stream dataStream A System.IO.Stream representation of an to deserialise. Returns Type Description TData Deserialise(String) Deserialise the provided json from its System.String representation. Declaration protected virtual TData Deserialise(string json) Parameters Type Name Description System.String json A System.String representation of an to deserialise. Returns Type Description TData Destroy(TData) Declaration public abstract void Destroy(TData data) Parameters Type Name Description TData data Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public abstract IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetSafeSourceName(String) Declaration protected virtual string GetSafeSourceName(string sourceName) Parameters Type Name Description System.String sourceName Returns Type Description System.String GetSafeSourceName(String, Boolean) Declaration protected virtual string GetSafeSourceName(string sourceName, bool lowerCaseName) Parameters Type Name Description System.String sourceName System.Boolean lowerCaseName Returns Type Description System.String GetSerialisationSettings() Returns DefaultSettings Declaration protected virtual JsonSerializerSettings GetSerialisationSettings() Returns Type Description Newtonsoft.Json.JsonSerializerSettings DefaultSettings GetSerialiser() Creates a new Newtonsoft.Json.JsonSerializer using the settings from GetSerialisationSettings() . Declaration protected virtual JsonSerializer GetSerialiser() Returns Type Description Newtonsoft.Json.JsonSerializer A new instance of Newtonsoft.Json.JsonSerializer . Initialise(IStorageStoreConnectionStringFactory) Declaration protected virtual void Initialise(IStorageStoreConnectionStringFactory storageDataStoreConnectionStringFactory) Parameters Type Name Description IStorageStoreConnectionStringFactory storageDataStoreConnectionStringFactory RemoveAll() Declaration public abstract void RemoveAll() Serialise(TData) Serialise the provided data . Declaration protected virtual Stream Serialise(TData data) Parameters Type Name Description TData data The being serialised. Returns Type Description System.IO.Stream A System.IO.Stream representation of the provided data . Update(TData) Declaration public abstract void Update(TData data) Parameters Type Name Description TData data Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.html",
    "title": "Namespace Cqrs.Azure.BlobStorage.Repositories | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Azure.BlobStorage.Repositories Classes BlobStorageRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure Blob Storage. TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure Table Storage."
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository-3.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Repositories.TableStorageRepository-3.html",
    "title": "Class TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> Provides basic repository methods for operations with an IDataStore<TData> using Azure Table Storage. Inheritance System.Object Repository <TQueryStrategy, TQueryBuilder, TData> TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> Inherited Members Repository<TQueryStrategy, TQueryBuilder, TData>.CreateDataStoreFunction Repository<TQueryStrategy, TQueryBuilder, TData>.QueryBuilder Repository<TQueryStrategy, TQueryBuilder, TData>.TelemetryHelper Repository<TQueryStrategy, TQueryBuilder, TData>.Create(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Create(IEnumerable<TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ISingleResultQuery<TQueryStrategy, TData>, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.Retrieve(ICollectionResultQuery<TQueryStrategy, TData>) Repository<TQueryStrategy, TQueryBuilder, TData>.Update(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Delete(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.DeleteAll() Repository<TQueryStrategy, TQueryBuilder, TData>.Destroy(TData) Repository<TQueryStrategy, TQueryBuilder, TData>.Load(Guid, Boolean) Repository<TQueryStrategy, TQueryBuilder, TData>.CreateQueryable(Expression<Func<TData, Boolean>>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Repositories Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> : Repository<TQueryStrategy, TQueryBuilder, TData>, IRepository<TQueryStrategy, TData> where TQueryStrategy : IQueryStrategy where TQueryBuilder : QueryBuilder<TQueryStrategy, TData> where TData : Entity, new () Type Parameters Name Description TQueryStrategy The System.Type of IQueryStrategy . TQueryBuilder The System.Type of the QueryBuilder<TQueryStrategy, TData> that will be used to build queries. TData The System.Type of data held in storage. Constructors TableStorageRepository(Func<IDataStore<TData>>, TQueryBuilder) Instantiates a new instance of TableStorageRepository<TQueryStrategy, TQueryBuilder, TData> Declaration public TableStorageRepository(Func<IDataStore<TData>> createDataStoreFunction, TQueryBuilder queryBuilder) Parameters Type Name Description System.Func < IDataStore <TData>> createDataStoreFunction TQueryBuilder queryBuilder Methods Load(Guid, Boolean) Load the TData from Azure Table Storage identified by the provided rsn . Declaration public override TData Load(Guid rsn, bool throwExceptionOnMissingEntity = true) Parameters Type Name Description System.Guid rsn The identifier if the TData to load. System.Boolean throwExceptionOnMissingEntity If true will throw an System.Exception if no data is found in storage. Returns Type Description TData Overrides Cqrs.Repositories.Repository<TQueryStrategy, TQueryBuilder, TData>.Load(System.Guid, System.Boolean)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IStorageStoreConnectionStringFactory.html",
    "title": "Interface IStorageStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IStorageStoreConnectionStringFactory Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface IStorageStoreConnectionStringFactory Methods GetReadableConnectionString() Declaration string GetReadableConnectionString() Returns Type Description System.String GetWritableConnectionStrings() Declaration IEnumerable<string> GetWritableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String >"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IEventDataTableEntity-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IEventDataTableEntity-1.html",
    "title": "Interface IEventDataTableEntity<TEventData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEventDataTableEntity<TEventData> Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface IEventDataTableEntity<TEventData> Type Parameters Name Description TEventData Properties EventData Declaration TEventData EventData { get; set; } Property Value Type Description TEventData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IEntityTableEntity-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IEntityTableEntity-1.html",
    "title": "Interface IEntityTableEntity<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IEntityTableEntity<TEntity> Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface IEntityTableEntity<TEntity> Type Parameters Name Description TEntity Properties Entity Declaration TEntity Entity { get; set; } Property Value Type Description TEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IBlobStorageStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.IBlobStorageStoreConnectionStringFactory.html",
    "title": "Interface IBlobStorageStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IBlobStorageStoreConnectionStringFactory Inherited Members IStorageStoreConnectionStringFactory.GetWritableConnectionStrings() IStorageStoreConnectionStringFactory.GetReadableConnectionString() Namespace : Cqrs.Azure.BlobStorage Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface IBlobStorageStoreConnectionStringFactory : IStorageStoreConnectionStringFactory Methods GetBaseContainerName() Declaration string GetBaseContainerName() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStore-1.html",
    "title": "Class TableStorageEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStore<TAuthenticationToken> An Azure Storage based EventStore<TAuthenticationToken> . Inheritance System.Object EventStore <TAuthenticationToken> TableStorageEventStore<TAuthenticationToken> TableStorageEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class TableStorageEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors TableStorageEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, ITableStorageStoreConnectionStringFactory, Func<ILogger, ITableStorageStoreConnectionStringFactory, Boolean, TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore>) Initializes a new instance of the TableStorageEventStore<TAuthenticationToken> class using the specified container. Declaration public TableStorageEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory, Func<ILogger, ITableStorageStoreConnectionStringFactory, bool, TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore> createRawTableStorageEventStoreFunction = null) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory System.Func < cdmdotnet.Logging.ILogger , ITableStorageStoreConnectionStringFactory , System.Boolean , TableStorageEventStore.RawTableStorageEventStore <>> createRawTableStorageEventStoreFunction Fields TableCqrsEventStoreStreamNamePattern The pattern used to generate the stream name. Declaration protected const string TableCqrsEventStoreStreamNamePattern = \"{0}.{1}\" Field Value Type Description System.String Properties CorrelationIdTableStorageStore Gets or sets the underlying TableStorageStore used specifically for Get(Guid) . Declaration protected TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore CorrelationIdTableStorageStore { get; set; } Property Value Type Description TableStorageEventStore.RawTableStorageEventStore <> TableStorageStore Gets or sets the underlying TableStorageStore used for persisting and reading IEvent<TAuthenticationToken> data. Declaration protected TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore TableStorageStore { get; set; } Property Value Type Description TableStorageEventStore.RawTableStorageEventStore <> Methods GenerateStreamName(Type, Guid) Declaration protected override string GenerateStreamName(Type aggregateRootType, Guid aggregateId) Parameters Type Name Description System.Type aggregateRootType System.Guid aggregateId Returns Type Description System.String Overrides Cqrs.Events.EventStore<TAuthenticationToken>.GenerateStreamName(System.Type, System.Guid) Get(Guid) Get all IEvent<TAuthenticationToken> instances for the given correlationId . Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId The CorrelationId of the IEvent<TAuthenticationToken> instances to retrieve. Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Gets a collection of IEvent<TAuthenticationToken> for the IAggregateRoot<TAuthenticationToken> of type aggregateRootType with the ID matching the provided aggregateId . Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Type of the IAggregateRoot<TAuthenticationToken> the IEvent<TAuthenticationToken> was raised in. System.Guid aggregateId The Id of the IAggregateRoot<TAuthenticationToken> . System.Boolean useLastEventOnly Loads only the last event IEvent<TAuthenticationToken> . System.Int32 fromVersion Load events starting from this version Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32) PersistEvent(EventData) Persist the provided eventData into storage. Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData The EventData to persist. Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStore-1.RawTableStorageEventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.TableStorageEventStore-1.RawTableStorageEventStore.html",
    "title": "Class TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore An Azure Storage based TableStorageStore<TData, TCollectionItemData> . Inheritance System.Object StorageStore < EventDataTableEntity < EventData >, Microsoft.WindowsAzure.Storage.Table.CloudTable > TableStorageStore < EventDataTableEntity < EventData >, EventData > TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStorer Inherited Members TableStorageStore<EventDataTableEntity<EventData>, EventData>.Collection TableStorageStore<EventDataTableEntity<EventData>, EventData>.Initialise(IStorageStoreConnectionStringFactory) TableStorageStore<EventDataTableEntity<EventData>, EventData>.IEnumerable<EventData>.GetEnumerator() TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetEnumerator() TableStorageStore<EventDataTableEntity<EventData>, EventData>.Expression TableStorageStore<EventDataTableEntity<EventData>, EventData>.ElementType TableStorageStore<EventDataTableEntity<EventData>, EventData>.Provider TableStorageStore<EventDataTableEntity<EventData>, EventData>.AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.CreateTableEntity(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(ITableEntity) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<EventDataTableEntity<EventData>>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<ITableEntity>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Destroy(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Add(IEnumerable<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Remove(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Destroy(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.RemoveAll() TableStorageStore<EventDataTableEntity<EventData>, EventData>.Update(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.Update(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetUpdatableTableEntity(EventData) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetUpdatableTableEntity(EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.CreateSource(CloudStorageAccount, String, Boolean) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetByKeyAndRow(Guid) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetByKey() TableStorageStore<EventDataTableEntity<EventData>, EventData>.ReplaceValues(TableResult, EventDataTableEntity<EventData>) TableStorageStore<EventDataTableEntity<EventData>, EventData>.GetSafeSourceName(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.WritableCollection StorageStore<EventDataTableEntity<EventData>, CloudTable>.ReadableStorageAccount StorageStore<EventDataTableEntity<EventData>, CloudTable>.Logger StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetContainerName StorageStore<EventDataTableEntity<EventData>, CloudTable>.IsContainerPublic StorageStore<EventDataTableEntity<EventData>, CloudTable>.DefaultSettings StorageStore<EventDataTableEntity<EventData>, CloudTable>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetEnumerator() StorageStore<EventDataTableEntity<EventData>, CloudTable>.IEnumerable.GetEnumerator() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Expression StorageStore<EventDataTableEntity<EventData>, CloudTable>.ElementType StorageStore<EventDataTableEntity<EventData>, CloudTable>.Provider StorageStore<EventDataTableEntity<EventData>, CloudTable>.Dispose() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Add(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Add(IEnumerable<EventDataTableEntity<EventData>>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Destroy(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.RemoveAll() StorageStore<EventDataTableEntity<EventData>, CloudTable>.Update(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSafeSourceName(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSafeSourceName(String, Boolean) StorageStore<EventDataTableEntity<EventData>, CloudTable>.AzureStorageRetryPolicy StorageStore<EventDataTableEntity<EventData>, CloudTable>.Deserialise(Stream) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Deserialise(String) StorageStore<EventDataTableEntity<EventData>, CloudTable>.Serialise(EventDataTableEntity<EventData>) StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSerialisationSettings() StorageStore<EventDataTableEntity<EventData>, CloudTable>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class RawTableStorageEventStore : TableStorageStore<EventDataTableEntity<EventData>, EventData>, IEnumerable<EventDataTableEntity<EventData>>, IDataStore<EventData>, IOrderedQueryable<EventData>, IQueryable<EventData>, IEnumerable<EventData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable Constructors RawTableStorageEventStore(ILogger, ITableStorageStoreConnectionStringFactory, Boolean) Initializes a new instance of the TableStorageEventStore<TAuthenticationToken>.RawTableStorageEventStore class using the specified container. Declaration public RawTableStorageEventStore(ILogger logger, ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory, bool isCorrelationIdTableStorageStore = false) Parameters Type Name Description cdmdotnet.Logging.ILogger logger ITableStorageStoreConnectionStringFactory tableStorageEventStoreConnectionStringFactory System.Boolean isCorrelationIdTableStorageStore Properties IsCorrelationIdTableStorageStore Indicates if this is a TableStorageStore<TData, TCollectionItemData> for Get(Guid) Declaration protected bool IsCorrelationIdTableStorageStore { get; set; } Property Value Type Description System.Boolean Methods CreateTableEntity(EventData) Creates a new EventDataTableEntity<TEventData> . Declaration protected override ITableEntity CreateTableEntity(EventData data) Parameters Type Name Description EventData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>, Cqrs.Events.EventData>.CreateTableEntity(Cqrs.Events.EventData) GetSafeSourceName(String) Returns Cqrs.Azure.BlobStorage.Events.TableStorageEventStore`1.RawTableStorageEventStore.TableName . Declaration protected override string GetSafeSourceName(string sourceName) Parameters Type Name Description System.String sourceName Is not used. Returns Type Description System.String Cqrs.Azure.BlobStorage.Events.TableStorageEventStore`1.RawTableStorageEventStore.TableName Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>, Cqrs.Events.EventData>.GetSafeSourceName(System.String) GetUpdatableTableEntity(EventDataTableEntity<EventData>) Declaration protected override TableOperation GetUpdatableTableEntity(EventDataTableEntity<EventData> data) Parameters Type Name Description EventDataTableEntity < EventData > data Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>, Cqrs.Events.EventData>.GetUpdatableTableEntity(Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>) GetUpdatableTableEntity(EventData) Declaration protected override TableOperation GetUpdatableTableEntity(EventData data) Parameters Type Name Description EventData data Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>, Cqrs.Events.EventData>.GetUpdatableTableEntity(Cqrs.Events.EventData) Remove(EventData) Will mark the data as logically (or soft). Declaration public override void Remove(EventData data) Parameters Type Name Description EventData data Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EventDataTableEntity<Cqrs.Events.EventData>, Cqrs.Events.EventData>.Remove(Cqrs.Events.EventData) Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStoreConnectionStringFactory.html",
    "title": "Class BlobStorageEventStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageEventStoreConnectionStringFactory Inheritance System.Object BlobStorageEventStoreConnectionStringFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageEventStoreConnectionStringFactory : IBlobStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Constructors BlobStorageEventStoreConnectionStringFactory(IConfigurationManager, ILogger) Declaration public BlobStorageEventStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields BlobStorageBaseContainerNameKey Declaration public static string BlobStorageBaseContainerNameKey Field Value Type Description System.String BlobStorageEventStoreConnectionStringKey Declaration public static string BlobStorageEventStoreConnectionStringKey Field Value Type Description System.String BlobStorageReadableEventStoreConnectionStringKey Declaration public static string BlobStorageReadableEventStoreConnectionStringKey Field Value Type Description System.String BlobStorageWritableEventStoreConnectionStringKey Declaration public static string BlobStorageWritableEventStoreConnectionStringKey Field Value Type Description System.String Properties ConfigurationManager Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetBaseContainerName() Declaration public virtual string GetBaseContainerName() Returns Type Description System.String Implements IBlobStorageStoreConnectionStringFactory.GetBaseContainerName() GetReadableConnectionString() Declaration public virtual string GetReadableConnectionString() Returns Type Description System.String Implements IStorageStoreConnectionStringFactory.GetReadableConnectionString() GetWritableConnectionStrings() Declaration public virtual IEnumerable<string> GetWritableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Implements IStorageStoreConnectionStringFactory.GetWritableConnectionStrings()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.Events.BlobStorageEventStore-1.html",
    "title": "Class BlobStorageEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BlobStorageEventStore<TAuthenticationToken> Inheritance System.Object EventStore <TAuthenticationToken> BlobStorageEventStore<TAuthenticationToken> Inherited Members EventStore<TAuthenticationToken>.CqrsEventStoreStreamNamePattern EventStore<TAuthenticationToken>.EventBuilder EventStore<TAuthenticationToken>.EventDeserialiser EventStore<TAuthenticationToken>.TelemetryHelper EventStore<TAuthenticationToken>.Logger EventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.GenerateStreamName(Type, Guid) EventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) EventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.Events Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class BlobStorageEventStore<TAuthenticationToken> : EventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors BlobStorageEventStore(IEventBuilder<TAuthenticationToken>, IEventDeserialiser<TAuthenticationToken>, ILogger, IBlobStorageStoreConnectionStringFactory) Initializes a new instance of the BlobStorageEventStore<TAuthenticationToken> class using the specified container. Declaration public BlobStorageEventStore(IEventBuilder<TAuthenticationToken> eventBuilder, IEventDeserialiser<TAuthenticationToken> eventDeserialiser, ILogger logger, IBlobStorageStoreConnectionStringFactory blobStorageEventStoreConnectionStringFactory) Parameters Type Name Description IEventBuilder <TAuthenticationToken> eventBuilder IEventDeserialiser <TAuthenticationToken> eventDeserialiser cdmdotnet.Logging.ILogger logger IBlobStorageStoreConnectionStringFactory blobStorageEventStoreConnectionStringFactory Properties BlobStorageStore Declaration protected BlobStorageEventStore<TAuthenticationToken>.RawBlobStorageEventStore BlobStorageStore { get; } Property Value Type Description BlobStorageEventStore.RawBlobStorageEventStore <> Methods Get(Guid) Declaration public override IEnumerable<EventData> Get(Guid correlationId) Parameters Type Name Description System.Guid correlationId Returns Type Description System.Collections.Generic.IEnumerable < EventData > Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Guid) Get(Type, Guid, Boolean, Int32) Declaration public override IEnumerable<IEvent<TAuthenticationToken>> Get(Type aggregateRootType, Guid aggregateId, bool useLastEventOnly = false, int fromVersion = -1) Parameters Type Name Description System.Type aggregateRootType System.Guid aggregateId System.Boolean useLastEventOnly System.Int32 fromVersion Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Overrides Cqrs.Events.EventStore<TAuthenticationToken>.Get(System.Type, System.Guid, System.Boolean, System.Int32) PersistEvent(EventData) Declaration protected override void PersistEvent(EventData eventData) Parameters Type Name Description EventData eventData Overrides Cqrs.Events.EventStore<TAuthenticationToken>.PersistEvent(Cqrs.Events.EventData)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStoreConnectionStringFactory.html",
    "title": "Class TableStorageDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStoreConnectionStringFactory A factory for getting connection strings and container names for IDataStore<TData> access. This factory supports reading and writing from separate storage accounts. Specifically you can have as many different storage accounts as you want to configure when writing. This allows for manual mirroring of data while reading from the fastest/closest location possible. Inheritance System.Object TableStorageDataStoreConnectionStringFactory TableStorageDataStoreConnectionStringFactory<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class TableStorageDataStoreConnectionStringFactory : ITableStorageDataStoreConnectionStringFactory, ITableStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Constructors TableStorageDataStoreConnectionStringFactory(IConfigurationManager, ILogger) Instantiates a new instance of TableStorageDataStoreConnectionStringFactory . Declaration public TableStorageDataStoreConnectionStringFactory(IConfigurationManager configurationManager, ILogger logger) Parameters Type Name Description IConfigurationManager configurationManager cdmdotnet.Logging.ILogger logger Fields TableStorageBaseContainerNameKey The name of the app setting in IConfigurationManager that will have the base name of the container used. Declaration public static string TableStorageBaseContainerNameKey Field Value Type Description System.String TableStorageDataStoreConnectionStringKey The name of the app setting in IConfigurationManager that will have the connection string if using a single storage account for both reads and writes. Declaration public static string TableStorageDataStoreConnectionStringKey Field Value Type Description System.String TableStorageReadableDataStoreConnectionStringKey The name of the app setting in IConfigurationManager that will have the connection string of the readable storage account if using a separate storage account for reads and writes. Declaration public static string TableStorageReadableDataStoreConnectionStringKey Field Value Type Description System.String TableStorageWritableDataStoreConnectionStringKey The name of the app setting in IConfigurationManager that will have the connection string of the writeable storage account if using a separate storage account for reads and writes. This value gets appended with a \".1\", \".2\" etc allowing you to write to as many different locations as possible. Declaration public static string TableStorageWritableDataStoreConnectionStringKey Field Value Type Description System.String Properties ConfigurationManager Gets or sets the IConfigurationManager . Declaration protected IConfigurationManager ConfigurationManager { get; } Property Value Type Description IConfigurationManager Logger Gets or sets the cdmdotnet.Logging.ILogger . Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Methods GetBaseContainerName() Returns the name of the base contain to be used. This will be the value from ConfigurationManager keyed TableStorageBaseContainerNameKey . Declaration public string GetBaseContainerName() Returns Type Description System.String Implements ITableStorageStoreConnectionStringFactory.GetBaseContainerName() GetContainerName() Returns GetBaseContainerName() . Declaration public virtual string GetContainerName() Returns Type Description System.String GetBaseContainerName() GetReadableConnectionString() Gets the readable connection string. If using a single storage account, then TableStorageDataStoreConnectionStringKey will most likely be returned. If a value for TableStorageReadableDataStoreConnectionStringKey is found, that will be returned instead. Declaration public virtual string GetReadableConnectionString() Returns Type Description System.String Implements IStorageStoreConnectionStringFactory.GetReadableConnectionString() GetTableName<TData>() Generates the name of the table for TData that matches naming rules for Azure Storage. Declaration public virtual string GetTableName<TData>() Returns Type Description System.String Type Parameters Name Description TData The System.Type of data to read or write. Implements ITableStorageDataStoreConnectionStringFactory.GetTableName<TData>() Remarks https://blogs.msdn.microsoft.com/jmstall/2014/06/12/azure-storage-naming-rules/ GetWritableConnectionStrings() Gets all writeable connection strings. If using a single storage account, then TableStorageDataStoreConnectionStringKey will most likely be returned. If a value for TableStorageWritableDataStoreConnectionStringKey is found, it will append \".1\", \".2\" etc returning any additionally found connection string values in ConfigurationManager . Declaration public virtual IEnumerable<string> GetWritableConnectionStrings() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Implements IStorageStoreConnectionStringFactory.GetWritableConnectionStrings()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.TableStorageDataStore-1.html",
    "title": "Class TableStorageDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TableStorageDataStore<TData> A TableStorageStore<TData, TCollectionItemData> that uses Azure Storage for storage. Inheritance System.Object StorageStore < EntityTableEntity <TData>, Microsoft.WindowsAzure.Storage.Table.CloudTable > TableStorageStore < EntityTableEntity <TData>, TData> TableStorageDataStore<TData> TableStorageDataStore<TData> Inherited Members TableStorageStore<EntityTableEntity<TData>, TData>.Collection TableStorageStore<EntityTableEntity<TData>, TData>.Initialise(IStorageStoreConnectionStringFactory) TableStorageStore<EntityTableEntity<TData>, TData>.IEnumerable<TData>.GetEnumerator() TableStorageStore<EntityTableEntity<TData>, TData>.GetEnumerator() TableStorageStore<EntityTableEntity<TData>, TData>.Expression TableStorageStore<EntityTableEntity<TData>, TData>.ElementType TableStorageStore<EntityTableEntity<TData>, TData>.Provider TableStorageStore<EntityTableEntity<TData>, TData>.AsyncSaveData<TSaveData, TResult>(TSaveData, Func<TSaveData, CloudTable, TResult>, Func<TSaveData, String>) TableStorageStore<EntityTableEntity<TData>, TData>.CreateTableEntity(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Add(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(ITableEntity) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<EntityTableEntity<TData>>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<ITableEntity>) TableStorageStore<EntityTableEntity<TData>, TData>.Destroy(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Add(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Add(IEnumerable<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.Remove(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Destroy(TData) TableStorageStore<EntityTableEntity<TData>, TData>.RemoveAll() TableStorageStore<EntityTableEntity<TData>, TData>.Update(TData) TableStorageStore<EntityTableEntity<TData>, TData>.Update(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(TData) TableStorageStore<EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.CreateSource(CloudStorageAccount, String, Boolean) TableStorageStore<EntityTableEntity<TData>, TData>.GetByKeyAndRow(Guid) TableStorageStore<EntityTableEntity<TData>, TData>.GetByKey() TableStorageStore<EntityTableEntity<TData>, TData>.ReplaceValues(TableResult, EntityTableEntity<TData>) TableStorageStore<EntityTableEntity<TData>, TData>.GetSafeSourceName(String) StorageStore<EntityTableEntity<TData>, CloudTable>.WritableCollection StorageStore<EntityTableEntity<TData>, CloudTable>.ReadableStorageAccount StorageStore<EntityTableEntity<TData>, CloudTable>.Logger StorageStore<EntityTableEntity<TData>, CloudTable>.GetContainerName StorageStore<EntityTableEntity<TData>, CloudTable>.IsContainerPublic StorageStore<EntityTableEntity<TData>, CloudTable>.DefaultSettings StorageStore<EntityTableEntity<TData>, CloudTable>.Initialise(IStorageStoreConnectionStringFactory) StorageStore<EntityTableEntity<TData>, CloudTable>.GetEnumerator() StorageStore<EntityTableEntity<TData>, CloudTable>.IEnumerable.GetEnumerator() StorageStore<EntityTableEntity<TData>, CloudTable>.Expression StorageStore<EntityTableEntity<TData>, CloudTable>.ElementType StorageStore<EntityTableEntity<TData>, CloudTable>.Provider StorageStore<EntityTableEntity<TData>, CloudTable>.Dispose() StorageStore<EntityTableEntity<TData>, CloudTable>.Add(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.Add(IEnumerable<EntityTableEntity<TData>>) StorageStore<EntityTableEntity<TData>, CloudTable>.Destroy(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.RemoveAll() StorageStore<EntityTableEntity<TData>, CloudTable>.Update(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.CreateSource(CloudStorageAccount, String, Boolean) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSafeSourceName(String) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSafeSourceName(String, Boolean) StorageStore<EntityTableEntity<TData>, CloudTable>.AzureStorageRetryPolicy StorageStore<EntityTableEntity<TData>, CloudTable>.Deserialise(Stream) StorageStore<EntityTableEntity<TData>, CloudTable>.Deserialise(String) StorageStore<EntityTableEntity<TData>, CloudTable>.Serialise(EntityTableEntity<TData>) StorageStore<EntityTableEntity<TData>, CloudTable>.GetSerialisationSettings() StorageStore<EntityTableEntity<TData>, CloudTable>.GetSerialiser() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public class TableStorageDataStore<TData> : TableStorageStore<EntityTableEntity<TData>, TData>, IEnumerable<EntityTableEntity<TData>>, IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData The System.Type of Microsoft.WindowsAzure.Storage.Table.TableEntity Azure Table Storage will contain. Constructors TableStorageDataStore(ILogger, ITableStorageDataStoreConnectionStringFactory) Initializes a new instance of the Cqrs.Azure.BlobStorage class using the specified container. Declaration public TableStorageDataStore(ILogger logger, ITableStorageDataStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory) Parameters Type Name Description cdmdotnet.Logging.ILogger logger ITableStorageDataStoreConnectionStringFactory tableStorageDataStoreConnectionStringFactory Methods CreateTableEntity(TData) Creates a new instance of EntityTableEntity<TEntity> populating it with the provided data . Declaration protected override ITableEntity CreateTableEntity(TData data) Parameters Type Name Description TData data The data to store. Returns Type Description Microsoft.WindowsAzure.Storage.Table.ITableEntity Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.CreateTableEntity(TData) GetUpdatableTableEntity(TData) Gets a Microsoft.WindowsAzure.Storage.Table.TableOperation that calls Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String}) read for updating. Declaration protected override TableOperation GetUpdatableTableEntity(TData data) Parameters Type Name Description TData data The data containing the Rsn property populated. Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(TData) GetUpdatableTableEntity(EntityTableEntity<TData>) Gets a Microsoft.WindowsAzure.Storage.Table.TableOperation that calls Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String}) read for updating. Declaration protected override TableOperation GetUpdatableTableEntity(EntityTableEntity<TData> data) Parameters Type Name Description EntityTableEntity <TData> data The EntityTableEntity<TEntity> containing the Entity containing the Rsn property populated. Returns Type Description Microsoft.WindowsAzure.Storage.Table.TableOperation Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.GetUpdatableTableEntity(Cqrs.Azure.BlobStorage.EntityTableEntity<TData>) Remove(TData) Will mark the data as logically (or soft). Declaration public override void Remove(TData data) Parameters Type Name Description TData data Overrides Cqrs.Azure.BlobStorage.TableStorageStore<Cqrs.Azure.BlobStorage.EntityTableEntity<TData>, TData>.Remove(TData) Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.ITableStorageDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.ITableStorageDataStoreConnectionStringFactory.html",
    "title": "Interface ITableStorageDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ITableStorageDataStoreConnectionStringFactory Inherited Members ITableStorageStoreConnectionStringFactory.GetBaseContainerName() IStorageStoreConnectionStringFactory.GetWritableConnectionStrings() IStorageStoreConnectionStringFactory.GetReadableConnectionString() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface ITableStorageDataStoreConnectionStringFactory : ITableStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Methods GetTableName<TData>() Declaration string GetTableName<TData>() Returns Type Description System.String Type Parameters Name Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.IBlobStorageDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Azure.BlobStorage.DataStores.IBlobStorageDataStoreConnectionStringFactory.html",
    "title": "Interface IBlobStorageDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IBlobStorageDataStoreConnectionStringFactory Inherited Members IBlobStorageStoreConnectionStringFactory.GetBaseContainerName() IStorageStoreConnectionStringFactory.GetWritableConnectionStrings() IStorageStoreConnectionStringFactory.GetReadableConnectionString() Namespace : Cqrs.Azure.BlobStorage.DataStores Assembly : Cqrs.Azure.BlobStorage.dll Syntax public interface IBlobStorageDataStoreConnectionStringFactory : IBlobStorageStoreConnectionStringFactory, IStorageStoreConnectionStringFactory Methods GetContainerName<TData>() Declaration string GetContainerName<TData>()where TData : Entity Returns Type Description System.String Type Parameters Name Description TData GetEntityName<TData>() Declaration string GetEntityName<TData>()where TData : Entity Returns Type Description System.String Type Parameters Name Description TData IsContainerPublic<TData>() Declaration bool IsContainerPublic<TData>()where TData : Entity Returns Type Description System.Boolean Type Parameters Name Description TData"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.html",
    "title": "Namespace Cqrs.Authentication | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Authentication Classes AuthenticationTokenHelper A helper for setting and retrieving authentication tokens of type ISingleSignOnToken , ISingleSignOnTokenWithUserRsn , ISingleSignOnTokenWithCompanyRsn or ISingleSignOnTokenWithUserRsnAndCompanyRsn . AuthenticationTokenHelper<TAuthenticationToken> A helper for setting and retrieving authentication tokens of type TAuthenticationToken BasicTokenResolver Resolves basic, known parameter types when serialising with WCF. DefaultAuthenticationTokenHelper A helper for setting and retrieving authentication tokens of type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn , SingleSignOnTokenWithUserRsnAndCompanyRsn System.Int32 , System.Guid or System.String . DefaultSingleSignOnTokenFactory A Factory for creating new authentication tokens of type SingleSignOnToken SingleSignOnToken An authentication token with expiry and an issue time information. SingleSignOnTokenFactory<TSingleSignOnToken> A factory for creating new authentication tokens of type TSingleSignOnToken . SingleSignOnTokenResolver Resolves parameter types when serialising with WCF of System.Type SingleSignOnToken , SingleSignOnTokenWithUserRsn , SingleSignOnTokenWithCompanyRsn and SingleSignOnTokenWithUserRsnAndCompanyRsn SingleSignOnTokenWithCompanyRsn This is a ISingleSignOnToken that includes an identifiable CompanyRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. SingleSignOnTokenWithUserRsn This is a ISingleSignOnToken that includes an identifiable UserRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. SingleSignOnTokenWithUserRsnAndCompanyRsn This is a ISingleSignOnTokenWithCompanyRsn and ISingleSignOnTokenWithUserRsn Interfaces IAuthenticationTokenHelper<TAuthenticationToken> A helper for setting and retrieving authentication tokens of type TAuthenticationToken . IDefaultSingleSignOnTokenFactory A Factory for creating new authentication tokens of type SingleSignOnToken ISingleSignOnToken An authentication token with expiry and an issue time information. ISingleSignOnTokenFactory<TSingleSignOnToken> A factory for creating new authentication tokens of type TSingleSignOnToken . ISingleSignOnTokenWithCompanyRsn This is a ISingleSignOnToken that includes an identifiable CompanyRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. ISingleSignOnTokenWithUserRsn This is a ISingleSignOnToken that includes an identifiable UserRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. ISingleSignOnTokenWithUserRsnAndCompanyRsn This is a ISingleSignOnTokenWithCompanyRsn and ISingleSignOnTokenWithUserRsn"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithUserRsnAndCompanyRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithUserRsnAndCompanyRsn.html",
    "title": "Class SingleSignOnTokenWithUserRsnAndCompanyRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenWithUserRsnAndCompanyRsn This is a ISingleSignOnTokenWithCompanyRsn and ISingleSignOnTokenWithUserRsn Inheritance System.Object SingleSignOnToken SingleSignOnTokenWithUserRsnAndCompanyRsn Inherited Members SingleSignOnToken.Token SingleSignOnToken.TimeOfExpiry SingleSignOnToken.DateIssued System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class SingleSignOnTokenWithUserRsnAndCompanyRsn : SingleSignOnToken, ISingleSignOnTokenWithUserRsnAndCompanyRsn, ISingleSignOnTokenWithCompanyRsn, ISingleSignOnTokenWithUserRsn, ISingleSignOnToken Properties CompanyRsn The Rsn of the company the user doing the operation is operating on. When used in a system where a single user can have access to multiple companies, this is not the company the user belongs to, but the company it is operating on. When used by an external 3rd party this is the all in context of the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] public Guid CompanyRsn { get; set; } Property Value Type Description System.Guid Implements ISingleSignOnTokenWithCompanyRsn.CompanyRsn UserRsn The Rsn of the user doing the operation. When used by an external 3rd party this is the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] public Guid UserRsn { get; set; } Property Value Type Description System.Guid Implements ISingleSignOnTokenWithUserRsn.UserRsn Methods Serialise() Returns CompanyRsn and UserRsn . Declaration public override string Serialise() Returns Type Description System.String CompanyRsn and UserRsn . Overrides SingleSignOnToken.Serialise() Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithUserRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithUserRsn.html",
    "title": "Class SingleSignOnTokenWithUserRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenWithUserRsn This is a ISingleSignOnToken that includes an identifiable UserRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. Inheritance System.Object SingleSignOnToken SingleSignOnTokenWithUserRsn Inherited Members SingleSignOnToken.Token SingleSignOnToken.TimeOfExpiry SingleSignOnToken.DateIssued System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class SingleSignOnTokenWithUserRsn : SingleSignOnToken, ISingleSignOnTokenWithUserRsn, ISingleSignOnToken Properties UserRsn The Rsn of the user doing the operation. When used by an external 3rd party this is the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] public Guid UserRsn { get; set; } Property Value Type Description System.Guid Implements ISingleSignOnTokenWithUserRsn.UserRsn Methods Serialise() Returns UserRsn . Declaration public override string Serialise() Returns Type Description System.String UserRsn . Overrides SingleSignOnToken.Serialise() Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithCompanyRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.SingleSignOnTokenWithCompanyRsn.html",
    "title": "Class SingleSignOnTokenWithCompanyRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SingleSignOnTokenWithCompanyRsn This is a ISingleSignOnToken that includes an identifiable CompanyRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. Inheritance System.Object SingleSignOnToken SingleSignOnTokenWithCompanyRsn Inherited Members SingleSignOnToken.Token SingleSignOnToken.TimeOfExpiry SingleSignOnToken.DateIssued System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class SingleSignOnTokenWithCompanyRsn : SingleSignOnToken, ISingleSignOnTokenWithCompanyRsn, ISingleSignOnToken Properties CompanyRsn The Rsn of the company the user doing the operation is operating on. When used in a system where a single user can have access to multiple companies, this is not the company the user belongs to, but the company it is operating on. When used by an external 3rd party this is the all in context of the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] public Guid CompanyRsn { get; set; } Property Value Type Description System.Guid Implements ISingleSignOnTokenWithCompanyRsn.CompanyRsn Methods Serialise() Returns CompanyRsn . Declaration public override string Serialise() Returns Type Description System.String CompanyRsn . Overrides SingleSignOnToken.Serialise() Implements ISingleSignOnToken.Serialise()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithUserRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithUserRsn.html",
    "title": "Interface ISingleSignOnTokenWithUserRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenWithUserRsn This is a ISingleSignOnToken that includes an identifiable UserRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. Inherited Members ISingleSignOnToken.Token ISingleSignOnToken.TimeOfExpiry ISingleSignOnToken.DateIssued ISingleSignOnToken.Serialise() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public interface ISingleSignOnTokenWithUserRsn : ISingleSignOnToken Properties UserRsn The Rsn of the user doing the operation. When used by an external 3rd party this is the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] Guid UserRsn { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithCompanyRsn.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenWithCompanyRsn.html",
    "title": "Interface ISingleSignOnTokenWithCompanyRsn | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenWithCompanyRsn This is a ISingleSignOnToken that includes an identifiable CompanyRsn to optimise the hits of the IDataStore<TData> by including data you most likely need. As such, if not used correctly, this can expose identifiable information. It is suggested the service layer populates this before sending commands as part of authorisation/authentication. Inherited Members ISingleSignOnToken.Token ISingleSignOnToken.TimeOfExpiry ISingleSignOnToken.DateIssued ISingleSignOnToken.Serialise() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public interface ISingleSignOnTokenWithCompanyRsn : ISingleSignOnToken Properties CompanyRsn The Rsn of the company the user doing the operation is operating on. When used in a system where a single user can have access to multiple companies, this is not the company the user belongs to, but the company it is operating on. When used by an external 3rd party this is the all in context of the person being impersonated, not the 3rd party system itself. Declaration [Required] [DataMember] Guid CompanyRsn { get; set; } Property Value Type Description System.Guid"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenFactory-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnTokenFactory-1.html",
    "title": "Interface ISingleSignOnTokenFactory<TSingleSignOnToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnTokenFactory<TSingleSignOnToken> A factory for creating new authentication tokens of type TSingleSignOnToken . Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax [ServiceContract(Namespace = \"https://getcqrs.net/SingleSignOn/TokenFactory\")] public interface ISingleSignOnTokenFactory<TSingleSignOnToken> where TSingleSignOnToken : ISingleSignOnToken, new () Type Parameters Name Description TSingleSignOnToken The System.Type of ISingleSignOnToken . Methods CreateNew(Int32) Create a new TSingleSignOnToken . Declaration [OperationContract] TSingleSignOnToken CreateNew(int timeoutInMinutes = 360) Parameters Type Name Description System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow Returns Type Description TSingleSignOnToken RenewTokenExpiry(TSingleSignOnToken, Int32) Renew the value of TimeOfExpiry . Declaration [OperationContract] TSingleSignOnToken RenewTokenExpiry(TSingleSignOnToken token, int timeoutInMinutes = 360) Parameters Type Name Description TSingleSignOnToken token The ISingleSignOnToken to renew. System.Int32 timeoutInMinutes The amount of time in minutes to set the TimeOfExpiry to. This is from System.DateTime.UtcNow Returns Type Description TSingleSignOnToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnToken.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.ISingleSignOnToken.html",
    "title": "Interface ISingleSignOnToken | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ISingleSignOnToken An authentication token with expiry and an issue time information. Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public interface ISingleSignOnToken Properties DateIssued The System.DateTime this token was issued. Declaration [Required] [DataMember] DateTime DateIssued { get; set; } Property Value Type Description System.DateTime TimeOfExpiry The System.DateTime this token should expire. Declaration [Required] [DataMember] DateTime TimeOfExpiry { get; set; } Property Value Type Description System.DateTime Token The authentication token. Declaration [Required] [DataMember] string Token { get; set; } Property Value Type Description System.String Methods Serialise() Serialises this token to a string. Declaration string Serialise() Returns Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.BasicTokenResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.BasicTokenResolver.html",
    "title": "Class BasicTokenResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class BasicTokenResolver Resolves basic, known parameter types when serialising with WCF. Inheritance System.Object BasicTokenResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class BasicTokenResolver : IServiceParameterResolver Methods ResolveName(String, String, Type, DataContractResolver) Returns the System.Type if the typeName is resolvable or if it is of type System.Guid , System.Nullable<T> , System.Int32 , System.Nullable<T> and System.String Declaration public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver) Parameters Type Name Description System.String typeName System.String typeNamespace System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver Returns Type Description System.Type Implements IServiceParameterResolver.ResolveName(String, String, Type, DataContractResolver) TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString) Indicates if the provided dataContractType is of type System.Guid , System.Nullable<T> , System.Int32 , System.Nullable<T> , System.String OR if it is other resolvable. Declaration public virtual bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace) Parameters Type Name Description System.Type dataContractType System.Type declaredType System.Runtime.Serialization.DataContractResolver knownTypeResolver System.Xml.XmlDictionaryString typeName System.Xml.XmlDictionaryString typeNamespace Returns Type Description System.Boolean Implements IServiceParameterResolver.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.AuthenticationTokenHelper.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.AuthenticationTokenHelper.html",
    "title": "Class AuthenticationTokenHelper | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AuthenticationTokenHelper A helper for setting and retrieving authentication tokens of type ISingleSignOnToken , ISingleSignOnTokenWithUserRsn , ISingleSignOnTokenWithCompanyRsn or ISingleSignOnTokenWithUserRsnAndCompanyRsn . Inheritance System.Object AuthenticationTokenHelper < ISingleSignOnToken > AuthenticationTokenHelper Inherited Members AuthenticationTokenHelper<ISingleSignOnToken>.CacheKey AuthenticationTokenHelper<ISingleSignOnToken>.Cache AuthenticationTokenHelper<ISingleSignOnToken>.SetAuthenticationToken(ISingleSignOnToken) AuthenticationTokenHelper<ISingleSignOnToken>.GetAuthenticationToken() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class AuthenticationTokenHelper : AuthenticationTokenHelper<ISingleSignOnToken>, IAuthenticationTokenHelper<ISingleSignOnToken>, IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsn>, IAuthenticationTokenHelper<ISingleSignOnTokenWithCompanyRsn>, IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsnAndCompanyRsn> Constructors AuthenticationTokenHelper(IContextItemCollectionFactory) Instantiate a new instance of AuthenticationTokenHelper Declaration public AuthenticationTokenHelper(IContextItemCollectionFactory factory) Parameters Type Name Description cdmdotnet.StateManagement.IContextItemCollectionFactory factory Methods SetAuthenticationToken(ISingleSignOnTokenWithCompanyRsn) Set the provided token for the current context/request. Declaration public ISingleSignOnTokenWithCompanyRsn SetAuthenticationToken(ISingleSignOnTokenWithCompanyRsn token) Parameters Type Name Description ISingleSignOnTokenWithCompanyRsn token Returns Type Description ISingleSignOnTokenWithCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(ISingleSignOnTokenWithUserRsn) Set the provided token for the current context/request. Declaration public ISingleSignOnTokenWithUserRsn SetAuthenticationToken(ISingleSignOnTokenWithUserRsn token) Parameters Type Name Description ISingleSignOnTokenWithUserRsn token Returns Type Description ISingleSignOnTokenWithUserRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) SetAuthenticationToken(ISingleSignOnTokenWithUserRsnAndCompanyRsn) Set the provided token for the current context/request. Declaration public ISingleSignOnTokenWithUserRsnAndCompanyRsn SetAuthenticationToken(ISingleSignOnTokenWithUserRsnAndCompanyRsn token) Parameters Type Name Description ISingleSignOnTokenWithUserRsnAndCompanyRsn token Returns Type Description ISingleSignOnTokenWithUserRsnAndCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken) Explicit Interface Implementations IAuthenticationTokenHelper<ISingleSignOnTokenWithCompanyRsn>.GetAuthenticationToken() Get the current ISingleSignOnTokenWithCompanyRsn for the current context/request. Declaration ISingleSignOnTokenWithCompanyRsn IAuthenticationTokenHelper<ISingleSignOnTokenWithCompanyRsn>.GetAuthenticationToken() Returns Type Description ISingleSignOnTokenWithCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsn>.GetAuthenticationToken() Get the current ISingleSignOnTokenWithUserRsn for the current context/request. Declaration ISingleSignOnTokenWithUserRsn IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsn>.GetAuthenticationToken() Returns Type Description ISingleSignOnTokenWithUserRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsnAndCompanyRsn>.GetAuthenticationToken() Get the current ISingleSignOnTokenWithUserRsnAndCompanyRsn for the current context/request. Declaration ISingleSignOnTokenWithUserRsnAndCompanyRsn IAuthenticationTokenHelper<ISingleSignOnTokenWithUserRsnAndCompanyRsn>.GetAuthenticationToken() Returns Type Description ISingleSignOnTokenWithUserRsnAndCompanyRsn Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Authentication.AuthenticationTokenHelper-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Authentication.AuthenticationTokenHelper-1.html",
    "title": "Class AuthenticationTokenHelper<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AuthenticationTokenHelper<TAuthenticationToken> A helper for setting and retrieving authentication tokens of type TAuthenticationToken Inheritance System.Object AuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper DefaultAuthenticationTokenHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Authentication Assembly : Cqrs.dll Syntax public class AuthenticationTokenHelper<TAuthenticationToken> : IAuthenticationTokenHelper<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors AuthenticationTokenHelper(IContextItemCollectionFactory) Instantiate a new instance of AuthenticationTokenHelper<TAuthenticationToken> Declaration public AuthenticationTokenHelper(IContextItemCollectionFactory factory) Parameters Type Name Description cdmdotnet.StateManagement.IContextItemCollectionFactory factory Fields CacheKey The key used to store the authentication token in the Cache . Declaration protected string CacheKey Field Value Type Description System.String Properties Cache Get or set the Cache. Declaration protected IContextItemCollection Cache { get; } Property Value Type Description cdmdotnet.StateManagement.IContextItemCollection Methods GetAuthenticationToken() Get the current TAuthenticationToken for the current context/request. Declaration public TAuthenticationToken GetAuthenticationToken() Returns Type Description TAuthenticationToken Implements IAuthenticationTokenHelper<TAuthenticationToken>.GetAuthenticationToken() SetAuthenticationToken(TAuthenticationToken) Set the provided token for the current context/request. Declaration public TAuthenticationToken SetAuthenticationToken(TAuthenticationToken token) Parameters Type Name Description TAuthenticationToken token Returns Type Description TAuthenticationToken Implements IAuthenticationTokenHelper<TAuthenticationToken>.SetAuthenticationToken(TAuthenticationToken)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit Classes AkkaUnitTests A series of tests on Akka.net"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.HelloWorldSaid.html",
    "title": "Class HelloWorldSaid | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldSaid Someone said \"HelloWorld\" Inheritance System.Object HelloWorldSaid Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events Assembly : Cqrs.Akka.Tests.Unit.dll Syntax [Serializable] public class HelloWorldSaid : IEvent<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.HelloWorldRepliedTo.html",
    "title": "Class HelloWorldRepliedTo | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldRepliedTo Someone replied to someone saying \"HelloWorld\" Inheritance System.Object HelloWorldRepliedTo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events Assembly : Cqrs.Akka.Tests.Unit.dll Syntax [Serializable] public class HelloWorldRepliedTo : IEvent<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Events.Handlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Events.Handlers Classes ConversationEndedEventHandler Handles the ConversationEnded . HelloWorldRepliedToEventHandler Handles the HelloWorldRepliedTo . HelloWorldRepliedToEventHandlerActor An Akka.Net based IEventHandler that handles the HelloWorldRepliedTo . HelloWorldRepliedToSendEndConversationCommandEventHandler Handles the HelloWorldRepliedTo and sends a EndConversationCommand . HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor An Akka.Net based IEventHandler that handles the HelloWorldRepliedTo . HelloWorldSaidEventHandler Handles the HelloWorldSaid ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldSaidEventHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.HelloWorldSaidEventHandler.html",
    "title": "Class HelloWorldSaidEventHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorldSaidEventHandler Handles the HelloWorldSaid . Inheritance System.Object HelloWorldSaidEventHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class HelloWorldSaidEventHandler : IEventHandler<Guid, HelloWorldSaid>, IMessageHandler<HelloWorldSaid>, IEventHandler, IHandler Constructors HelloWorldSaidEventHandler(IAkkaCommandPublisher<Guid>) Instantiates a new instance of HelloWorldSaidEventHandler . Declaration public HelloWorldSaidEventHandler(IAkkaCommandPublisher<Guid> commandBus) Parameters Type Name Description IAkkaCommandPublisher < System.Guid > commandBus Properties CommandBus Publish any ICommand<TAuthenticationToken> instances that you want to send with this. Declaration protected ICommandPublisher<Guid> CommandBus { get; } Property Value Type Description ICommandPublisher < System.Guid > Methods Handle(HelloWorldSaid) Responds to the provided message . Declaration public void Handle(HelloWorldSaid message) Parameters Type Name Description HelloWorldSaid message The ReplyToHelloWorldCommand to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.ConversationEndedEventHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.Handlers.ConversationEndedEventHandler.html",
    "title": "Class ConversationEndedEventHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConversationEndedEventHandler Handles the ConversationEnded . Inheritance System.Object ConversationEndedEventHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class ConversationEndedEventHandler : IEventHandler<Guid, ConversationEnded>, IMessageHandler<ConversationEnded>, IEventHandler, IHandler Constructors ConversationEndedEventHandler(IAkkaCommandPublisher<Guid>) Instantiates a new instance of ConversationEndedEventHandler . Declaration public ConversationEndedEventHandler(IAkkaCommandPublisher<Guid> commandBus) Parameters Type Name Description IAkkaCommandPublisher < System.Guid > commandBus Properties CommandBus Publish any ICommand<TAuthenticationToken> instances that you want to send with this. Declaration protected ICommandPublisher<Guid> CommandBus { get; } Property Value Type Description ICommandPublisher < System.Guid > Methods Handle(ConversationEnded) Responds to the provided message . Declaration public void Handle(ConversationEnded message) Parameters Type Name Description ConversationEnded message The ConversationEnded to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.ConversationEnded.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Events.ConversationEnded.html",
    "title": "Class ConversationEnded | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ConversationEnded The conversation has ended. Inheritance System.Object ConversationEnded Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Events Assembly : Cqrs.Akka.Tests.Unit.dll Syntax [Serializable] public class ConversationEnded : IEvent<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The ID of the IEvent<TAuthenticationToken> Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements IEvent<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework TimeStamp The date and time the event was raised or published. Declaration [DataMember] public DateTimeOffset TimeStamp { get; set; } Property Value Type Description System.DateTimeOffset Implements IEvent<TAuthenticationToken>.TimeStamp Version The version of the IEvent<TAuthenticationToken> Declaration [DataMember] public int Version { get; set; } Property Value Type Description System.Int32 Implements IEvent<TAuthenticationToken>.Version"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Commands | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Commands Classes EndConversationCommand Instruct the system to end the Conversation. ReplyToHelloWorldCommand Someone wants to reply to someone saying \"Hello World\". SayHelloWorldCommand Someone wants to say \"Hello World\". UpdateCompletedConversationReportCommand Instruct the system to update the Completed Conversation report."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.UpdateCompletedConversationReportCommand.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.UpdateCompletedConversationReportCommand.html",
    "title": "Class UpdateCompletedConversationReportCommand | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class UpdateCompletedConversationReportCommand Instruct the system to update the Completed Conversation report. Inheritance System.Object UpdateCompletedConversationReportCommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands Assembly : Cqrs.Akka.Tests.Unit.dll Syntax [Serializable] public class UpdateCompletedConversationReportCommand : ICommand<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.html",
    "title": "Namespace Cqrs.Akka.Tests.Unit.Commands.Handlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Tests.Unit.Commands.Handlers Classes EndConversationCommandHandler Handles the EndConversationCommand . ReplyToHelloWorldCommandHandler Handles the ReplyToHelloWorldCommand . SayHelloWorldCommandHandler Handles the SayHelloWorldCommand . UpdateCompletedConversationReportCommandHandler Handles the UpdateCompletedConversationReportCommand ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.UpdateCompletedConversationReportCommandHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.UpdateCompletedConversationReportCommandHandler.html",
    "title": "Class UpdateCompletedConversationReportCommandHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class UpdateCompletedConversationReportCommandHandler Handles the UpdateCompletedConversationReportCommand . Inheritance System.Object UpdateCompletedConversationReportCommandHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class UpdateCompletedConversationReportCommandHandler : ICommandHandler<Guid, UpdateCompletedConversationReportCommand>, IMessageHandler<UpdateCompletedConversationReportCommand>, ICommandHandle, IHandler Constructors UpdateCompletedConversationReportCommandHandler(IAkkaAggregateResolver) Instantiates the SayHelloWorldCommandHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public UpdateCompletedConversationReportCommandHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(UpdateCompletedConversationReportCommand) Responds to the provided command . Declaration public void Handle(UpdateCompletedConversationReportCommand command) Parameters Type Name Description UpdateCompletedConversationReportCommand command The UpdateCompletedConversationReportCommand to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.EndConversationCommandHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.Handlers.EndConversationCommandHandler.html",
    "title": "Class EndConversationCommandHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EndConversationCommandHandler Handles the EndConversationCommand . Inheritance System.Object EndConversationCommandHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands.Handlers Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class EndConversationCommandHandler : ICommandHandler<Guid, EndConversationCommand>, IMessageHandler<EndConversationCommand>, ICommandHandle, IHandler Constructors EndConversationCommandHandler(IAkkaAggregateResolver) Instantiates the EndConversationCommandHandler class registering any Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) required. Declaration public EndConversationCommandHandler(IAkkaAggregateResolver aggregateResolver) Parameters Type Name Description IAkkaAggregateResolver aggregateResolver Properties AggregateResolver Resolves Akka.Net actor based IAggregateRoot<TAuthenticationToken> Declaration protected IAkkaAggregateResolver AggregateResolver { get; } Property Value Type Description IAkkaAggregateResolver Methods Handle(EndConversationCommand) Responds to the provided command . Declaration public void Handle(EndConversationCommand command) Parameters Type Name Description EndConversationCommand command The EndConversationCommand to respond to or \"handle\" Implements IMessageHandler<TMessage>.Handle(TMessage)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Commands.EndConversationCommand.html",
    "title": "Class EndConversationCommand | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class EndConversationCommand Instruct the system to end the Conversation. Inheritance System.Object EndConversationCommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Commands Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class EndConversationCommand : ICommand<Guid>, IMessageWithAuthenticationToken<Guid>, IMessage Properties AuthenticationToken The authentication token of the entity that triggered the event to be raised. Declaration [DataMember] public Guid AuthenticationToken { get; set; } Property Value Type Description System.Guid Implements IMessageWithAuthenticationToken<TAuthenticationToken>.AuthenticationToken CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration [DataMember] public Guid CorrelationId { get; set; } Property Value Type Description System.Guid Implements IMessage.CorrelationId ExpectedVersion The expected version number the targeted IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> is expected to be. Declaration [DataMember] public int ExpectedVersion { get; set; } Property Value Type Description System.Int32 Implements ICommand<TAuthenticationToken>.ExpectedVersion Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration [DataMember] public IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMessage.Frameworks Id The identifier of the command itself. In some cases this may be the IAggregateRoot<TAuthenticationToken> or ISaga<TAuthenticationToken> this command targets. Declaration [DataMember] public Guid Id { get; set; } Property Value Type Description System.Guid Implements ICommand<TAuthenticationToken>.Id OriginatingFramework The originating framework this message was sent from. Declaration [DataMember] public string OriginatingFramework { get; set; } Property Value Type Description System.String Implements IMessage.OriginatingFramework"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Tests.Unit.Aggregates.HelloWorld.html",
    "title": "Class HelloWorld | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class HelloWorld An Akka.Net actor based IAggregateRoot<TAuthenticationToken> that represents a conversation. Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaAggregateRoot < System.Guid > HelloWorld Inherited Members AkkaAggregateRoot<Guid>.UnitOfWork AkkaAggregateRoot<Guid>.Repository AkkaAggregateRoot<Guid>.Logger AkkaAggregateRoot<Guid>.CorrelationIdHelper AkkaAggregateRoot<Guid>.AuthenticationTokenHelper AkkaAggregateRoot<Guid>.Id AkkaAggregateRoot<Guid>.Version AkkaAggregateRoot<Guid>.PreStart() AkkaAggregateRoot<Guid>.Execute<TCommand>(Action<TCommand>, TCommand) AkkaAggregateRoot<Guid>.GetUncommittedChanges() AkkaAggregateRoot<Guid>.MarkChangesAsCommitted() AkkaAggregateRoot<Guid>.LoadFromHistory(IEnumerable<IEvent<Guid>>) AkkaAggregateRoot<Guid>.ApplyChange(IEvent<Guid>) Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Tests.Unit.Aggregates Assembly : Cqrs.Akka.Tests.Unit.dll Syntax public class HelloWorld : AkkaAggregateRoot<Guid>, IInternalActor, IInitializableActor, IAggregateRoot<Guid> Constructors HelloWorld(IDependencyResolver, ILogger, Guid) Instantiates a new instance of HelloWorld . Declaration public HelloWorld(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger System.Guid rsn Properties DependencyResolver The IDependencyResolver that resolves things. Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver IsLogicallyDeleted Indicates if this ISaga<TAuthenticationToken> has been deleted. Declaration public bool IsLogicallyDeleted { get; set; } Property Value Type Description System.Boolean Rsn The Id . Declaration public Guid Rsn { get; } Property Value Type Description System.Guid Methods EndConversation() Raises a ConversationEnded . Declaration public virtual void EndConversation() EndConversation(EndConversationCommand) Raises a ConversationEnded . Declaration public virtual void EndConversation(EndConversationCommand command) Parameters Type Name Description EndConversationCommand command ReplyToHelloWorld() Raises a HelloWorldRepliedTo . Declaration public virtual void ReplyToHelloWorld() ReplyToHelloWorld(ReplyToHelloWorldCommand) Raises a HelloWorldRepliedTo . Declaration public virtual void ReplyToHelloWorld(ReplyToHelloWorldCommand command) Parameters Type Name Description ReplyToHelloWorldCommand command SayHello() Raises a HelloWorldSaid . Declaration public virtual void SayHello() SayHello(SayHelloWorldCommand) Raises a HelloWorldSaid . Declaration public virtual void SayHello(SayHelloWorldCommand command) Parameters Type Name Description SayHelloWorldCommand command"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.html",
    "title": "Namespace Cqrs.Akka.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Events Classes AkkaEventBus<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus. AkkaEventBusProxy<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> to the Akka.Actor.IActorRef which acts as a single point of all handler resolutions. AkkaEventBusProxy<TAuthenticationToken>.BusActor AkkaEventHandler<TAuthenticationToken> Interfaces IAkkaEventPublisher<TAuthenticationToken> An IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus. IAkkaEventPublisherProxy<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the IEvent<TAuthenticationToken> on the public event bus."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventHandler-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventHandler-1.html",
    "title": "Class AkkaEventHandler<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaEventHandler<TAuthenticationToken> Inheritance System.Object Akka.Actor.ActorBase Akka.Actor.UntypedActor Akka.Actor.ReceiveActor AkkaEventHandler<TAuthenticationToken> HelloWorldRepliedToEventHandlerActor HelloWorldRepliedToSendEndConversationCommandEventHandler.Actor Inherited Members Akka.Actor.ReceiveActor.Akka.Actor.Internal.IInitializableActor.Init() Akka.Actor.ReceiveActor.OnReceive(System.Object) Akka.Actor.ReceiveActor.Become(System.Action) Akka.Actor.ReceiveActor.BecomeStacked(System.Action) Akka.Actor.ReceiveActor.Become(System.Action, System.Boolean) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Threading.Tasks.Task>) Akka.Actor.ReceiveActor.Receive<T>(System.Action<T>, System.Predicate<T>) Akka.Actor.ReceiveActor.Receive<T>(System.Predicate<T>, System.Action<T>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Action<System.Object>, System.Predicate<System.Object>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Predicate<System.Object>, System.Action<System.Object>) Akka.Actor.ReceiveActor.Receive<T>(System.Func<T, System.Boolean>) Akka.Actor.ReceiveActor.Receive(System.Type, System.Func<System.Object, System.Boolean>) Akka.Actor.ReceiveActor.ReceiveAny(System.Action<System.Object>) Akka.Actor.UntypedActor.Receive(System.Object) Akka.Actor.UntypedActor.RunTask(System.Action) Akka.Actor.UntypedActor.RunTask(System.Func<System.Threading.Tasks.Task>) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive, System.Boolean) Akka.Actor.UntypedActor.Become(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.BecomeStacked(Akka.Actor.UntypedReceive) Akka.Actor.UntypedActor.Context Akka.Actor.ActorBase.AroundReceive(Akka.Actor.Receive, System.Object) Akka.Actor.ActorBase.Unhandled(System.Object) Akka.Actor.ActorBase.Become(Akka.Actor.Receive, System.Boolean) Akka.Actor.ActorBase.Become(Akka.Actor.Receive) Akka.Actor.ActorBase.BecomeStacked(Akka.Actor.Receive) Akka.Actor.ActorBase.UnbecomeStacked() Akka.Actor.ActorBase.Unbecome() Akka.Actor.ActorBase.SetReceiveTimeout(System.Nullable<System.TimeSpan>) Akka.Actor.ActorBase.SupervisorStrategy() Akka.Actor.ActorBase.AroundPreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.AroundPreStart() Akka.Actor.ActorBase.PreStart() Akka.Actor.ActorBase.AroundPostRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PreRestart(System.Exception, System.Object) Akka.Actor.ActorBase.PostRestart(System.Exception) Akka.Actor.ActorBase.AroundPostStop() Akka.Actor.ActorBase.PostStop() Akka.Actor.ActorBase.Sender Akka.Actor.ActorBase.Self Akka.Actor.ActorBase.Akka.Actor.IInternalActor.ActorContext Akka.Actor.ActorBase.EmptyReceive System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public abstract class AkkaEventHandler<TAuthenticationToken> : ReceiveActor, IInternalActor, IInitializableActor Type Parameters Name Description TAuthenticationToken Constructors AkkaEventHandler(ILogger, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration protected AkkaEventHandler(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description cdmdotnet.Logging.ILogger logger cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Logger Declaration protected ILogger Logger { get; set; } Property Value Type Description cdmdotnet.Logging.ILogger Methods Execute<TEvent>(Action<TEvent>, TEvent) Declaration protected virtual void Execute<TEvent>(Action<TEvent> handler, TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Action <TEvent> handler TEvent event Type Parameters Name Description TEvent"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBusProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Events.AkkaEventBusProxy-1.html",
    "title": "Class AkkaEventBusProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaEventBusProxy<TAuthenticationToken> A IEventPublisher<TAuthenticationToken> that proxies IEvent<TAuthenticationToken> to the Akka.Actor.IActorRef which acts as a single point of all handler resolutions. Inheritance System.Object AkkaEventBusProxy<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Events Assembly : Cqrs.Akka.dll Syntax public class AkkaEventBusProxy<TAuthenticationToken> : IAkkaEventPublisherProxy<TAuthenticationToken>, IEventPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AkkaEventBusProxy(IDependencyResolver, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration public AkkaEventBusProxy(IDependencyResolver dependencyResolver, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper EventHandlerResolver Declaration protected IActorRef EventHandlerResolver { get; } Property Value Type Description Akka.Actor.IActorRef Methods Publish<TEvent>(TEvent) Declaration public virtual void Publish<TEvent>(TEvent event)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description TEvent event Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(TEvent) Publish<TEvent>(IEnumerable<TEvent>) Declaration public virtual void Publish<TEvent>(IEnumerable<TEvent> events)where TEvent : IEvent<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TEvent> events Type Parameters Name Description TEvent Implements IEventPublisher<TAuthenticationToken>.Publish<TEvent>(IEnumerable<TEvent>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.html",
    "title": "Namespace Cqrs.Akka.Domain | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Domain Classes AkkaAggregateRepository<TAuthenticationToken> AkkaAggregateRoot<TAuthenticationToken> AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> AkkaSaga<TAuthenticationToken> AkkaSagaProxy<TAuthenticationToken, TSaga> AkkaSagaRepository<TAuthenticationToken> Interfaces IAkkaAggregateRepository<TAuthenticationToken> IAkkaAggregateResolver IAkkaAggregateRootProxy<TAggregate> IAkkaSagaProxy<TSaga> IAkkaSagaRepository<TAuthenticationToken> IAkkaSagaResolver"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaSagaResolver.html",
    "title": "Interface IAkkaSagaResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaSagaResolver Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaSagaResolver Methods ResolveActor<T>() Declaration IActorRef ResolveActor<T>() Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description T ResolveActor<TSaga, TAuthenticationToken>(Guid) Declaration IActorRef ResolveActor<TSaga, TAuthenticationToken>(Guid rsn)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid rsn Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description TSaga TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateRootProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateRootProxy-1.html",
    "title": "Interface IAkkaAggregateRootProxy<TAggregate> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaAggregateRootProxy<TAggregate> Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaAggregateRootProxy<out TAggregate> Type Parameters Name Description TAggregate Properties ActorReference Declaration IActorRef ActorReference { get; } Property Value Type Description Akka.Actor.IActorRef Aggregate Declaration TAggregate Aggregate { get; } Property Value Type Description TAggregate"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.IAkkaAggregateResolver.html",
    "title": "Interface IAkkaAggregateResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaAggregateResolver Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public interface IAkkaAggregateResolver Methods ResolveActor<T>() Declaration IActorRef ResolveActor<T>() Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description T ResolveActor<TAggregate, TAuthenticationToken>(Guid) Declaration IActorRef ResolveActor<TAggregate, TAuthenticationToken>(Guid rsn)where TAggregate : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid rsn Returns Type Description Akka.Actor.IActorRef Type Parameters Name Description TAggregate TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaSagaVersion.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaSagaVersion.html",
    "title": "Class GetAkkaSagaVersion | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GetAkkaSagaVersion Get the Version from the Akka.net system. Inheritance System.Object GetAkkaSagaVersion Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain.Commands Assembly : Cqrs.Akka.dll Syntax public class GetAkkaSagaVersion"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaSagaId.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.Commands.GetAkkaSagaId.html",
    "title": "Class GetAkkaSagaId | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class GetAkkaSagaId Get the Id from the Akka.net system. Inheritance System.Object GetAkkaSagaId Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain.Commands Assembly : Cqrs.Akka.dll Syntax public class GetAkkaSagaId"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSagaRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSagaRepository-1.html",
    "title": "Class AkkaSagaRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaSagaRepository<TAuthenticationToken> Inheritance System.Object SagaRepository <TAuthenticationToken> AkkaSagaRepository<TAuthenticationToken> Inherited Members SagaRepository<TAuthenticationToken>.EventStore SagaRepository<TAuthenticationToken>.Publisher SagaRepository<TAuthenticationToken>.SagaFactory SagaRepository<TAuthenticationToken>.CorrelationIdHelper SagaRepository<TAuthenticationToken>.Save<TSaga>(TSaga, Nullable<Int32>) SagaRepository<TAuthenticationToken>.Get<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) SagaRepository<TAuthenticationToken>.LoadSaga<TSaga>(Guid, IList<ISagaEvent<TAuthenticationToken>>) SagaRepository<TAuthenticationToken>.LoadSagaHistory<TSaga>(TSaga, IList<ISagaEvent<TAuthenticationToken>>, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public class AkkaSagaRepository<TAuthenticationToken> : SagaRepository<TAuthenticationToken>, IAkkaSagaRepository<TAuthenticationToken>, ISagaRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AkkaSagaRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken>) Declaration public AkkaSagaRepository(IAggregateFactory aggregateFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken> eventPublisher) Parameters Type Name Description IAggregateFactory aggregateFactory IEventStore <TAuthenticationToken> eventStore IEventPublisher <TAuthenticationToken> publisher cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAkkaEventPublisherProxy <TAuthenticationToken> eventPublisher Properties EventPublisher Declaration protected IAkkaEventPublisherProxy<TAuthenticationToken> EventPublisher { get; } Property Value Type Description IAkkaEventPublisherProxy <TAuthenticationToken> Methods CreateSaga<TSaga>(Guid) Declaration protected override TSaga CreateSaga<TSaga>(Guid id)where TSaga : ISaga<TAuthenticationToken> Parameters Type Name Description System.Guid id Returns Type Description TSaga Type Parameters Name Description TSaga Overrides Cqrs.Domain.SagaRepository<TAuthenticationToken>.CreateSaga<TSaga>(System.Guid) PublishEvent(ISagaEvent<TAuthenticationToken>) Declaration protected override void PublishEvent(ISagaEvent<TAuthenticationToken> event) Parameters Type Name Description ISagaEvent <TAuthenticationToken> event Overrides Cqrs.Domain.SagaRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.ISagaEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSagaProxy-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaSagaProxy-2.html",
    "title": "Class AkkaSagaProxy<TAuthenticationToken, TSaga> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaSagaProxy<TAuthenticationToken, TSaga> Inheritance System.Object AkkaSagaProxy<TAuthenticationToken, TSaga> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public class AkkaSagaProxy<TAuthenticationToken, TSaga> : IAkkaSagaProxy<TSaga>, ISaga<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TSaga Properties ActorReference Declaration public IActorRef ActorReference { get; } Property Value Type Description Akka.Actor.IActorRef Implements IAkkaSagaProxy<TSaga>.ActorReference Id Declaration public virtual Guid Id { get; } Property Value Type Description System.Guid Implements ISaga<TAuthenticationToken>.Id Saga Declaration public TSaga Saga { get; protected set; } Property Value Type Description TSaga Implements IAkkaSagaProxy<TSaga>.Saga Version Declaration public virtual int Version { get; } Property Value Type Description System.Int32 Implements ISaga<TAuthenticationToken>.Version Methods GetUncommittedChanges() Declaration public virtual IEnumerable<ISagaEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> Implements ISaga<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) Declaration public virtual void LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISagaEvent <TAuthenticationToken>> history Implements ISaga<TAuthenticationToken>.LoadFromHistory(IEnumerable<ISagaEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Declaration public virtual void MarkChangesAsCommitted() Implements ISaga<TAuthenticationToken>.MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRootProxy-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRootProxy-2.html",
    "title": "Class AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> Inheritance System.Object AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public class AkkaAggregateRootProxy<TAuthenticationToken, TAggregateRoot> : IAkkaAggregateRootProxy<TAggregateRoot>, IAggregateRoot<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken TAggregateRoot Properties ActorReference Declaration public IActorRef ActorReference { get; } Property Value Type Description Akka.Actor.IActorRef Implements IAkkaAggregateRootProxy<TAggregate>.ActorReference Aggregate Declaration public TAggregateRoot Aggregate { get; protected set; } Property Value Type Description TAggregateRoot Implements IAkkaAggregateRootProxy<TAggregate>.Aggregate Id Declaration public virtual Guid Id { get; } Property Value Type Description System.Guid Implements IAggregateRoot<TAuthenticationToken>.Id Version Declaration public virtual int Version { get; } Property Value Type Description System.Int32 Implements IAggregateRoot<TAuthenticationToken>.Version Methods GetUncommittedChanges() Declaration public virtual IEnumerable<IEvent<TAuthenticationToken>> GetUncommittedChanges() Returns Type Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> Implements IAggregateRoot<TAuthenticationToken>.GetUncommittedChanges() LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) Declaration public virtual void LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>> history Implements IAggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) MarkChangesAsCommitted() Declaration public virtual void MarkChangesAsCommitted() Implements IAggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Domain.AkkaAggregateRepository-1.html",
    "title": "Class AkkaAggregateRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaAggregateRepository<TAuthenticationToken> Inheritance System.Object AggregateRepository <TAuthenticationToken> AkkaAggregateRepository<TAuthenticationToken> Inherited Members AggregateRepository<TAuthenticationToken>.EventStore AggregateRepository<TAuthenticationToken>.Publisher AggregateRepository<TAuthenticationToken>.AggregateFactory AggregateRepository<TAuthenticationToken>.CorrelationIdHelper AggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) AggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) AggregateRepository<TAuthenticationToken>.LoadAggregate<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) AggregateRepository<TAuthenticationToken>.LoadAggregateHistory<TAggregateRoot>(TAggregateRoot, IList<IEvent<TAuthenticationToken>>, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Domain Assembly : Cqrs.Akka.dll Syntax public class AkkaAggregateRepository<TAuthenticationToken> : AggregateRepository<TAuthenticationToken>, IAkkaAggregateRepository<TAuthenticationToken>, IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken Constructors AkkaAggregateRepository(IAggregateFactory, IEventStore<TAuthenticationToken>, IEventPublisher<TAuthenticationToken>, ICorrelationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken>) Declaration public AkkaAggregateRepository(IAggregateFactory aggregateFactory, IEventStore<TAuthenticationToken> eventStore, IEventPublisher<TAuthenticationToken> publisher, ICorrelationIdHelper correlationIdHelper, IAkkaEventPublisherProxy<TAuthenticationToken> eventPublisher) Parameters Type Name Description IAggregateFactory aggregateFactory IEventStore <TAuthenticationToken> eventStore IEventPublisher <TAuthenticationToken> publisher cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAkkaEventPublisherProxy <TAuthenticationToken> eventPublisher Properties EventPublisher Declaration protected IAkkaEventPublisherProxy<TAuthenticationToken> EventPublisher { get; } Property Value Type Description IAkkaEventPublisherProxy <TAuthenticationToken> Methods CreateAggregate<TAggregateRoot>(Guid) Declaration protected override TAggregateRoot CreateAggregate<TAggregateRoot>(Guid id)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid id Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot Overrides Cqrs.Domain.AggregateRepository<TAuthenticationToken>.CreateAggregate<TAggregateRoot>(System.Guid) PublishEvent(IEvent<TAuthenticationToken>) Declaration protected override void PublishEvent(IEvent<TAuthenticationToken> event) Parameters Type Name Description IEvent <TAuthenticationToken> event Overrides Cqrs.Domain.AggregateRepository<TAuthenticationToken>.PublishEvent(Cqrs.Events.IEvent<TAuthenticationToken>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.IHandlerResolver.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Configuration.IHandlerResolver.html",
    "title": "Interface IHandlerResolver | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IHandlerResolver Resolves handlers for use with Akka.Net Namespace : Cqrs.Akka.Configuration Assembly : Cqrs.Akka.dll Syntax public interface IHandlerResolver Methods Resolve(Type, Object) Resolves instances of handerType . Declaration object Resolve(Type handerType, object rsn) Parameters Type Name Description System.Type handerType System.Object rsn Returns Type Description System.Object"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.html",
    "title": "Namespace Cqrs.Akka.Commands | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Akka.Commands Classes AkkaCommandBus<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that resolves handlers , executes the handler and then publishes the ICommand<TAuthenticationToken> on the public command bus. AkkaCommandBusProxy<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> to the Akka.Actor.IActorRef which acts as a single point of all handler resolutions. AkkaCommandBusProxy<TAuthenticationToken>.BusActor ConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor Interfaces IAkkaCommandPublisher<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the ICommand<TAuthenticationToken> on the public command bus. IAkkaCommandPublisherProxy<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the ICommand<TAuthenticationToken> on the public command bus. IConcurrentAkkaCommandPublisher<TAuthenticationToken> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor IConcurrentAkkaCommandPublisher<TAuthenticationToken, TTarget> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IConcurrentAkkaCommandPublisher-1.html",
    "title": "Interface IConcurrentAkkaCommandPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IConcurrentAkkaCommandPublisher<TAuthenticationToken> A IAkkaCommandPublisher<TAuthenticationToken> that ensure concurrency regardless of what it passes the command onto as it is a Akka.Actor.ReceiveActor Inherited Members IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public interface IConcurrentAkkaCommandPublisher<TAuthenticationToken> : IAkkaCommandPublisher<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IAkkaCommandPublisher-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.IAkkaCommandPublisher-1.html",
    "title": "Interface IAkkaCommandPublisher<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IAkkaCommandPublisher<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> back onto the Akka.Actor.IActorRef and then publishes the ICommand<TAuthenticationToken> on the public command bus. Inherited Members IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public interface IAkkaCommandPublisher<TAuthenticationToken> : IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBusProxy-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBusProxy-1.html",
    "title": "Class AkkaCommandBusProxy<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaCommandBusProxy<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that proxies ICommand<TAuthenticationToken> to the Akka.Actor.IActorRef which acts as a single point of all handler resolutions. Inheritance System.Object AkkaCommandBusProxy<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public class AkkaCommandBusProxy<TAuthenticationToken> : IAkkaCommandPublisherProxy<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors AkkaCommandBusProxy(IDependencyResolver, ICorrelationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken>) Declaration public AkkaCommandBusProxy(IDependencyResolver dependencyResolver, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper) Parameters Type Name Description IDependencyResolver dependencyResolver cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> CommandHandlerResolver Declaration protected IActorRef CommandHandlerResolver { get; } Property Value Type Description Akka.Actor.IActorRef CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper Methods Publish<TCommand>(TCommand) Declaration public virtual void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publish<TCommand>(IEnumerable<TCommand>) Declaration public virtual void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) Send<TCommand>(TCommand) Declaration public virtual void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Send<TCommand>(IEnumerable<TCommand>) Declaration public virtual void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBus-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Akka.Commands.AkkaCommandBus-1.html",
    "title": "Class AkkaCommandBus<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class AkkaCommandBus<TAuthenticationToken> A ICommandPublisher<TAuthenticationToken> that resolves handlers , executes the handler and then publishes the ICommand<TAuthenticationToken> on the public command bus. Inheritance System.Object AkkaCommandBus<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Akka.Commands Assembly : Cqrs.Akka.dll Syntax public class AkkaCommandBus<TAuthenticationToken> : IAkkaCommandPublisher<TAuthenticationToken>, IPublishAndWaitCommandPublisher<TAuthenticationToken>, ICommandPublisher<TAuthenticationToken>, ICommandHandlerRegistrar, IHandlerRegistrar Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Constructors AkkaCommandBus(IBusHelper, IAuthenticationTokenHelper<TAuthenticationToken>, ICorrelationIdHelper, IDependencyResolver, ILogger, ICommandPublisher<TAuthenticationToken>, ICommandReceiver<TAuthenticationToken>) Declaration public AkkaCommandBus(IBusHelper busHelper, IAuthenticationTokenHelper<TAuthenticationToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, IDependencyResolver dependencyResolver, ILogger logger, ICommandPublisher<TAuthenticationToken> commandPublisher, ICommandReceiver<TAuthenticationToken> commandReceiver) Parameters Type Name Description IBusHelper busHelper IAuthenticationTokenHelper <TAuthenticationToken> authenticationTokenHelper cdmdotnet.Logging.ICorrelationIdHelper correlationIdHelper IDependencyResolver dependencyResolver cdmdotnet.Logging.ILogger logger ICommandPublisher <TAuthenticationToken> commandPublisher ICommandReceiver <TAuthenticationToken> commandReceiver Properties AuthenticationTokenHelper Declaration protected IAuthenticationTokenHelper<TAuthenticationToken> AuthenticationTokenHelper { get; } Property Value Type Description IAuthenticationTokenHelper <TAuthenticationToken> BusHelper Declaration protected IBusHelper BusHelper { get; } Property Value Type Description IBusHelper CommandPublisher Declaration protected ICommandPublisher<TAuthenticationToken> CommandPublisher { get; } Property Value Type Description ICommandPublisher <TAuthenticationToken> CommandReceiver Declaration protected ICommandReceiver<TAuthenticationToken> CommandReceiver { get; } Property Value Type Description ICommandReceiver <TAuthenticationToken> CorrelationIdHelper Declaration protected ICorrelationIdHelper CorrelationIdHelper { get; } Property Value Type Description cdmdotnet.Logging.ICorrelationIdHelper DependencyResolver Declaration protected IDependencyResolver DependencyResolver { get; } Property Value Type Description IDependencyResolver EventWaits Declaration protected IDictionary<Guid, IList<IEvent<TAuthenticationToken>>> EventWaits { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Guid , System.Collections.Generic.IList < IEvent <TAuthenticationToken>>> Logger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger Routes Declaration protected static RouteManager Routes { get; } Property Value Type Description RouteManager Methods PrepareAndValidateCommand<TCommand>(TCommand, out RouteHandlerDelegate) Declaration protected virtual bool PrepareAndValidateCommand<TCommand>(TCommand command, out RouteHandlerDelegate commandHandler)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command RouteHandlerDelegate commandHandler Returns Type Description System.Boolean Type Parameters Name Description TCommand PrepareCommand<TCommand>(TCommand) Declaration protected virtual void PrepareCommand<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Publish<TCommand>(TCommand) Declaration public virtual void Publish<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(TCommand) Publish<TCommand>(IEnumerable<TCommand>) Declaration public virtual void Publish<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand Implements ICommandPublisher<TAuthenticationToken>.Publish<TCommand>(IEnumerable<TCommand>) PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits until the specified condition is satisfied an event of TEvent Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent> condition, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Func < System.Collections.Generic.IEnumerable < IEvent <TAuthenticationToken>>, TEvent> condition A delegate to be executed over and over until it returns the TEvent that is desired, return null to keep trying. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Func<IEnumerable<IEvent<TAuthenticationToken>>, TEvent>, TimeSpan, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, int millisecondsTimeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, Int32, IEventReceiver<TAuthenticationToken>) PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) Publishes the provided command and waits for an event of TEvent or exits if the specified timeout is expired. Declaration public virtual TEvent PublishAndWait<TCommand, TEvent>(TCommand command, TimeSpan timeout, IEventReceiver<TAuthenticationToken> eventReceiver = null)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command The TCommand to publish. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. IEventReceiver <TAuthenticationToken> eventReceiver If provided, is the IEventReceiver<TAuthenticationToken> that the event is expected to be returned on. Returns Type Description TEvent Type Parameters Name Description TCommand TEvent Implements IPublishAndWaitCommandPublisher<TAuthenticationToken>.PublishAndWait<TCommand, TEvent>(TCommand, TimeSpan, IEventReceiver<TAuthenticationToken>) RegisterHandler<TMessage>(Action<TMessage>, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Boolean) RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Register an event or command handler that will listen and respond to events or commands. Declaration public void RegisterHandler<TMessage>(Action<TMessage> handler, Type targetedType, bool holdMessageLock = true)where TMessage : IMessage Parameters Type Name Description System.Action <TMessage> handler System.Type targetedType System.Boolean holdMessageLock Type Parameters Name Description TMessage Implements IHandlerRegistrar.RegisterHandler<TMessage>(Action<TMessage>, Type, Boolean) Send<TCommand>(TCommand) Declaration public virtual void Send<TCommand>(TCommand command)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description TCommand command Type Parameters Name Description TCommand Send<TCommand>(IEnumerable<TCommand>) Declaration public virtual void Send<TCommand>(IEnumerable<TCommand> commands)where TCommand : ICommand<TAuthenticationToken> Parameters Type Name Description System.Collections.Generic.IEnumerable <TCommand> commands Type Parameters Name Description TCommand"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_getting_earlier_than_expected_events_from_event_store.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_getting_earlier_than_expected_events_from_event_store.html",
    "title": "Class When_getting_earlier_than_expected_events_from_event_store | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_earlier_than_expected_events_from_event_store Inheritance System.Object When_getting_earlier_than_expected_events_from_event_store Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_earlier_than_expected_events_from_event_store Methods Setup() Declaration [SetUp] public void Setup() Should_get_events_from_start() Declaration [Test] public void Should_get_events_from_start()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_getting_aggregate.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Cache.When_getting_aggregate.html",
    "title": "Class When_getting_aggregate | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_getting_aggregate Inheritance System.Object When_getting_aggregate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Cache Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_getting_aggregate Methods Setup() Declaration [SetUp] public void Setup() Should_get_aggregate() Declaration [Test] public void Should_get_aggregate() Should_get_same_aggregate_from_different_cache_repository() Declaration [Test] public void Should_get_same_aggregate_from_different_cache_repository() Should_get_same_aggregate_on_second_try() Declaration [Test] public void Should_get_same_aggregate_on_second_try() Should_update_if_version_changed_in_event_store() Declaration [Test] public void Should_update_if_version_changed_in_event_store()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.html",
    "title": "Namespace Cqrs.Tests.Bus | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Tests.Bus Classes When_publishing_events When_registering_handlers When_sending_command"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_sending_command.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_sending_command.html",
    "title": "Class When_sending_command | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_sending_command Inheritance System.Object When_sending_command Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Bus Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_sending_command Methods Has_no_handles_should_not_throw_due_to_settings() Declaration [Test] public void Has_no_handles_should_not_throw_due_to_settings() Setup() Declaration [SetUp] public void Setup() Should_run_handler() Declaration [Test] public void Should_run_handler() Should_throw_if_more_handlers() Declaration [Test] public void Should_throw_if_more_handlers() Should_throw_if_no_handlers() Declaration [Test] public void Should_throw_if_no_handlers()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_registering_handlers.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_registering_handlers.html",
    "title": "Class When_registering_handlers | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_registering_handlers Inheritance System.Object When_registering_handlers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Bus Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_registering_handlers Methods Setup() Declaration [SetUp] public void Setup() Should_be_able_to_run_all_handlers() Declaration [Test] public void Should_be_able_to_run_all_handlers() Should_register_all_handlers() Declaration [Test] public void Should_register_all_handlers()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_publishing_events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Tests.Bus.When_publishing_events.html",
    "title": "Class When_publishing_events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class When_publishing_events Inheritance System.Object When_publishing_events Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Tests.Bus Assembly : Cqrs.Tests.dll Syntax [TestFixture] public class When_publishing_events Methods Setup() Declaration [SetUp] public void Setup() Should_publish_to_all_handlers() Declaration [Test] public void Should_publish_to_all_handlers() Should_work_with_no_handlers() Declaration [Test] public void Should_work_with_no_handlers()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.html",
    "title": "Namespace Cqrs.Sql.DataStores | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Sql.DataStores Classes Converters Converts and clones object data. ExpressionTreeConverter<TA, TB> Converts System.Linq.Expressions.Expression trees. SimpleExpressionReplacer Replaces or rewriter expression trees. SqlDataStore<TEntity, TDbEntity> A IDataStore<TData> that uses EntityFramework to support complex data structures with SQL Server.s SqlDataStoreExtensions A collection of extension methods for IDataStore<TData> Interfaces IExpressionTreeConverter Converts System.Linq.Expressions.Expression trees."
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SqlDataStoreExtensions.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SqlDataStoreExtensions.html",
    "title": "Class SqlDataStoreExtensions | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SqlDataStoreExtensions A collection of extension methods for IDataStore<TData> Inheritance System.Object SqlDataStoreExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public static class SqlDataStoreExtensions Methods Single<TEntity, TDbEntity>(IEnumerable<TEntity>) Use this one... Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. Declaration public static TEntity Single<TEntity, TDbEntity>(this IEnumerable<TEntity> dataStore)where TEntity : new ()where TDbEntity : class, new () Parameters Type Name Description System.Collections.Generic.IEnumerable <TEntity> dataStore Returns Type Description TEntity Type Parameters Name Description TEntity TDbEntity Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) Use this one... Filters a sequence of values based on a predicate. Declaration public static IQueryable<TEntity> Where<TEntity, TDbEntity>(this IDataStore<TEntity> dataStore, Expression<Func<TEntity, bool>> predicate)where TDbEntity : class, new () Parameters Type Name Description IDataStore <TEntity> dataStore System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> predicate Returns Type Description System.Linq.IQueryable <TEntity> Type Parameters Name Description TEntity TDbEntity"
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SqlDataStore-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SqlDataStore-2.html",
    "title": "Class SqlDataStore<TEntity, TDbEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SqlDataStore<TEntity, TDbEntity> A IDataStore<TData> that uses EntityFramework to support complex data structures with SQL Server.s Inheritance System.Object SqlDataStore<TEntity, TDbEntity> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public class SqlDataStore<TEntity, TDbEntity> : IDataStore<TEntity>, IOrderedQueryable<TEntity>, IQueryable<TEntity>, IEnumerable<TEntity>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TDbEntity : class, new () Type Parameters Name Description TEntity TDbEntity Constructors SqlDataStore(IExpressionTreeConverter, DataContext) Instantiates a new instance of the SqlDataStore<TEntity, TDbEntity> class Declaration public SqlDataStore(IExpressionTreeConverter expressionConverter, DataContext dataContext) Parameters Type Name Description IExpressionTreeConverter expressionConverter System.Data.Linq.DataContext dataContext Properties ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Implements System.Linq.IQueryable.Expression Provider Gets the query provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Implements System.Linq.IQueryable.Provider Methods Add(TEntity) Add the provided data to the data store and persist the change. Declaration public void Add(TEntity data) Parameters Type Name Description TEntity data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TEntity>) Add the provided data to the data store and persist the change. Declaration public void Add(IEnumerable<TEntity> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TEntity> data Implements IDataStore<TData>.Add(IEnumerable<TData>) Destroy(TEntity) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public void Destroy(TEntity data) Parameters Type Name Description TEntity data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TDbEntity> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TDbEntity> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Remove(TEntity) Will NOT mark the data as logically (or soft) deleted. This will destroy and delete the row in the SQL Server. Declaration public void Remove(TEntity data) Parameters Type Name Description TEntity data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public void RemoveAll() Implements IDataStore<TData>.RemoveAll() Update(TEntity) Update the provided data in the data store and persist the change. Declaration public void Update(TEntity data) Parameters Type Name Description TEntity data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable<TEntity>.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TEntity> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SimpleExpressionReplacer.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.SimpleExpressionReplacer.html",
    "title": "Class SimpleExpressionReplacer | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SimpleExpressionReplacer Replaces or rewriter expression trees. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor SimpleExpressionReplacer Inherited Members System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>) System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String) System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression) System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression) System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression) System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression) System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression) System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression) System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression) System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression) System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression) System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>) System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression) System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression) System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression) System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression) System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression) System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression) System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase) System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression) System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock) System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression) System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit) System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment) System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public class SimpleExpressionReplacer : ExpressionVisitor Constructors SimpleExpressionReplacer(Expression, Expression) Instantiates a new instance of the SimpleExpressionReplacer class Declaration public SimpleExpressionReplacer(Expression toFind, Expression replacement) Parameters Type Name Description System.Linq.Expressions.Expression toFind System.Linq.Expressions.Expression replacement Methods Visit(Expression) If the System.Linq.Expressions.Expression to find (in the constructor) returns true, then the replacement System.Linq.Expressions.Expression is returned. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.IExpressionTreeConverter.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.IExpressionTreeConverter.html",
    "title": "Interface IExpressionTreeConverter | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IExpressionTreeConverter Converts System.Linq.Expressions.Expression trees. Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public interface IExpressionTreeConverter Methods GetMappings() A collection of System.Linq.Expressions.LambdaExpression grouped by System.Reflection.MemberInfo . Declaration Dictionary<MemberInfo, LambdaExpression> GetMappings() Returns Type Description System.Collections.Generic.Dictionary < System.Reflection.MemberInfo , System.Linq.Expressions.LambdaExpression > Visit(ReadOnlyCollection<Expression>) Dispatches the list of expressions to one of the more specialized visit methods in this class. Declaration ReadOnlyCollection<Expression> Visit(ReadOnlyCollection<Expression> nodes) Parameters Type Name Description System.Collections.ObjectModel.ReadOnlyCollection < System.Linq.Expressions.Expression > nodes The expressions to visit. Returns Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.Linq.Expressions.Expression > The modified System.Linq.Expressions.Expression list, if any one of the elements were modified; otherwise, returns the System.Linq.Expressions.Expression expression list. Visit(Expression) Dispatches the System.Linq.Expressions.Expression to one of the more specialized visit methods in this class. Declaration Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The System.Linq.Expressions.Expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified System.Linq.Expressions.Expression , if it or any subexpression was modified; otherwise, returns the original System.Linq.Expressions.Expression ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.ExpressionTreeConverter-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.ExpressionTreeConverter-2.html",
    "title": "Class ExpressionTreeConverter<TA, TB> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ExpressionTreeConverter<TA, TB> Converts System.Linq.Expressions.Expression trees. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor ExpressionTreeConverter<TA, TB> Inherited Members System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>) System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String) System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression) System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression) System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression) System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression) System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression) System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression) System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression) System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression) System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression) System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression) System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression) System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression) System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression) System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression) System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase) System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression) System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock) System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression) System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit) System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment) System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public abstract class ExpressionTreeConverter<TA, TB> : ExpressionVisitor, IExpressionTreeConverter Type Parameters Name Description TA TB Constructors ExpressionTreeConverter() Instantiates a new instance of the ExpressionTreeConverter<TA, TB> class Declaration protected ExpressionTreeConverter() ExpressionTreeConverter(Dictionary<MemberInfo, LambdaExpression>) Instantiates a new instance of the ExpressionTreeConverter<TA, TB> class Declaration protected ExpressionTreeConverter(Dictionary<MemberInfo, LambdaExpression> mappings) Parameters Type Name Description System.Collections.Generic.Dictionary < System.Reflection.MemberInfo , System.Linq.Expressions.LambdaExpression > mappings Methods GetMappings() A collection of System.Linq.Expressions.LambdaExpression grouped by System.Reflection.MemberInfo . Declaration public abstract Dictionary<MemberInfo, LambdaExpression> GetMappings() Returns Type Description System.Collections.Generic.Dictionary < System.Reflection.MemberInfo , System.Linq.Expressions.LambdaExpression > Implements IExpressionTreeConverter.GetMappings() VisitLambda<T>(Expression<T>) Visits the children of the node . Declaration protected override Expression VisitLambda<T>(Expression<T> node) Parameters Type Name Description System.Linq.Expressions.Expression <T> node Returns Type Description System.Linq.Expressions.Expression Type Parameters Name Description T Overrides System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>) VisitMember(MemberExpression) If the System.Linq.Expressions.MemberExpression.Member of the provided node matches a mapping in GetMappings() , then that mapping is executed. Declaration protected override Expression VisitMember(MemberExpression node) Parameters Type Name Description System.Linq.Expressions.MemberExpression node Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) VisitParameter(ParameterExpression) If the node if of System.Type TA A System.Linq.Expressions.ParameterExpression of System.Type TB will to created with the same name. Declaration protected override Expression VisitParameter(ParameterExpression node) Parameters Type Name Description System.Linq.Expressions.ParameterExpression node Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.Converters.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Sql.DataStores.Converters.html",
    "title": "Class Converters | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class Converters Converts and clones object data. Inheritance System.Object Converters Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Sql.DataStores Assembly : Cqrs.Sql.dll Syntax public static class Converters Methods ConvertTo<T>(Object) Convert/Clone data from the provided value into a new instance of type T . Declaration public static T ConvertTo<T>(object value)where T : new () Parameters Type Name Description System.Object value The System.Object to convert/clone data from Returns Type Description T Type Parameters Name Description T The System.Type to convert to."
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.html",
    "title": "Namespace Cqrs.Snapshots | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Snapshots Classes DefaultSnapshotStrategy<TAuthenticationToken> An ISnapshotStrategy<TAuthenticationToken> that takes a snapshot every 15 versions. Snapshot Holds state information about an IAggregateRoot<TAuthenticationToken> for fast rehydration. SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> An IAggregateRoot<TAuthenticationToken> that supports Snapshot for optimised rehydration. SnapshotRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> utilising Snapshot for optimised rehydration. Interfaces ISnapshotStore Stores the most recent Snapshot for replay and IAggregateRoot<TAuthenticationToken> rehydration on a SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> . ISnapshotStrategy<TAuthenticationToken> Provides information about the ability to make and get Snapshot ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.SnapshotRepository-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.SnapshotRepository-1.html",
    "title": "Class SnapshotRepository<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SnapshotRepository<TAuthenticationToken> Provides basic repository methods for operations with instances of IAggregateRoot<TAuthenticationToken> utilising Snapshot for optimised rehydration. Inheritance System.Object SnapshotRepository<TAuthenticationToken> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax public class SnapshotRepository<TAuthenticationToken> : IAggregateRepository<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The System.Type of authentication token. Constructors SnapshotRepository(ISnapshotStore, ISnapshotStrategy<TAuthenticationToken>, IAggregateRepository<TAuthenticationToken>, IEventStore<TAuthenticationToken>, IAggregateFactory) Instantiates a new instance of SnapshotRepository<TAuthenticationToken> . Declaration public SnapshotRepository(ISnapshotStore snapshotStore, ISnapshotStrategy<TAuthenticationToken> snapshotStrategy, IAggregateRepository<TAuthenticationToken> repository, IEventStore<TAuthenticationToken> eventStore, IAggregateFactory aggregateFactory) Parameters Type Name Description ISnapshotStore snapshotStore ISnapshotStrategy <TAuthenticationToken> snapshotStrategy IAggregateRepository <TAuthenticationToken> repository IEventStore <TAuthenticationToken> eventStore IAggregateFactory aggregateFactory Properties AggregateFactory Gets or sets the IAggregateFactory . Declaration protected IAggregateFactory AggregateFactory { get; } Property Value Type Description IAggregateFactory EventStore Gets or sets the IEventStore<TAuthenticationToken> . Declaration protected IEventStore<TAuthenticationToken> EventStore { get; } Property Value Type Description IEventStore <TAuthenticationToken> Repository Gets or sets the IAggregateRepository<TAuthenticationToken> . Declaration protected IAggregateRepository<TAuthenticationToken> Repository { get; } Property Value Type Description IAggregateRepository <TAuthenticationToken> SnapshotStore Gets or sets the ISnapshotStore . Declaration protected ISnapshotStore SnapshotStore { get; } Property Value Type Description ISnapshotStore SnapshotStrategy Gets or sets the ISnapshotStrategy<TAuthenticationToken> . Declaration protected ISnapshotStrategy<TAuthenticationToken> SnapshotStrategy { get; } Property Value Type Description ISnapshotStrategy <TAuthenticationToken> Methods Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Retrieves an IAggregateRoot<TAuthenticationToken> of type TAggregateRoot , First using TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid, TAggregateRoot) , otherwise via Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) on Repository Then does rehydration. Declaration public TAggregateRoot Get<TAggregateRoot>(Guid aggregateId, IList<IEvent<TAuthenticationToken>> events = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description System.Guid aggregateId The identifier of the IAggregateRoot<TAuthenticationToken> to retrieve. System.Collections.Generic.IList < IEvent <TAuthenticationToken>> events A collection of IEvent<TAuthenticationToken> to replay on the retrieved IAggregateRoot<TAuthenticationToken> . If null, the IEventStore<TAuthenticationToken> will be used to retrieve a list of IEvent<TAuthenticationToken> for you. Returns Type Description TAggregateRoot Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Get<TAggregateRoot>(Guid, IList<IEvent<TAuthenticationToken>>) Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) Calls TryMakeSnapshot(IAggregateRoot<TAuthenticationToken>) then Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) on Repository . Declaration public void Save<TAggregateRoot>(TAggregateRoot aggregate, int ? expectedVersion = null)where TAggregateRoot : IAggregateRoot<TAuthenticationToken> Parameters Type Name Description TAggregateRoot aggregate The IAggregateRoot<TAuthenticationToken> to save and persist. System.Nullable < System.Int32 > expectedVersion The version number the IAggregateRoot<TAuthenticationToken> is expected to be at. Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Implements IAggregateRepository<TAuthenticationToken>.Save<TAggregateRoot>(TAggregateRoot, Nullable<Int32>) TryMakeSnapshot(IAggregateRoot<TAuthenticationToken>) Calls ShouldMakeSnapShot(IAggregateRoot<TAuthenticationToken>) on SnapshotStrategy If the IAggregateRoot<TAuthenticationToken> is snapshot-able GetSnapshot() is called The Version is calculated, finally Save(Snapshot) is called on SnapshotStore . Declaration protected virtual void TryMakeSnapshot(IAggregateRoot<TAuthenticationToken> aggregate) Parameters Type Name Description IAggregateRoot <TAuthenticationToken> aggregate The IAggregateRoot<TAuthenticationToken> to try and snapshot. TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid, TAggregateRoot) Calls IsSnapshotable(Type) on SnapshotStrategy If the TAggregateRoot is snapshot-able Get<TAggregateRoot>(Guid) is called on SnapshotStore . The Restore method is then called on Declaration protected virtual int TryRestoreAggregateFromSnapshot<TAggregateRoot>(Guid id, TAggregateRoot aggregate) Parameters Type Name Description System.Guid id The identifier of the IAggregateRoot<TAuthenticationToken> to restore, since the aggregate may be completely uninitialised. TAggregateRoot aggregate The TAggregateRoot Returns Type Description System.Int32 -1 if no restoration was made, otherwise version number the TAggregateRoot was rehydrated to. Type Parameters Name Description TAggregateRoot The System.Type of the IAggregateRoot<TAuthenticationToken> . Remarks There may be more events after the snapshot that still need to rehydrated into the TAggregateRoot after restoration."
  },
  "wiki/docs/api/2.2/html/Cqrs.Snapshots.SnapshotAggregateRoot-2.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Snapshots.SnapshotAggregateRoot-2.html",
    "title": "Class SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> An IAggregateRoot<TAuthenticationToken> that supports Snapshot for optimised rehydration. Inheritance System.Object AggregateRoot <TAuthenticationToken> SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> TestSnapshotAggregate Inherited Members AggregateRoot<TAuthenticationToken>.Id AggregateRoot<TAuthenticationToken>.Version AggregateRoot<TAuthenticationToken>.GetUncommittedChanges() AggregateRoot<TAuthenticationToken>.MarkChangesAsCommitted() AggregateRoot<TAuthenticationToken>.LoadFromHistory(IEnumerable<IEvent<TAuthenticationToken>>) AggregateRoot<TAuthenticationToken>.ApplyChange(IEvent<TAuthenticationToken>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Snapshots Assembly : Cqrs.dll Syntax public abstract class SnapshotAggregateRoot<TAuthenticationToken, TSnapshot> : AggregateRoot<TAuthenticationToken>, IAggregateRoot<TAuthenticationToken> where TSnapshot : Snapshot Type Parameters Name Description TAuthenticationToken TSnapshot Methods CreateSnapshot() Create a TSnapshot of the current state of this instance. Declaration protected abstract TSnapshot CreateSnapshot() Returns Type Description TSnapshot GetSnapshot() Calls CreateSnapshot() and applies the Id of this instance to the TSnapshot result. Declaration public virtual TSnapshot GetSnapshot() Returns Type Description TSnapshot Restore(TSnapshot) Sets the Id of this instance from Id the provided snapshot , sets the Version of this instance from Version the provided snapshot , then calls RestoreFromSnapshot(TSnapshot) Declaration public virtual void Restore(TSnapshot snapshot) Parameters Type Name Description TSnapshot snapshot The TSnapshot to rehydrate this instance from. RestoreFromSnapshot(TSnapshot) Rehydrate this instance from the provided snapshot . Declaration protected abstract void RestoreFromSnapshot(TSnapshot snapshot) Parameters Type Name Description TSnapshot snapshot The TSnapshot to rehydrate this instance from."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.TestMongoDbDataStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.TestMongoDbDataStoreModule-1.html",
    "title": "Class TestMongoDbDataStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoDbDataStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up TestMongoDbDataStoreConnectionStringFactory as the IMongoDbEventStoreConnectionStringFactory and IMongoDbDataStoreConnectionStringFactory . Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule MongoDbEventStoreModule <TAuthenticationToken> TestMongoDbDataStoreModule<TAuthenticationToken> Inherited Members MongoDbEventStoreModule<TAuthenticationToken>.Load() MongoDbEventStoreModule<TAuthenticationToken>.RegisterEventSerialisationConfiguration() MongoDbEventStoreModule<TAuthenticationToken>.RegisterEventStore() Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.MongoDB.Configuration Assembly : Cqrs.Ninject.MongoDB.dll Syntax public class TestMongoDbDataStoreModule<TAuthenticationToken> : MongoDbEventStoreModule<TAuthenticationToken>, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods RegisterFactories() Register the all factories Declaration public override void RegisterFactories() Overrides Cqrs.Ninject.MongoDB.Configuration.MongoDbEventStoreModule<TAuthenticationToken>.RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.MongoDbEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.MongoDbEventStoreModule-1.html",
    "title": "Class MongoDbEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbEventStoreModule<TAuthenticationToken> A Ninject.Modules.INinjectModule that wires up MongoDbEventStore<TAuthenticationToken> as the IEventStore<TAuthenticationToken> . Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule MongoDbEventStoreModule<TAuthenticationToken> TestMongoDbDataStoreModule<TAuthenticationToken> Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.MongoDB.Configuration Assembly : Cqrs.Ninject.MongoDB.dll Syntax public class MongoDbEventStoreModule<TAuthenticationToken> : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterEventSerialisationConfiguration() Register the all event serialisation configurations Declaration public virtual void RegisterEventSerialisationConfiguration() RegisterEventStore() Register the IEventStore<TAuthenticationToken> Declaration public virtual void RegisterEventStore() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.MongoDbDataStoreModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.MongoDB.Configuration.MongoDbDataStoreModule.html",
    "title": "Class MongoDbDataStoreModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDbDataStoreModule A Ninject.Modules.INinjectModule that wires up MongoDbDataStoreConnectionStringFactory as the IMongoDbDataStoreConnectionStringFactory . Inheritance System.Object Ninject.Infrastructure.Disposal.DisposableObject Ninject.Syntax.BindingRoot Ninject.Modules.NinjectModule MongoDbDataStoreModule Inherited Members Ninject.Modules.NinjectModule.OnLoad(Ninject.IKernel) Ninject.Modules.NinjectModule.OnUnload(Ninject.IKernel) Ninject.Modules.NinjectModule.OnVerifyRequiredModules() Ninject.Modules.NinjectModule.Unload() Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded() Ninject.Modules.NinjectModule.Unbind(System.Type) Ninject.Modules.NinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding) Ninject.Modules.NinjectModule.Kernel Ninject.Modules.NinjectModule.Name Ninject.Modules.NinjectModule.Bindings Ninject.Modules.NinjectModule.KernelInstance Ninject.Syntax.BindingRoot.Bind<T>() Ninject.Syntax.BindingRoot.Bind<T1, T2>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Bind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Bind(System.Type[]) Ninject.Syntax.BindingRoot.Unbind<T>() Ninject.Syntax.BindingRoot.Rebind<T1>() Ninject.Syntax.BindingRoot.Rebind<T1, T2>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3>() Ninject.Syntax.BindingRoot.Rebind<T1, T2, T3, T4>() Ninject.Syntax.BindingRoot.Rebind(System.Type[]) Ninject.Infrastructure.Disposal.DisposableObject.Dispose() Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean) Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Ninject.MongoDB.Configuration Assembly : Cqrs.Ninject.MongoDB.dll Syntax public class MongoDbDataStoreModule : NinjectModule, IDisposableObject, IDisposable, IBindingRoot, IFluentSyntax, INinjectModule, IHaveKernel Methods Load() Loads the module into the kernel. Declaration public override void Load() Overrides Ninject.Modules.NinjectModule.Load() RegisterCqrsRequirements() Register any CQRS requirements Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.html",
    "title": "Namespace Cqrs.Ninject.Mongo | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Mongo Classes TestMongoDataStoreConnectionStringFactory A IMongoDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.TestMongoDataStoreConnectionStringFactory.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.TestMongoDataStoreConnectionStringFactory.html",
    "title": "Class TestMongoDataStoreConnectionStringFactory | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoDataStoreConnectionStringFactory A IMongoDataStoreConnectionStringFactory that enables you to set a database name with DatabaseName . This means you can randomly generate your own database name per test. Inheritance System.Object TestMongoDataStoreConnectionStringFactory Namespace : Cqrs.Ninject.Mongo Assembly : Cqrs.Ninject.Mongo.dll Syntax public class TestMongoDataStoreConnectionStringFactory : object, IMongoDataStoreConnectionStringFactory Properties DatabaseName The name of the database currently being used. Declaration public static string DatabaseName { get; set; } Property Value Type Description System.String Methods GetMongoConnectionString() Gets the current connection string. Declaration public string GetMongoConnectionString() Returns Type Description System.String Implements IMongoDataStoreConnectionStringFactory.GetMongoConnectionString() GetMongoDatabaseName() Gets the value of DatabaseName . Declaration public string GetMongoDatabaseName() Returns Type Description System.String Implements IMongoDataStoreConnectionStringFactory.GetMongoDatabaseName()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.html",
    "title": "Namespace Cqrs.Ninject.Mongo.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Mongo.Configuration Classes MongoModule A that wires up MongoDataStoreConnectionStringFactory as the IMongoDataStoreConnectionStringFactory . TestMongoModule A that wires up TestMongoDataStoreConnectionStringFactory as the IMongoDataStoreConnectionStringFactory ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.TestMongoModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.TestMongoModule.html",
    "title": "Class TestMongoModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class TestMongoModule A that wires up TestMongoDataStoreConnectionStringFactory as the IMongoDataStoreConnectionStringFactory . Inheritance System.Object MongoModule TestMongoModule Inherited Members MongoModule.Load() MongoModule.RegisterServices() MongoModule.RegisterCqrsRequirements() Namespace : Cqrs.Ninject.Mongo.Configuration Assembly : Cqrs.Ninject.Mongo.dll Syntax public class TestMongoModule : MongoModule Methods RegisterFactories() Register the all factories Declaration public override void RegisterFactories() Overrides MongoModule.RegisterFactories()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.MongoModule.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Mongo.Configuration.MongoModule.html",
    "title": "Class MongoModule | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoModule A that wires up MongoDataStoreConnectionStringFactory as the IMongoDataStoreConnectionStringFactory . Inheritance System.Object MongoModule TestMongoModule Namespace : Cqrs.Ninject.Mongo.Configuration Assembly : Cqrs.Ninject.Mongo.dll Syntax public class MongoModule : NinjectModule Methods Load() Loads the module into the kernel. Declaration public override void Load() RegisterCqrsRequirements() Register any CQRS requirements Declaration public virtual void RegisterCqrsRequirements() RegisterFactories() Register the all factories Declaration public virtual void RegisterFactories() RegisterServices() Register the all services Declaration public virtual void RegisterServices()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.html",
    "title": "Namespace Cqrs.Ninject.InProcess.EventStore | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.InProcess.EventStore Classes InProcessEventStore<TAuthenticationToken> An IEventStore<TAuthenticationToken> that uses a local (non-static) . This does not manage memory in any way and will continue to grow. Mostly suitable for running tests or short lived processes."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.InProcessEventStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.InProcessEventStore-1.html",
    "title": "Class InProcessEventStore<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventStore<TAuthenticationToken> An IEventStore<TAuthenticationToken> that uses a local (non-static) . This does not manage memory in any way and will continue to grow. Mostly suitable for running tests or short lived processes. Inheritance System.Object InProcessEventStore <TAuthenticationToken> InProcessEventStore<TAuthenticationToken> Inherited Members InProcessEventStore<TAuthenticationToken>.InMemoryDb InProcessEventStore<TAuthenticationToken>.Save(Type, IEvent<TAuthenticationToken>) InProcessEventStore<TAuthenticationToken>.Get<T>(Guid, Boolean, Int32) InProcessEventStore<TAuthenticationToken>.Get(Type, Guid, Boolean, Int32) InProcessEventStore<TAuthenticationToken>.Get(Guid) InProcessEventStore<TAuthenticationToken>.Save<T>(IEvent<TAuthenticationToken>) Namespace : Cqrs.Ninject.InProcess.EventStore Assembly : Cqrs.Ninject.InProcess.EventStore.dll Syntax public class InProcessEventStore<TAuthenticationToken> : InProcessEventStore<TAuthenticationToken>, IEventStore<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.Configuration.html",
    "title": "Namespace Cqrs.Ninject.InProcess.EventStore.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.InProcess.EventStore.Configuration Classes InProcessEventStoreModule<TAuthenticationToken> A that configures the InProcessEventStore<TAuthenticationToken> as a IEventStore<TAuthenticationToken> ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.Configuration.InProcessEventStoreModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventStore.Configuration.InProcessEventStoreModule-1.html",
    "title": "Class InProcessEventStoreModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventStoreModule<TAuthenticationToken> A that configures the InProcessEventStore<TAuthenticationToken> as a IEventStore<TAuthenticationToken> . Inheritance System.Object ResolvableModule InProcessEventStoreModule <TAuthenticationToken> InProcessEventStoreModule<TAuthenticationToken> Inherited Members InProcessEventStoreModule<TAuthenticationToken>.Load() InProcessEventStoreModule<TAuthenticationToken>.RegisterFactories() InProcessEventStoreModule<TAuthenticationToken>.RegisterServices() InProcessEventStoreModule<TAuthenticationToken>.RegisterEventStore() ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.InProcess.EventStore.Configuration Assembly : Cqrs.Ninject.InProcess.EventStore.dll Syntax public class InProcessEventStoreModule<TAuthenticationToken> : InProcessEventStoreModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventBus.Configuration.html",
    "title": "Namespace Cqrs.Ninject.InProcess.EventBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.InProcess.EventBus.Configuration Classes InProcessEventBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a IEventPublisher<TAuthenticationToken> and IEventReceiver ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventBus.Configuration.InProcessEventBusModule-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.EventBus.Configuration.InProcessEventBusModule-1.html",
    "title": "Class InProcessEventBusModule<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class InProcessEventBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a IEventPublisher<TAuthenticationToken> and IEventReceiver . Inheritance System.Object ResolvableModule InProcessEventBusModule <TAuthenticationToken> InProcessEventBusModule<TAuthenticationToken> Inherited Members InProcessEventBusModule<TAuthenticationToken>.Load() InProcessEventBusModule<TAuthenticationToken>.RegisterFactories() InProcessEventBusModule<TAuthenticationToken>.RegisterServices() InProcessEventBusModule<TAuthenticationToken>.RegisterCqrsRequirements() ResolvableModule.Resolve<T>() ResolvableModule.Resolve(Type) ResolvableModule.IsRegistered<T>() ResolvableModule.IsRegistered(Type) Namespace : Cqrs.Ninject.InProcess.EventBus.Configuration Assembly : Cqrs.Ninject.InProcess.EventBus.dll Syntax public class InProcessEventBusModule<TAuthenticationToken> : InProcessEventBusModule<TAuthenticationToken> Type Parameters Name Description TAuthenticationToken The of the authentication token."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.CommandBus.Configuration.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.InProcess.CommandBus.Configuration.html",
    "title": "Namespace Cqrs.Ninject.InProcess.CommandBus.Configuration | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.InProcess.CommandBus.Configuration Classes InProcessCommandBusModule<TAuthenticationToken> A that configures the InProcessBus<TAuthenticationToken> as a ICommandPublisher<TAuthenticationToken> and ICommandReceiver ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Ninject.Azure.Wcf.html",
    "title": "Namespace Cqrs.Ninject.Azure.Wcf | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Ninject.Azure.Wcf Classes CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper> Execute command and event handlers in a WCF Host using Ninject, defaulting to WebHostModule as the module to load. CqrsWebHost<TAuthenticationToken, TAuthenticationTokenHelper, TWebHostModule> Execute command and event handlers in a WCF Host using Ninject"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.MongoDataStore-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.MongoDataStore-1.html",
    "title": "Class MongoDataStore<TData> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoDataStore<TData> A IDataStore<TData> that uses MongoDB for storage. Inheritance System.Object MongoDataStore<TData> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.DataStores Assembly : Cqrs.Mongo.dll Syntax public class MongoDataStore<TData> : IDataStore<TData>, IOrderedQueryable<TData>, IQueryable<TData>, IEnumerable<TData>, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where TData : Entity Type Parameters Name Description TData The System.Type of IEntity the IDataStore<TData> will contain. Constructors MongoDataStore(ILogger, MongoCollection<TData>) Instantiates and Initialises a new instance of the MongoDataStore<TData> class. Declaration public MongoDataStore(ILogger logger, MongoCollection<TData> mongoCollection) Parameters Type Name Description cdmdotnet.Logging.ILogger logger MongoDB.Driver.MongoCollection <TData> mongoCollection Properties ElementType Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed. Declaration public Type ElementType { get; } Property Value Type Description System.Type A System.Type that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. Implements System.Linq.IQueryable.ElementType Expression Gets the expression tree that is associated with the instance of System.Linq.IQueryable . Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression The System.Linq.Expressions.Expression that is associated with this instance of System.Linq.IQueryable . Implements System.Linq.IQueryable.Expression Logger Gets or sets the cdmdotnet.Logging.ILogger Declaration protected ILogger Logger { get; } Property Value Type Description cdmdotnet.Logging.ILogger MongoCollection Gets or sets the MongoCollection Declaration protected MongoCollection<TData> MongoCollection { get; } Property Value Type Description MongoDB.Driver.MongoCollection <TData> Provider Gets the singleResultQuery provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description System.Linq.IQueryProvider The System.Linq.IQueryProvider that is associated with this data source. Implements System.Linq.IQueryable.Provider Methods Add(TData) Add the provided data to the data store and persist the change. Declaration public virtual void Add(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Add(TData) Add(IEnumerable<TData>) Add the provided data to the data store and persist the change. Declaration public virtual void Add(IEnumerable<TData> data) Parameters Type Name Description System.Collections.Generic.IEnumerable <TData> data Implements IDataStore<TData>.Add(IEnumerable<TData>) Destroy(TData) Remove the provided data (normally by Rsn ) from the data store and persist the change. Declaration public void Destroy(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Destroy(TData) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public virtual void Dispose() Implements System.IDisposable.Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TData> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(TData) Will mark the data as logically (or soft) by setting IsLogicallyDeleted to true Declaration public virtual void Remove(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Remove(TData) RemoveAll() Remove all contents (normally by use of a truncate operation) from the data store and persist the change. Declaration public virtual void RemoveAll() Implements IDataStore<TData>.RemoveAll() Repair() Executes the \"repairDatabase\" command on the current database. Declaration public void Repair() Update(TData) Update the provided data in the data store and persist the change. Declaration public virtual void Update(TData data) Parameters Type Name Description TData data Implements IDataStore<TData>.Update(TData) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SqlDataStoreExtensions.Where<TEntity, TDbEntity>(IDataStore<TEntity>, Expression<Func<TEntity, Boolean>>) TableStorageStoreExtensions.GetByKeyAndRow<TData>(IDataStore<TData>, Guid) TableStorageStoreExtensions.GetByKey<TData>(IDataStore<TData>) BlobStorageStoreExtensions.GetByName<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>, String) BlobStorageStoreExtensions.GetByFolder<TData>(IDataStore<TData>)"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.html",
    "title": "Namespace Cqrs.Mongo.DataStores.Indexes | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Mongo.DataStores.Indexes Classes ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> A MongoIndex<TEntity> for IsLogicallyDeleted and Rsn ByRsnMongoIndex<TEntity> A MongoIndex<TEntity> for Rsn MongoIndex<TEntity> An index for MongoDB."
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.MongoIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.MongoIndex-1.html",
    "title": "Class MongoIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class MongoIndex<TEntity> An index for MongoDB. Inheritance System.Object MongoIndex<TEntity> ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> ByRsnMongoIndex<TEntity> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.DataStores.Indexes Assembly : Cqrs.Mongo.dll Syntax public abstract class MongoIndex<TEntity> Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors MongoIndex() Instantiate a new instance of MongoIndex<TEntity> . Declaration protected MongoIndex() Properties IsAcending Indicates if the index is in ascending order or descending. Defaults to true meaning ascending order. Declaration public bool IsAcending { get; protected set; } Property Value Type Description System.Boolean IsUnique Indicates if the index enforces unique values. Defaults to false. Declaration public bool IsUnique { get; protected set; } Property Value Type Description System.Boolean Name The name of the index. Default to the class name removing any instances of \"Index\" and \"MongoIndex\" from the name. Declaration public string Name { get; protected set; } Property Value Type Description System.String Selectors The selectors that the index is comprised of. Declaration public IEnumerable<Expression<Func<TEntity, object>>> Selectors { get; protected set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Linq.Expressions.Expression < System.Func <TEntity, System.Object >>>"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.ByRsnMongoIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.ByRsnMongoIndex-1.html",
    "title": "Class ByRsnMongoIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByRsnMongoIndex<TEntity> A MongoIndex<TEntity> for Rsn Inheritance System.Object MongoIndex <TEntity> ByRsnMongoIndex<TEntity> Inherited Members MongoIndex<TEntity>.IsUnique MongoIndex<TEntity>.IsAcending MongoIndex<TEntity>.Name MongoIndex<TEntity>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.DataStores.Indexes Assembly : Cqrs.Mongo.dll Syntax public abstract class ByRsnMongoIndex<TEntity> : MongoIndex<TEntity> where TEntity : MongoEntity Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors ByRsnMongoIndex() Instantiate a new instance of ByRsnMongoIndex<TEntity> . Declaration protected ByRsnMongoIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.ByIsLogicallyDeletedAndRsnMongoIndex-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Mongo.DataStores.Indexes.ByIsLogicallyDeletedAndRsnMongoIndex-1.html",
    "title": "Class ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> A MongoIndex<TEntity> for IsLogicallyDeleted and Rsn Inheritance System.Object MongoIndex <TEntity> ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> Inherited Members MongoIndex<TEntity>.IsUnique MongoIndex<TEntity>.IsAcending MongoIndex<TEntity>.Name MongoIndex<TEntity>.Selectors System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Mongo.DataStores.Indexes Assembly : Cqrs.Mongo.dll Syntax public abstract class ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> : MongoIndex<TEntity> where TEntity : MongoEntity Type Parameters Name Description TEntity The System.Type of IEntity this index is for. Constructors ByIsLogicallyDeletedAndRsnMongoIndex() Instantiate a new instance of ByIsLogicallyDeletedAndRsnMongoIndex<TEntity> . Declaration protected ByIsLogicallyDeletedAndRsnMongoIndex()"
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.html",
    "title": "Namespace Cqrs.Messages | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Messages Interfaces IHandler Responds to or \"Handles\" things. IMessage A message such as an event or command. IMessageHandler<TMessage> Responds to or \"Handles\" a IMessage . IMessageWithAuthenticationToken<TAuthenticationToken> A IMessage with a authentication information. ITelemeteredMessage A message that can allows you to manually inform the telemetry system it's name. Enums FrameworkType Indicates a framework system or type."
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.ITelemeteredMessage.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.ITelemeteredMessage.html",
    "title": "Interface ITelemeteredMessage | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface ITelemeteredMessage A message that can allows you to manually inform the telemetry system it's name. Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax public interface ITelemeteredMessage Properties TelemetryName Gets or sets the Name of this message. Declaration string TelemetryName { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.IMessageWithAuthenticationToken-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.IMessageWithAuthenticationToken-1.html",
    "title": "Interface IMessageWithAuthenticationToken<TAuthenticationToken> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMessageWithAuthenticationToken<TAuthenticationToken> A IMessage with a authentication information. Inherited Members IMessage.CorrelationId IMessage.OriginatingFramework IMessage.Frameworks Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax public interface IMessageWithAuthenticationToken<TAuthenticationToken> : IMessage Type Parameters Name Description TAuthenticationToken The System.Type of the authentication token. Properties AuthenticationToken The TAuthenticationToken of the entity that triggered the event to be raised. Declaration TAuthenticationToken AuthenticationToken { get; set; } Property Value Type Description TAuthenticationToken"
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.IMessageHandler-1.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.IMessageHandler-1.html",
    "title": "Interface IMessageHandler<TMessage> | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMessageHandler<TMessage> Responds to or \"Handles\" a IMessage . Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax public interface IMessageHandler<in TMessage> : IHandler where TMessage : IMessage Type Parameters Name Description TMessage The System.Type of IMessage . Methods Handle(TMessage) Responds to the provided message . Declaration void Handle(TMessage message) Parameters Type Name Description TMessage message The TMessage to respond to or \"handle\""
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.IMessage.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.IMessage.html",
    "title": "Interface IMessage | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IMessage A message such as an event or command. Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax public interface IMessage Properties CorrelationId An identifier used to group together several IMessage . Any IMessage with the same CorrelationId were triggered by the same initiating request. Declaration Guid CorrelationId { get; set; } Property Value Type Description System.Guid Frameworks The frameworks this IMessage has been delivered to/sent via already. Declaration IEnumerable<string> Frameworks { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > OriginatingFramework The originating framework this message was sent from. Declaration string OriginatingFramework { get; set; } Property Value Type Description System.String"
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.IHandler.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.IHandler.html",
    "title": "Interface IHandler | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Interface IHandler Responds to or \"Handles\" things. Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax public interface IHandler"
  },
  "wiki/docs/api/2.2/html/Cqrs.Messages.FrameworkType.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Messages.FrameworkType.html",
    "title": "Enum FrameworkType | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Enum FrameworkType Indicates a framework system or type. Namespace : Cqrs.Messages Assembly : Cqrs.dll Syntax [Obsolete] public enum FrameworkType Fields Name Description Akka The CQRS Akka.NET framework BuiltIn The built-in framework External An external framework. Unknown An unknown framework."
  },
  "wiki/docs/api/2.2/html/Cqrs.Infrastructure.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Infrastructure.html",
    "title": "Namespace Cqrs.Infrastructure | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Infrastructure Classes DelegateAdjuster Adjusts System.Linq.Expressions.Expression using System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type) Structs SpinWait Provides support for spin-based waiting."
  },
  "wiki/docs/api/2.2/html/Cqrs.Infrastructure.SpinWait.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Infrastructure.SpinWait.html",
    "title": "Struct SpinWait | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Struct SpinWait Provides support for spin-based waiting. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Cqrs.Infrastructure Assembly : Cqrs.dll Syntax [HostProtection(SecurityAction.LinkDemand, ExternalThreading = true, Synchronization = true)] public struct SpinWait Fields DefaultSleepInMilliseconds A recommended sleep value of 50. Declaration public const short DefaultSleepInMilliseconds = 50 Field Value Type Description System.Int16 Properties NextSpinWillYield Gets whether the next call to System.Threading.SpinWait.SpinOnce will yield the processor, triggering a forced context switch. Declaration public bool NextSpinWillYield { get; } Property Value Type Description System.Boolean Whether the next call to System.Threading.SpinWait.SpinOnce will yield the processor, triggering a forced context switch. Methods Reset() Resets the spin counter. Declaration public void Reset() SpinOnce(Int16) Performs a single spin. Declaration public void SpinOnce(short sleepInMilliseconds = 0) Parameters Type Name Description System.Int16 sleepInMilliseconds The amount of milliseconds the thread will sleep for. SpinUntil(Func<Boolean>, Int16) Spins until the specified condition is satisfied. Declaration public static void SpinUntil(Func<bool> condition, short sleepInMilliseconds = 0) Parameters Type Name Description System.Func < System.Boolean > condition A delegate to be executed over and over until it returns true. System.Int16 sleepInMilliseconds The amount of milliseconds the thread will sleep for. Exceptions Type Condition System.ArgumentNullException The condition argument is null. SpinUntil(Func<Boolean>, Int32, Int16) Spins until the specified condition is satisfied or until the specified timeout is expired. Declaration public static bool SpinUntil(Func<bool> condition, int millisecondsTimeout, short sleepInMilliseconds = 0) Parameters Type Name Description System.Func < System.Boolean > condition A delegate to be executed over and over until it returns true. System.Int32 millisecondsTimeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. System.Int16 sleepInMilliseconds The amount of milliseconds the thread will sleep for. Returns Type Description System.Boolean True if the condition is satisfied within the timeout; otherwise, false Exceptions Type Condition System.ArgumentNullException The condition argument is null. System.ArgumentOutOfRangeException millisecondsTimeout is a negative number other than -1, which represents an infinite time-out. SpinUntil(Func<Boolean>, TimeSpan, Int16) Spins until the specified condition is satisfied or until the specified timeout is expired. Declaration public static bool SpinUntil(Func<bool> condition, TimeSpan timeout, short sleepInMilliseconds = 0) Parameters Type Name Description System.Func < System.Boolean > condition A delegate to be executed over and over until it returns true. System.TimeSpan timeout A System.TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. System.Int16 sleepInMilliseconds The amount of milliseconds the thread will sleep for. Returns Type Description System.Boolean True if the condition is satisfied within the timeout; otherwise, false Exceptions Type Condition System.ArgumentNullException The condition argument is null. System.ArgumentOutOfRangeException timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than System.Int32.MaxValue ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Infrastructure.DelegateAdjuster.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Infrastructure.DelegateAdjuster.html",
    "title": "Class DelegateAdjuster | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Class DelegateAdjuster Adjusts System.Linq.Expressions.Expression using System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type) Inheritance System.Object DelegateAdjuster Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Cqrs.Infrastructure Assembly : Cqrs.dll Syntax public static class DelegateAdjuster Methods CastArgument<TBase, TDerived>(Expression<Action<TDerived>>) If TDerived equals TBase then source is compiled using System.Linq.Expressions.Expression`1.Compile Otherwise source is converted to type TDerived from TBase Declaration public static Action<TBase> CastArgument<TBase, TDerived>(Expression<Action<TDerived>> source)where TDerived : TBase Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <TDerived>> source The delegate to adjust. Returns Type Description System.Action <TBase> Type Parameters Name Description TBase The source System.Type . TDerived The target System.Type ."
  },
  "wiki/docs/api/2.2/html/Cqrs.Events.html": {
    "href": "wiki/docs/api/2.2/html/Cqrs.Events.html",
    "title": "Namespace Cqrs.Events | CQRS.NET API Reference Documentation version 2.2",
    "keywords": "Namespace Cqrs.Events Classes DefaultEventBuilder<TAuthenticationToken> Builds EventData from various input formats serialising as JSON. DefaultJsonSerializerSettings Default settings for JSON serialisation and deserialisation. DtoAggregateEvent<TAuthenticationToken, TDto> A IEvent<TAuthenticationToken> for IDto objects DuplicateCreateCommandEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> that informs the system that an operation resulted in a duplicate. EventBuilder<TAuthenticationToken> Builds EventData from various input formats. EventData Captures all the data relevant to an IEvent<TAuthenticationToken> for an IEventStore<TAuthenticationToken> to persist. EventDataResolver<TAuthenticationToken> Resolves EventData , ServiceRequestWithData<TAuthenticationToken, TData> and ServiceResponseWithResultData<TResultData> parameter types when serialising with WCF. EventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. EventStore<TAuthenticationToken> Stores instances of IEvent<TAuthenticationToken> for replay, IAggregateRoot<TAuthenticationToken> and ISaga<TAuthenticationToken> rehydration. EventStoreRetentionLevelAttribute Provides a mechanism to configure different IEventStore<TAuthenticationToken> instances to save the event to. This is useful if you have events that should be in hot storage with quick loads and events that should be in cold storage and are unlikely to be reloaded and use slower cheaper storage. InProcessEventStore<TAuthenticationToken> An IEventStore<TAuthenticationToken> that uses a local (non-static) System.Collections.Generic.IDictionary<TKey, TValue> . This does not manage memory in any way and will continue to grow. Mostly suitable for running tests or short lived processes. MemoryCacheEventStore<TAuthenticationToken> A, EventStore<TAuthenticationToken> that uses a System.Runtime.Caching.MemoryCache implementation, flushing out data (I.E. it's not persisted) NotifyCallerEventAttribute An IEvent<TAuthenticationToken> that should be sent back to the person who was authenticated when sending the request via SignalR. NotifyEveryoneEventAttribute An IEvent<TAuthenticationToken> that should be sent to all connected people via SignalR. NotifyEveryoneExceptCallerEventAttribute An IEvent<TAuthenticationToken> that should be sent to all connected people except the person who was authenticated when sending the request via SignalR. PrivateEventAttribute An IEvent<TAuthenticationToken> that should be sent via the private IEventPublisher<TAuthenticationToken> . PublicEventAttribute An IEvent<TAuthenticationToken> that should be sent via the public IEventPublisher<TAuthenticationToken> . ReplicatedSqlEventStore<TAuthenticationToken> A simplified SqlServer based EventStore<TAuthenticationToken> that uses LinqToSql and follows a rigid schema that also replicates to multiple connections, but only reads from one connection. SagaEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> used specifically by a ISaga<TAuthenticationToken> SqlEventStore<TAuthenticationToken> A simplified SqlServer based EventStore<TAuthenticationToken> that uses LinqToSql and follows a rigid schema. Interfaces IEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> represents something that took place in the domain. They are always named with a past-participle verb, such as OrderConfirmed. It's not unusual, but not required, for an IEvent<TAuthenticationToken> to name an IAggregateRoot<TAuthenticationToken> or IEntity that it relates to; let the domain language be your guide. Since an IEvent<TAuthenticationToken> represents something in the past, it can be considered a statement of fact and used to take decisions in other parts of the system. IEventBuilder<TAuthenticationToken> Builds EventData from various input formats. IEventDeserialiser<TAuthenticationToken> Deserialises IEvent<TAuthenticationToken> from a serialised state. IEventHandler Responds to or \"Handles\" a IEvent<TAuthenticationToken> . IEventHandler<TAuthenticationToken, TEvent> Responds to or \"Handles\" a TEvent . IEventHandler<TAuthenticationToken, TTarget, TEvent> Responds to or \"Handles\" a TEvent . IEventPublisher<TAuthenticationToken> Publishes an IEvent<TAuthenticationToken> IEventReceiver Receives instances of a IEvent<TAuthenticationToken> from the event bus. IEventReceiver<TAuthenticationToken> Receives instances of a IEvent<TAuthenticationToken> from the event bus. IEventStore<TAuthenticationToken> Stores instances of IEvent<TAuthenticationToken> for replay, IAggregateRoot<TAuthenticationToken> and ISaga<TAuthenticationToken> rehydration. ISagaEvent<TAuthenticationToken> An IEvent<TAuthenticationToken> used specifically by a ISaga<TAuthenticationToken> Enums DtoAggregateEventType The type of CRUD operation."
  }
}